/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.backend.konan.llvm.swiftexport

import org.jetbrains.kotlin.name.FqName
import java.io.File

private const val KOTLIN_SWIFT_NAME_SEPARATOR = "`"

internal typealias SwiftExportTypeMappings = Map<FqName, String>

/**
 * Parse type mappings generated by Swift Export.
 *
 * @throws IllegalStateException when files are not correct mappings, or there are conflicting mappings.
 */
internal fun parseSwiftExportTypeMappingsFromFiles(files: List<File>): SwiftExportTypeMappings = buildMap {
    files.forEach { file ->
        file.useLines { lines ->
            lines.forEach { line ->
                val components = line.split(KOTLIN_SWIFT_NAME_SEPARATOR, limit = 2)
                check(components.size == 2) {
                    "Line '$line' should be of form KOTLIN_FQN${KOTLIN_SWIFT_NAME_SEPARATOR}SWIFT_BINARY_NAME"
                }
                val kotlinFqName = FqName(components[0])
                val swiftBinaryName = components[1]
                putIfAbsent(kotlinFqName, swiftBinaryName)?.let { prevBinaryName ->
                    check(prevBinaryName == swiftBinaryName) {
                        "Conflicting type mapping for Kotlin type `$kotlinFqName`. Trying to set `$swiftBinaryName`; previously set `$prevBinaryName`"
                    }
                }
            }
        }
    }
}
