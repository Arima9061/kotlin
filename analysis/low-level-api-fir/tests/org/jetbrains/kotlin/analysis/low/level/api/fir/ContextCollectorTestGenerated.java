/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.low.level.api.fir;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/low-level-api-fir/testdata/contextCollector")
@TestDataPath("$PROJECT_ROOT")
public class ContextCollectorTestGenerated extends AbstractContextCollectorTest {
    @Test
    public void testAllFilesPresentInContextCollector() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testdata/contextCollector"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("contextReceivers.kt")
    public void testContextReceivers() throws Exception {
        runTest("analysis/low-level-api-fir/testdata/contextCollector/contextReceivers.kt");
    }

    @Test
    @TestMetadata("contextReceiversClass.kt")
    public void testContextReceiversClass() throws Exception {
        runTest("analysis/low-level-api-fir/testdata/contextCollector/contextReceiversClass.kt");
    }

    @Test
    @TestMetadata("enumValue.kt")
    public void testEnumValue() throws Exception {
        runTest("analysis/low-level-api-fir/testdata/contextCollector/enumValue.kt");
    }

    @Test
    @TestMetadata("extensionFunction.kt")
    public void testExtensionFunction() throws Exception {
        runTest("analysis/low-level-api-fir/testdata/contextCollector/extensionFunction.kt");
    }

    @Test
    @TestMetadata("extensionLambdas.kt")
    public void testExtensionLambdas() throws Exception {
        runTest("analysis/low-level-api-fir/testdata/contextCollector/extensionLambdas.kt");
    }

    @Test
    @TestMetadata("file.kt")
    public void testFile() throws Exception {
        runTest("analysis/low-level-api-fir/testdata/contextCollector/file.kt");
    }

    @Test
    @TestMetadata("innerClasses.kt")
    public void testInnerClasses() throws Exception {
        runTest("analysis/low-level-api-fir/testdata/contextCollector/innerClasses.kt");
    }

    @Test
    @TestMetadata("lambdaArguments.kt")
    public void testLambdaArguments() throws Exception {
        runTest("analysis/low-level-api-fir/testdata/contextCollector/lambdaArguments.kt");
    }

    @Test
    @TestMetadata("nestedClasses.kt")
    public void testNestedClasses() throws Exception {
        runTest("analysis/low-level-api-fir/testdata/contextCollector/nestedClasses.kt");
    }

    @Test
    @TestMetadata("primaryConstructorParameter.kt")
    public void testPrimaryConstructorParameter() throws Exception {
        runTest("analysis/low-level-api-fir/testdata/contextCollector/primaryConstructorParameter.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() throws Exception {
        runTest("analysis/low-level-api-fir/testdata/contextCollector/simple.kt");
    }

    @Nested
    @TestMetadata("analysis/low-level-api-fir/testdata/contextCollector/smartCast")
    @TestDataPath("$PROJECT_ROOT")
    public class SmartCast {
        @Test
        public void testAllFilesPresentInSmartCast() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testdata/contextCollector/smartCast"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Nested
        @TestMetadata("analysis/low-level-api-fir/testdata/contextCollector/smartCast/contracts")
        @TestDataPath("$PROJECT_ROOT")
        public class Contracts {
            @Test
            public void testAllFilesPresentInContracts() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testdata/contextCollector/smartCast/contracts"), Pattern.compile("^(.+)\\.kt$"), null, true);
            }

            @Test
            @TestMetadata("run.kt")
            public void testRun() throws Exception {
                runTest("analysis/low-level-api-fir/testdata/contextCollector/smartCast/contracts/run.kt");
            }
        }

        @Nested
        @TestMetadata("analysis/low-level-api-fir/testdata/contextCollector/smartCast/if")
        @TestDataPath("$PROJECT_ROOT")
        public class If {
            @Test
            @TestMetadata("after.kt")
            public void testAfter() throws Exception {
                runTest("analysis/low-level-api-fir/testdata/contextCollector/smartCast/if/after.kt");
            }

            @Test
            public void testAllFilesPresentInIf() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testdata/contextCollector/smartCast/if"), Pattern.compile("^(.+)\\.kt$"), null, true);
            }

            @Test
            @TestMetadata("argumentTypeCheck.kt")
            public void testArgumentTypeCheck() throws Exception {
                runTest("analysis/low-level-api-fir/testdata/contextCollector/smartCast/if/argumentTypeCheck.kt");
            }

            @Test
            @TestMetadata("argumentTypeCheckReceiver.kt")
            public void testArgumentTypeCheckReceiver() throws Exception {
                runTest("analysis/low-level-api-fir/testdata/contextCollector/smartCast/if/argumentTypeCheckReceiver.kt");
            }
        }

        @Nested
        @TestMetadata("analysis/low-level-api-fir/testdata/contextCollector/smartCast/while")
        @TestDataPath("$PROJECT_ROOT")
        public class While {
            @Test
            @TestMetadata("after.kt")
            public void testAfter() throws Exception {
                runTest("analysis/low-level-api-fir/testdata/contextCollector/smartCast/while/after.kt");
            }

            @Test
            @TestMetadata("afterNullCheck.kt")
            public void testAfterNullCheck() throws Exception {
                runTest("analysis/low-level-api-fir/testdata/contextCollector/smartCast/while/afterNullCheck.kt");
            }

            @Test
            public void testAllFilesPresentInWhile() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testdata/contextCollector/smartCast/while"), Pattern.compile("^(.+)\\.kt$"), null, true);
            }

            @Test
            @TestMetadata("localTypeCheck.kt")
            public void testLocalTypeCheck() throws Exception {
                runTest("analysis/low-level-api-fir/testdata/contextCollector/smartCast/while/localTypeCheck.kt");
            }
        }
    }
}
