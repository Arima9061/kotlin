Tower Data Context:
    Element 0
        Scope: FirDefaultStarImportingScope
    Element 1
        Scope: FirDefaultSimpleImportingScope
    Element 2
        Scope: FirExplicitStarImportingScope
    Element 3
        Scope: FirDefaultSimpleImportingScope
    Element 4
        Scope: FirDefaultSimpleImportingScope
    Element 5
        Scope: FirPackageMemberScope
    Element 6
        Scope: FirExplicitSimpleImportingScope
    Element 7
        Scope: FirLocalScope
            Properties:
                FirValueParameterSymbol foo: R|Foo?|
    Element 8
        Scope: FirLocalScope

FILE: [ResolvedTo(IMPORTS)] afterNullCheck.kt
    public abstract [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
        public abstract [ResolvedTo(CONTRACTS)] val isActive: R|kotlin/Boolean|
            public [ResolvedTo(CONTRACTS)] get(): R|kotlin/Boolean|

        public abstract [ResolvedTo(CONTRACTS)] val parent: R|kotlin/Any|
            public [ResolvedTo(CONTRACTS)] get(): R|kotlin/Any|

    }
    public final [ResolvedTo(BODY_RESOLVE)] fun test([ResolvedTo(BODY_RESOLVE)] foo: R|Foo?|): R|kotlin/Unit| {
        while(R|<local>/foo|!!.R|/Foo.isActive|) {
            R|/consume|((R|<local>/foo|.R|/Foo.parent| as <ERROR TYPE REF: Incomplete code>).<Unresolved name: Foo>#(ERROR_EXPR(No right operand)))
            break@@@[R|<local>/foo|!!.R|/Foo.isActive|]
        }

        R|/consume|(R|<local>/foo|)
    }
    public final [ResolvedTo(CONTRACTS)] fun consume([ResolvedTo(CONTRACTS)] foo: R|Foo|): R|kotlin/Unit| {
    }
