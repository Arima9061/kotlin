RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] nestedClassWithPropertiesOverrides.kt
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val originalExpressions: A
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OV] get(): A

        public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class ResolveMe : OV {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverrides.kt
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val originalExpressions: A
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OV] get(): A

        public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class ResolveMe : OV {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverrides.kt
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val originalExpressions: A
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OV] get(): A

        public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ModuleNameKey=main] class ResolveMe : OV {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverrides.kt
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val originalExpressions: A
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OV] get(): A

        public final? [ResolvedTo(COMPANION_GENERATION)] [ModuleNameKey=main] class ResolveMe : OV {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverrides.kt
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val originalExpressions: A
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OV] get(): A

        public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] class ResolveMe : R|OV| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverrides.kt
    public final? [ResolvedTo(TYPES)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val originalExpressions: A
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OV] get(): A

        public final? [ResolvedTo(TYPES)] [ModuleNameKey=main] class ResolveMe : R|OV| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(STATUS)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val originalExpressions: A
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OV] get(): A

        public final [ResolvedTo(STATUS)] [ModuleNameKey=main] class ResolveMe : R|OV| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(STATUS)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val originalExpressions: A
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OV] get(): A

        public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ModuleNameKey=main] class ResolveMe : R|OV| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(STATUS)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(CONTRACTS)] [ModuleNameKey=main] class ResolveMe : R|OV| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(STATUS)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ModuleNameKey=main] class ResolveMe : R|OV| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(STATUS)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(CONSTANT_EVALUATION)] [ModuleNameKey=main] class ResolveMe : R|OV| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(STATUS)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] [ModuleNameKey=main] class ResolveMe : R|OV| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                LAZY_super<<implicit>>
            }

            public? open? override [ResolvedTo(RAW_FIR)] val originalExpressions: A
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(STATUS)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] val originalExpressions: R|A|
            public [ResolvedTo(STATUS)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(BODY_RESOLVE)] [ModuleNameKey=main] class ResolveMe : R|OV| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] val originalExpressions: R|A|
                public [ResolvedTo(STATUS)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] nestedClassWithPropertiesOverrides.kt
    public abstract [ResolvedTo(BODY_RESOLVE)] [ModuleNameKey=main] interface OV : R|kotlin/Any| {
        public abstract [ResolvedTo(BODY_RESOLVE)] val originalExpressions: R|A|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OV] get(): R|A|

        public final [ResolvedTo(BODY_RESOLVE)] [ModuleNameKey=main] class ResolveMe : R|OV| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(BODY_RESOLVE)] val originalExpressions: R|A|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] [ModuleNameKey=main] class A : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
