RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] nonEmptyClassWithSuper.kt
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class EmptyClass : InterfaceWithMembers {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val property: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] interface InterfaceWithMembers : AnotherSuperInterface {
        public? final? [ResolvedTo(RAW_FIR)] val property: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=InterfaceWithMembers] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] fun functionWithDefaultImplementation([ResolvedTo(RAW_FIR)] i: Int): Int { LAZY_BLOCK }

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

        public? open? override [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] nonEmptyClassWithSuper.kt
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] class EmptyClass : InterfaceWithMembers {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val property: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] interface InterfaceWithMembers : AnotherSuperInterface {
        public? final? [ResolvedTo(RAW_FIR)] val property: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=InterfaceWithMembers] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] fun functionWithDefaultImplementation([ResolvedTo(RAW_FIR)] i: Int): Int { LAZY_BLOCK }

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

        public? open? override [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] nonEmptyClassWithSuper.kt
    public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ModuleNameKey=main] class EmptyClass : InterfaceWithMembers {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val property: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] interface InterfaceWithMembers : AnotherSuperInterface {
        public? final? [ResolvedTo(RAW_FIR)] val property: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=InterfaceWithMembers] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] fun functionWithDefaultImplementation([ResolvedTo(RAW_FIR)] i: Int): Int { LAZY_BLOCK }

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

        public? open? override [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] nonEmptyClassWithSuper.kt
    public final? [ResolvedTo(COMPANION_GENERATION)] [ModuleNameKey=main] class EmptyClass : InterfaceWithMembers {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val property: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] interface InterfaceWithMembers : AnotherSuperInterface {
        public? final? [ResolvedTo(RAW_FIR)] val property: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=InterfaceWithMembers] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] fun functionWithDefaultImplementation([ResolvedTo(RAW_FIR)] i: Int): Int { LAZY_BLOCK }

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

        public? open? override [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] nonEmptyClassWithSuper.kt
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] class EmptyClass : R|InterfaceWithMembers| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val property: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface InterfaceWithMembers : R|AnotherSuperInterface| {
        public? final? [ResolvedTo(RAW_FIR)] val property: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=InterfaceWithMembers] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] fun functionWithDefaultImplementation([ResolvedTo(RAW_FIR)] i: Int): Int { LAZY_BLOCK }

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

        public? open? override [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] nonEmptyClassWithSuper.kt
    public final? [ResolvedTo(TYPES)] [ModuleNameKey=main] class EmptyClass : R|InterfaceWithMembers| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val property: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface InterfaceWithMembers : R|AnotherSuperInterface| {
        public? final? [ResolvedTo(RAW_FIR)] val property: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=InterfaceWithMembers] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] fun functionWithDefaultImplementation([ResolvedTo(RAW_FIR)] i: Int): Int { LAZY_BLOCK }

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

        public? open? override [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] nonEmptyClassWithSuper.kt
    public final [ResolvedTo(STATUS)] [ModuleNameKey=main] class EmptyClass : R|InterfaceWithMembers| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val property: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface InterfaceWithMembers : R|AnotherSuperInterface| {
        public? final? [ResolvedTo(RAW_FIR)] val property: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=InterfaceWithMembers] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] fun functionWithDefaultImplementation([ResolvedTo(RAW_FIR)] i: Int): Int { LAZY_BLOCK }

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

        public? open? override [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] nonEmptyClassWithSuper.kt
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ModuleNameKey=main] class EmptyClass : R|InterfaceWithMembers| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val property: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface InterfaceWithMembers : R|AnotherSuperInterface| {
        public? final? [ResolvedTo(RAW_FIR)] val property: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=InterfaceWithMembers] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] fun functionWithDefaultImplementation([ResolvedTo(RAW_FIR)] i: Int): Int { LAZY_BLOCK }

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

        public? open? override [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] nonEmptyClassWithSuper.kt
    public final [ResolvedTo(CONTRACTS)] [ModuleNameKey=main] class EmptyClass : R|InterfaceWithMembers| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val property: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface InterfaceWithMembers : R|AnotherSuperInterface| {
        public? final? [ResolvedTo(RAW_FIR)] val property: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=InterfaceWithMembers] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] fun functionWithDefaultImplementation([ResolvedTo(RAW_FIR)] i: Int): Int { LAZY_BLOCK }

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

        public? open? override [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nonEmptyClassWithSuper.kt
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ModuleNameKey=main] class EmptyClass : R|InterfaceWithMembers| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val property: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface InterfaceWithMembers : R|AnotherSuperInterface| {
        public? final? [ResolvedTo(RAW_FIR)] val property: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=InterfaceWithMembers] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] fun functionWithDefaultImplementation([ResolvedTo(RAW_FIR)] i: Int): Int { LAZY_BLOCK }

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

        public? open? override [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] nonEmptyClassWithSuper.kt
    public final [ResolvedTo(CONSTANT_EVALUATION)] [ModuleNameKey=main] class EmptyClass : R|InterfaceWithMembers| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val property: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface InterfaceWithMembers : R|AnotherSuperInterface| {
        public? final? [ResolvedTo(RAW_FIR)] val property: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=InterfaceWithMembers] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] fun functionWithDefaultImplementation([ResolvedTo(RAW_FIR)] i: Int): Int { LAZY_BLOCK }

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

        public? open? override [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] nonEmptyClassWithSuper.kt
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] [ModuleNameKey=main] class EmptyClass : R|InterfaceWithMembers| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] val property: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=EmptyClass] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface InterfaceWithMembers : R|AnotherSuperInterface| {
        public? final? [ResolvedTo(RAW_FIR)] val property: Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=InterfaceWithMembers] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] fun functionWithDefaultImplementation([ResolvedTo(RAW_FIR)] i: Int): Int { LAZY_BLOCK }

        public? open? override [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

        public? open? override [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun baz(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun baseFunction(): R|kotlin/Unit|

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nonEmptyClassWithSuper.kt
    public final [ResolvedTo(BODY_RESOLVE)] [ModuleNameKey=main] class EmptyClass : R|InterfaceWithMembers| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(BODY_RESOLVE)] val property: R|kotlin/Int| = Int(4)
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EmptyClass] get(): R|kotlin/Int|

        public open override [ResolvedTo(STATUS)] fun baseFunction(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public abstract [ResolvedTo(STATUS)] [ModuleNameKey=main] interface InterfaceWithMembers : R|AnotherSuperInterface| {
        public abstract [ResolvedTo(STATUS)] val property: R|kotlin/Int|
            public [ResolvedTo(STATUS)] [ContainingClassKey=InterfaceWithMembers] get(): R|kotlin/Int|

        public open [ResolvedTo(STATUS)] fun functionWithDefaultImplementation([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }

        public abstract override [ResolvedTo(STATUS)] fun baseFunction(): R|kotlin/Unit|

        public open override [ResolvedTo(STATUS)] fun baz(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public abstract [ResolvedTo(STATUS)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun baz(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun baseFunction(): R|kotlin/Unit|

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] nonEmptyClassWithSuper.kt
    public final [ResolvedTo(BODY_RESOLVE)] [ModuleNameKey=main] class EmptyClass : R|InterfaceWithMembers| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EmptyClass] constructor(): R|EmptyClass| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(BODY_RESOLVE)] val property: R|kotlin/Int| = Int(4)
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EmptyClass] get(): R|kotlin/Int|

        public open override [ResolvedTo(BODY_RESOLVE)] fun baseFunction(): R|kotlin/Unit| {
        }

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] [ModuleNameKey=main] interface InterfaceWithMembers : R|AnotherSuperInterface| {
        public abstract [ResolvedTo(BODY_RESOLVE)] val property: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=InterfaceWithMembers] get(): R|kotlin/Int|

        public open [ResolvedTo(BODY_RESOLVE)] fun functionWithDefaultImplementation([ResolvedTo(BODY_RESOLVE)] i: R|kotlin/Int|): R|kotlin/Int| {
            ^functionWithDefaultImplementation R|<local>/i|
        }

        public abstract override [ResolvedTo(BODY_RESOLVE)] fun baseFunction(): R|kotlin/Unit|

        public open override [ResolvedTo(BODY_RESOLVE)] fun baz(): R|kotlin/Unit| {
        }

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] [ModuleNameKey=main] interface AnotherSuperInterface : R|kotlin/Any| {
        public abstract [ResolvedTo(BODY_RESOLVE)] fun baz(): R|kotlin/Unit|

        public abstract [ResolvedTo(BODY_RESOLVE)] fun baseFunction(): R|kotlin/Unit|

    }
