/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.api.fe10.test.cases.generated.cases.components.symbolDeclarationOverridesProvider;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.kotlin.analysis.api.fe10.test.configurator.AnalysisApiFe10TestConfiguratorFactory;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfiguratorFactoryData;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfigurator;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.TestModuleKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.FrontendKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisSessionMode;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiMode;
import org.jetbrains.kotlin.analysis.api.impl.base.test.cases.components.symbolDeclarationOverridesProvider.AbstractOverriddenDeclarationProviderTest;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.RepeatedTest;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols")
@TestDataPath("$PROJECT_ROOT")
public class Fe10IdeNormalAnalysisSourceModuleOverriddenDeclarationProviderTestGenerated extends AbstractOverriddenDeclarationProviderTest {
  @NotNull
  @Override
  public AnalysisApiTestConfigurator getConfigurator() {
    return AnalysisApiFe10TestConfiguratorFactory.INSTANCE.createConfigurator(
      new AnalysisApiTestConfiguratorFactoryData(
        FrontendKind.Fe10,
        TestModuleKind.Source,
        AnalysisSessionMode.Normal,
        AnalysisApiMode.Ide
      )
    );
  }

  @RepeatedTest(value = 3)
  public void testAllFilesPresentInOverriddenSymbols() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols"), Pattern.compile("^(.+)\\.kt$"), null, true);
  }

  @RepeatedTest(value = 3)
  @TestMetadata("arraylistSubtype.kt")
  public void testArraylistSubtype() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/arraylistSubtype.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("backingField.kt")
  public void testBackingField() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/backingField.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("delegateOverrideWithImplicitTypeInsideAnonymousObject.kt")
  public void testDelegateOverrideWithImplicitTypeInsideAnonymousObject() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/delegateOverrideWithImplicitTypeInsideAnonymousObject.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("delegateOverrideWithoutImplicitTypeInsideAnonymousObject.kt")
  public void testDelegateOverrideWithoutImplicitTypeInsideAnonymousObject() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/delegateOverrideWithoutImplicitTypeInsideAnonymousObject.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("inAnonymousClass.kt")
  public void testInAnonymousClass() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/inAnonymousClass.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("inLocalClass.kt")
  public void testInLocalClass() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/inLocalClass.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("inOtherFile.kt")
  public void testInOtherFile() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/inOtherFile.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("intersectionOverride.kt")
  public void testIntersectionOverride() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/intersectionOverride.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("intersectionOverride2.kt")
  public void testIntersectionOverride2() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/intersectionOverride2.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("intersectionOverrideWithImplicitTypeInsideAnonymousObject.kt")
  public void testIntersectionOverrideWithImplicitTypeInsideAnonymousObject() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/intersectionOverrideWithImplicitTypeInsideAnonymousObject.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("intersectionOverrideWithoutImplicitTypeInsideAnonymousObject.kt")
  public void testIntersectionOverrideWithoutImplicitTypeInsideAnonymousObject() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/intersectionOverrideWithoutImplicitTypeInsideAnonymousObject.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("javaAccessors.kt")
  public void testJavaAccessors() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/javaAccessors.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("multipleInterfaces.kt")
  public void testMultipleInterfaces() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/multipleInterfaces.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("onEnumEntry.kt")
  public void testOnEnumEntry() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/onEnumEntry.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("parameterWithGeneratedProperty.kt")
  public void testParameterWithGeneratedProperty() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/parameterWithGeneratedProperty.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("sequenceOfOverrides.kt")
  public void testSequenceOfOverrides() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/sequenceOfOverrides.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("substitutionOverrideFunctionDelegate.kt")
  public void testSubstitutionOverrideFunctionDelegate() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/substitutionOverrideFunctionDelegate.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("substitutionOverrideFunctionParameter.kt")
  public void testSubstitutionOverrideFunctionParameter() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/substitutionOverrideFunctionParameter.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("substitutionOverrideFunctionReturnType.kt")
  public void testSubstitutionOverrideFunctionReturnType() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/substitutionOverrideFunctionReturnType.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("substitutionOverrideFunctionTransitive.kt")
  public void testSubstitutionOverrideFunctionTransitive() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/substitutionOverrideFunctionTransitive.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("substitutionOverrideFunctionTransitiveSameType.kt")
  public void testSubstitutionOverrideFunctionTransitiveSameType() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/substitutionOverrideFunctionTransitiveSameType.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("substitutionOverrideProperty.kt")
  public void testSubstitutionOverrideProperty() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/substitutionOverrideProperty.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("substitutionOverridePropertyDelegate.kt")
  public void testSubstitutionOverridePropertyDelegate() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/substitutionOverridePropertyDelegate.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("substitutionOverridePropertyTransitive.kt")
  public void testSubstitutionOverridePropertyTransitive() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/substitutionOverridePropertyTransitive.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("substitutionOverridePropertyTransitiveSameType.kt")
  public void testSubstitutionOverridePropertyTransitiveSameType() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/substitutionOverridePropertyTransitiveSameType.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("substitutionOverrideWithImplicitTypeInsideAnonymousObject.kt")
  public void testSubstitutionOverrideWithImplicitTypeInsideAnonymousObject() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/substitutionOverrideWithImplicitTypeInsideAnonymousObject.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("substitutionOverrideWithoutImplicitTypeInsideAnonymousObject.kt")
  public void testSubstitutionOverrideWithoutImplicitTypeInsideAnonymousObject() {
    runTest("analysis/analysis-api/testData/components/symbolDeclarationOverridesProvider/overriddenSymbols/substitutionOverrideWithoutImplicitTypeInsideAnonymousObject.kt");
  }
}
