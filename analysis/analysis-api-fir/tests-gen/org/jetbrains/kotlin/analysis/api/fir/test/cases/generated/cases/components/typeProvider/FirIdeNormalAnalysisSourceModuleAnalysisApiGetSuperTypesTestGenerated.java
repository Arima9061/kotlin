/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.api.fir.test.cases.generated.cases.components.typeProvider;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.kotlin.analysis.api.fir.test.configurators.AnalysisApiFirTestConfiguratorFactory;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfiguratorFactoryData;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfigurator;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.TestModuleKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.FrontendKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisSessionMode;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiMode;
import org.jetbrains.kotlin.analysis.api.impl.base.test.cases.components.typeProvider.AbstractAnalysisApiGetSuperTypesTest;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.RepeatedTest;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/analysis-api/testData/components/typeInfoProvider/superTypes")
@TestDataPath("$PROJECT_ROOT")
public class FirIdeNormalAnalysisSourceModuleAnalysisApiGetSuperTypesTestGenerated extends AbstractAnalysisApiGetSuperTypesTest {
  @NotNull
  @Override
  public AnalysisApiTestConfigurator getConfigurator() {
    return AnalysisApiFirTestConfiguratorFactory.INSTANCE.createConfigurator(
      new AnalysisApiTestConfiguratorFactoryData(
        FrontendKind.Fir,
        TestModuleKind.Source,
        AnalysisSessionMode.Normal,
        AnalysisApiMode.Ide
      )
    );
  }

  @RepeatedTest(value = 5)
  public void testAllFilesPresentInSuperTypes() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/typeInfoProvider/superTypes"), Pattern.compile("^(.+)\\.kt$"), null, true);
  }

  @RepeatedTest(value = 5)
  @TestMetadata("anonymousObject.kt")
  public void testAnonymousObject() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/anonymousObject.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("any.kt")
  public void testAny() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/any.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("contravariant.kt")
  public void testContravariant() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/contravariant.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("covariant.kt")
  public void testCovariant() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/covariant.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("errorType.kt")
  public void testErrorType() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/errorType.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("flexibleType.kt")
  public void testFlexibleType() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/flexibleType.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("int.kt")
  public void testInt() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/int.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("invariant.kt")
  public void testInvariant() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/invariant.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("recursiveTypeParameter.kt")
  public void testRecursiveTypeParameter() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/recursiveTypeParameter.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("regularClass.kt")
  public void testRegularClass() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/regularClass.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("regularClassWithBounds.kt")
  public void testRegularClassWithBounds() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/regularClassWithBounds.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("star.kt")
  public void testStar() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/star.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("string.kt")
  public void testString() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/string.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("typeParameter.kt")
  public void testTypeParameter() {
    runTest("analysis/analysis-api/testData/components/typeInfoProvider/superTypes/typeParameter.kt");
  }
}
