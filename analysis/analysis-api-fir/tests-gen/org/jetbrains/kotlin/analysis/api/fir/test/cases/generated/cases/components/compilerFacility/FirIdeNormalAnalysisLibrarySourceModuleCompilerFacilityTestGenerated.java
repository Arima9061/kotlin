/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.api.fir.test.cases.generated.cases.components.compilerFacility;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.kotlin.analysis.api.fir.test.configurators.AnalysisApiFirTestConfiguratorFactory;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfiguratorFactoryData;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfigurator;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.TestModuleKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.FrontendKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisSessionMode;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiMode;
import org.jetbrains.kotlin.analysis.api.impl.base.test.cases.components.compilerFacility.AbstractCompilerFacilityTest;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.RepeatedTest;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/analysis-api/testData/components/compilerFacility/compilation")
@TestDataPath("$PROJECT_ROOT")
public class FirIdeNormalAnalysisLibrarySourceModuleCompilerFacilityTestGenerated extends AbstractCompilerFacilityTest {
  @NotNull
  @Override
  public AnalysisApiTestConfigurator getConfigurator() {
    return AnalysisApiFirTestConfiguratorFactory.INSTANCE.createConfigurator(
      new AnalysisApiTestConfiguratorFactoryData(
        FrontendKind.Fir,
        TestModuleKind.LibrarySource,
        AnalysisSessionMode.Normal,
        AnalysisApiMode.Ide
      )
    );
  }

  @RepeatedTest(value = 3)
  public void testAllFilesPresentInCompilation() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/compilerFacility/compilation"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
  }

  @RepeatedTest(value = 3)
  @TestMetadata("annotationWithVararg.kt")
  public void testAnnotationWithVararg() {
    runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/annotationWithVararg.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("classKinds.kt")
  public void testClassKinds() {
    runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/classKinds.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("imports.kt")
  public void testImports() {
    runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/imports.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("multipleFiles.kt")
  public void testMultipleFiles() {
    runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/multipleFiles.kt");
  }

  @RepeatedTest(value = 3)
  @TestMetadata("simple.kt")
  public void testSimple() {
    runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/simple.kt");
  }

  @Nested
  @TestMetadata("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments")
  @TestDataPath("$PROJECT_ROOT")
  public class CodeFragments {
    @RepeatedTest(value = 3)
    public void testAllFilesPresentInCodeFragments() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
    }

    @RepeatedTest(value = 3)
    @TestMetadata("annotationUsage.kt")
    public void testAnnotationUsage() {
      runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/annotationUsage.kt");
    }

    @RepeatedTest(value = 3)
    @TestMetadata("commonContext.kt")
    public void testCommonContext() {
      runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/commonContext.kt");
    }

    @RepeatedTest(value = 3)
    @TestMetadata("customName.kt")
    public void testCustomName() {
      runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/customName.kt");
    }

    @RepeatedTest(value = 3)
    @TestMetadata("duplicateLibrary.kt")
    public void testDuplicateLibrary() {
      runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/duplicateLibrary.kt");
    }

    @RepeatedTest(value = 3)
    @TestMetadata("fragmentFunction.kt")
    public void testFragmentFunction() {
      runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/fragmentFunction.kt");
    }

    @RepeatedTest(value = 3)
    @TestMetadata("imports.kt")
    public void testImports() {
      runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/imports.kt");
    }

    @RepeatedTest(value = 3)
    @TestMetadata("inlineFunctionUsage.kt")
    public void testInlineFunctionUsage() {
      runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/inlineFunctionUsage.kt");
    }

    @RepeatedTest(value = 3)
    @TestMetadata("inlineFunctionUsageSource.kt")
    public void testInlineFunctionUsageSource() {
      runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/inlineFunctionUsageSource.kt");
    }

    @RepeatedTest(value = 3)
    @TestMetadata("local.kt")
    public void testLocal() {
      runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/local.kt");
    }

    @RepeatedTest(value = 3)
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/simple.kt");
    }

    @RepeatedTest(value = 3)
    @TestMetadata("syntaxError.kt")
    public void testSyntaxError() {
      runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/syntaxError.kt");
    }

    @Nested
    @TestMetadata("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing")
    @TestDataPath("$PROJECT_ROOT")
    public class Capturing {
      @RepeatedTest(value = 3)
      public void testAllFilesPresentInCapturing() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
      }

      @RepeatedTest(value = 3)
      @TestMetadata("contextReceiver.kt")
      public void testContextReceiver() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/contextReceiver.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("contextReceiverExplicit.kt")
      public void testContextReceiverExplicit() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/contextReceiverExplicit.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("extensionReceiver.kt")
      public void testExtensionReceiver() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/extensionReceiver.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("extensionReceiverExplicit.kt")
      public void testExtensionReceiverExplicit() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/extensionReceiverExplicit.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("extensionReceiverLabeled.kt")
      public void testExtensionReceiverLabeled() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/extensionReceiverLabeled.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("extensionReceiverProperty.kt")
      public void testExtensionReceiverProperty() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/extensionReceiverProperty.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("extensionReceiverPropertyExplicit.kt")
      public void testExtensionReceiverPropertyExplicit() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/extensionReceiverPropertyExplicit.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("extensionReceiverPropertyLabeled.kt")
      public void testExtensionReceiverPropertyLabeled() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/extensionReceiverPropertyLabeled.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("extensionReceiverSmartCasted.kt")
      public void testExtensionReceiverSmartCasted() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/extensionReceiverSmartCasted.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("foreignValue.kt")
      public void testForeignValue() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/foreignValue.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("initializer.kt")
      public void testInitializer() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/initializer.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("local.kt")
      public void testLocal() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/local.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("localDelegatedProperty.kt")
      public void testLocalDelegatedProperty() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/localDelegatedProperty.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("localFunction.kt")
      public void testLocalFunction() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/localFunction.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("localFunctionContainingClassClosure.kt")
      public void testLocalFunctionContainingClassClosure() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/localFunctionContainingClassClosure.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("localFunctionExtensionReceiverClosure.kt")
      public void testLocalFunctionExtensionReceiverClosure() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/localFunctionExtensionReceiverClosure.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("localFunctionLambdaParameterClosure.kt")
      public void testLocalFunctionLambdaParameterClosure() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/localFunctionLambdaParameterClosure.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("localFunctionLocalClosure.kt")
      public void testLocalFunctionLocalClosure() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/localFunctionLocalClosure.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("localFunctionLocalClosureMutating.kt")
      public void testLocalFunctionLocalClosureMutating() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/localFunctionLocalClosureMutating.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("localFunctionMultipleCapturing.kt")
      public void testLocalFunctionMultipleCapturing() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/localFunctionMultipleCapturing.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("localFunctionParameterClosure.kt")
      public void testLocalFunctionParameterClosure() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/localFunctionParameterClosure.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("localMutated.kt")
      public void testLocalMutated() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/localMutated.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("localVariable.kt")
      public void testLocalVariable() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/localVariable.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("multipleClassAndFunctionContextReceivers.kt")
      public void testMultipleClassAndFunctionContextReceivers() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/multipleClassAndFunctionContextReceivers.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("multipleClassContextReceivers.kt")
      public void testMultipleClassContextReceivers() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/multipleClassContextReceivers.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("multipleFunctionContextReceivers.kt")
      public void testMultipleFunctionContextReceivers() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/multipleFunctionContextReceivers.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("nestedOuterClass.kt")
      public void testNestedOuterClass() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/nestedOuterClass.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("objectFunction.kt")
      public void testObjectFunction() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/objectFunction.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("outerClass.kt")
      public void testOuterClass() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/outerClass.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("outerClassMutated.kt")
      public void testOuterClassMutated() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/outerClassMutated.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("outerClassMutatedPrivate.kt")
      public void testOuterClassMutatedPrivate() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/outerClassMutatedPrivate.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("preferCorrectResolve.kt")
      public void testPreferCorrectResolve() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/preferCorrectResolve.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("privateMemberCall.kt")
      public void testPrivateMemberCall() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/privateMemberCall.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("secondClassContextReceiver.kt")
      public void testSecondClassContextReceiver() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/secondClassContextReceiver.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("singleClassContextReceiver.kt")
      public void testSingleClassContextReceiver() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/singleClassContextReceiver.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("smartCastExtensionReceiver.kt")
      public void testSmartCastExtensionReceiver() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/smartCastExtensionReceiver.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("smartCastValueParameter.kt")
      public void testSmartCastValueParameter() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/smartCastValueParameter.kt");
      }

      @RepeatedTest(value = 3)
      @TestMetadata("valueParameter.kt")
      public void testValueParameter() {
        runTest("analysis/analysis-api/testData/components/compilerFacility/compilation/codeFragments/capturing/valueParameter.kt");
      }
    }
  }
}
