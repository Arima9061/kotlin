/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.api.standalone.fir.test.cases.generated.cases.components.typeProvider;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.kotlin.analysis.api.standalone.fir.test.configurators.AnalysisApiFirStandaloneModeTestConfiguratorFactory;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfiguratorFactoryData;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfigurator;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.TestModuleKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.FrontendKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisSessionMode;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiMode;
import org.jetbrains.kotlin.analysis.api.impl.base.test.cases.components.typeProvider.AbstractTypeReferenceTest;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.RepeatedTest;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/analysis-api/testData/components/typeProvider/typeReference")
@TestDataPath("$PROJECT_ROOT")
public class FirStandaloneNormalAnalysisSourceModuleTypeReferenceTestGenerated extends AbstractTypeReferenceTest {
  @NotNull
  @Override
  public AnalysisApiTestConfigurator getConfigurator() {
    return AnalysisApiFirStandaloneModeTestConfiguratorFactory.INSTANCE.createConfigurator(
      new AnalysisApiTestConfiguratorFactoryData(
        FrontendKind.Fir,
        TestModuleKind.Source,
        AnalysisSessionMode.Normal,
        AnalysisApiMode.Standalone
      )
    );
  }

  @RepeatedTest(value = 5)
  public void testAllFilesPresentInTypeReference() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/typeProvider/typeReference"), Pattern.compile("^(.+)\\.kt$"), null, true);
  }

  @RepeatedTest(value = 5)
  @TestMetadata("annotationEntry.kt")
  public void testAnnotationEntry() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/annotationEntry.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("annotationEntryBackingField.kt")
  public void testAnnotationEntryBackingField() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/annotationEntryBackingField.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("annotationEntryGetter.kt")
  public void testAnnotationEntryGetter() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/annotationEntryGetter.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("annotationEntryOnParameter.kt")
  public void testAnnotationEntryOnParameter() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/annotationEntryOnParameter.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("annotationEntrySetter.kt")
  public void testAnnotationEntrySetter() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/annotationEntrySetter.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("annotationOnFunction.kt")
  public void testAnnotationOnFunction() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/annotationOnFunction.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("annotationParameterValue.kt")
  public void testAnnotationParameterValue() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/annotationParameterValue.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("annotationParameterValueBackingField.kt")
  public void testAnnotationParameterValueBackingField() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/annotationParameterValueBackingField.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("functionReceiver.kt")
  public void testFunctionReceiver() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/functionReceiver.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("functionReturn.kt")
  public void testFunctionReturn() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/functionReturn.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("propertyReceiver.kt")
  public void testPropertyReceiver() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/propertyReceiver.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("propertyReturn.kt")
  public void testPropertyReturn() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/propertyReturn.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("starProjection.kt")
  public void testStarProjection() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/starProjection.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("superTypeEntry.kt")
  public void testSuperTypeEntry() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/superTypeEntry.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("superTypeEntry_withTypeArgument.kt")
  public void testSuperTypeEntry_withTypeArgument() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/superTypeEntry_withTypeArgument.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("typeArgument_functionCall.kt")
  public void testTypeArgument_functionCall() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/typeArgument_functionCall.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("typeArgument_superTypeEntry.kt")
  public void testTypeArgument_superTypeEntry() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/typeArgument_superTypeEntry.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("underscoreTypeArgument_inferred.kt")
  public void testUnderscoreTypeArgument_inferred() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/underscoreTypeArgument_inferred.kt");
  }

  @RepeatedTest(value = 5)
  @TestMetadata("underscoreTypeArgument_reified.kt")
  public void testUnderscoreTypeArgument_reified() {
    runTest("analysis/analysis-api/testData/components/typeProvider/typeReference/underscoreTypeArgument_reified.kt");
  }
}
