KtCallExpression(66,71): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass
          type = one.MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(85,90): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this
          isSafeNavigation = false
          type = one.MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(112,117): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@MyClass
          isSafeNavigation = false
          type = one.MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(203,208): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass
          type = one.MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = false

  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass.InnerOuter
          type = one.MyClass.InnerOuter
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(226,231): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this
          isSafeNavigation = false
          type = one.MyClass.InnerOuter
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(260,265): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@InnerOuter
          isSafeNavigation = false
          type = one.MyClass.InnerOuter
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(291,296): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@MyClass
          isSafeNavigation = false
          type = one.MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(403,408): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass
          type = one.MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = false

  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass.InnerOuter
          type = one.MyClass.InnerOuter
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = false

  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass.InnerOuter.InnerNested
          type = one.MyClass.InnerOuter.InnerNested
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(430,435): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this
          isSafeNavigation = false
          type = one.MyClass.InnerOuter.InnerNested
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(469,474): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@InnerNested
          isSafeNavigation = false
          type = one.MyClass.InnerOuter.InnerNested
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(507,512): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@InnerOuter
          isSafeNavigation = false
          type = one.MyClass.InnerOuter
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(542,547): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@MyClass
          isSafeNavigation = false
          type = one.MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(625,630): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtImplicitReceiverValue:
          symbol = <extension receiver>: one.MyClass
          type = one.MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass.InnerOuter
          type = one.MyClass.InnerOuter
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = false

  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass.InnerOuter.InnerNested
          type = one.MyClass.InnerOuter.InnerNested
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = false

KtCallExpression(656,661): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this
          isSafeNavigation = false
          type = one.MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(692,697): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@anon
          isSafeNavigation = false
          type = one.MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(735,740): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@InnerNested
          isSafeNavigation = false
          type = one.MyClass.InnerOuter.InnerNested
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(777,782): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@InnerOuter
          isSafeNavigation = false
          type = one.MyClass.InnerOuter
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(816,821): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@MyClass
          isSafeNavigation = false
          type = one.MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(857,1107): 'myWith { t ->'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass
          type = one.MyClass
        signature = KtFunctionLikeSignature:
          receiverType = one.MyClass
          returnType = kotlin.Unit
          symbol = one/myWith(<extension receiver>: T, body: kotlin.Function2<T, T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = body
              receiverType = null
              returnType = kotlin.Function2<one.MyClass, one.MyClass, kotlin.Unit>
              symbol = body: kotlin.Function2<T, T, kotlin.Unit>
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = one/myWith
      typeArgumentsMapping = {
        T -> (one.MyClass)
      }
      argumentMapping = {
        { t ->
                            foo()
                            this.foo()
                            this@myWith.foo()
                            this@InnerNested.foo()
                            this@InnerOuter.foo()
                            this@MyClass.foo()
                        } -> (KtVariableLikeSignature:
          name = body
          receiverType = null
          returnType = kotlin.Function2<one.MyClass, one.MyClass, kotlin.Unit>
          symbol = body: kotlin.Function2<T, T, kotlin.Unit>
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass.InnerOuter
          type = one.MyClass.InnerOuter
        signature = KtFunctionLikeSignature:
          receiverType = one.MyClass.InnerOuter
          returnType = kotlin.Unit
          symbol = one/myWith(<extension receiver>: T, body: kotlin.Function2<T, T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = body
              receiverType = null
              returnType = kotlin.Function2<one.MyClass.InnerOuter, one.MyClass.InnerOuter, kotlin.Unit>
              symbol = body: kotlin.Function2<T, T, kotlin.Unit>
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = one/myWith
      typeArgumentsMapping = {
        T -> (one.MyClass.InnerOuter)
      }
      argumentMapping = {
        { t ->
                            foo()
                            this.foo()
                            this@myWith.foo()
                            this@InnerNested.foo()
                            this@InnerOuter.foo()
                            this@MyClass.foo()
                        } -> (KtVariableLikeSignature:
          name = body
          receiverType = null
          returnType = kotlin.Function2<one.MyClass.InnerOuter, one.MyClass.InnerOuter, kotlin.Unit>
          symbol = body: kotlin.Function2<T, T, kotlin.Unit>
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass.InnerOuter.InnerNested
          type = one.MyClass.InnerOuter.InnerNested
        signature = KtFunctionLikeSignature:
          receiverType = one.MyClass.InnerOuter.InnerNested
          returnType = kotlin.Unit
          symbol = one/myWith(<extension receiver>: T, body: kotlin.Function2<T, T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = body
              receiverType = null
              returnType = kotlin.Function2<one.MyClass.InnerOuter.InnerNested, one.MyClass.InnerOuter.InnerNested, kotlin.Unit>
              symbol = body: kotlin.Function2<T, T, kotlin.Unit>
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = one/myWith
      typeArgumentsMapping = {
        T -> (one.MyClass.InnerOuter.InnerNested)
      }
      argumentMapping = {
        { t ->
                            foo()
                            this.foo()
                            this@myWith.foo()
                            this@InnerNested.foo()
                            this@InnerOuter.foo()
                            this@MyClass.foo()
                        } -> (KtVariableLikeSignature:
          name = body
          receiverType = null
          returnType = kotlin.Function2<one.MyClass.InnerOuter.InnerNested, one.MyClass.InnerOuter.InnerNested, kotlin.Unit>
          symbol = body: kotlin.Function2<T, T, kotlin.Unit>
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

KtCallExpression(891,896): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtImplicitReceiverValue:
          symbol = <extension receiver>: one.MyClass.InnerOuter.InnerNested
          type = one.MyClass.InnerOuter.InnerNested
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass
          type = one.MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = false

  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass.InnerOuter
          type = one.MyClass.InnerOuter
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = false

KtCallExpression(922,927): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this
          isSafeNavigation = false
          type = one.MyClass.InnerOuter.InnerNested
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(960,965): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@myWith
          isSafeNavigation = false
          type = one.MyClass.InnerOuter.InnerNested
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(1003,1008): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@InnerNested
          isSafeNavigation = false
          type = one.MyClass.InnerOuter.InnerNested
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(1045,1050): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@InnerOuter
          isSafeNavigation = false
          type = one.MyClass.InnerOuter
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(1084,1089): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@MyClass
          isSafeNavigation = false
          type = one.MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(1125,1194): 'myWith label@{'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass
          type = one.MyClass
        signature = KtFunctionLikeSignature:
          receiverType = one.MyClass
          returnType = kotlin.Unit
          symbol = one/myWith(<extension receiver>: T, body: kotlin.Function2<T, T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = body
              receiverType = null
              returnType = kotlin.Function2<one.MyClass, one.MyClass, kotlin.Unit>
              symbol = body: kotlin.Function2<T, T, kotlin.Unit>
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = one/myWith
      typeArgumentsMapping = {
        T -> (one.MyClass)
      }
      argumentMapping = {
        label@{
                            this@label.foo()
                        } -> (KtVariableLikeSignature:
          name = body
          receiverType = null
          returnType = kotlin.Function2<one.MyClass, one.MyClass, kotlin.Unit>
          symbol = body: kotlin.Function2<T, T, kotlin.Unit>
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass.InnerOuter
          type = one.MyClass.InnerOuter
        signature = KtFunctionLikeSignature:
          receiverType = one.MyClass.InnerOuter
          returnType = kotlin.Unit
          symbol = one/myWith(<extension receiver>: T, body: kotlin.Function2<T, T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = body
              receiverType = null
              returnType = kotlin.Function2<one.MyClass.InnerOuter, one.MyClass.InnerOuter, kotlin.Unit>
              symbol = body: kotlin.Function2<T, T, kotlin.Unit>
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = one/myWith
      typeArgumentsMapping = {
        T -> (one.MyClass.InnerOuter)
      }
      argumentMapping = {
        label@{
                            this@label.foo()
                        } -> (KtVariableLikeSignature:
          name = body
          receiverType = null
          returnType = kotlin.Function2<one.MyClass.InnerOuter, one.MyClass.InnerOuter, kotlin.Unit>
          symbol = body: kotlin.Function2<T, T, kotlin.Unit>
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtImplicitReceiverValue:
          symbol = one/MyClass.InnerOuter.InnerNested
          type = one.MyClass.InnerOuter.InnerNested
        signature = KtFunctionLikeSignature:
          receiverType = one.MyClass.InnerOuter.InnerNested
          returnType = kotlin.Unit
          symbol = one/myWith(<extension receiver>: T, body: kotlin.Function2<T, T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = body
              receiverType = null
              returnType = kotlin.Function2<one.MyClass.InnerOuter.InnerNested, one.MyClass.InnerOuter.InnerNested, kotlin.Unit>
              symbol = body: kotlin.Function2<T, T, kotlin.Unit>
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = one/myWith
      typeArgumentsMapping = {
        T -> (one.MyClass.InnerOuter.InnerNested)
      }
      argumentMapping = {
        label@{
                            this@label.foo()
                        } -> (KtVariableLikeSignature:
          name = body
          receiverType = null
          returnType = kotlin.Function2<one.MyClass.InnerOuter.InnerNested, one.MyClass.InnerOuter.InnerNested, kotlin.Unit>
          symbol = body: kotlin.Function2<T, T, kotlin.Unit>
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

KtCallExpression(1171,1176): 'foo()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this@label
          isSafeNavigation = false
          type = one.MyClass.InnerOuter.InnerNested
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
          valueParameters = []
          callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtCallExpression(1272,1282): 'body(this)'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = true
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = body
          isSafeNavigation = false
          type = kotlin.Function2<T, T, kotlin.Unit>
        extensionReceiver = KtImplicitReceiverValue:
          symbol = <extension receiver>: T
          type = T
        signature = KtFunctionLikeSignature:
          receiverType = T
          returnType = kotlin.Unit
          symbol = kotlin/Function2.invoke(<extension receiver>: P1, <dispatch receiver>: kotlin.Function2<P1, P2, R>, p2: P2): R
          valueParameters = [
            KtVariableLikeSignature:
              name = p2
              receiverType = null
              returnType = T
              symbol = p2: P2
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Function2.invoke
      typeArgumentsMapping = {}
      argumentMapping = {
        this -> (KtVariableLikeSignature:
          name = p2
          receiverType = null
          returnType = T
          symbol = p2: P2
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<NO_VALUE_FOR_PARAMETER: No value passed for parameter 'p2'>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = true
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = body
          isSafeNavigation = false
          type = kotlin.Function2<T, T, kotlin.Unit>
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = kotlin/Function2.invoke(<dispatch receiver>: kotlin.Function2<P1, P2, R>, p1: P1, p2: P2): R
          valueParameters = [
            KtVariableLikeSignature:
              name = p1
              receiverType = null
              returnType = T
              symbol = p1: P1
              callableIdIfNonLocal = null,
            KtVariableLikeSignature:
              name = p2
              receiverType = null
              returnType = T
              symbol = p2: P2
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Function2.invoke
      typeArgumentsMapping = {}
      argumentMapping = {
        this -> (KtVariableLikeSignature:
          name = p1
          receiverType = null
          returnType = T
          symbol = p1: P1
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

