KtCallExpression(34,42): 'action()'
  KtSimpleFunctionCall:
    isImplicitInvoke = true
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = action
        isSafeNavigation = false
        type = kotlin.Function0<kotlin.Unit>
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = kotlin/Function0.invoke(<dispatch receiver>: kotlin.Function0<R>): R
        valueParameters = []
        callableIdIfNonLocal = kotlin/Function0.invoke
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(64,102): 'foo label@{'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = /foo(action: kotlin.Function0<kotlin.Unit>): kotlin.Unit
        valueParameters = [
          KtVariableLikeSignature:
            name = action
            receiverType = null
            returnType = kotlin.Function0<kotlin.Unit>
            symbol = action: kotlin.Function0<kotlin.Unit>
            callableIdIfNonLocal = null
        ]
        callableIdIfNonLocal = /foo
    typeArgumentsMapping = {}
    argumentMapping = {
      label@{
              return@label
          } -> (KtVariableLikeSignature:
        name = action
        receiverType = null
        returnType = kotlin.Function0<kotlin.Unit>
        symbol = action: kotlin.Function0<kotlin.Unit>
        callableIdIfNonLocal = null)
    }

KtOperationReferenceExpression(126,128): '..'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = 0
        isSafeNavigation = false
        type = kotlin.Int
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.ranges.IntRange
        symbol = kotlin/Int.rangeTo(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.ranges.IntRange
        valueParameters = [
          KtVariableLikeSignature:
            name = other
            receiverType = null
            returnType = kotlin.Int
            symbol = other: kotlin.Int
            callableIdIfNonLocal = null
        ]
        callableIdIfNonLocal = kotlin/Int.rangeTo
    typeArgumentsMapping = {}
    argumentMapping = {
      1 -> (KtVariableLikeSignature:
        name = other
        receiverType = null
        returnType = kotlin.Int
        symbol = other: kotlin.Int
        callableIdIfNonLocal = null)
    }

