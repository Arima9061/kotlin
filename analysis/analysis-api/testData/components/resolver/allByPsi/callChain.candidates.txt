KtOperationReferenceExpression(32,33): '+'
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'kotlin.Int', but 'kotlin.Double' was expected.>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Double
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Double): kotlin.Double
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Double
              symbol = other: kotlin.Double
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.plus
      typeArgumentsMapping = {}
      argumentMapping = {
        a -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Double
          symbol = other: kotlin.Double
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'kotlin.Int', but 'kotlin.Float' was expected.>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Float
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Float): kotlin.Float
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Float
              symbol = other: kotlin.Float
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.plus
      typeArgumentsMapping = {}
      argumentMapping = {
        a -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Float
          symbol = other: kotlin.Float
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'kotlin.Int', but 'kotlin.Byte' was expected.>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Byte): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Byte
              symbol = other: kotlin.Byte
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.plus
      typeArgumentsMapping = {}
      argumentMapping = {
        a -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Byte
          symbol = other: kotlin.Byte
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.plus
      typeArgumentsMapping = {}
      argumentMapping = {
        a -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'kotlin.Int', but 'kotlin.Short' was expected.>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Short): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Short
              symbol = other: kotlin.Short
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.plus
      typeArgumentsMapping = {}
      argumentMapping = {
        a -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Short
          symbol = other: kotlin.Short
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'kotlin.Int', but 'kotlin.Long' was expected.>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = this
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Long
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Long): kotlin.Long
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Long
              symbol = other: kotlin.Long
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.plus
      typeArgumentsMapping = {}
      argumentMapping = {
        a -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Long
          symbol = other: kotlin.Long
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

KtOperationReferenceExpression(76,78): '?:'
  NO_CANDIDATES

KtCallExpression(103,109): 'foo(2)'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        signature = KtFunctionLikeSignature:
          receiverType = kotlin.Int
          returnType = kotlin.Int
          symbol = /foo(<extension receiver>: kotlin.Int, a: kotlin.Int): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = a
              receiverType = null
              returnType = kotlin.Int
              symbol = a: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = /foo
      typeArgumentsMapping = {}
      argumentMapping = {
        2 -> (KtVariableLikeSignature:
          name = a
          receiverType = null
          returnType = kotlin.Int
          symbol = a: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

KtCallExpression(110,116): 'bar(3)'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtExplicitReceiverValue:
          expression = 1.foo(2)
          isSafeNavigation = false
          type = kotlin.Int
        signature = KtFunctionLikeSignature:
          receiverType = kotlin.Int?
          returnType = kotlin.Int
          symbol = /bar(<extension receiver>: kotlin.Int?, b: kotlin.Int): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = b
              receiverType = null
              returnType = kotlin.Int
              symbol = b: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = /bar
      typeArgumentsMapping = {}
      argumentMapping = {
        3 -> (KtVariableLikeSignature:
          name = b
          receiverType = null
          returnType = kotlin.Int
          symbol = b: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

KtOperationReferenceExpression(117,120): 'as?'
  NO_CANDIDATES

KtCallExpression(127,147): 'foo(4.bar(5).bar(6))'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtExplicitReceiverValue:
          expression = 1.foo(2).bar(3) as? Int
          isSafeNavigation = true
          type = kotlin.Int
        signature = KtFunctionLikeSignature:
          receiverType = kotlin.Int
          returnType = kotlin.Int
          symbol = /foo(<extension receiver>: kotlin.Int, a: kotlin.Int): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = a
              receiverType = null
              returnType = kotlin.Int
              symbol = a: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = /foo
      typeArgumentsMapping = {}
      argumentMapping = {
        4.bar(5).bar(6) -> (KtVariableLikeSignature:
          name = a
          receiverType = null
          returnType = kotlin.Int
          symbol = a: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

KtCallExpression(133,139): 'bar(5)'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtExplicitReceiverValue:
          expression = 4
          isSafeNavigation = false
          type = kotlin.Int
        signature = KtFunctionLikeSignature:
          receiverType = kotlin.Int?
          returnType = kotlin.Int
          symbol = /bar(<extension receiver>: kotlin.Int?, b: kotlin.Int): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = b
              receiverType = null
              returnType = kotlin.Int
              symbol = b: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = /bar
      typeArgumentsMapping = {}
      argumentMapping = {
        5 -> (KtVariableLikeSignature:
          name = b
          receiverType = null
          returnType = kotlin.Int
          symbol = b: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

KtCallExpression(140,146): 'bar(6)'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtExplicitReceiverValue:
          expression = 4.bar(5)
          isSafeNavigation = false
          type = kotlin.Int
        signature = KtFunctionLikeSignature:
          receiverType = kotlin.Int?
          returnType = kotlin.Int
          symbol = /bar(<extension receiver>: kotlin.Int?, b: kotlin.Int): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = b
              receiverType = null
              returnType = kotlin.Int
              symbol = b: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = /bar
      typeArgumentsMapping = {}
      argumentMapping = {
        6 -> (KtVariableLikeSignature:
          name = b
          receiverType = null
          returnType = kotlin.Int
          symbol = b: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

KtCallExpression(148,154): 'bar(0)'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtExplicitReceiverValue:
          expression = (1.foo(2).bar(3) as? Int)?.foo(4.bar(5).bar(6))
          isSafeNavigation = false
          type = kotlin.Int?
        signature = KtFunctionLikeSignature:
          receiverType = kotlin.Int?
          returnType = kotlin.Int
          symbol = /bar(<extension receiver>: kotlin.Int?, b: kotlin.Int): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = b
              receiverType = null
              returnType = kotlin.Int
              symbol = b: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = /bar
      typeArgumentsMapping = {}
      argumentMapping = {
        0 -> (KtVariableLikeSignature:
          name = b
          receiverType = null
          returnType = kotlin.Int
          symbol = b: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

