KtCallExpression(78,104): 'print(javaClass.something)'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = kotlin/io/print(message: kotlin.Any?): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = message
              receiverType = null
              returnType = kotlin.Any?
              symbol = message: kotlin.Any?
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/io/print
      typeArgumentsMapping = {}
      argumentMapping = {
        javaClass.something -> (KtVariableLikeSignature:
          name = message
          receiverType = null
          returnType = kotlin.Any?
          symbol = message: kotlin.Any?
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<TYPE_MISMATCH: Type mismatch: inferred type is Int but Boolean was expected>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = kotlin/io/print(message: kotlin.Boolean): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = message
              receiverType = null
              returnType = kotlin.Boolean
              symbol = message: kotlin.Boolean
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/io/print
      typeArgumentsMapping = {}
      argumentMapping = {
        javaClass.something -> (KtVariableLikeSignature:
          name = message
          receiverType = null
          returnType = kotlin.Boolean
          symbol = message: kotlin.Boolean
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<TYPE_MISMATCH: Type mismatch: inferred type is Int but Byte was expected>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = kotlin/io/print(message: kotlin.Byte): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = message
              receiverType = null
              returnType = kotlin.Byte
              symbol = message: kotlin.Byte
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/io/print
      typeArgumentsMapping = {}
      argumentMapping = {
        javaClass.something -> (KtVariableLikeSignature:
          name = message
          receiverType = null
          returnType = kotlin.Byte
          symbol = message: kotlin.Byte
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<TYPE_MISMATCH: Type mismatch: inferred type is Int but Char was expected>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = kotlin/io/print(message: kotlin.Char): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = message
              receiverType = null
              returnType = kotlin.Char
              symbol = message: kotlin.Char
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/io/print
      typeArgumentsMapping = {}
      argumentMapping = {
        javaClass.something -> (KtVariableLikeSignature:
          name = message
          receiverType = null
          returnType = kotlin.Char
          symbol = message: kotlin.Char
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<TYPE_MISMATCH: Type mismatch: inferred type is Int but CharArray was expected>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = kotlin/io/print(message: kotlin.CharArray): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = message
              receiverType = null
              returnType = kotlin.CharArray
              symbol = message: kotlin.CharArray
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/io/print
      typeArgumentsMapping = {}
      argumentMapping = {
        javaClass.something -> (KtVariableLikeSignature:
          name = message
          receiverType = null
          returnType = kotlin.CharArray
          symbol = message: kotlin.CharArray
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<TYPE_MISMATCH: Type mismatch: inferred type is Int but Double was expected>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = kotlin/io/print(message: kotlin.Double): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = message
              receiverType = null
              returnType = kotlin.Double
              symbol = message: kotlin.Double
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/io/print
      typeArgumentsMapping = {}
      argumentMapping = {
        javaClass.something -> (KtVariableLikeSignature:
          name = message
          receiverType = null
          returnType = kotlin.Double
          symbol = message: kotlin.Double
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<TYPE_MISMATCH: Type mismatch: inferred type is Int but Float was expected>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = kotlin/io/print(message: kotlin.Float): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = message
              receiverType = null
              returnType = kotlin.Float
              symbol = message: kotlin.Float
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/io/print
      typeArgumentsMapping = {}
      argumentMapping = {
        javaClass.something -> (KtVariableLikeSignature:
          name = message
          receiverType = null
          returnType = kotlin.Float
          symbol = message: kotlin.Float
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false
  
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = kotlin/io/print(message: kotlin.Int): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = message
              receiverType = null
              returnType = kotlin.Int
              symbol = message: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/io/print
      typeArgumentsMapping = {}
      argumentMapping = {
        javaClass.something -> (KtVariableLikeSignature:
          name = message
          receiverType = null
          returnType = kotlin.Int
          symbol = message: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<TYPE_MISMATCH: Type mismatch: inferred type is Int but Long was expected>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = kotlin/io/print(message: kotlin.Long): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = message
              receiverType = null
              returnType = kotlin.Long
              symbol = message: kotlin.Long
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/io/print
      typeArgumentsMapping = {}
      argumentMapping = {
        javaClass.something -> (KtVariableLikeSignature:
          name = message
          receiverType = null
          returnType = kotlin.Long
          symbol = message: kotlin.Long
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<TYPE_MISMATCH: Type mismatch: inferred type is Int but Short was expected>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = kotlin/io/print(message: kotlin.Short): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = message
              receiverType = null
              returnType = kotlin.Short
              symbol = message: kotlin.Short
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/io/print
      typeArgumentsMapping = {}
      argumentMapping = {
        javaClass.something -> (KtVariableLikeSignature:
          name = message
          receiverType = null
          returnType = kotlin.Short
          symbol = message: kotlin.Short
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

KtOperationReferenceExpression(129,130): '='
  NO_CANDIDATES

KtOperationReferenceExpression(157,159): '+='
  NO_CANDIDATES

KtOperationReferenceExpression(185,187): '++'
  NO_CANDIDATES

KtOperationReferenceExpression(192,194): '--'
  NO_CANDIDATES

KtOperationReferenceExpression(228,230): '++'
  NO_CANDIDATES

KtOperationReferenceExpression(246,248): '++'
  NO_CANDIDATES

KtOperationReferenceExpression(265,266): '='
  NO_CANDIDATES

KtOperationReferenceExpression(295,296): '='
  NO_CANDIDATES

