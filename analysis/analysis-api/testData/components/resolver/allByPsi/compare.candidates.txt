KtOperationReferenceExpression(20,21): '>'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.compareTo
      typeArgumentsMapping = {}
      argumentMapping = {
        2 -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

KtCallExpression(30,42): 'compareTo(2)'
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'kotlin.Int', but 'kotlin.Byte' was expected.>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Byte): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Byte
              symbol = other: kotlin.Byte
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.compareTo
      typeArgumentsMapping = {}
      argumentMapping = {
        2 -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Byte
          symbol = other: kotlin.Byte
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'kotlin.Int', but 'kotlin.Double' was expected.>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Double): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Double
              symbol = other: kotlin.Double
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.compareTo
      typeArgumentsMapping = {}
      argumentMapping = {
        2 -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Double
          symbol = other: kotlin.Double
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'kotlin.Int', but 'kotlin.Float' was expected.>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Float): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Float
              symbol = other: kotlin.Float
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.compareTo
      typeArgumentsMapping = {}
      argumentMapping = {
        2 -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Float
          symbol = other: kotlin.Float
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.compareTo
      typeArgumentsMapping = {}
      argumentMapping = {
        2 -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'kotlin.Int', but 'kotlin.Long' was expected.>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Long): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Long
              symbol = other: kotlin.Long
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.compareTo
      typeArgumentsMapping = {}
      argumentMapping = {
        2 -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Long
          symbol = other: kotlin.Long
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'kotlin.Int', but 'kotlin.Short' was expected.>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Short): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Short
              symbol = other: kotlin.Short
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.compareTo
      typeArgumentsMapping = {}
      argumentMapping = {
        2 -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Short
          symbol = other: kotlin.Short
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

KtOperationReferenceExpression(43,44): '>'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = 1.compareTo(2)
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/Int.compareTo
      typeArgumentsMapping = {}
      argumentMapping = {
        0 -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

KtOperationReferenceExpression(56,57): '<'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = "3"
          isSafeNavigation = false
          type = kotlin.String
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/String.compareTo(<dispatch receiver>: kotlin.String, other: kotlin.String): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = other
              receiverType = null
              returnType = kotlin.String
              symbol = other: kotlin.String
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/String.compareTo
      typeArgumentsMapping = {}
      argumentMapping = {
        "4" -> (KtVariableLikeSignature:
          name = other
          receiverType = null
          returnType = kotlin.String
          symbol = other: kotlin.String
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

KtCallExpression(99,108): 'MyClass()'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = MyClass
          symbol = <constructor>(): MyClass
          valueParameters = []
          callableIdIfNonLocal = null
      typeArgumentsMapping = {}
      argumentMapping = {}
    isInBestCandidates = true

KtOperationReferenceExpression(121,123): '>='
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = myClass
          isSafeNavigation = false
          type = MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = /MyClass.compareTo(<dispatch receiver>: MyClass, i: kotlin.Int): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = i
              receiverType = null
              returnType = kotlin.Int
              symbol = i: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = /MyClass.compareTo
      typeArgumentsMapping = {}
      argumentMapping = {
        number -> (KtVariableLikeSignature:
          name = i
          receiverType = null
          returnType = kotlin.Int
          symbol = i: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

KtCallExpression(143,160): 'compareTo(number)'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = myClass
          isSafeNavigation = false
          type = MyClass
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = /MyClass.compareTo(<dispatch receiver>: MyClass, i: kotlin.Int): kotlin.Int
          valueParameters = [
            KtVariableLikeSignature:
              name = i
              receiverType = null
              returnType = kotlin.Int
              symbol = i: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = /MyClass.compareTo
      typeArgumentsMapping = {}
      argumentMapping = {
        number -> (KtVariableLikeSignature:
          name = i
          receiverType = null
          returnType = kotlin.Int
          symbol = i: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

