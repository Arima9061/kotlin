KtSuperTypeCallEntry(118,127): 'MyClass()'
  KtDelegatedConstructorCall:
    kind = SUPER_CALL
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = pack.MyClass
        symbol = <constructor>(): pack.MyClass
        valueParameters = []
        callableIdIfNonLocal = null
    typeArgumentsMapping = {}
    argumentMapping = {}

KtSuperTypeCallEntry(258,282): 'ClassWithType<MyClass>()'
  KtDelegatedConstructorCall:
    kind = SUPER_CALL
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = pack.ClassWithType<T>
        symbol = <constructor>(): pack.ClassWithType<T>
        valueParameters = []
        callableIdIfNonLocal = null
    typeArgumentsMapping = {
      T -> (pack.MyClass)
    }
    argumentMapping = {}

KtCallableReferenceExpression(497,520): 'MyClass::memberFunction'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Int
        symbol = pack/MyClass.memberFunction(<dispatch receiver>: pack.MyClass): kotlin.Int
        valueParameters = []
        callableIdIfNonLocal = pack/MyClass.memberFunction
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(521,538): 'invoke(MyClass())'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = MyClass::memberFunction
        isSafeNavigation = false
        type = kotlin.reflect.KFunction1<pack.MyClass, kotlin.Int>
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Int
        symbol = kotlin/reflect/KFunction1.invoke(<dispatch receiver>: kotlin.reflect.KFunction1<P1, R>, p1: P1): R
        valueParameters = [
          KtVariableLikeSignature:
            name = p1
            receiverType = null
            returnType = pack.MyClass
            symbol = p1: P1
            callableIdIfNonLocal = null
        ]
        callableIdIfNonLocal = kotlin/reflect/KFunction1.invoke
    typeArgumentsMapping = {}
    argumentMapping = {
      MyClass() -> (KtVariableLikeSignature:
        name = p1
        receiverType = null
        returnType = pack.MyClass
        symbol = p1: P1
        callableIdIfNonLocal = null)
    }

KtCallExpression(528,537): 'MyClass()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = pack.MyClass
        symbol = <constructor>(): pack.MyClass
        valueParameters = []
        callableIdIfNonLocal = null
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallableReferenceExpression(543,566): 'MyClass::memberProperty'
  KtSimpleVariableAccessCall:
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtVariableLikeSignature:
        name = memberProperty
        receiverType = null
        returnType = kotlin.Int
        symbol = val memberProperty: kotlin.Int
        callableIdIfNonLocal = pack/MyClass.memberProperty
    simpleAccess = Read:
      
    typeArgumentsMapping = {}

KtCallableReferenceExpression(577,598): 'Child::memberFunction'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Int
        symbol = pack/MyClass.memberFunction(<dispatch receiver>: pack.MyClass): kotlin.Int
        valueParameters = []
        callableIdIfNonLocal = pack/MyClass.memberFunction
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(599,614): 'invoke(Child())'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = Child::memberFunction
        isSafeNavigation = false
        type = kotlin.reflect.KFunction1<pack.Child, kotlin.Int>
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Int
        symbol = kotlin/reflect/KFunction1.invoke(<dispatch receiver>: kotlin.reflect.KFunction1<P1, R>, p1: P1): R
        valueParameters = [
          KtVariableLikeSignature:
            name = p1
            receiverType = null
            returnType = pack.Child
            symbol = p1: P1
            callableIdIfNonLocal = null
        ]
        callableIdIfNonLocal = kotlin/reflect/KFunction1.invoke
    typeArgumentsMapping = {}
    argumentMapping = {
      Child() -> (KtVariableLikeSignature:
        name = p1
        receiverType = null
        returnType = pack.Child
        symbol = p1: P1
        callableIdIfNonLocal = null)
    }

KtCallExpression(606,613): 'Child()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = pack.Child
        symbol = <constructor>(): pack.Child
        valueParameters = []
        callableIdIfNonLocal = null
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallableReferenceExpression(619,640): 'Child::memberProperty'
  KtSimpleVariableAccessCall:
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtVariableLikeSignature:
        name = memberProperty
        receiverType = null
        returnType = kotlin.Int
        symbol = val memberProperty: kotlin.Int
        callableIdIfNonLocal = pack/MyClass.memberProperty
    simpleAccess = Read:
      
    typeArgumentsMapping = {}

KtCallableReferenceExpression(659,690): 'pack.MyClass::extensionFunction'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = pack.MyClass
        returnType = kotlin.String
        symbol = pack/extensionFunction(<extension receiver>: pack.MyClass): kotlin.String
        valueParameters = []
        callableIdIfNonLocal = pack/extensionFunction
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallableReferenceExpression(703,729): 'MyClass::extensionProperty'
  KtSimpleVariableAccessCall:
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtVariableLikeSignature:
        name = extensionProperty
        receiverType = pack.MyClass
        returnType = kotlin.String
        symbol = val extensionProperty: kotlin.String
        callableIdIfNonLocal = pack/extensionProperty
    simpleAccess = Read:
      
    typeArgumentsMapping = {}

KtCallableReferenceExpression(744,768): 'Child::extensionFunction'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = pack.MyClass
        returnType = kotlin.String
        symbol = pack/extensionFunction(<extension receiver>: pack.MyClass): kotlin.String
        valueParameters = []
        callableIdIfNonLocal = pack/extensionFunction
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallableReferenceExpression(782,811): 'pack.Child::extensionProperty'
  KtSimpleVariableAccessCall:
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtVariableLikeSignature:
        name = extensionProperty
        receiverType = pack.MyClass
        returnType = kotlin.String
        symbol = val extensionProperty: kotlin.String
        callableIdIfNonLocal = pack/extensionProperty
    simpleAccess = Read:
      
    typeArgumentsMapping = {}

KtCallableReferenceExpression(817,848): 'ChildWithType::functionWithType'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = pack.MyClass?
        symbol = pack/ChildWithType.functionWithType(<dispatch receiver>: pack.ChildWithType): pack.MyClass?
        valueParameters = []
        callableIdIfNonLocal = pack/ChildWithType.functionWithType
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallableReferenceExpression(858,889): 'ChildWithType::propertyWithType'
  KtSimpleVariableAccessCall:
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtVariableLikeSignature:
        name = propertyWithType
        receiverType = null
        returnType = pack.MyClass?
        symbol = var propertyWithType: pack.MyClass?
        callableIdIfNonLocal = pack/ChildWithType.propertyWithType
    simpleAccess = Read:
      
    typeArgumentsMapping = {}

KtCallExpression(890,913): 'invoke(ChildWithType())'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = ChildWithType::propertyWithType
        isSafeNavigation = false
        type = kotlin.reflect.KMutableProperty1<pack.ChildWithType, pack.MyClass?>
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = pack.MyClass?
        symbol = kotlin/reflect/KMutableProperty1.invoke(<dispatch receiver>: kotlin.reflect.KMutableProperty1<T, V>, p1: T): V
        valueParameters = [
          KtVariableLikeSignature:
            name = p1
            receiverType = null
            returnType = pack.ChildWithType
            symbol = p1: T
            callableIdIfNonLocal = null
        ]
        callableIdIfNonLocal = kotlin/reflect/KMutableProperty1.invoke
    typeArgumentsMapping = {}
    argumentMapping = {
      ChildWithType() -> (KtVariableLikeSignature:
        name = p1
        receiverType = null
        returnType = pack.ChildWithType
        symbol = p1: T
        callableIdIfNonLocal = null)
    }

KtCallExpression(897,912): 'ChildWithType()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = pack.ChildWithType
        symbol = <constructor>(): pack.ChildWithType
        valueParameters = []
        callableIdIfNonLocal = null
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallableReferenceExpression(919,937): '::topLevelFunction'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = pack/topLevelFunction(i: kotlin.Int): kotlin.Unit
        valueParameters = [
          KtVariableLikeSignature:
            name = i
            receiverType = null
            returnType = kotlin.Int
            symbol = i: kotlin.Int
            callableIdIfNonLocal = null
        ]
        callableIdIfNonLocal = pack/topLevelFunction
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallableReferenceExpression(942,960): '::topLevelVariable'
  KtSimpleVariableAccessCall:
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtVariableLikeSignature:
        name = topLevelVariable
        receiverType = null
        returnType = kotlin.Int
        symbol = var topLevelVariable: kotlin.Int
        callableIdIfNonLocal = pack/topLevelVariable
    simpleAccess = Read:
      
    typeArgumentsMapping = {}

KtCallableReferenceExpression(966,979): '::lateinitVar'
  KtSimpleVariableAccessCall:
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtVariableLikeSignature:
        name = lateinitVar
        receiverType = null
        returnType = pack.MyClass
        symbol = var lateinitVar: pack.MyClass
        callableIdIfNonLocal = pack/lateinitVar
    simpleAccess = Read:
      
    typeArgumentsMapping = {}

KtCallableReferenceExpression(1063,1094): 'classWithType::functionWithType'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = classWithType
        isSafeNavigation = false
        type = pack.ClassWithType<T>
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = T?
        symbol = pack/ClassWithType.functionWithType(<dispatch receiver>: pack.ClassWithType<T>): T?
        valueParameters = []
        callableIdIfNonLocal = pack/ClassWithType.functionWithType
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallableReferenceExpression(1099,1130): 'classWithType::propertyWithType'
  KtSimpleVariableAccessCall:
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = classWithType
        isSafeNavigation = false
        type = pack.ClassWithType<T>
      extensionReceiver = null
      signature = KtVariableLikeSignature:
        name = propertyWithType
        receiverType = null
        returnType = T?
        symbol = var propertyWithType: T?
        callableIdIfNonLocal = pack/ClassWithType.propertyWithType
    simpleAccess = Read:
      
    typeArgumentsMapping = {}

KtCallableReferenceExpression(1174,1195): 't!!::functionWithType'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = t!!
        isSafeNavigation = false
        type = pack.ClassWithType<kotlin.Int>
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Int?
        symbol = pack/ClassWithType.functionWithType(<dispatch receiver>: pack.ClassWithType<T>): T?
        valueParameters = []
        callableIdIfNonLocal = pack/ClassWithType.functionWithType
    typeArgumentsMapping = {}
    argumentMapping = {}

KtOperationReferenceExpression(1175,1177): '!!'
  null

KtCallableReferenceExpression(1200,1221): 't!!::propertyWithType'
  KtSimpleVariableAccessCall:
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = t!!
        isSafeNavigation = false
        type = pack.ClassWithType<kotlin.Int>
      extensionReceiver = null
      signature = KtVariableLikeSignature:
        name = propertyWithType
        receiverType = null
        returnType = kotlin.Int?
        symbol = var propertyWithType: T?
        callableIdIfNonLocal = pack/ClassWithType.propertyWithType
    simpleAccess = Read:
      
    typeArgumentsMapping = {}

KtOperationReferenceExpression(1201,1203): '!!'
  null

