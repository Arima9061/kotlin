KtCallExpression(66,71): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtImplicitReceiverValue:
        symbol = one/MyClass
        type = one.MyClass
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(85,90): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this
        isSafeNavigation = false
        type = one.MyClass
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(112,117): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@MyClass
        isSafeNavigation = false
        type = one.MyClass
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(203,208): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtImplicitReceiverValue:
        symbol = one/MyClass.InnerOuter
        type = one.MyClass.InnerOuter
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(226,231): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this
        isSafeNavigation = false
        type = one.MyClass.InnerOuter
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(260,265): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@InnerOuter
        isSafeNavigation = false
        type = one.MyClass.InnerOuter
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(291,296): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@MyClass
        isSafeNavigation = false
        type = one.MyClass
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(403,408): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtImplicitReceiverValue:
        symbol = one/MyClass.InnerOuter.InnerNested
        type = one.MyClass.InnerOuter.InnerNested
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(430,435): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this
        isSafeNavigation = false
        type = one.MyClass.InnerOuter.InnerNested
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(469,474): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@InnerNested
        isSafeNavigation = false
        type = one.MyClass.InnerOuter.InnerNested
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(507,512): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@InnerOuter
        isSafeNavigation = false
        type = one.MyClass.InnerOuter
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(542,547): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@MyClass
        isSafeNavigation = false
        type = one.MyClass
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(625,630): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtImplicitReceiverValue:
        symbol = <extension receiver>: one.MyClass
        type = one.MyClass
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(656,661): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this
        isSafeNavigation = false
        type = one.MyClass
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(692,697): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@anon
        isSafeNavigation = false
        type = one.MyClass
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(735,740): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@InnerNested
        isSafeNavigation = false
        type = one.MyClass.InnerOuter.InnerNested
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(777,782): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@InnerOuter
        isSafeNavigation = false
        type = one.MyClass.InnerOuter
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(816,821): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@MyClass
        isSafeNavigation = false
        type = one.MyClass
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(857,1107): 'myWith { t ->'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = KtImplicitReceiverValue:
        symbol = one/MyClass.InnerOuter.InnerNested
        type = one.MyClass.InnerOuter.InnerNested
      signature = KtFunctionLikeSignature:
        receiverType = one.MyClass.InnerOuter.InnerNested
        returnType = kotlin.Unit
        symbol = one/myWith(<extension receiver>: T, body: kotlin.Function2<T, T, kotlin.Unit>): kotlin.Unit
        valueParameters = [
          KtVariableLikeSignature:
            name = body
            receiverType = null
            returnType = kotlin.Function2<one.MyClass.InnerOuter.InnerNested, one.MyClass.InnerOuter.InnerNested, kotlin.Unit>
            symbol = body: kotlin.Function2<T, T, kotlin.Unit>
            callableIdIfNonLocal = null
        ]
        callableIdIfNonLocal = one/myWith
    typeArgumentsMapping = {
      T -> (one.MyClass.InnerOuter.InnerNested)
    }
    argumentMapping = {
      { t ->
                          foo()
                          this.foo()
                          this@myWith.foo()
                          this@InnerNested.foo()
                          this@InnerOuter.foo()
                          this@MyClass.foo()
                      } -> (KtVariableLikeSignature:
        name = body
        receiverType = null
        returnType = kotlin.Function2<one.MyClass.InnerOuter.InnerNested, one.MyClass.InnerOuter.InnerNested, kotlin.Unit>
        symbol = body: kotlin.Function2<T, T, kotlin.Unit>
        callableIdIfNonLocal = null)
    }

KtCallExpression(891,896): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtImplicitReceiverValue:
        symbol = <extension receiver>: one.MyClass.InnerOuter.InnerNested
        type = one.MyClass.InnerOuter.InnerNested
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(922,927): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this
        isSafeNavigation = false
        type = one.MyClass.InnerOuter.InnerNested
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(960,965): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@myWith
        isSafeNavigation = false
        type = one.MyClass.InnerOuter.InnerNested
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(1003,1008): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@InnerNested
        isSafeNavigation = false
        type = one.MyClass.InnerOuter.InnerNested
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(1045,1050): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@InnerOuter
        isSafeNavigation = false
        type = one.MyClass.InnerOuter
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.foo(<dispatch receiver>: one.MyClass.InnerOuter): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(1084,1089): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@MyClass
        isSafeNavigation = false
        type = one.MyClass
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.foo(<dispatch receiver>: one.MyClass): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(1125,1194): 'myWith label@{'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = KtImplicitReceiverValue:
        symbol = one/MyClass.InnerOuter.InnerNested
        type = one.MyClass.InnerOuter.InnerNested
      signature = KtFunctionLikeSignature:
        receiverType = one.MyClass.InnerOuter.InnerNested
        returnType = kotlin.Unit
        symbol = one/myWith(<extension receiver>: T, body: kotlin.Function2<T, T, kotlin.Unit>): kotlin.Unit
        valueParameters = [
          KtVariableLikeSignature:
            name = body
            receiverType = null
            returnType = kotlin.Function2<one.MyClass.InnerOuter.InnerNested, one.MyClass.InnerOuter.InnerNested, kotlin.Unit>
            symbol = body: kotlin.Function2<T, T, kotlin.Unit>
            callableIdIfNonLocal = null
        ]
        callableIdIfNonLocal = one/myWith
    typeArgumentsMapping = {
      T -> (one.MyClass.InnerOuter.InnerNested)
    }
    argumentMapping = {
      label@{
                          this@label.foo()
                      } -> (KtVariableLikeSignature:
        name = body
        receiverType = null
        returnType = kotlin.Function2<one.MyClass.InnerOuter.InnerNested, one.MyClass.InnerOuter.InnerNested, kotlin.Unit>
        symbol = body: kotlin.Function2<T, T, kotlin.Unit>
        callableIdIfNonLocal = null)
    }

KtCallExpression(1171,1176): 'foo()'
  KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = this@label
        isSafeNavigation = false
        type = one.MyClass.InnerOuter.InnerNested
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = one/MyClass.InnerOuter.InnerNested.foo(<dispatch receiver>: one.MyClass.InnerOuter.InnerNested): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = one/MyClass.InnerOuter.InnerNested.foo
    typeArgumentsMapping = {}
    argumentMapping = {}

KtCallExpression(1272,1282): 'body(this)'
  KtSimpleFunctionCall:
    isImplicitInvoke = true
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = body
        isSafeNavigation = false
        type = kotlin.Function2<T, T, kotlin.Unit>
      extensionReceiver = KtImplicitReceiverValue:
        symbol = <extension receiver>: T
        type = T
      signature = KtFunctionLikeSignature:
        receiverType = T
        returnType = kotlin.Unit
        symbol = kotlin/Function2.invoke(<extension receiver>: P1, <dispatch receiver>: kotlin.Function2<P1, P2, R>, p2: P2): R
        valueParameters = [
          KtVariableLikeSignature:
            name = p2
            receiverType = null
            returnType = T
            symbol = p2: P2
            callableIdIfNonLocal = null
        ]
        callableIdIfNonLocal = kotlin/Function2.invoke
    typeArgumentsMapping = {}
    argumentMapping = {
      this -> (KtVariableLikeSignature:
        name = p2
        receiverType = null
        returnType = T
        symbol = p2: P2
        callableIdIfNonLocal = null)
    }

