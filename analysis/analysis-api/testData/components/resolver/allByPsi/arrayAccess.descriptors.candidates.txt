KtOperationReferenceExpression(45,47): '+='
  NO_CANDIDATES

KtArrayAccessExpression(74,81): 'list[0]'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/collections/MutableList.get(<dispatch receiver>: kotlin.collections.List<E>, index: kotlin.Int): E
          valueParameters = [
            KtVariableLikeSignature:
              name = index
              receiverType = null
              returnType = kotlin.Int
              symbol = index: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/collections/MutableList.get
      typeArgumentsMapping = {}
      argumentMapping = {
        0 -> (KtVariableLikeSignature:
          name = index
          receiverType = null
          returnType = kotlin.Int
          symbol = index: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<null: RECEIVER_TYPE_ERROR with get>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KtFunctionLikeSignature:
          receiverType = kotlin.collections.Map<out kotlin.Int, ERROR_TYPE>
          returnType = ERROR_TYPE?
          symbol = kotlin/collections/get(<extension receiver>: kotlin.collections.Map<out K, V>, key: K): V?
          valueParameters = [
            KtVariableLikeSignature:
              name = key
              receiverType = null
              returnType = kotlin.Int
              symbol = key: K
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/collections/get
      typeArgumentsMapping = {
        K -> (kotlin.Int),
        V -> (ERROR_TYPE)
      }
      argumentMapping = {
        0 -> (KtVariableLikeSignature:
          name = key
          receiverType = null
          returnType = kotlin.Int
          symbol = key: K
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<CONSTANT_EXPECTED_TYPE_MISMATCH: The integer literal does not conform to the expected type String>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KtFunctionLikeSignature:
          receiverType = kotlin.text.MatchGroupCollection
          returnType = kotlin.text.MatchGroup?
          symbol = kotlin/text/get(<extension receiver>: kotlin.text.MatchGroupCollection, name: kotlin.String): kotlin.text.MatchGroup?
          valueParameters = [
            KtVariableLikeSignature:
              name = name
              receiverType = null
              returnType = kotlin.String
              symbol = name: kotlin.String
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/text/get
      typeArgumentsMapping = {}
      argumentMapping = {
        0 -> (KtVariableLikeSignature:
          name = name
          receiverType = null
          returnType = kotlin.String
          symbol = name: kotlin.String
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

KtCallExpression(111,129): 'get(implicitIndex)'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/collections/MutableList.get(<dispatch receiver>: kotlin.collections.List<E>, index: kotlin.Int): E
          valueParameters = [
            KtVariableLikeSignature:
              name = index
              receiverType = null
              returnType = kotlin.Int
              symbol = index: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/collections/MutableList.get
      typeArgumentsMapping = {}
      argumentMapping = {
        implicitIndex -> (KtVariableLikeSignature:
          name = index
          receiverType = null
          returnType = kotlin.Int
          symbol = index: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<null: RECEIVER_TYPE_ERROR with get>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KtFunctionLikeSignature:
          receiverType = kotlin.collections.Map<out kotlin.Int, ERROR_TYPE>
          returnType = ERROR_TYPE?
          symbol = kotlin/collections/get(<extension receiver>: kotlin.collections.Map<out K, V>, key: K): V?
          valueParameters = [
            KtVariableLikeSignature:
              name = key
              receiverType = null
              returnType = kotlin.Int
              symbol = key: K
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/collections/get
      typeArgumentsMapping = {
        K -> (kotlin.Int),
        V -> (ERROR_TYPE)
      }
      argumentMapping = {
        implicitIndex -> (KtVariableLikeSignature:
          name = key
          receiverType = null
          returnType = kotlin.Int
          symbol = key: K
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<TYPE_MISMATCH: Type mismatch: inferred type is Int but String was expected>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KtFunctionLikeSignature:
          receiverType = kotlin.text.MatchGroupCollection
          returnType = kotlin.text.MatchGroup?
          symbol = kotlin/text/get(<extension receiver>: kotlin.text.MatchGroupCollection, name: kotlin.String): kotlin.text.MatchGroup?
          valueParameters = [
            KtVariableLikeSignature:
              name = name
              receiverType = null
              returnType = kotlin.String
              symbol = name: kotlin.String
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/text/get
      typeArgumentsMapping = {}
      argumentMapping = {
        implicitIndex -> (KtVariableLikeSignature:
          name = name
          receiverType = null
          returnType = kotlin.String
          symbol = name: kotlin.String
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

KtCallExpression(179,199): 'foo(--list[i], list)'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /foo(i: kotlin.Int, list: kotlin.collections.MutableList<kotlin.Int>): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = i
              receiverType = null
              returnType = kotlin.Int
              symbol = i: kotlin.Int
              callableIdIfNonLocal = null,
            KtVariableLikeSignature:
              name = list
              receiverType = null
              returnType = kotlin.collections.MutableList<kotlin.Int>
              symbol = list: kotlin.collections.MutableList<kotlin.Int>
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = /foo
      typeArgumentsMapping = {}
      argumentMapping = {
        --list[i] -> (KtVariableLikeSignature:
          name = i
          receiverType = null
          returnType = kotlin.Int
          symbol = i: kotlin.Int
          callableIdIfNonLocal = null),
        list -> (KtVariableLikeSignature:
          name = list
          receiverType = null
          returnType = kotlin.collections.MutableList<kotlin.Int>
          symbol = list: kotlin.collections.MutableList<kotlin.Int>
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true

KtOperationReferenceExpression(183,185): '--'
  NO_CANDIDATES

KtArrayAccessExpression(185,192): 'list[i]'
  KtApplicableCallCandidateInfo:
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/collections/MutableList.get(<dispatch receiver>: kotlin.collections.List<E>, index: kotlin.Int): E
          valueParameters = [
            KtVariableLikeSignature:
              name = index
              receiverType = null
              returnType = kotlin.Int
              symbol = index: kotlin.Int
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/collections/MutableList.get
      typeArgumentsMapping = {}
      argumentMapping = {
        i -> (KtVariableLikeSignature:
          name = index
          receiverType = null
          returnType = kotlin.Int
          symbol = index: kotlin.Int
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = true
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<null: RECEIVER_TYPE_ERROR with get>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KtFunctionLikeSignature:
          receiverType = kotlin.collections.Map<out kotlin.Int, ERROR_TYPE>
          returnType = ERROR_TYPE?
          symbol = kotlin/collections/get(<extension receiver>: kotlin.collections.Map<out K, V>, key: K): V?
          valueParameters = [
            KtVariableLikeSignature:
              name = key
              receiverType = null
              returnType = kotlin.Int
              symbol = key: K
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/collections/get
      typeArgumentsMapping = {
        K -> (kotlin.Int),
        V -> (ERROR_TYPE)
      }
      argumentMapping = {
        i -> (KtVariableLikeSignature:
          name = key
          receiverType = null
          returnType = kotlin.Int
          symbol = key: K
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false
  
  KtInapplicableCallCandidateInfo:
    diagnostic = ERROR<TYPE_MISMATCH: Type mismatch: inferred type is Int but String was expected>
    candidate = KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KtExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KtFunctionLikeSignature:
          receiverType = kotlin.text.MatchGroupCollection
          returnType = kotlin.text.MatchGroup?
          symbol = kotlin/text/get(<extension receiver>: kotlin.text.MatchGroupCollection, name: kotlin.String): kotlin.text.MatchGroup?
          valueParameters = [
            KtVariableLikeSignature:
              name = name
              receiverType = null
              returnType = kotlin.String
              symbol = name: kotlin.String
              callableIdIfNonLocal = null
          ]
          callableIdIfNonLocal = kotlin/text/get
      typeArgumentsMapping = {}
      argumentMapping = {
        i -> (KtVariableLikeSignature:
          name = name
          receiverType = null
          returnType = kotlin.String
          symbol = name: kotlin.String
          callableIdIfNonLocal = null)
      }
    isInBestCandidates = false

