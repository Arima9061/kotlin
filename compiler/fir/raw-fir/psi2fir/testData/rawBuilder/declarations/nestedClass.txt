FILE: nestedClass.kt
    public? abstract [HasEnumEntriesKey=true] class Base : R|kotlin/Any| {
        public? [ContainingClassKey=Base] constructor([CorrespondingProperty=/Base.s] s: String): R|Base| {
            super<R|kotlin/Any|>()
        }

        public? final? [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ContainingClassKey=Base] get(): String

    }
    public? final? [HasEnumEntriesKey=true] class Outer : R|kotlin/Any| {
        public? [ContainingClassKey=Outer] constructor(): R|Outer| {
            super<R|kotlin/Any|>()
        }

        public? final? [HasEnumEntriesKey=true] class Derived : Base {
            public? [ContainingClassKey=Derived] constructor(s: String): R|Outer.Derived| {
                super<Base>(s#)
            }

        }

        public? final? [HasEnumEntriesKey=true] object Obj : Base {
            private [ContainingClassKey=Obj] constructor(): R|Outer.Obj| {
                super<Base>(String())
            }

        }

    }
