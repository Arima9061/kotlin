FILE: derivedClass.kt
    public? open [HasEnumEntriesKey=true] class Base<T> : R|kotlin/Any| {
        public? [ContainingClassKey=Base] constructor<T>([CorrespondingProperty=/Base.x] x: T): R|Base<T>| {
            super<R|kotlin/Any|>()
        }

        public? final? [IsFromPrimaryConstructor=true] val x: T = R|<local>/x|
            public? [ContainingClassKey=Base] get(): T

    }
    public? final? [HasEnumEntriesKey=true] class Derived<T : Any> : Base<T> {
        public? [ContainingClassKey=Derived] constructor<T : Any>(x: T): R|Derived<T>| {
            super<Base<T>>(x#)
        }

    }
    public? final? fun <T : Any> create(x: T): Derived<T> {
        ^create Derived#(x#)
    }
