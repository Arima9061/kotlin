FILE: complexTypes.kt
    public? final? [HasEnumEntriesKey=true] class C<T, out S> : R|kotlin/Any| {
        public? [ContainingClassKey=C] constructor<T, out S>(): R|a/b/C<T, S>| {
            super<R|kotlin/Any|>()
        }

        public? final? inner [HasEnumEntriesKey=true] class D<R, in P, T, out S> : R|kotlin/Any| {
            public? [ContainingClassKey=D] a/b/C<T, S>.constructor<R, in P>(): R|a/b/C.D<R, P, T, S>| {
                super<R|kotlin/Any|>()
            }

        }

    }
    public? final? [HasEnumEntriesKey=true] interface Test : R|kotlin/Any| {
        public? final? val x: a.b.C<out CharSequence, *>.D<in List<*>, *>
            public? [ContainingClassKey=Test] get(): a.b.C<out CharSequence, *>.D<in List<*>, *>

    }
