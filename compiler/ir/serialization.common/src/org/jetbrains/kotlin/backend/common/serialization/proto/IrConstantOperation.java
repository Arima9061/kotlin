// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation}
 */
public final class IrConstantOperation extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation)
    IrConstantOperationOrBuilder {
  // Use IrConstantOperation.newBuilder() to construct.
  private IrConstantOperation(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrConstantOperation(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

  private static final IrConstantOperation defaultInstance;
  public static IrConstantOperation getDefaultInstance() {
    return defaultInstance;
  }

  public IrConstantOperation getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
  private IrConstantOperation(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
        org.jetbrains.kotlin.protobuf.ByteString.newOutput();
    org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
        org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
            unknownFieldsOutput, 1);
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive.Builder subBuilder = null;
            if (operationCase_ == 1) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive) operation_).toBuilder();
            }
            operation_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive) operation_);
              operation_ = subBuilder.buildPartial();
            }
            operationCase_ = 1;
            break;
          }
          case 18: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject.Builder subBuilder = null;
            if (operationCase_ == 2) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject) operation_).toBuilder();
            }
            operation_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject) operation_);
              operation_ = subBuilder.buildPartial();
            }
            operationCase_ = 2;
            break;
          }
          case 26: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray.Builder subBuilder = null;
            if (operationCase_ == 3) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray) operation_).toBuilder();
            }
            operation_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray) operation_);
              operation_ = subBuilder.buildPartial();
            }
            operationCase_ = 3;
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      try {
        unknownFieldsCodedOutput.flush();
      } catch (java.io.IOException e) {
      // Should not happen
      } finally {
        unknownFields = unknownFieldsOutput.toByteString();
      }
      makeExtensionsImmutable();
    }
  }
  public static org.jetbrains.kotlin.protobuf.Parser<IrConstantOperation> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrConstantOperation>() {
    public IrConstantOperation parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrConstantOperation(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrConstantOperation> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  private int operationCase_ = 0;
  private java.lang.Object operation_;
  public enum OperationCase
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
    PRIMITIVE(1),
    OBJECT(2),
    ARRAY(3),
    OPERATION_NOT_SET(0);
    private int value = 0;
    private OperationCase(int value) {
      this.value = value;
    }
    public static OperationCase valueOf(int value) {
      switch (value) {
        case 1: return PRIMITIVE;
        case 2: return OBJECT;
        case 3: return ARRAY;
        case 0: return OPERATION_NOT_SET;
        default: throw new java.lang.IllegalArgumentException(
          "Value is undefined for this oneof enum.");
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public OperationCase
  getOperationCase() {
    return OperationCase.valueOf(
        operationCase_);
  }

  public static final int PRIMITIVE_FIELD_NUMBER = 1;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive primitive = 1;</code>
   */
  public boolean hasPrimitive() {
    return operationCase_ == 1;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive primitive = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive getPrimitive() {
    if (operationCase_ == 1) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive) operation_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive.getDefaultInstance();
  }

  public static final int OBJECT_FIELD_NUMBER = 2;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject object = 2;</code>
   */
  public boolean hasObject() {
    return operationCase_ == 2;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject object = 2;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject getObject() {
    if (operationCase_ == 2) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject) operation_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject.getDefaultInstance();
  }

  public static final int ARRAY_FIELD_NUMBER = 3;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray array = 3;</code>
   */
  public boolean hasArray() {
    return operationCase_ == 3;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray array = 3;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray getArray() {
    if (operationCase_ == 3) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray) operation_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray.getDefaultInstance();
  }

  private void initFields() {
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (hasPrimitive()) {
      if (!getPrimitive().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasObject()) {
      if (!getObject().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasArray()) {
      if (!getArray().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (operationCase_ == 1) {
      output.writeMessage(1, (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive) operation_);
    }
    if (operationCase_ == 2) {
      output.writeMessage(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject) operation_);
    }
    if (operationCase_ == 3) {
      output.writeMessage(3, (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray) operation_);
    }
    output.writeRawBytes(unknownFields);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (operationCase_ == 1) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive) operation_);
    }
    if (operationCase_ == 2) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject) operation_);
    }
    if (operationCase_ == 3) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray) operation_);
    }
    size += unknownFields.size();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperationOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      operationCase_ = 0;
      operation_ = null;
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (operationCase_ == 1) {
        result.operation_ = operation_;
      }
      if (operationCase_ == 2) {
        result.operation_ = operation_;
      }
      if (operationCase_ == 3) {
        result.operation_ = operation_;
      }
      result.bitField0_ = to_bitField0_;
      result.operationCase_ = operationCase_;
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation.getDefaultInstance()) return this;
      switch (other.getOperationCase()) {
        case PRIMITIVE: {
          mergePrimitive(other.getPrimitive());
          break;
        }
        case OBJECT: {
          mergeObject(other.getObject());
          break;
        }
        case ARRAY: {
          mergeArray(other.getArray());
          break;
        }
        case OPERATION_NOT_SET: {
          break;
        }
      }
      setUnknownFields(
          getUnknownFields().concat(other.unknownFields));
      return this;
    }

    public final boolean isInitialized() {
      if (hasPrimitive()) {
        if (!getPrimitive().isInitialized()) {
          
          return false;
        }
      }
      if (hasObject()) {
        if (!getObject().isInitialized()) {
          
          return false;
        }
      }
      if (hasArray()) {
        if (!getArray().isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int operationCase_ = 0;
    private java.lang.Object operation_;
    public OperationCase
        getOperationCase() {
      return OperationCase.valueOf(
          operationCase_);
    }

    public Builder clearOperation() {
      operationCase_ = 0;
      operation_ = null;
      return this;
    }

    private int bitField0_;

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive primitive = 1;</code>
     */
    public boolean hasPrimitive() {
      return operationCase_ == 1;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive primitive = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive getPrimitive() {
      if (operationCase_ == 1) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive) operation_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive primitive = 1;</code>
     */
    public Builder setPrimitive(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive value) {
      if (value == null) {
        throw new NullPointerException();
      }
      operation_ = value;

      operationCase_ = 1;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive primitive = 1;</code>
     */
    public Builder setPrimitive(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive.Builder builderForValue) {
      operation_ = builderForValue.build();

      operationCase_ = 1;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive primitive = 1;</code>
     */
    public Builder mergePrimitive(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive value) {
      if (operationCase_ == 1 &&
          operation_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive.getDefaultInstance()) {
        operation_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive) operation_)
            .mergeFrom(value).buildPartial();
      } else {
        operation_ = value;
      }

      operationCase_ = 1;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantPrimitive primitive = 1;</code>
     */
    public Builder clearPrimitive() {
      if (operationCase_ == 1) {
        operationCase_ = 0;
        operation_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject object = 2;</code>
     */
    public boolean hasObject() {
      return operationCase_ == 2;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject object = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject getObject() {
      if (operationCase_ == 2) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject) operation_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject object = 2;</code>
     */
    public Builder setObject(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject value) {
      if (value == null) {
        throw new NullPointerException();
      }
      operation_ = value;

      operationCase_ = 2;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject object = 2;</code>
     */
    public Builder setObject(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject.Builder builderForValue) {
      operation_ = builderForValue.build();

      operationCase_ = 2;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject object = 2;</code>
     */
    public Builder mergeObject(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject value) {
      if (operationCase_ == 2 &&
          operation_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject.getDefaultInstance()) {
        operation_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject) operation_)
            .mergeFrom(value).buildPartial();
      } else {
        operation_ = value;
      }

      operationCase_ = 2;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject object = 2;</code>
     */
    public Builder clearObject() {
      if (operationCase_ == 2) {
        operationCase_ = 0;
        operation_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray array = 3;</code>
     */
    public boolean hasArray() {
      return operationCase_ == 3;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray array = 3;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray getArray() {
      if (operationCase_ == 3) {
        return (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray) operation_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray.getDefaultInstance();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray array = 3;</code>
     */
    public Builder setArray(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray value) {
      if (value == null) {
        throw new NullPointerException();
      }
      operation_ = value;

      operationCase_ = 3;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray array = 3;</code>
     */
    public Builder setArray(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray.Builder builderForValue) {
      operation_ = builderForValue.build();

      operationCase_ = 3;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray array = 3;</code>
     */
    public Builder mergeArray(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray value) {
      if (operationCase_ == 3 &&
          operation_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray.getDefaultInstance()) {
        operation_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray) operation_)
            .mergeFrom(value).buildPartial();
      } else {
        operation_ = value;
      }

      operationCase_ = 3;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantArray array = 3;</code>
     */
    public Builder clearArray() {
      if (operationCase_ == 3) {
        operationCase_ = 0;
        operation_ = null;
        
      }
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation)
  }

  static {
    defaultInstance = new IrConstantOperation(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantOperation)
}
