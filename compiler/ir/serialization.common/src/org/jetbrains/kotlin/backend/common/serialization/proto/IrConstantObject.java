// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject}
 */
public final class IrConstantObject extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject)
    IrConstantObjectOrBuilder {
  // Use IrConstantObject.newBuilder() to construct.
  private IrConstantObject(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrConstantObject(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

  private static final IrConstantObject defaultInstance;
  public static IrConstantObject getDefaultInstance() {
    return defaultInstance;
  }

  public IrConstantObject getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
  private IrConstantObject(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
        org.jetbrains.kotlin.protobuf.ByteString.newOutput();
    org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
        org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
            unknownFieldsOutput, 1);
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            constructorSymbol_ = input.readInt64();
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              valueArguments_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue>();
              mutable_bitField0_ |= 0x00000002;
            }
            valueArguments_.add(input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue.PARSER, extensionRegistry));
            break;
          }
          case 24: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              typeArguments_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000004;
            }
            typeArguments_.add(input.readInt32());
            break;
          }
          case 26: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
              typeArguments_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000004;
            }
            while (input.getBytesUntilLimit() > 0) {
              typeArguments_.add(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        valueArguments_ = java.util.Collections.unmodifiableList(valueArguments_);
      }
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        typeArguments_ = java.util.Collections.unmodifiableList(typeArguments_);
      }
      try {
        unknownFieldsCodedOutput.flush();
      } catch (java.io.IOException e) {
      // Should not happen
      } finally {
        unknownFields = unknownFieldsOutput.toByteString();
      }
      makeExtensionsImmutable();
    }
  }
  public static org.jetbrains.kotlin.protobuf.Parser<IrConstantObject> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrConstantObject>() {
    public IrConstantObject parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrConstantObject(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrConstantObject> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int CONSTRUCTOR_SYMBOL_FIELD_NUMBER = 1;
  private long constructorSymbol_;
  /**
   * <code>required int64 constructor_symbol = 1;</code>
   */
  public boolean hasConstructorSymbol() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required int64 constructor_symbol = 1;</code>
   */
  public long getConstructorSymbol() {
    return constructorSymbol_;
  }

  public static final int VALUE_ARGUMENTS_FIELD_NUMBER = 2;
  private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue> valueArguments_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
   */
  public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue> getValueArgumentsList() {
    return valueArguments_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
   */
  public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValueOrBuilder> 
      getValueArgumentsOrBuilderList() {
    return valueArguments_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
   */
  public int getValueArgumentsCount() {
    return valueArguments_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue getValueArguments(int index) {
    return valueArguments_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValueOrBuilder getValueArgumentsOrBuilder(
      int index) {
    return valueArguments_.get(index);
  }

  public static final int TYPE_ARGUMENTS_FIELD_NUMBER = 3;
  private java.util.List<java.lang.Integer> typeArguments_;
  /**
   * <code>repeated int32 type_arguments = 3;</code>
   */
  public java.util.List<java.lang.Integer>
      getTypeArgumentsList() {
    return typeArguments_;
  }
  /**
   * <code>repeated int32 type_arguments = 3;</code>
   */
  public int getTypeArgumentsCount() {
    return typeArguments_.size();
  }
  /**
   * <code>repeated int32 type_arguments = 3;</code>
   */
  public int getTypeArguments(int index) {
    return typeArguments_.get(index);
  }

  private void initFields() {
    constructorSymbol_ = 0L;
    valueArguments_ = java.util.Collections.emptyList();
    typeArguments_ = java.util.Collections.emptyList();
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasConstructorSymbol()) {
      memoizedIsInitialized = 0;
      return false;
    }
    for (int i = 0; i < getValueArgumentsCount(); i++) {
      if (!getValueArguments(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt64(1, constructorSymbol_);
    }
    for (int i = 0; i < valueArguments_.size(); i++) {
      output.writeMessage(2, valueArguments_.get(i));
    }
    for (int i = 0; i < typeArguments_.size(); i++) {
      output.writeInt32(3, typeArguments_.get(i));
    }
    output.writeRawBytes(unknownFields);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(1, constructorSymbol_);
    }
    for (int i = 0; i < valueArguments_.size(); i++) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(2, valueArguments_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < typeArguments_.size(); i++) {
        dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(typeArguments_.get(i));
      }
      size += dataSize;
      size += 1 * getTypeArgumentsList().size();
    }
    size += unknownFields.size();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObjectOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      constructorSymbol_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000001);
      valueArguments_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      typeArguments_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.constructorSymbol_ = constructorSymbol_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        valueArguments_ = java.util.Collections.unmodifiableList(valueArguments_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.valueArguments_ = valueArguments_;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        typeArguments_ = java.util.Collections.unmodifiableList(typeArguments_);
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.typeArguments_ = typeArguments_;
      result.bitField0_ = to_bitField0_;
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject.getDefaultInstance()) return this;
      if (other.hasConstructorSymbol()) {
        setConstructorSymbol(other.getConstructorSymbol());
      }
      if (!other.valueArguments_.isEmpty()) {
        if (valueArguments_.isEmpty()) {
          valueArguments_ = other.valueArguments_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureValueArgumentsIsMutable();
          valueArguments_.addAll(other.valueArguments_);
        }
        
      }
      if (!other.typeArguments_.isEmpty()) {
        if (typeArguments_.isEmpty()) {
          typeArguments_ = other.typeArguments_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureTypeArgumentsIsMutable();
          typeArguments_.addAll(other.typeArguments_);
        }
        
      }
      setUnknownFields(
          getUnknownFields().concat(other.unknownFields));
      return this;
    }

    public final boolean isInitialized() {
      if (!hasConstructorSymbol()) {
        
        return false;
      }
      for (int i = 0; i < getValueArgumentsCount(); i++) {
        if (!getValueArguments(i).isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private long constructorSymbol_ ;
    /**
     * <code>required int64 constructor_symbol = 1;</code>
     */
    public boolean hasConstructorSymbol() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 constructor_symbol = 1;</code>
     */
    public long getConstructorSymbol() {
      return constructorSymbol_;
    }
    /**
     * <code>required int64 constructor_symbol = 1;</code>
     */
    public Builder setConstructorSymbol(long value) {
      bitField0_ |= 0x00000001;
      constructorSymbol_ = value;
      
      return this;
    }
    /**
     * <code>required int64 constructor_symbol = 1;</code>
     */
    public Builder clearConstructorSymbol() {
      bitField0_ = (bitField0_ & ~0x00000001);
      constructorSymbol_ = 0L;
      
      return this;
    }

    private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue> valueArguments_ =
      java.util.Collections.emptyList();
    private void ensureValueArgumentsIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        valueArguments_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue>(valueArguments_);
        bitField0_ |= 0x00000002;
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue> getValueArgumentsList() {
      return java.util.Collections.unmodifiableList(valueArguments_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
     */
    public int getValueArgumentsCount() {
      return valueArguments_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue getValueArguments(int index) {
      return valueArguments_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
     */
    public Builder setValueArguments(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureValueArgumentsIsMutable();
      valueArguments_.set(index, value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
     */
    public Builder setValueArguments(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue.Builder builderForValue) {
      ensureValueArgumentsIsMutable();
      valueArguments_.set(index, builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
     */
    public Builder addValueArguments(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureValueArgumentsIsMutable();
      valueArguments_.add(value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
     */
    public Builder addValueArguments(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureValueArgumentsIsMutable();
      valueArguments_.add(index, value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
     */
    public Builder addValueArguments(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue.Builder builderForValue) {
      ensureValueArgumentsIsMutable();
      valueArguments_.add(builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
     */
    public Builder addValueArguments(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue.Builder builderForValue) {
      ensureValueArgumentsIsMutable();
      valueArguments_.add(index, builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
     */
    public Builder addAllValueArguments(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue> values) {
      ensureValueArgumentsIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, valueArguments_);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
     */
    public Builder clearValueArguments() {
      valueArguments_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantValue value_arguments = 2;</code>
     */
    public Builder removeValueArguments(int index) {
      ensureValueArgumentsIsMutable();
      valueArguments_.remove(index);

      return this;
    }

    private java.util.List<java.lang.Integer> typeArguments_ = java.util.Collections.emptyList();
    private void ensureTypeArgumentsIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        typeArguments_ = new java.util.ArrayList<java.lang.Integer>(typeArguments_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <code>repeated int32 type_arguments = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getTypeArgumentsList() {
      return java.util.Collections.unmodifiableList(typeArguments_);
    }
    /**
     * <code>repeated int32 type_arguments = 3;</code>
     */
    public int getTypeArgumentsCount() {
      return typeArguments_.size();
    }
    /**
     * <code>repeated int32 type_arguments = 3;</code>
     */
    public int getTypeArguments(int index) {
      return typeArguments_.get(index);
    }
    /**
     * <code>repeated int32 type_arguments = 3;</code>
     */
    public Builder setTypeArguments(
        int index, int value) {
      ensureTypeArgumentsIsMutable();
      typeArguments_.set(index, value);
      
      return this;
    }
    /**
     * <code>repeated int32 type_arguments = 3;</code>
     */
    public Builder addTypeArguments(int value) {
      ensureTypeArgumentsIsMutable();
      typeArguments_.add(value);
      
      return this;
    }
    /**
     * <code>repeated int32 type_arguments = 3;</code>
     */
    public Builder addAllTypeArguments(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureTypeArgumentsIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, typeArguments_);
      
      return this;
    }
    /**
     * <code>repeated int32 type_arguments = 3;</code>
     */
    public Builder clearTypeArguments() {
      typeArguments_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject)
  }

  static {
    defaultInstance = new IrConstantObject(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrConstantObject)
}
