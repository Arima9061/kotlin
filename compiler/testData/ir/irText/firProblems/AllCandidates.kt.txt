// CHECK:
//   Mangled name: ResolvedCall
//   Public signature: /ResolvedCall|null[0]
class ResolvedCall<C : Any?> {
  // CHECK:
  //   Mangled name: ResolvedCall#<init>(){}
  //   Public signature: /ResolvedCall.<init>|-5645683436151566731[0]
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

// CHECK:
//   Mangled name: MyCandidate
//   Public signature: /MyCandidate|null[0]
class MyCandidate {
  // CHECK:
  //   Mangled name: MyCandidate#<init>(ResolvedCall<*>){}
  //   Public signature: /MyCandidate.<init>|-1587603405695784398[0]
  constructor(resolvedCall: ResolvedCall<*>) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: MyCandidate{}resolvedCall
  //   Public signature: /MyCandidate.resolvedCall|-2429780263902948392[0]
  val resolvedCall: ResolvedCall<*>
    field = resolvedCall
    // CHECK:
    //   Mangled name: MyCandidate#<get-resolvedCall>(){}ResolvedCall<*>
    //   Public signature: /MyCandidate.resolvedCall.<get-resolvedCall>|2961495013206965605[0]
    get

}

// CHECK:
//   Mangled name: #allCandidatesResult(kotlin.collections.Collection<MyCandidate>){0ยง<kotlin.Any?>}OverloadResolutionResultsImpl<0:0?>?
//   Public signature: [ File 'AllCandidates.kt' <- /allCandidatesResult|-4417746287859138452[0] ]
private fun <A : Any?> allCandidatesResult(allCandidates: Collection<MyCandidate>): @FlexibleNullability OverloadResolutionResultsImpl<@FlexibleNullability A?>? {
  return nameNotFound<@FlexibleNullability A?>().apply<@FlexibleNullability OverloadResolutionResultsImpl<@FlexibleNullability A?>?>(block = 
    // CHECK:
    //   Mangled name: #allCandidatesResult(kotlin.collections.Collection<MyCandidate>){0ยง<kotlin.Any?>}OverloadResolutionResultsImpl<1:0?>?#<anonymous>#static@OverloadResolutionResultsImpl<1:0?>?(){}
    local fun @FlexibleNullability OverloadResolutionResultsImpl<@FlexibleNullability A?>?.<anonymous>() {
      $this$apply /*!! OverloadResolutionResultsImpl<@FlexibleNullability A?> */.setAllCandidates<@FlexibleNullability A?>(allCandidates = allCandidates.map<MyCandidate, ResolvedCall<A>>(transform = 
        // CHECK:
        //   Mangled name: #allCandidatesResult(kotlin.collections.Collection<MyCandidate>){0ยง<kotlin.Any?>}OverloadResolutionResultsImpl<2:0?>?#<anonymous>#static@OverloadResolutionResultsImpl<2:0?>?(){}#<anonymous>#static(MyCandidate){}ResolvedCall<2:0>
        local fun <anonymous>(it: MyCandidate): ResolvedCall<A> {
          return it.<get-resolvedCall>() as ResolvedCall<A>
        }
))
    }
)
}

