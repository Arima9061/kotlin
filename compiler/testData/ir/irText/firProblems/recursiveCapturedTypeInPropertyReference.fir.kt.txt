// CHECK:
//   Mangled name: Something
//   Public signature: /Something|null[0]
interface Something {

}

// CHECK:
//   Mangled name: Recursive
//   Public signature: /Recursive|null[0]
interface Recursive<R> where R : Recursive<R>, R : Something {
  // CHECK:
  //   Mangled name: Recursive{}symbol
  //   Public signature: /Recursive.symbol|-2022127689160258603[0]
  abstract val symbol: AbstractSymbol<R>
    // CHECK:
    //   Mangled name: Recursive#<get-symbol>(){}AbstractSymbol<1:0>
    //   Public signature: /Recursive.symbol.<get-symbol>|6872691415411276539[0]
    abstract get

}

// CHECK:
//   Mangled name: AbstractSymbol
//   Public signature: /AbstractSymbol|null[0]
abstract class AbstractSymbol<E> where E : Recursive<E>, E : Something {
  // CHECK:
  //   Mangled name: AbstractSymbol#<init>(){}
  //   Public signature: /AbstractSymbol.<init>|-5645683436151566731[0]
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: AbstractSymbol#foo(kotlin.collections.List<kotlin.Any>){}
  //   Public signature: /AbstractSymbol.foo|-4032272801520658510[0]
  fun foo(list: List<Any>) {
    val result: List<AbstractSymbol<*>> = list.filterIsInstance<Recursive<*>>().map<Recursive<*>, AbstractSymbol<*>>(transform = Recursive::symbol)
  }

}

