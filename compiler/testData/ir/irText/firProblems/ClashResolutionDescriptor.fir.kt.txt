// CHECK:
//   Mangled name: ComponentContainer
//   Public signature: /ComponentContainer|null[0]
interface ComponentContainer {

}

// CHECK:
//   Mangled name: PlatformSpecificExtension
//   Public signature: /PlatformSpecificExtension|null[0]
interface PlatformSpecificExtension<S : PlatformSpecificExtension<S>> {

}

// CHECK:
//   Mangled name: ComponentDescriptor
//   Public signature: /ComponentDescriptor|null[0]
interface ComponentDescriptor {

}

// CHECK:
//   Mangled name: PlatformExtensionsClashResolver
//   Public signature: /PlatformExtensionsClashResolver|null[0]
abstract class PlatformExtensionsClashResolver<E : PlatformSpecificExtension<E>> {
  // CHECK:
  //   Mangled name computed from Ir:         PlatformExtensionsClashResolver#<init>(java.lang.Class<1:0>){}
  //   Mangled name computed from Descriptor: PlatformExtensionsClashResolver#<init>(java.lang.Class<1:0>){}
  //   Mangled name computed from Fir:        PlatformExtensionsClashResolver#<init>(java.lang.Class<0:-1>){}
  //   Public signature: /PlatformExtensionsClashResolver.<init>|1415124429968984504[0]
  constructor(applicableTo: Class<E>) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: PlatformExtensionsClashResolver{}applicableTo
  //   Public signature: /PlatformExtensionsClashResolver.applicableTo|6029537505993816165[0]
  val applicableTo: Class<E>
    field = applicableTo
    // CHECK:
    //   Mangled name: PlatformExtensionsClashResolver#<get-applicableTo>(){}java.lang.Class<1:0>
    //   Public signature: /PlatformExtensionsClashResolver.applicableTo.<get-applicableTo>|7304285895281171874[0]
    get

}

// CHECK:
//   Mangled name: ClashResolutionDescriptor
//   Public signature: /ClashResolutionDescriptor|null[0]
class ClashResolutionDescriptor<E : PlatformSpecificExtension<E>> {
  // CHECK:
  //   Mangled name computed from Ir:         ClashResolutionDescriptor#<init>(ComponentContainer;PlatformExtensionsClashResolver<1:0>;kotlin.collections.List<ComponentDescriptor>){}
  //   Mangled name computed from Descriptor: ClashResolutionDescriptor#<init>(ComponentContainer;PlatformExtensionsClashResolver<1:0>;kotlin.collections.List<ComponentDescriptor>){}
  //   Mangled name computed from Fir:        ClashResolutionDescriptor#<init>(ComponentContainer;PlatformExtensionsClashResolver<0:-1>;kotlin.collections.List<ComponentDescriptor>){}
  //   Public signature: /ClashResolutionDescriptor.<init>|-8601592719188932782[0]
  constructor(container: ComponentContainer, resolver: PlatformExtensionsClashResolver<E>, clashedComponents: List<ComponentDescriptor>) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: ClashResolutionDescriptor{}resolver
  //   Public signature: /ClashResolutionDescriptor.resolver|8912854618409758647[0]
  private val resolver: PlatformExtensionsClashResolver<E>
    field = resolver
    // CHECK:
    //   Mangled name: ClashResolutionDescriptor#<get-resolver>(){}PlatformExtensionsClashResolver<1:0>
    //   Public signature: /ClashResolutionDescriptor.resolver.<get-resolver>|3490691458597764818[0]
    private get

  // CHECK:
  //   Mangled name: ClashResolutionDescriptor{}clashedComponents
  //   Public signature: /ClashResolutionDescriptor.clashedComponents|1468680588633000446[0]
  private val clashedComponents: List<ComponentDescriptor>
    field = clashedComponents
    // CHECK:
    //   Mangled name: ClashResolutionDescriptor#<get-clashedComponents>(){}kotlin.collections.List<ComponentDescriptor>
    //   Public signature: /ClashResolutionDescriptor.clashedComponents.<get-clashedComponents>|-246985097775886667[0]
    private get

}

// CHECK:
//   Mangled name: {}registrationMap
//   Public signature: [ File '<unknown>' <- /registrationMap|8184441143918876435[0] ]
private val registrationMap: HashMap<Type, Any>
  field = hashMapOf<Type, Any>()
  // CHECK:
  //   Mangled name: #<get-registrationMap>(){}java.util.HashMap<java.lang.reflect.Type,kotlin.Any>
  //   Public signature: [ File '<unknown>' <- /registrationMap.<get-registrationMap>|3119298927482099509[0] ]
  private get

// CHECK:
//   Mangled name: #resolveClashesIfAny(ComponentContainer;kotlin.collections.List<PlatformExtensionsClashResolver<*>>){}
//   Public signature: /resolveClashesIfAny|1954676013070349118[0]
fun resolveClashesIfAny(container: ComponentContainer, clashResolvers: List<PlatformExtensionsClashResolver<*>>) {
  { // BLOCK
    val <iterator>: Iterator<PlatformExtensionsClashResolver<*>> = clashResolvers.iterator()
    while (<iterator>.hasNext()) { // BLOCK
      val resolver: PlatformExtensionsClashResolver<*> = <iterator>.next()
      { // BLOCK
        val clashedComponents: Collection<ComponentDescriptor> = { // BLOCK
          val <elvis>: Collection<ComponentDescriptor>? = <get-registrationMap>().get(p0 = resolver.<get-applicableTo>()) as? Collection<ComponentDescriptor>
          when {
            EQEQ(arg0 = <elvis>, arg1 = null) -> continue
            else -> <elvis>
          }
        }
        val substituteDescriptor: ClashResolutionDescriptor<out PlatformSpecificExtension<out PlatformSpecificExtension<out PlatformSpecificExtension<out PlatformSpecificExtension<out PlatformSpecificExtension<out Any?>>>>>> = ClashResolutionDescriptor<PlatformSpecificExtension<out PlatformSpecificExtension<out PlatformSpecificExtension<out PlatformSpecificExtension<out PlatformSpecificExtension<out Any?>>>>>>(container = container, resolver = resolver, clashedComponents = clashedComponents.toList<ComponentDescriptor>())
      }
    }
  }
}

