// CHECK:
//   Mangled name: Context
//   Public signature: /Context|null[0]
class Context {
  // CHECK:
  //   Mangled name: Context#<init>(){}
  //   Public signature: /Context.<init>|-5645683436151566731[0]
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: Context#c(){}kotlin.Int
  //   Public signature: /Context.c|-7090409735962961857[0]
  fun c(): Int {
    return 1
  }

}

// CHECK:
//   Mangled name computed from Ir:         #testInline(Context){}kotlin.Int
//   Mangled name computed from Descriptor: #testInline!Context(){}kotlin.Int
//   Public signature: /testInline|2700554304824268037[0]
inline fun testInline($context_receiver_0: Context): Int {
  return $context_receiver_0.c()
}

// CHECK:
//   Mangled name computed from Ir:         #testInlineWithArg(Context;kotlin.Int){}kotlin.Int
//   Mangled name computed from Descriptor: #testInlineWithArg!Context(kotlin.Int){}kotlin.Int
//   Public signature: /testInlineWithArg|9204994988875814257[0]
inline fun testInlineWithArg($context_receiver_0: Context, i: Int): Int {
  return i.plus(other = $context_receiver_0.c())
}

// CHECK:
//   Mangled name computed from Ir:         #testInlineWithExtensionAndArg@kotlin.Int(Context;kotlin.Int){}kotlin.Int
//   Mangled name computed from Descriptor: #testInlineWithExtensionAndArg!Context@kotlin.Int(kotlin.Int){}kotlin.Int
//   Public signature: /testInlineWithExtensionAndArg|-7753885706218316674[0]
inline fun Int.testInlineWithExtensionAndArg($context_receiver_0: Context, i: Int): Int {
  return <this>.plus(other = i).plus(other = $context_receiver_0.c())
}

// CHECK:
//   Mangled name computed from Ir:         #testInlineWithExtensionAndMultipleArgs@kotlin.Int(Context;kotlin.Int;kotlin.Int){}kotlin.Int
//   Mangled name computed from Descriptor: #testInlineWithExtensionAndMultipleArgs!Context@kotlin.Int(kotlin.Int;kotlin.Int){}kotlin.Int
//   Public signature: /testInlineWithExtensionAndMultipleArgs|6839067967550411636[0]
inline fun Int.testInlineWithExtensionAndMultipleArgs($context_receiver_0: Context, i1: Int, i2: Int): Int {
  return <this>.plus(other = i1).plus(other = i2).plus(other = $context_receiver_0.c())
}

// CHECK:
//   Mangled name: A
//   Public signature: /A|null[0]
class A {
  // CHECK:
  //   Mangled name: A#<init>(kotlin.Any?){}
  //   Public signature: /A.<init>|-8205545948568413246[0]
  constructor(a: Any?) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: A{}a
  //   Public signature: /A.a|-1200697420457237799[0]
  val a: Any?
    field = a
    // CHECK:
    //   Mangled name: A#<get-a>(){}kotlin.Any?
    //   Public signature: /A.a.<get-a>|-5253003527138676623[0]
    get

}

// CHECK:
//   Mangled name computed from Ir:         #testInlineWithExtensionAndMultipleContextsAndArgs@kotlin.Int(Context;A;kotlin.Int;kotlin.Int){}kotlin.Int
//   Mangled name computed from Descriptor: #testInlineWithExtensionAndMultipleContextsAndArgs!Context!A@kotlin.Int(kotlin.Int;kotlin.Int){}kotlin.Int
//   Public signature: /testInlineWithExtensionAndMultipleContextsAndArgs|4315160499148454711[0]
inline fun Int.testInlineWithExtensionAndMultipleContextsAndArgs($context_receiver_0: Context, $context_receiver_1: A, i1: Int = 1, i2: Int = 2): Int {
  return <this>.plus(other = i1).plus(other = i2).plus(other = $context_receiver_0.c()).plus(other = when {
    EQEQ(arg0 = $context_receiver_1.<get-a>(), arg1 = null) -> 0
    else -> 1
  })
}

// CHECK:
//   Mangled name: #box(){}kotlin.String
//   Public signature: /box|-9347091776561469[0]
fun box(): String {
  return with<Context, Nothing>(receiver = Context(), block = 
    // CHECK:
    //   Mangled name: #box(){}kotlin.String#<anonymous>#static@Context(){}kotlin.Nothing
    local fun Context.<anonymous>(): Nothing {
      var result: Int = 0
      result = result.plus(other = testInline($context_receiver_0 = $this$with))
      result = result.plus(other = testInlineWithArg($context_receiver_0 = $this$with, i = 1))
      result = result.plus(other = 1.testInlineWithExtensionAndArg($context_receiver_0 = $this$with, i = 1))
      result = result.plus(other = 1.testInlineWithExtensionAndMultipleArgs($context_receiver_0 = $this$with, i1 = 1, i2 = 2))
      with<A, Unit>(receiver = A(a = 1), block = 
        // CHECK:
        //   Mangled name: #box(){}kotlin.String#<anonymous>#static@Context(){}kotlin.Nothing#<anonymous>#static@A(){}
        local fun A.<anonymous>() {
          result = result.plus(other = 1.testInlineWithExtensionAndMultipleContextsAndArgs($context_receiver_0 = $this$with, $context_receiver_1 = $this$with, i1 = 1, i2 = 2))
          result = result.plus(other = 1.testInlineWithExtensionAndMultipleContextsAndArgs($context_receiver_0 = $this$with, $context_receiver_1 = $this$with))
        }
)
      return when {
        EQEQ(arg0 = result, arg1 = 23) -> "OK"
        else -> "fail"
      }
    }
)
}

