// CHECK:
//   Mangled name: Result
//   Public signature: /Result|null[0]
data class Result {
  // CHECK:
  //   Mangled name: Result#<init>(kotlin.Int){}
  //   Public signature: /Result.<init>|-5182794243525578284[0]
  constructor(i: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: Result{}i
  //   Public signature: /Result.i|5014384761142332495[0]
  val i: Int
    field = i
    // CHECK:
    //   Mangled name: Result#<get-i>(){}kotlin.Int
    //   Public signature: /Result.i.<get-i>|-8784396159001927527[0]
    get

  // CHECK:
  //   Mangled name: Result#component1(){}kotlin.Int
  //   Public signature: /Result.component1|-8217597213800111288[0]
  operator fun component1(): Int {
    return <this>.#i
  }

  // CHECK:
  //   Mangled name: Result#copy(kotlin.Int){}Result
  //   Public signature: /Result.copy|5439238034196076859[0]
  fun copy(i: Int = <this>.#i): Result {
    return Result(i = i)
  }

  // CHECK:
  //   Mangled name: Result#toString(){}kotlin.String
  //   Public signature: /Result.toString|6958853723545266802[0]
  override fun toString(): String {
    return "Result(" + "i=" + <this>.#i + ")"
  }

  // CHECK:
  //   Mangled name: Result#hashCode(){}kotlin.Int
  //   Public signature: /Result.hashCode|-8048879360829830756[0]
  override fun hashCode(): Int {
    return <this>.#i.hashCode()
  }

  // CHECK:
  //   Mangled name: Result#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /Result.equals|722809408929142791[0]
  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is Result -> return false
    }
    val tmp0_other_with_cast: Result = other as Result
    when {
      EQEQ(arg0 = <this>.#i, arg1 = tmp0_other_with_cast.#i).not() -> return false
    }
    return true
  }

}

// CHECK:
//   Mangled name: {}operationScore
//   Public signature: /operationScore|-9073278321118823634[0]
var operationScore: Int
  field = 0
  // CHECK:
  //   Mangled name: #<get-operationScore>(){}kotlin.Int
  //   Public signature: /operationScore.<get-operationScore>|7107010356269447258[0]
  get
  // CHECK:
  //   Mangled name: #<set-operationScore>(kotlin.Int){}
  //   Public signature: /operationScore.<set-operationScore>|1936076120216071025[0]
  set

// CHECK:
//   Mangled name computed from Ir:         #unaryMinus@Result(kotlin.Int){}Result
//   Mangled name computed from Descriptor: #unaryMinus!kotlin.Int@Result(){}Result
//   Public signature: /unaryMinus|-8891797954767898088[0]
operator fun Result.unaryMinus($context_receiver_0: Int): Result {
  { // BLOCK
    <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  }
  return Result(i = <this>.<get-i>().unaryMinus())
}

// CHECK:
//   Mangled name computed from Ir:         #unaryPlus@Result(kotlin.Int){}Result
//   Mangled name computed from Descriptor: #unaryPlus!kotlin.Int@Result(){}Result
//   Public signature: /unaryPlus|6329022242309077522[0]
operator fun Result.unaryPlus($context_receiver_0: Int): Result {
  { // BLOCK
    <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  }
  return Result(i = when {
    less(arg0 = <this>.<get-i>(), arg1 = 0) -> <this>.<get-i>().unaryMinus()
    else -> <this>.<get-i>()
  })
}

// CHECK:
//   Mangled name computed from Ir:         #inc@Result(kotlin.Int){}Result
//   Mangled name computed from Descriptor: #inc!kotlin.Int@Result(){}Result
//   Public signature: /inc|-6349683016158919485[0]
operator fun Result.inc($context_receiver_0: Int): Result {
  { // BLOCK
    <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  }
  return Result(i = <this>.<get-i>().plus(other = 1))
}

// CHECK:
//   Mangled name computed from Ir:         #dec@Result(kotlin.Int){}Result
//   Mangled name computed from Descriptor: #dec!kotlin.Int@Result(){}Result
//   Public signature: /dec|6054584114651390969[0]
operator fun Result.dec($context_receiver_0: Int): Result {
  { // BLOCK
    <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  }
  return Result(i = <this>.<get-i>().minus(other = 1))
}

// CHECK:
//   Mangled name: #box(){}kotlin.String
//   Public signature: /box|-9347091776561469[0]
fun box(): String {
  var result: Result = Result(i = 0)
  with<Int, Result>(receiver = 1, block = 
    // CHECK:
    //   Mangled name: #box(){}kotlin.String#<anonymous>#static@kotlin.Int(){}Result
    local fun Int.<anonymous>(): Result {
      { // BLOCK
        val tmp0: Result = result
        result = tmp0.inc($context_receiver_0 = $this$with)
        tmp0
      } /*~> Unit */
      { // BLOCK
        val tmp1: Result = result
        result = tmp1.inc($context_receiver_0 = $this$with)
        tmp1
      } /*~> Unit */
      result.unaryMinus($context_receiver_0 = $this$with) /*~> Unit */
      result.unaryPlus($context_receiver_0 = $this$with) /*~> Unit */
      return { // BLOCK
        val tmp2: Result = result
        result = tmp2.dec($context_receiver_0 = $this$with)
        tmp2
      }
    }
) /*~> Unit */
  return when {
    when {
      EQEQ(arg0 = result.<get-i>(), arg1 = 1) -> EQEQ(arg0 = <get-operationScore>(), arg1 = 5)
      else -> false
    } -> "OK"
    else -> "fail"
  }
}

