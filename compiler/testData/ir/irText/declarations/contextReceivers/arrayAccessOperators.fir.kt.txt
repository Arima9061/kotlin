// CHECK:
//   Mangled name: MyContainer
//   Public signature: /MyContainer|null[0]
data class MyContainer {
  // CHECK:
  //   Mangled name: MyContainer#<init>(kotlin.String){}
  //   Public signature: /MyContainer.<init>|1280618353163213788[0]
  constructor(s: String) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: MyContainer{}s
  //   Public signature: /MyContainer.s|7217541905509134881[0]
  var s: String
    field = s
    // CHECK:
    //   Mangled name: MyContainer#<get-s>(){}kotlin.String
    //   Public signature: /MyContainer.s.<get-s>|4142379646177092803[0]
    get
    // CHECK:
    //   Mangled name: MyContainer#<set-s>(kotlin.String){}
    //   Public signature: /MyContainer.s.<set-s>|8225901422521337963[0]
    set

  // CHECK:
  //   Mangled name: MyContainer#component1(){}kotlin.String
  //   Public signature: /MyContainer.component1|-7481405593404337796[0]
  operator fun component1(): String {
    return <this>.#s
  }

  // CHECK:
  //   Mangled name: MyContainer#copy(kotlin.String){}MyContainer
  //   Public signature: /MyContainer.copy|-9194766205182052641[0]
  fun copy(s: String = <this>.#s): MyContainer {
    return MyContainer(s = s)
  }

  // CHECK:
  //   Mangled name: MyContainer#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /MyContainer.equals|722809408929142791[0]
  override fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is MyContainer -> return false
    }
    val tmp0_other_with_cast: MyContainer = other as MyContainer
    when {
      EQEQ(arg0 = <this>.#s, arg1 = tmp0_other_with_cast.#s).not() -> return false
    }
    return true
  }

  // CHECK:
  //   Mangled name: MyContainer#hashCode(){}kotlin.Int
  //   Public signature: /MyContainer.hashCode|-8048879360829830756[0]
  override fun hashCode(): Int {
    return <this>.#s.hashCode()
  }

  // CHECK:
  //   Mangled name: MyContainer#toString(){}kotlin.String
  //   Public signature: /MyContainer.toString|6958853723545266802[0]
  override fun toString(): String {
    return "MyContainer(s=" + <this>.#s + ")"
  }

}

// CHECK:
//   Mangled name computed from Ir:         #get@MyContainer(kotlin.Int;kotlin.Int){}kotlin.String?
//   Mangled name computed from Descriptor: #get@MyContainer(kotlin.Int;kotlin.Int){}kotlin.String?
//   Mangled name computed from Fir:        #get!kotlin.Int@MyContainer(kotlin.Int){}kotlin.String?
//   Public signature: /get|-262764729710480185[0]
operator fun MyContainer.get($context_receiver_0: Int, index: Int): String? {
  return when {
    when {
      EQEQ(arg0 = index, arg1 = 0) -> EQEQ(arg0 = $context_receiver_0, arg1 = 42)
      else -> false
    } -> <this>.<get-s>()
    else -> null
  }
}

// CHECK:
//   Mangled name computed from Ir:         #set@MyContainer(kotlin.Int;kotlin.Int;kotlin.String){}
//   Mangled name computed from Descriptor: #set@MyContainer(kotlin.Int;kotlin.Int;kotlin.String){}
//   Mangled name computed from Fir:        #set!kotlin.Int@MyContainer(kotlin.Int;kotlin.String){}
//   Public signature: /set|1694887052182048775[0]
operator fun MyContainer.set($context_receiver_0: Int, index: Int, value: String) {
  when {
    when {
      EQEQ(arg0 = index, arg1 = 0).not() -> true
      else -> EQEQ(arg0 = $context_receiver_0, arg1 = 42).not()
    } -> return Unit
  }
  <this>.<set-s>(<set-?> = value)
}

// CHECK:
//   Mangled name: #box(){}kotlin.String
//   Public signature: /box|-9347091776561469[0]
fun box(): String {
  return with<Int, String>(receiver = 42, block = 
    // CHECK:
    //   Mangled name computed from Ir:         #box(){}kotlin.String#<anonymous>#static@kotlin.Int(){}kotlin.String
    //   Mangled name computed from Descriptor: #box(){}kotlin.String#<anonymous>#static@kotlin.Int(){}kotlin.String
    //   Mangled name computed from Fir:        could not compute mangled name: java.lang.IllegalStateException: unexpected element with@fun R|kotlin/Int|.<anonymous>(): R|kotlin/String| <inline=Inline, kind=EXACTLY_ONCE>  {... (truncated)
    local fun Int.<anonymous>(): String {
      val myContainer: MyContainer = MyContainer(s = "fail")
      myContainer.set($context_receiver_0 = $this$with, index = 0, value = "OK")
      return { // BLOCK
        val <elvis>: String? = myContainer.get($context_receiver_0 = $this$with, index = 0)
        when {
          EQEQ(arg0 = <elvis>, arg1 = null) -> "fail"
          else -> <elvis>
        }
      }
    }
)
}

