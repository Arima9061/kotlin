// CHECK:
//   Mangled name: MyContainer
//   Public signature: /MyContainer|null[0]
data class MyContainer {
  // CHECK:
  //   Mangled name: MyContainer#<init>(kotlin.Int){}
  //   Public signature: /MyContainer.<init>|-5182794243525578284[0]
  constructor(i: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: MyContainer{}i
  //   Public signature: /MyContainer.i|5014384761142332495[0]
  var i: Int
    field = i
    // CHECK:
    //   Mangled name: MyContainer#<get-i>(){}kotlin.Int
    //   Public signature: /MyContainer.i.<get-i>|-8784396159001927527[0]
    get
    // CHECK:
    //   Mangled name: MyContainer#<set-i>(kotlin.Int){}
    //   Public signature: /MyContainer.i.<set-i>|1223530399758590178[0]
    set

  // CHECK:
  //   Mangled name: MyContainer#component1(){}kotlin.Int
  //   Public signature: /MyContainer.component1|-8217597213800111288[0]
  operator fun component1(): Int {
    return <this>.#i
  }

  // CHECK:
  //   Mangled name: MyContainer#copy(kotlin.Int){}MyContainer
  //   Public signature: /MyContainer.copy|-2712595066263545556[0]
  fun copy(i: Int = <this>.#i): MyContainer {
    return MyContainer(i = i)
  }

  // CHECK:
  //   Mangled name: MyContainer#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /MyContainer.equals|722809408929142791[0]
  override fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is MyContainer -> return false
    }
    val tmp0_other_with_cast: MyContainer = other as MyContainer
    when {
      EQEQ(arg0 = <this>.#i, arg1 = tmp0_other_with_cast.#i).not() -> return false
    }
    return true
  }

  // CHECK:
  //   Mangled name: MyContainer#hashCode(){}kotlin.Int
  //   Public signature: /MyContainer.hashCode|-8048879360829830756[0]
  override fun hashCode(): Int {
    return <this>.#i.hashCode()
  }

  // CHECK:
  //   Mangled name: MyContainer#toString(){}kotlin.String
  //   Public signature: /MyContainer.toString|6958853723545266802[0]
  override fun toString(): String {
    return "MyContainer(i=" + <this>.#i + ")"
  }

}

// CHECK:
//   Mangled name: {}operationScore
//   Public signature: /operationScore|-9073278321118823634[0]
var operationScore: Int
  field = 0
  // CHECK:
  //   Mangled name: #<get-operationScore>(){}kotlin.Int
  //   Public signature: /operationScore.<get-operationScore>|7107010356269447258[0]
  get
  // CHECK:
  //   Mangled name: #<set-operationScore>(kotlin.Int){}
  //   Public signature: /operationScore.<set-operationScore>|1936076120216071025[0]
  set

// CHECK:
//   Mangled name computed from Ir:         #get@MyContainer(kotlin.Int;kotlin.Int){}kotlin.Int
//   Mangled name computed from Descriptor: #get@MyContainer(kotlin.Int;kotlin.Int){}kotlin.Int
//   Mangled name computed from Fir:        #get!kotlin.Int@MyContainer(kotlin.Int){}kotlin.Int
//   Public signature: /get|-3979760669169671321[0]
operator fun MyContainer.get($context_receiver_0: Int, index: Int): Int {
  <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  return when {
    EQEQ(arg0 = index, arg1 = 0) -> <this>.<get-i>()
    else -> -1
  }
}

// CHECK:
//   Mangled name computed from Ir:         #plusAssign@MyContainer(kotlin.Int;MyContainer){}
//   Mangled name computed from Descriptor: #plusAssign@MyContainer(kotlin.Int;MyContainer){}
//   Mangled name computed from Fir:        #plusAssign!kotlin.Int@MyContainer(MyContainer){}
//   Public signature: /plusAssign|677104996565540010[0]
operator fun MyContainer.plusAssign($context_receiver_0: Int, other: MyContainer) {
  <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  <this>.<set-i>(<set-?> = <this>.<get-i>().plus(other = other.<get-i>()))
}

// CHECK:
//   Mangled name computed from Ir:         #inc@MyContainer(kotlin.Int){}MyContainer
//   Mangled name computed from Descriptor: #inc@MyContainer(kotlin.Int){}MyContainer
//   Mangled name computed from Fir:        #inc!kotlin.Int@MyContainer(){}MyContainer
//   Public signature: /inc|-8228731243470619532[0]
operator fun MyContainer.inc($context_receiver_0: Int): MyContainer {
  <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  return MyContainer(i = <this>.<get-i>().plus(other = 1))
}

// CHECK:
//   Mangled name: #box(){}kotlin.String
//   Public signature: /box|-9347091776561469[0]
fun box(): String {
  var myContainer: MyContainer = MyContainer(i = 0)
  with<Int, Unit>(receiver = 1, block = 
    // CHECK:
    //   Mangled name computed from Ir:         #box(){}kotlin.String#<anonymous>#static@kotlin.Int(){}
    //   Mangled name computed from Descriptor: #box(){}kotlin.String#<anonymous>#static@kotlin.Int(){}
    //   Mangled name computed from Fir:        could not compute mangled name: java.lang.IllegalStateException: unexpected element with@fun R|kotlin/Int|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=EXACTLY_ONCE>  {... (truncated)
    local fun Int.<anonymous>() {
      myContainer.plusAssign($context_receiver_0 = $this$with, other = MyContainer(i = { // BLOCK
        val <unary>: MyContainer = myContainer
        myContainer = <unary>.inc($context_receiver_0 = $this$with)
        <unary>
      }.get($context_receiver_0 = $this$with, index = 0)))
    }
)
  return when {
    when {
      EQEQ(arg0 = myContainer.<get-i>(), arg1 = 1) -> EQEQ(arg0 = <get-operationScore>(), arg1 = 3)
      else -> false
    } -> "OK"
    else -> "fail"
  }
}

