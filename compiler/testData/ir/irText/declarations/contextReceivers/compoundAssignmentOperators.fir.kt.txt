// CHECK:
//   Mangled name: Result
//   Public signature: /Result|null[0]
data class Result {
  // CHECK:
  //   Mangled name: Result#<init>(kotlin.Int){}
  //   Public signature: /Result.<init>|-5182794243525578284[0]
  constructor(i: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: Result{}i
  //   Public signature: /Result.i|5014384761142332495[0]
  var i: Int
    field = i
    // CHECK:
    //   Mangled name: Result#<get-i>(){}kotlin.Int
    //   Public signature: /Result.i.<get-i>|-8784396159001927527[0]
    get
    // CHECK:
    //   Mangled name: Result#<set-i>(kotlin.Int){}
    //   Public signature: /Result.i.<set-i>|1223530399758590178[0]
    set

  // CHECK:
  //   Mangled name: Result#component1(){}kotlin.Int
  //   Public signature: /Result.component1|-8217597213800111288[0]
  operator fun component1(): Int {
    return <this>.#i
  }

  // CHECK:
  //   Mangled name: Result#copy(kotlin.Int){}Result
  //   Public signature: /Result.copy|5439238034196076859[0]
  fun copy(i: Int = <this>.#i): Result {
    return Result(i = i)
  }

  // CHECK:
  //   Mangled name: Result#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /Result.equals|722809408929142791[0]
  override fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is Result -> return false
    }
    val tmp0_other_with_cast: Result = other as Result
    when {
      EQEQ(arg0 = <this>.#i, arg1 = tmp0_other_with_cast.#i).not() -> return false
    }
    return true
  }

  // CHECK:
  //   Mangled name: Result#hashCode(){}kotlin.Int
  //   Public signature: /Result.hashCode|-8048879360829830756[0]
  override fun hashCode(): Int {
    return <this>.#i.hashCode()
  }

  // CHECK:
  //   Mangled name: Result#toString(){}kotlin.String
  //   Public signature: /Result.toString|6958853723545266802[0]
  override fun toString(): String {
    return "Result(i=" + <this>.#i + ")"
  }

}

// CHECK:
//   Mangled name: {}operationScore
//   Public signature: /operationScore|-9073278321118823634[0]
var operationScore: Int
  field = 0
  // CHECK:
  //   Mangled name: #<get-operationScore>(){}kotlin.Int
  //   Public signature: /operationScore.<get-operationScore>|7107010356269447258[0]
  get
  // CHECK:
  //   Mangled name: #<set-operationScore>(kotlin.Int){}
  //   Public signature: /operationScore.<set-operationScore>|1936076120216071025[0]
  set

// CHECK:
//   Mangled name computed from Ir:         #plus@Result(kotlin.Int;Result){}Result
//   Mangled name computed from Descriptor: #plus@Result(kotlin.Int;Result){}Result
//   Mangled name computed from Fir:        #plus!kotlin.Int@Result(Result){}Result
//   Public signature: /plus|4903222358721452198[0]
operator fun Result.plus($context_receiver_0: Int, other: Result): Result {
  <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  return Result(i = <this>.<get-i>().plus(other = other.<get-i>()))
}

// CHECK:
//   Mangled name computed from Ir:         #plusAssign@Result(kotlin.Int;Result){}
//   Mangled name computed from Descriptor: #plusAssign@Result(kotlin.Int;Result){}
//   Mangled name computed from Fir:        #plusAssign!kotlin.Int@Result(Result){}
//   Public signature: /plusAssign|-1237264614376392652[0]
operator fun Result.plusAssign($context_receiver_0: Int, other: Result) {
  <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  <this>.<set-i>(<set-?> = <this>.<get-i>().plus(other = other.<get-i>()))
}

// CHECK:
//   Mangled name computed from Ir:         #minus@Result(kotlin.Int;Result){}Result
//   Mangled name computed from Descriptor: #minus@Result(kotlin.Int;Result){}Result
//   Mangled name computed from Fir:        #minus!kotlin.Int@Result(Result){}Result
//   Public signature: /minus|3968749932240310139[0]
operator fun Result.minus($context_receiver_0: Int, other: Result): Result {
  <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  return Result(i = <this>.<get-i>().minus(other = other.<get-i>()))
}

// CHECK:
//   Mangled name computed from Ir:         #minusAssign@Result(kotlin.Int;Result){}
//   Mangled name computed from Descriptor: #minusAssign@Result(kotlin.Int;Result){}
//   Mangled name computed from Fir:        #minusAssign!kotlin.Int@Result(Result){}
//   Public signature: /minusAssign|5475976237961546392[0]
operator fun Result.minusAssign($context_receiver_0: Int, other: Result) {
  <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  <this>.<set-i>(<set-?> = <this>.<get-i>().minus(other = other.<get-i>()))
}

// CHECK:
//   Mangled name computed from Ir:         #times@Result(kotlin.Int;Result){}Result
//   Mangled name computed from Descriptor: #times@Result(kotlin.Int;Result){}Result
//   Mangled name computed from Fir:        #times!kotlin.Int@Result(Result){}Result
//   Public signature: /times|3621876074874527655[0]
operator fun Result.times($context_receiver_0: Int, other: Result): Result {
  <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  return Result(i = <this>.<get-i>().times(other = other.<get-i>()))
}

// CHECK:
//   Mangled name computed from Ir:         #timesAssign@Result(kotlin.Int;Result){}
//   Mangled name computed from Descriptor: #timesAssign@Result(kotlin.Int;Result){}
//   Mangled name computed from Fir:        #timesAssign!kotlin.Int@Result(Result){}
//   Public signature: /timesAssign|1025810528106719294[0]
operator fun Result.timesAssign($context_receiver_0: Int, other: Result) {
  <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  <this>.<set-i>(<set-?> = <this>.<get-i>().times(other = other.<get-i>()))
}

// CHECK:
//   Mangled name computed from Ir:         #div@Result(kotlin.Int;Result){}Result
//   Mangled name computed from Descriptor: #div@Result(kotlin.Int;Result){}Result
//   Mangled name computed from Fir:        #div!kotlin.Int@Result(Result){}Result
//   Public signature: /div|4720798164978030724[0]
operator fun Result.div($context_receiver_0: Int, other: Result): Result {
  <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  return Result(i = <this>.<get-i>().div(other = other.<get-i>()))
}

// CHECK:
//   Mangled name computed from Ir:         #divAssign@Result(kotlin.Int;Result){}
//   Mangled name computed from Descriptor: #divAssign@Result(kotlin.Int;Result){}
//   Mangled name computed from Fir:        #divAssign!kotlin.Int@Result(Result){}
//   Public signature: /divAssign|2355297718303587055[0]
operator fun Result.divAssign($context_receiver_0: Int, other: Result) {
  <set-operationScore>(<set-?> = <get-operationScore>().plus(other = $context_receiver_0))
  <this>.<set-i>(<set-?> = <this>.<get-i>().div(other = other.<get-i>()))
}

// CHECK:
//   Mangled name: #box(){}kotlin.String
//   Public signature: /box|-9347091776561469[0]
fun box(): String {
  val result: Result = Result(i = 0)
  with<Int, Unit>(receiver = 1, block = 
    // CHECK:
    //   Mangled name computed from Ir:         #box(){}kotlin.String#<anonymous>#static@kotlin.Int(){}
    //   Mangled name computed from Descriptor: #box(){}kotlin.String#<anonymous>#static@kotlin.Int(){}
    //   Mangled name computed from Fir:        could not compute mangled name: java.lang.IllegalStateException: unexpected element with@fun R|kotlin/Int|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=EXACTLY_ONCE>  {... (truncated)
    local fun Int.<anonymous>() {
      result.plusAssign($context_receiver_0 = $this$with, other = Result(i = 1).plus($context_receiver_0 = $this$with, other = Result(i = 1)))
      result.minusAssign($context_receiver_0 = $this$with, other = Result(i = 1).minus($context_receiver_0 = $this$with, other = Result(i = 0)))
      result.timesAssign($context_receiver_0 = $this$with, other = Result(i = 1).times($context_receiver_0 = $this$with, other = Result(i = 2)))
      result.divAssign($context_receiver_0 = $this$with, other = Result(i = 4).div($context_receiver_0 = $this$with, other = Result(i = 2)))
    }
)
  return when {
    when {
      EQEQ(arg0 = result.<get-i>(), arg1 = 1) -> EQEQ(arg0 = <get-operationScore>(), arg1 = 8)
      else -> false
    } -> "OK"
    else -> "fail"
  }
}

