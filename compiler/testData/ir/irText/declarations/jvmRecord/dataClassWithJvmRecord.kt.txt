// CHECK:
//   Mangled name: MyRec
//   Public signature: /MyRec|null[0]
@JvmRecord
data class MyRec : Record {
  // CHECK:
  //   Mangled name: MyRec#<init>(kotlin.String){}
  //   Public signature: /MyRec.<init>|1280618353163213788[0]
  constructor(name: String) /* primary */ {
    super/*Record*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: MyRec{}name
  //   Public signature: /MyRec.name|4231860309499509769[0]
  val name: String
    field = name
    // CHECK:
    //   Mangled name: MyRec#<get-name>(){}kotlin.String
    //   Public signature: /MyRec.name.<get-name>|-8006111524522882650[0]
    get

  // CHECK:
  //   Mangled name: MyRec#component1(){}kotlin.String
  //   Public signature: /MyRec.component1|-7481405593404337796[0]
  operator fun component1(): String {
    return <this>.#name
  }

  // CHECK:
  //   Mangled name: MyRec#copy(kotlin.String){}MyRec
  //   Public signature: /MyRec.copy|4211487615034027288[0]
  fun copy(name: String = <this>.#name): MyRec {
    return MyRec(name = name)
  }

  // CHECK:
  //   Mangled name: MyRec#toString(){}kotlin.String
  //   Public signature: /MyRec.toString|6958853723545266802[0]
  override fun toString(): String {
    return "MyRec(" + "name=" + <this>.#name + ")"
  }

  // CHECK:
  //   Mangled name: MyRec#hashCode(){}kotlin.Int
  //   Public signature: /MyRec.hashCode|-8048879360829830756[0]
  override fun hashCode(): Int {
    return <this>.#name.hashCode()
  }

  // CHECK:
  //   Mangled name: MyRec#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /MyRec.equals|722809408929142791[0]
  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is MyRec -> return false
    }
    val tmp0_other_with_cast: MyRec = other as MyRec
    when {
      EQEQ(arg0 = <this>.#name, arg1 = tmp0_other_with_cast.#name).not() -> return false
    }
    return true
  }

}

// CHECK:
//   Mangled name: #test(MyRec){}
//   Public signature: /test|3445256146312347200[0]
fun test(rec: MyRec) {
  rec.<get-name>() /*~> Unit */
}

