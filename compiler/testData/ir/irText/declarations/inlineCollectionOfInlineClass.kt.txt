// CHECK:
//   Mangled name: IT
//   Public signature: /IT|null[0]
value class IT {
  // CHECK:
  //   Mangled name: IT#<init>(kotlin.Int){}
  //   Public signature: /IT.<init>|-5182794243525578284[0]
  constructor(x: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: IT{}x
  //   Public signature: /IT.x|-8060530855978347579[0]
  val x: Int
    field = x
    // CHECK:
    //   Mangled name: IT#<get-x>(){}kotlin.Int
    //   Public signature: /IT.x.<get-x>|4966956098150895696[0]
    get

  // CHECK:
  //   Mangled name: IT#toString(){}kotlin.String
  //   Public signature: /IT.toString|6958853723545266802[0]
  override fun toString(): String {
    return "IT(" + "x=" + <this>.#x + ")"
  }

  // CHECK:
  //   Mangled name: IT#hashCode(){}kotlin.Int
  //   Public signature: /IT.hashCode|-8048879360829830756[0]
  override fun hashCode(): Int {
    return <this>.#x.hashCode()
  }

  // CHECK:
  //   Mangled name: IT#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /IT.equals|722809408929142791[0]
  override operator fun equals(other: Any?): Boolean {
    when {
      other !is IT -> return false
    }
    val tmp0_other_with_cast: IT = other as IT
    when {
      EQEQ(arg0 = <this>.#x, arg1 = tmp0_other_with_cast.#x).not() -> return false
    }
    return true
  }

}

// CHECK:
//   Mangled name: InlineMutableSet
//   Public signature: /InlineMutableSet|null[0]
value class InlineMutableSet : MutableSet<IT> {
  // CHECK:
  //   Mangled name: InlineMutableSet#<init>(kotlin.collections.MutableSet<IT>){}
  //   Public signature: /InlineMutableSet.<init>|-3183535736515224569[0]
  constructor(ms: MutableSet<IT>) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: InlineMutableSet{}ms
  //   Public signature: /InlineMutableSet.ms|3456531059400385118[0]
  private val ms: MutableSet<IT>
    field = ms
    // CHECK:
    //   Mangled name: InlineMutableSet#<get-ms>(){}kotlin.collections.MutableSet<IT>
    //   Public signature: /InlineMutableSet.ms.<get-ms>|1704733968327666901[0]
    private get

  // CHECK:
  //   Mangled name: InlineMutableSet{}size
  //   Public signature: /InlineMutableSet.size|-6253659984320132064[0]
  override val size: Int
    // CHECK:
    //   Mangled name: InlineMutableSet#<get-size>(){}kotlin.Int
    //   Public signature: /InlineMutableSet.size.<get-size>|-3941649985161900780[0]
    override get(): Int {
      return <this>.<get-ms>().<get-size>()
    }

  // CHECK:
  //   Mangled name: InlineMutableSet#contains(IT){}kotlin.Boolean
  //   Public signature: /InlineMutableSet.contains|5433205509426188652[0]
  override operator fun contains(element: IT): Boolean {
    return <this>.<get-ms>().contains(element = element)
  }

  // CHECK:
  //   Mangled name: InlineMutableSet#containsAll(kotlin.collections.Collection<IT>){}kotlin.Boolean
  //   Public signature: /InlineMutableSet.containsAll|-7975270216380936973[0]
  override fun containsAll(elements: Collection<IT>): Boolean {
    return <this>.<get-ms>().containsAll(elements = elements)
  }

  // CHECK:
  //   Mangled name: InlineMutableSet#isEmpty(){}kotlin.Boolean
  //   Public signature: /InlineMutableSet.isEmpty|-626562167393617703[0]
  override fun isEmpty(): Boolean {
    return <this>.<get-ms>().isEmpty()
  }

  // CHECK:
  //   Mangled name: InlineMutableSet#add(IT){}kotlin.Boolean
  //   Public signature: /InlineMutableSet.add|4556529580522000316[0]
  override fun add(element: IT): Boolean {
    return <this>.<get-ms>().add(element = element)
  }

  // CHECK:
  //   Mangled name: InlineMutableSet#addAll(kotlin.collections.Collection<IT>){}kotlin.Boolean
  //   Public signature: /InlineMutableSet.addAll|-5427487393658674793[0]
  override fun addAll(elements: Collection<IT>): Boolean {
    return <this>.<get-ms>().addAll(elements = elements)
  }

  // CHECK:
  //   Mangled name: InlineMutableSet#clear(){}
  //   Public signature: /InlineMutableSet.clear|-6446868449915108923[0]
  override fun clear() {
    <this>.<get-ms>().clear()
  }

  // CHECK:
  //   Mangled name: InlineMutableSet#iterator(){}kotlin.collections.MutableIterator<IT>
  //   Public signature: /InlineMutableSet.iterator|-4073191386552833309[0]
  override operator fun iterator(): MutableIterator<IT> {
    return <this>.<get-ms>().iterator()
  }

  // CHECK:
  //   Mangled name: InlineMutableSet#remove(IT){}kotlin.Boolean
  //   Public signature: /InlineMutableSet.remove|-5569885229390352812[0]
  override fun remove(element: IT): Boolean {
    return <this>.<get-ms>().remove(element = element)
  }

  // CHECK:
  //   Mangled name: InlineMutableSet#removeAll(kotlin.collections.Collection<IT>){}kotlin.Boolean
  //   Public signature: /InlineMutableSet.removeAll|-3088468608435360013[0]
  override fun removeAll(elements: Collection<IT>): Boolean {
    return <this>.<get-ms>().removeAll(elements = elements)
  }

  // CHECK:
  //   Mangled name: InlineMutableSet#retainAll(kotlin.collections.Collection<IT>){}kotlin.Boolean
  //   Public signature: /InlineMutableSet.retainAll|-9017555672250825665[0]
  override fun retainAll(elements: Collection<IT>): Boolean {
    return <this>.<get-ms>().retainAll(elements = elements)
  }

  // CHECK:
  //   Mangled name: InlineMutableSet#toString(){}kotlin.String
  //   Public signature: /InlineMutableSet.toString|6958853723545266802[0]
  override fun toString(): String {
    return "InlineMutableSet(" + "ms=" + <this>.#ms + ")"
  }

  // CHECK:
  //   Mangled name: InlineMutableSet#hashCode(){}kotlin.Int
  //   Public signature: /InlineMutableSet.hashCode|-8048879360829830756[0]
  override fun hashCode(): Int {
    return <this>.#ms.hashCode()
  }

  // CHECK:
  //   Mangled name: InlineMutableSet#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /InlineMutableSet.equals|722809408929142791[0]
  override operator fun equals(other: Any?): Boolean {
    when {
      other !is InlineMutableSet -> return false
    }
    val tmp0_other_with_cast: InlineMutableSet = other as InlineMutableSet
    when {
      EQEQ(arg0 = <this>.#ms, arg1 = tmp0_other_with_cast.#ms).not() -> return false
    }
    return true
  }

}

