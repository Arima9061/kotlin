// CHECK:
//   Mangled name: #test1(){}
//   Public signature: /test1|4297044443957252634[0]
fun test1() {
  val x: Int
    val x$delegate: Lazy<Int> = lazy<Int>(initializer = 
      // CHECK:
      //   Mangled name computed from Ir:         #test1(){}#<anonymous>#static(){}kotlin.Int
      //   Mangled name computed from Descriptor: #test1(){}#<anonymous>#static(){}kotlin.Int
      //   Mangled name computed from Fir:        could not compute mangled name: java.lang.IllegalStateException: unexpected element lazy@fun <anonymous>(): R|kotlin/Int| <inline=NoInline>  {... (truncated)
      local fun <anonymous>(): Int {
        return 42
      }
)
    // CHECK:
    //   Mangled name computed from Ir:         #test1(){}#<get-x>#static(){}kotlin.Int
    //   Mangled name computed from Descriptor: #test1(){}#<get-x>#static(){}kotlin.Int
    //   Mangled name computed from Fir:        #<get-x>(){}kotlin.Int
    local get(): Int {
      return x$delegate.getValue<Int>(thisRef = null, property = ::x)
    }

  println(message = <get-x>())
}

// CHECK:
//   Mangled name: #test2(){}
//   Public signature: /test2|4279114864133353152[0]
fun test2() {
  var x: Int
    val x$delegate: HashMap<String, Int> = hashMapOf<String, Int>()
    // CHECK:
    //   Mangled name computed from Ir:         #test2(){}#<get-x>#static(){}kotlin.Int
    //   Mangled name computed from Descriptor: #test2(){}#<get-x>#static(){}kotlin.Int
    //   Mangled name computed from Fir:        #<get-x>(){}kotlin.Int
    local get(): Int {
      return x$delegate.getValue<Int, Int>(thisRef = null, property = ::x)
    }
    // CHECK:
    //   Mangled name computed from Ir:         #test2(){}#<set-x>#static(kotlin.Int){}
    //   Mangled name computed from Descriptor: #test2(){}#<set-x>#static(kotlin.Int){}
    //   Mangled name computed from Fir:        #<set-x>(kotlin.Int){}
    local set(<set-?>: Int) {
      x$delegate.setValue<Int>(thisRef = null, property = ::x, value = <set-?>)
    }

  <set-x>(<set-?> = 0)
  { // BLOCK
    val <unary>: Int = <get-x>()
    <set-x>(<set-?> = <unary>.inc())
    <unary>
  } /*~> Unit */
  <set-x>(<set-?> = <get-x>().plus(other = 1))
}

