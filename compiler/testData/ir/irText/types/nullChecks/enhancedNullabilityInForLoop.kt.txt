// CHECK:
//   Mangled name: #use(P){}
//   Public signature: /use|3488579196470931687[0]
fun use(s: P) {
}

// CHECK:
//   Mangled name: #testForInListUnused(){}
//   Public signature: /testForInListUnused|-2195059500816622210[0]
fun testForInListUnused() {
  { // BLOCK
    val tmp0_iterator: MutableIterator<@NotNull @EnhancedNullability P> = listOfNotNull() /*!! List<@NotNull @EnhancedNullability P> */ /*as MutableList<*> */.iterator()
    while (tmp0_iterator.hasNext()) { // BLOCK
      val x: @NotNull @EnhancedNullability P = tmp0_iterator.next()
      { // BLOCK
      }
    }
  }
}

// CHECK:
//   Mangled name: #testForInListDestructured(){}
//   Public signature: /testForInListDestructured|-6792759367826308939[0]
fun testForInListDestructured() {
  { // BLOCK
    val tmp0_iterator: MutableIterator<@NotNull @EnhancedNullability P> = listOfNotNull() /*!! List<@NotNull @EnhancedNullability P> */ /*as MutableList<*> */.iterator()
    while (tmp0_iterator.hasNext()) { // BLOCK
      val tmp1_loop_parameter: @NotNull @EnhancedNullability P = tmp0_iterator.next()
      val x: Int = tmp1_loop_parameter /*!! @NotNull P */.component1()
      val y: Int = tmp1_loop_parameter /*!! @NotNull P */.component2()
      { // BLOCK
      }
    }
  }
}

// CHECK:
//   Mangled name: #testDesugaredForInList(){}
//   Public signature: /testDesugaredForInList|-5782772317279913567[0]
fun testDesugaredForInList() {
  val iterator: MutableIterator<@NotNull @EnhancedNullability P> = listOfNotNull() /*!! List<@NotNull @EnhancedNullability P> */ /*as MutableList<*> */.iterator()
  while (iterator.hasNext()) { // BLOCK
    val x: @NotNull P = iterator.next() /*!! @NotNull P */
  }
}

// CHECK:
//   Mangled name: #testForInArrayUnused(J){}
//   Public signature: /testForInArrayUnused|-1510075261509964471[0]
fun testForInArrayUnused(j: J) {
  { // BLOCK
    val tmp0_iterator: Iterator<@EnhancedNullability P> = j.arrayOfNotNull() /*!! Array<out @EnhancedNullability P> */ /*as Array<@EnhancedNullability P> */.iterator()
    while (tmp0_iterator.hasNext()) { // BLOCK
      val x: @EnhancedNullability P = tmp0_iterator.next()
      { // BLOCK
      }
    }
  }
}

// CHECK:
//   Mangled name: #testForInListUse(){}
//   Public signature: /testForInListUse|2913967956256667805[0]
fun testForInListUse() {
  { // BLOCK
    val tmp0_iterator: MutableIterator<@NotNull @EnhancedNullability P> = listOfNotNull() /*!! List<@NotNull @EnhancedNullability P> */ /*as MutableList<*> */.iterator()
    while (tmp0_iterator.hasNext()) { // BLOCK
      val x: @NotNull @EnhancedNullability P = tmp0_iterator.next()
      { // BLOCK
        use(s = x /*!! @NotNull P */)
        use(s = x)
      }
    }
  }
}

// CHECK:
//   Mangled name: #testForInArrayUse(J){}
//   Public signature: /testForInArrayUse|4222411163139319025[0]
fun testForInArrayUse(j: J) {
  { // BLOCK
    val tmp0_iterator: Iterator<@EnhancedNullability P> = j.arrayOfNotNull() /*!! Array<out @EnhancedNullability P> */ /*as Array<@EnhancedNullability P> */.iterator()
    while (tmp0_iterator.hasNext()) { // BLOCK
      val x: @EnhancedNullability P = tmp0_iterator.next()
      { // BLOCK
        use(s = x /*!! P */)
        use(s = x)
      }
    }
  }
}

// CHECK:
//   Mangled name: K
//   Public signature: /K|null[0]
interface K {
  // CHECK:
  //   Mangled name: K#arrayOfNotNull(){}kotlin.Array<P>
  //   Public signature: /K.arrayOfNotNull|-3412104294529727261[0]
  abstract fun arrayOfNotNull(): Array<P>

}

// CHECK:
//   Mangled name: P
//   Public signature: /P|null[0]
data class P {
  // CHECK:
  //   Mangled name: P#<init>(kotlin.Int;kotlin.Int){}
  //   Public signature: /P.<init>|-7691762014320324121[0]
  constructor(x: Int, y: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: P{}x
  //   Public signature: /P.x|-8060530855978347579[0]
  val x: Int
    field = x
    // CHECK:
    //   Mangled name: P#<get-x>(){}kotlin.Int
    //   Public signature: /P.x.<get-x>|4966956098150895696[0]
    get

  // CHECK:
  //   Mangled name: P{}y
  //   Public signature: /P.y|3625903257357557171[0]
  val y: Int
    field = y
    // CHECK:
    //   Mangled name: P#<get-y>(){}kotlin.Int
    //   Public signature: /P.y.<get-y>|-6745575372101973707[0]
    get

  // CHECK:
  //   Mangled name: P#component1(){}kotlin.Int
  //   Public signature: /P.component1|-8217597213800111288[0]
  operator fun component1(): Int {
    return <this>.#x
  }

  // CHECK:
  //   Mangled name: P#component2(){}kotlin.Int
  //   Public signature: /P.component2|-7444333055342785242[0]
  operator fun component2(): Int {
    return <this>.#y
  }

  // CHECK:
  //   Mangled name: P#copy(kotlin.Int;kotlin.Int){}P
  //   Public signature: /P.copy|7812152200479194143[0]
  fun copy(x: Int = <this>.#x, y: Int = <this>.#y): P {
    return P(x = x, y = y)
  }

  // CHECK:
  //   Mangled name: P#toString(){}kotlin.String
  //   Public signature: /P.toString|6958853723545266802[0]
  override fun toString(): String {
    return "P(" + "x=" + <this>.#x + ", " + "y=" + <this>.#y + ")"
  }

  // CHECK:
  //   Mangled name: P#hashCode(){}kotlin.Int
  //   Public signature: /P.hashCode|-8048879360829830756[0]
  override fun hashCode(): Int {
    var result: Int = <this>.#x.hashCode()
    result = result.times(other = 31).plus(other = <this>.#y.hashCode())
    return result
  }

  // CHECK:
  //   Mangled name: P#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /P.equals|722809408929142791[0]
  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is P -> return false
    }
    val tmp0_other_with_cast: P = other as P
    when {
      EQEQ(arg0 = <this>.#x, arg1 = tmp0_other_with_cast.#x).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#y, arg1 = tmp0_other_with_cast.#y).not() -> return false
    }
    return true
  }

}

