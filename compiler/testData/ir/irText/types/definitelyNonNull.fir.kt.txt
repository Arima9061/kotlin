// CHECK JVM_IR:
//   Mangled name: #elvisLike(0:0;0:0){0ยง<kotlin.Any?>}0:0
//   Public signature: /elvisLike|7044130161831229286[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #elvisLike(0:0;0:0){0ยง<kotlin.Any?>}
//   Mangled name computed from Descriptor: #elvisLike(0:0;0:0){0ยง<kotlin.Any?>}
//   Mangled name computed from Fir:        #elvisLike(0:0;0:0){0ยง<kotlin.Any?>}0:0
//   Public signature: /elvisLike|7044130161831229286[0]
fun <T : Any?> elvisLike(x: T, y: (T & Any)): (T & Any) {
  return { // BLOCK
    val <elvis>: T = x
    when {
      EQEQ(arg0 = <elvis>, arg1 = null) -> y
      else -> <elvis>
    }
  }
}

// CHECK:
//   Mangled name computed from Ir:         #main(){}
//   Mangled name computed from Descriptor: #main(){}
//   Mangled name computed from Fir:        #main%definitelyNonNull.kt(){}
//   Public signature: /main|623081211650556165[0]
fun main() {
  elvisLike<String>(x = "", y = "").<get-length>() /*~> Unit */
  elvisLike<String?>(x = null, y = "").<get-length>() /*~> Unit */
  elvisLike<String>(x = "", y = "").<get-length>() /*~> Unit */
  elvisLike<String?>(x = null, y = "").<get-length>() /*~> Unit */
}

