// CHECK:
//   Mangled name: Value
//   Public signature: /Value|null[0]
class Value<T : Any?, IT : IR<T>> {
  // CHECK:
  //   Mangled name computed from Ir:         Value#<init>(1:0;1:1){}
  //   Mangled name computed from Descriptor: Value#<init>(1:0;1:1){}
  //   Mangled name computed from Fir:        Value#<init>(0:-1;0:-1){}
  //   Public signature: /Value.<init>|3925877681016924387[0]
  constructor(value1: T, value2: IT) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: Value{}value1
  //   Public signature: /Value.value1|-1609410989855067486[0]
  var value1: T
    field = value1
    // CHECK JVM_IR:
    //   Mangled name: Value#<get-value1>(){}1:0
    //   Public signature: /Value.value1.<get-value1>|6019421524321236052[0]
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         Value#<get-value1>(){}
    //   Mangled name computed from Descriptor: Value#<get-value1>(){}
    //   Mangled name computed from Fir:        Value#<get-value1>(){}1:0
    //   Public signature: /Value.value1.<get-value1>|6019421524321236052[0]
    get
    // CHECK:
    //   Mangled name: Value#<set-value1>(1:0){}
    //   Public signature: /Value.value1.<set-value1>|6839885877777773163[0]
    set

  // CHECK:
  //   Mangled name: Value{}value2
  //   Public signature: /Value.value2|-1664181645671419060[0]
  val value2: IT
    field = value2
    // CHECK JVM_IR:
    //   Mangled name: Value#<get-value2>(){}1:1
    //   Public signature: /Value.value2.<get-value2>|3746012481463661565[0]
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         Value#<get-value2>(){}
    //   Mangled name computed from Descriptor: Value#<get-value2>(){}
    //   Mangled name computed from Fir:        Value#<get-value2>(){}1:1
    //   Public signature: /Value.value2.<get-value2>|3746012481463661565[0]
    get

}

// CHECK:
//   Mangled name: IDelegate1
//   Public signature: /IDelegate1|null[0]
interface IDelegate1<T1 : Any?, R1 : Any?> {
  // CHECK JVM_IR:
  //   Mangled name: IDelegate1#getValue(1:0;kotlin.reflect.KProperty<*>){}1:1
  //   Public signature: /IDelegate1.getValue|-902248562118213940[0]
  // CHECK JS_IR:
  //   Mangled name computed from Ir:         IDelegate1#getValue(1:0;kotlin.reflect.KProperty<*>){}
  //   Mangled name computed from Descriptor: IDelegate1#getValue(1:0;kotlin.reflect.KProperty<*>){}
  //   Mangled name computed from Fir:        IDelegate1#getValue(1:0;kotlin.reflect.KProperty<*>){}1:1
  //   Public signature: /IDelegate1.getValue|-902248562118213940[0]
  abstract operator fun getValue(t: T1, p: KProperty<*>): R1

}

// CHECK:
//   Mangled name: IDelegate2
//   Public signature: /IDelegate2|null[0]
interface IDelegate2<T2 : Any?, R2 : Any?> {
  // CHECK JVM_IR:
  //   Mangled name: IDelegate2#getValue(1:0;kotlin.reflect.KProperty<*>){}1:1
  //   Public signature: /IDelegate2.getValue|-902248562118213940[0]
  // CHECK JS_IR:
  //   Mangled name computed from Ir:         IDelegate2#getValue(1:0;kotlin.reflect.KProperty<*>){}
  //   Mangled name computed from Descriptor: IDelegate2#getValue(1:0;kotlin.reflect.KProperty<*>){}
  //   Mangled name computed from Fir:        IDelegate2#getValue(1:0;kotlin.reflect.KProperty<*>){}1:1
  //   Public signature: /IDelegate2.getValue|-902248562118213940[0]
  abstract operator fun getValue(t: T2, p: KProperty<*>): R2

}

// CHECK:
//   Mangled name: IR
//   Public signature: /IR|null[0]
interface IR<R : Any?> {
  // CHECK JVM_IR:
  //   Mangled name: IR#foo(){}1:0
  //   Public signature: /IR.foo|-5478580208809996038[0]
  // CHECK JS_IR:
  //   Mangled name computed from Ir:         IR#foo(){}
  //   Mangled name computed from Descriptor: IR#foo(){}
  //   Mangled name computed from Fir:        IR#foo(){}1:0
  //   Public signature: /IR.foo|-5478580208809996038[0]
  abstract fun foo(): R

}

// CHECK:
//   Mangled name: CR
//   Public signature: /CR|null[0]
class CR<R : Any?> : IR<R> {
  // CHECK:
  //   Mangled name computed from Ir:         CR#<init>(1:0){}
  //   Mangled name computed from Descriptor: CR#<init>(1:0){}
  //   Mangled name computed from Fir:        CR#<init>(0:-1){}
  //   Public signature: /CR.<init>|8751876555175556900[0]
  constructor(r: R) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: CR{}r
  //   Public signature: /CR.r|-8117627916896159533[0]
  val r: R
    field = r
    // CHECK JVM_IR:
    //   Mangled name: CR#<get-r>(){}1:0
    //   Public signature: /CR.r.<get-r>|8828977917809363505[0]
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         CR#<get-r>(){}
    //   Mangled name computed from Descriptor: CR#<get-r>(){}
    //   Mangled name computed from Fir:        CR#<get-r>(){}1:0
    //   Public signature: /CR.r.<get-r>|8828977917809363505[0]
    get

  // CHECK JVM_IR:
  //   Mangled name: CR#foo(){}1:0
  //   Public signature: /CR.foo|-5478580208809996038[0]
  // CHECK JS_IR:
  //   Mangled name computed from Ir:         CR#foo(){}
  //   Mangled name computed from Descriptor: CR#foo(){}
  //   Mangled name computed from Fir:        CR#foo(){}1:0
  //   Public signature: /CR.foo|-5478580208809996038[0]
  override fun foo(): R {
    return <this>.<get-r>()
  }

}

// CHECK:
//   Mangled name: P
//   Public signature: /P|null[0]
class P<P1 : Any?, P2 : Any?> {
  // CHECK:
  //   Mangled name computed from Ir:         P#<init>(1:0;1:1){}
  //   Mangled name computed from Descriptor: P#<init>(1:0;1:1){}
  //   Mangled name computed from Fir:        P#<init>(0:-1;0:-1){}
  //   Public signature: /P.<init>|3925877681016924387[0]
  constructor(p1: P1, p2: P2) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: P{}p1
  //   Public signature: /P.p1|7711764890799440087[0]
  val p1: P1
    field = p1
    // CHECK JVM_IR:
    //   Mangled name: P#<get-p1>(){}1:0
    //   Public signature: /P.p1.<get-p1>|-4219781876451304030[0]
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         P#<get-p1>(){}
    //   Mangled name computed from Descriptor: P#<get-p1>(){}
    //   Mangled name computed from Fir:        P#<get-p1>(){}1:0
    //   Public signature: /P.p1.<get-p1>|-4219781876451304030[0]
    get

  // CHECK:
  //   Mangled name: P{}p2
  //   Public signature: /P.p2|1837305664617486052[0]
  val p2: P2
    field = p2
    // CHECK JVM_IR:
    //   Mangled name: P#<get-p2>(){}1:1
    //   Public signature: /P.p2.<get-p2>|6195993200459932152[0]
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         P#<get-p2>(){}
    //   Mangled name computed from Descriptor: P#<get-p2>(){}
    //   Mangled name computed from Fir:        P#<get-p2>(){}1:1
    //   Public signature: /P.p2.<get-p2>|6195993200459932152[0]
    get

}

// CHECK:
//   Mangled name computed from Ir:         @Value<0:0,CR<0:0>>{0§<kotlin.Any?>}additionalText
//   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
//   Mangled name computed from Fir:        @Value<0:0,CR<0:0>>{0§<kotlin.Any?>}additionalText
//   Public signature: /additionalText|-3624592186686248643[0]
val <T : Any?> Value<T, CR<T>>.additionalText: P<T, T> /* by */ 
  field = { // BLOCK
    // CHECK:
    //   Mangled name computed from Ir (compatible mode: false):         @Value<1:0,CR<1:0>>{0§<kotlin.Any?>}additionalText.<no name provided>
    //   Mangled name computed from Ir (compatible mode: true):          additionalText$delegate.<no name provided>
    //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
    //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
    //   Mangled name computed from Fir (compatible mode: false):        <anonymous>
    //   Mangled name computed from Fir (compatible mode: true):         <anonymous>
    local class <no name provided> : IDelegate1<Value<T, CR<T>>, P<T, T>> {
      // CHECK:
      //   Mangled name computed from Ir (compatible mode: false):         @Value<2:0,CR<2:0>>{0§<kotlin.Any?>}additionalText.<no name provided>#<init>(){}
      //   Mangled name computed from Ir (compatible mode: true):          additionalText$delegate.<no name provided>#<init>(){}
      //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Fir (compatible mode: false):        #<init>(){}
      //   Mangled name computed from Fir (compatible mode: true):         #<init>(){}
      constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      // CHECK JVM_IR:
      //   Mangled name computed from Ir (compatible mode: false):         @Value<2:0,CR<2:0>>{0§<kotlin.Any?>}additionalText.<no name provided>#qux11(0:0){0§<kotlin.Any?>}0:0
      //   Mangled name computed from Ir (compatible mode: true):          additionalText$delegate.<no name provided>#qux11(0:0){0§<kotlin.Any?>}0:0
      //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Fir (compatible mode: false):        #qux11(0:0){0§<kotlin.Any?>}0:0
      //   Mangled name computed from Fir (compatible mode: true):         #qux11(0:0){0§<kotlin.Any?>}0:0
      // CHECK JS_IR:
      //   Mangled name computed from Ir (compatible mode: false):         @Value<2:0,CR<2:0>>{0§<kotlin.Any?>}additionalText.<no name provided>#qux11(0:0){0§<kotlin.Any?>}
      //   Mangled name computed from Ir (compatible mode: true):          additionalText$delegate.<no name provided>#qux11(0:0){0§<kotlin.Any?>}
      //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Fir (compatible mode: false):        #qux11(0:0){0§<kotlin.Any?>}0:0
      //   Mangled name computed from Fir (compatible mode: true):         #qux11(0:0){0§<kotlin.Any?>}0:0
      fun <F11T : Any?> qux11(t: F11T): F11T {
        return t
      }

      // CHECK JVM_IR:
      //   Mangled name computed from Ir (compatible mode: false):         @Value<2:0,CR<2:0>>{0§<kotlin.Any?>}additionalText.<no name provided>#qux12(0:0){0§<IR<2:0>>}2:0
      //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
      //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
      //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
      // CHECK JS_IR:
      //   Mangled name computed from Ir (compatible mode: false):         @Value<2:0,CR<2:0>>{0§<kotlin.Any?>}additionalText.<no name provided>#qux12(0:0){0§<IR<2:0>>}
      //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
      //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
      //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
      fun <F12T : IR<T>> qux12(t: F12T): T {
        return t.foo()
      }

      // CHECK:
      //   Mangled name computed from Ir (compatible mode: false):         @Value<2:0,CR<2:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<2:0,CR<2:0>>{}deepO
      //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
      //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
      //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
      private val Value<T, CR<T>>.deepO: T /* by */ 
        field = { // BLOCK
          // CHECK:
          //   Mangled name computed from Ir (compatible mode: false):         @Value<3:0,CR<3:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<3:0,CR<3:0>>{}deepO.<no name provided>
          //   Mangled name computed from Ir (compatible mode: true):          additionalText$delegate.<no name provided>.deepO$delegate.<no name provided>
          //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
          //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
          //   Mangled name computed from Fir (compatible mode: false):        <anonymous>
          //   Mangled name computed from Fir (compatible mode: true):         <anonymous>
          local class <no name provided> : IDelegate1<Value<T, CR<T>>, T> {
            // CHECK:
            //   Mangled name computed from Ir (compatible mode: false):         @Value<4:0,CR<4:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<4:0,CR<4:0>>{}deepO.<no name provided>#<init>(){}
            //   Mangled name computed from Ir (compatible mode: true):          additionalText$delegate.<no name provided>.deepO$delegate.<no name provided>#<init>(){}
            //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Fir (compatible mode: false):        #<init>(){}
            //   Mangled name computed from Fir (compatible mode: true):         #<init>(){}
            constructor() /* primary */ {
              super/*Any*/()
              /* <init>() */

            }

            // CHECK JVM_IR:
            //   Mangled name computed from Ir (compatible mode: false):         @Value<4:0,CR<4:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<4:0,CR<4:0>>{}deepO.<no name provided>#getValue(Value<4:0,CR<4:0>>;kotlin.reflect.KProperty<*>){}4:0
            //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
            //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
            //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
            // CHECK JS_IR:
            //   Mangled name computed from Ir (compatible mode: false):         @Value<4:0,CR<4:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<4:0,CR<4:0>>{}deepO.<no name provided>#getValue(Value<4:0,CR<4:0>>;kotlin.reflect.KProperty<*>){}
            //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
            //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
            //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
            override operator fun getValue(t: Value<T, CR<T>>, p: KProperty<*>): T {
              return t.<get-value1>()
            }

            // CHECK JVM_IR:
            //   Mangled name computed from Ir (compatible mode: false):         @Value<4:0,CR<4:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<4:0,CR<4:0>>{}deepO.<no name provided>#qux21(0:0){0§<kotlin.Any?>}0:0
            //   Mangled name computed from Ir (compatible mode: true):          additionalText$delegate.<no name provided>.deepO$delegate.<no name provided>#qux21(0:0){0§<kotlin.Any?>}0:0
            //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Fir (compatible mode: false):        #qux21(0:0){0§<kotlin.Any?>}0:0
            //   Mangled name computed from Fir (compatible mode: true):         #qux21(0:0){0§<kotlin.Any?>}0:0
            // CHECK JS_IR:
            //   Mangled name computed from Ir (compatible mode: false):         @Value<4:0,CR<4:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<4:0,CR<4:0>>{}deepO.<no name provided>#qux21(0:0){0§<kotlin.Any?>}
            //   Mangled name computed from Ir (compatible mode: true):          additionalText$delegate.<no name provided>.deepO$delegate.<no name provided>#qux21(0:0){0§<kotlin.Any?>}
            //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Fir (compatible mode: false):        #qux21(0:0){0§<kotlin.Any?>}0:0
            //   Mangled name computed from Fir (compatible mode: true):         #qux21(0:0){0§<kotlin.Any?>}0:0
            fun <F21T : Any?> qux21(t: F21T): F21T {
              return t
            }

            // CHECK JVM_IR:
            //   Mangled name computed from Ir (compatible mode: false):         @Value<4:0,CR<4:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<4:0,CR<4:0>>{}deepO.<no name provided>#qux22(0:0){0§<IR<4:0>>}4:0
            //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
            //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
            //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
            // CHECK JS_IR:
            //   Mangled name computed from Ir (compatible mode: false):         @Value<4:0,CR<4:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<4:0,CR<4:0>>{}deepO.<no name provided>#qux22(0:0){0§<IR<4:0>>}
            //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
            //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
            //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
            fun <F22T : IR<T>> qux22(t: F22T): T {
              return t.foo()
            }

          }

          <no name provided>()
        }
        // CHECK JVM_IR:
        //   Mangled name computed from Ir (compatible mode: false):         @Value<2:0,CR<2:0>>{0§<kotlin.Any?>}additionalText.<no name provided>#<get-deepO>@Value<2:0,CR<2:0>>(){}2:0
        //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
        //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
        //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
        //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
        //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
        // CHECK JS_IR:
        //   Mangled name computed from Ir (compatible mode: false):         @Value<2:0,CR<2:0>>{0§<kotlin.Any?>}additionalText.<no name provided>#<get-deepO>@Value<2:0,CR<2:0>>(){}
        //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
        //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
        //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
        //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
        //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
        private get(): T {
          return <this>.#deepO$delegate.getValue(t = <this>, p = <no name provided>::deepO)
        }

      // CHECK:
      //   Mangled name computed from Ir (compatible mode: false):         @Value<2:0,CR<2:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<2:0,CR<2:0>>{}deepK
      //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
      //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
      //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
      private val Value<T, CR<T>>.deepK: T /* by */ 
        field = { // BLOCK
          // CHECK:
          //   Mangled name computed from Ir (compatible mode: false):         @Value<3:0,CR<3:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<3:0,CR<3:0>>{}deepK.<no name provided>
          //   Mangled name computed from Ir (compatible mode: true):          additionalText$delegate.<no name provided>.deepK$delegate.<no name provided>
          //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
          //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
          //   Mangled name computed from Fir (compatible mode: false):        <anonymous>
          //   Mangled name computed from Fir (compatible mode: true):         <anonymous>
          local class <no name provided> : IDelegate1<Value<T, CR<T>>, T> {
            // CHECK:
            //   Mangled name computed from Ir (compatible mode: false):         @Value<4:0,CR<4:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<4:0,CR<4:0>>{}deepK.<no name provided>#<init>(){}
            //   Mangled name computed from Ir (compatible mode: true):          additionalText$delegate.<no name provided>.deepK$delegate.<no name provided>#<init>(){}
            //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Fir (compatible mode: false):        #<init>(){}
            //   Mangled name computed from Fir (compatible mode: true):         #<init>(){}
            constructor() /* primary */ {
              super/*Any*/()
              /* <init>() */

            }

            // CHECK JVM_IR:
            //   Mangled name computed from Ir (compatible mode: false):         @Value<4:0,CR<4:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<4:0,CR<4:0>>{}deepK.<no name provided>#getValue(Value<4:0,CR<4:0>>;kotlin.reflect.KProperty<*>){}4:0
            //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
            //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
            //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
            // CHECK JS_IR:
            //   Mangled name computed from Ir (compatible mode: false):         @Value<4:0,CR<4:0>>{0§<kotlin.Any?>}additionalText.<no name provided>@Value<4:0,CR<4:0>>{}deepK.<no name provided>#getValue(Value<4:0,CR<4:0>>;kotlin.reflect.KProperty<*>){}
            //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
            //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
            //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
            //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
            override operator fun getValue(t: Value<T, CR<T>>, p: KProperty<*>): T {
              return t.<get-value2>().foo()
            }

          }

          <no name provided>()
        }
        // CHECK JVM_IR:
        //   Mangled name computed from Ir (compatible mode: false):         @Value<2:0,CR<2:0>>{0§<kotlin.Any?>}additionalText.<no name provided>#<get-deepK>@Value<2:0,CR<2:0>>(){}2:0
        //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
        //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
        //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
        //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
        //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
        // CHECK JS_IR:
        //   Mangled name computed from Ir (compatible mode: false):         @Value<2:0,CR<2:0>>{0§<kotlin.Any?>}additionalText.<no name provided>#<get-deepK>@Value<2:0,CR<2:0>>(){}
        //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
        //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
        //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
        //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
        //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
        private get(): T {
          return <this>.#deepK$delegate.getValue(t = <this>, p = <no name provided>::deepK)
        }

      // CHECK JVM_IR:
      //   Mangled name computed from Ir (compatible mode: false):         @Value<2:0,CR<2:0>>{0§<kotlin.Any?>}additionalText.<no name provided>#getValue(Value<2:0,CR<2:0>>;kotlin.reflect.KProperty<*>){}P<2:0,2:0>
      //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
      //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
      //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
      // CHECK JS_IR:
      //   Mangled name computed from Ir (compatible mode: false):         @Value<2:0,CR<2:0>>{0§<kotlin.Any?>}additionalText.<no name provided>#getValue(Value<2:0,CR<2:0>>;kotlin.reflect.KProperty<*>){}
      //   Mangled name computed from Ir (compatible mode: true):          could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'PROPERTY name:additionalText visibility:public modality:FINAL [delegated,val]'
      //   Mangled name computed from Descriptor (compatible mode: false): could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Descriptor (compatible mode: true):  could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
      //   Mangled name computed from Fir (compatible mode: false):        could not compute mangled name: java.lang.IllegalStateException: Should not be here!
      //   Mangled name computed from Fir (compatible mode: true):         could not compute mangled name: java.lang.IllegalStateException: Should not be here!
      override operator fun getValue(t: Value<T, CR<T>>, p: KProperty<*>): P<T, T> {
        return P<T, T>(p1 = (<this>, t).<get-deepO>(), p2 = (<this>, t).<get-deepK>())
      }

    }

    <no name provided>()
  }
  // CHECK JVM_IR:
  //   Mangled name computed from Ir:         #<get-additionalText>@Value<0:0,CR<0:0>>(){0§<kotlin.Any?>}P<0:0,0:0>
  //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
  //   Mangled name computed from Fir:        #<get-additionalText>@Value<0:0,CR<0:0>>(){0§<kotlin.Any?>}P<0:0,0:0>
  //   Public signature: /additionalText.<get-additionalText>|-2964788147301147474[0]
  // CHECK JS_IR:
  //   Mangled name computed from Ir:         #<get-additionalText>@Value<0:0,CR<0:0>>(){0§<kotlin.Any?>}
  //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> Value<T, CR<T>>.`<get-additionalText>`(): P<T, T> defined in root package'
  //   Mangled name computed from Fir:        #<get-additionalText>@Value<0:0,CR<0:0>>(){0§<kotlin.Any?>}P<0:0,0:0>
  //   Public signature: /additionalText.<get-additionalText>|-2964788147301147474[0]
  get(): P<T, T> {
    return #additionalText$delegate.getValue(t = <this>, p = ::additionalText/*</* null */>()*/)
  }

