class A : I, J {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  override fun ff() {
  }

}

class B : I, J {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  override fun ff() {
  }

}

interface I : K {
  abstract fun ff()

}

interface J : K {
}

interface K {
}

fun testFlexible1() {
  val v: K? = when {
    true -> a()
    true -> b()
  }
  v.ff()
}

fun testFlexible2(a: A, b: B) {
  val v: K? = when {
    true -> id<@FlexibleNullability A?>(x = a)
    true -> id<@FlexibleNullability B?>(x = b)
  }
  v.ff()
}

fun testIntersection(a: A, b: B) {
  val v: K = when {
    true -> a
    true -> b
  }
  v /*as I */.ff()
}

