// CHECK:
//   Mangled name: Action
//   Public signature: /Action|null[0]
typealias Action<RenderingT : Any?> = Function1<@UnsafeVariance RenderingT, Unit>
// CHECK:
//   Mangled name: Tag
//   Public signature: /Tag|null[0]
data class Tag<out RenderingT : Any?> {
  // CHECK:
  //   Mangled name: Tag#<init>(kotlin.Function1<1:0,kotlin.Unit>){}
  //   Public signature: /Tag.<init>|5347267751589030160[0]
  constructor(action: Function1<@UnsafeVariance RenderingT, Unit>) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: Tag{}action
  //   Public signature: /Tag.action|4099104176676099950[0]
  val action: Function1<@UnsafeVariance RenderingT, Unit>
    field = action
    // CHECK:
    //   Mangled name: Tag#<get-action>(){}kotlin.Function1<1:0,kotlin.Unit>
    //   Public signature: /Tag.action.<get-action>|8009562688035104366[0]
    get

  // CHECK:
  //   Mangled name: Tag#component1(){}kotlin.Function1<1:0,kotlin.Unit>
  //   Public signature: /Tag.component1|8111540572719988721[0]
  operator fun component1(): Function1<@UnsafeVariance RenderingT, Unit> {
    return <this>.#action
  }

  // CHECK:
  //   Mangled name: Tag#copy(kotlin.Function1<1:0,kotlin.Unit>){}Tag<1:0>
  //   Public signature: /Tag.copy|3977576146240089732[0]
  fun copy(action: Function1<@UnsafeVariance RenderingT, Unit> = <this>.#action): Tag<RenderingT> {
    return Tag<RenderingT>(action = action)
  }

  // CHECK:
  //   Mangled name: Tag#toString(){}kotlin.String
  //   Public signature: /Tag.toString|6958853723545266802[0]
  override fun toString(): String {
    return "Tag(" + "action=" + <this>.#action + ")"
  }

  // CHECK:
  //   Mangled name: Tag#hashCode(){}kotlin.Int
  //   Public signature: /Tag.hashCode|-8048879360829830756[0]
  override fun hashCode(): Int {
    return <this>.#action.hashCode()
  }

  // CHECK:
  //   Mangled name: Tag#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /Tag.equals|722809408929142791[0]
  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is Tag<RenderingT> -> return false
    }
    val tmp0_other_with_cast: Tag<RenderingT> = other as Tag<RenderingT>
    when {
      EQEQ(arg0 = <this>.#action, arg1 = tmp0_other_with_cast.#action).not() -> return false
    }
    return true
  }

}

// CHECK:
//   Mangled name: #getTag(){}Tag<*>
//   Public signature: /getTag|-5296435485745699550[0]
fun getTag(): Tag<*> {
  throw Exception()
}

// CHECK:
//   Mangled name: #doAction(){}
//   Public signature: /doAction|7630529100125907322[0]
fun doAction() {
  getTag().<get-action>() /*~> Unit */
}

