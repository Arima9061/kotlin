// MODULE: m1
// FILE: genericClassInDifferentModule_m1.kt

// CHECK:
//   Mangled name: Base
//   Public signature: /Base|null[0]
abstract class Base<T : Any?> {
  // CHECK:
  //   Mangled name computed from Ir:         Base#<init>(1:0){}
  //   Mangled name computed from Descriptor: Base#<init>(1:0){}
  //   Mangled name computed from Fir:        Base#<init>(0:-1){}
  //   Public signature: /Base.<init>|8751876555175556900[0]
  constructor(x: T) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: Base{}x
  //   Public signature: /Base.x|-8060530855978347579[0]
  val x: T
    field = x
    // CHECK JVM_IR:
    //   Mangled name: Base#<get-x>(){}1:0
    //   Public signature: /Base.x.<get-x>|-8893883356128097563[0]
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         Base#<get-x>(){}
    //   Mangled name computed from Descriptor: Base#<get-x>(){}
    //   Mangled name computed from Fir:        Base#<get-x>(){}1:0
    //   Public signature: /Base.x.<get-x>|-8893883356128097563[0]
    get

  // CHECK JVM_IR:
  //   Mangled name: Base#foo(0:0){0§<kotlin.Any?>}1:0
  //   Public signature: /Base.foo|8673945311830780726[0]
  // CHECK JS_IR:
  //   Mangled name computed from Ir:         Base#foo(0:0){0§<kotlin.Any?>}
  //   Mangled name computed from Descriptor: Base#foo(0:0){0§<kotlin.Any?>}
  //   Mangled name computed from Fir:        Base#foo(0:0){0§<kotlin.Any?>}1:0
  //   Public signature: /Base.foo|8673945311830780726[0]
  abstract fun <Y : Any?> foo(y: Y): T
  // CHECK:
  //   Mangled name: Base{}bar
  //   Public signature: /Base.bar|-7864284097863469857[0]
  abstract var bar: T
    // CHECK JVM_IR:
    //   Mangled name: Base#<get-bar>(){}1:0
    //   Public signature: /Base.bar.<get-bar>|7899956589744407340[0]
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         Base#<get-bar>(){}
    //   Mangled name computed from Descriptor: Base#<get-bar>(){}
    //   Mangled name computed from Fir:        Base#<get-bar>(){}1:0
    //   Public signature: /Base.bar.<get-bar>|7899956589744407340[0]
    abstract get
    // CHECK:
    //   Mangled name: Base#<set-bar>(1:0){}
    //   Public signature: /Base.bar.<set-bar>|3083825024913650500[0]
    abstract set

  // CHECK:
  //   Mangled name computed from Ir:         Base@0:0{0§<kotlin.Any?>}exn
  //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'Z' of 'public abstract fun <Z> Z.`<get-exn>`(): T defined in Base'
  //   Mangled name computed from Fir:        Base@0:0{0§<kotlin.Any?>}exn
  //   Public signature: /Base.exn|2371047114698435273[0]
  abstract var <Z : Any?> Z.exn: T
    // CHECK JVM_IR:
    //   Mangled name computed from Ir:         Base#<get-exn>@0:0(){0§<kotlin.Any?>}1:0
    //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'Z' of 'public abstract fun <Z> Z.`<get-exn>`(): T defined in Base'
    //   Mangled name computed from Fir:        Base#<get-exn>@0:0(){0§<kotlin.Any?>}1:0
    //   Public signature: /Base.exn.<get-exn>|6217753676739394662[0]
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         Base#<get-exn>@0:0(){0§<kotlin.Any?>}
    //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'Z' of 'public abstract fun <Z> Z.`<get-exn>`(): T defined in Base'
    //   Mangled name computed from Fir:        Base#<get-exn>@0:0(){0§<kotlin.Any?>}1:0
    //   Public signature: /Base.exn.<get-exn>|6217753676739394662[0]
    abstract get
    // CHECK:
    //   Mangled name computed from Ir:         Base#<set-exn>@0:0(1:0){0§<kotlin.Any?>}
    //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'Z' of 'public abstract fun <Z> Z.`<set-exn>`(`<set-?>`: T): Unit defined in Base'
    //   Mangled name computed from Fir:        Base#<set-exn>@0:0(1:0){0§<kotlin.Any?>}
    //   Public signature: /Base.exn.<set-exn>|5747714515092438414[0]
    abstract set

}

// MODULE: m2
// FILE: genericClassInDifferentModule_m2.kt

// CHECK:
//   Mangled name: Derived1
//   Public signature: /Derived1|null[0]
class Derived1<T : Any?> : Base<T> {
  // CHECK:
  //   Mangled name computed from Ir:         Derived1#<init>(1:0){}
  //   Mangled name computed from Descriptor: Derived1#<init>(1:0){}
  //   Mangled name computed from Fir:        Derived1#<init>(0:-1){}
  //   Public signature: /Derived1.<init>|8751876555175556900[0]
  constructor(x: T) /* primary */ {
    super/*Base*/<T>(x = x)
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: Derived1#foo(0:0){0§<kotlin.Any?>}1:0
  //   Public signature: /Derived1.foo|8673945311830780726[0]
  override fun <Y : Any?> foo(y: Y): T {
    return <this>.<get-x>()
  }

  // CHECK JVM_IR:
  //   Mangled name: Derived1{}bar
  //   Public signature: /Derived1.bar|-7864284097863469857[0]
  // CHECK JS_IR:
  //   Mangled name computed from Ir:         Base#<get-x>(){}
  //   Mangled name computed from Descriptor: Base#<get-x>(){}
  //   Mangled name computed from Fir:        Base#<get-x>(){}1:0
  //   Public signature: /Base.x.<get-x>|-8893883356128097563[0]
  override var bar: T
    field = x
    // CHECK JVM_IR:
    //   Mangled name: Derived1#<get-bar>(){}1:0
    //   Public signature: /Derived1.bar.<get-bar>|7899956589744407340[0]
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         Base#foo(0:0){0§<kotlin.Any?>}
    //   Mangled name computed from Descriptor: Base#foo(0:0){0§<kotlin.Any?>}
    //   Mangled name computed from Fir:        Base#foo(0:0){0§<kotlin.Any?>}1:0
    //   Public signature: /Base.foo|8673945311830780726[0]
    override get
    // CHECK:
    //   Mangled name: Derived1#<set-bar>(1:0){}
    //   Public signature: /Derived1.bar.<set-bar>|3083825024913650500[0]
    override set

  // CHECK JVM_IR:
  //   Mangled name computed from Ir:         Derived1@0:0{0§<kotlin.Any?>}exn
  //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'Z' of 'public open fun <Z> Z.`<get-exn>`(): T defined in Derived1'
  //   Mangled name computed from Fir:        Derived1@0:0{0§<kotlin.Any?>}exn
  //   Public signature: /Derived1.exn|2371047114698435273[0]
  // CHECK JS_IR:
  //   Mangled name computed from Ir:         Base#<get-bar>(){}
  //   Mangled name computed from Descriptor: Base#<get-bar>(){}
  //   Mangled name computed from Fir:        Base#<get-bar>(){}1:0
  //   Public signature: /Base.bar.<get-bar>|7899956589744407340[0]
  override var <Z : Any?> Z.exn: T
    // CHECK:
    //   Mangled name computed from Ir:         Derived1#<get-exn>@0:0(){0§<kotlin.Any?>}1:0
    //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'Z' of 'public open fun <Z> Z.`<get-exn>`(): T defined in Derived1'
    //   Mangled name computed from Fir:        Derived1#<get-exn>@0:0(){0§<kotlin.Any?>}1:0
    //   Public signature: /Derived1.exn.<get-exn>|6217753676739394662[0]
    override get(): T {
      return <this>.<get-x>()
    }
    // CHECK:
    //   Mangled name computed from Ir:         Derived1#<set-exn>@0:0(1:0){0§<kotlin.Any?>}
    //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'Z' of 'public open fun <Z> Z.`<set-exn>`(value: T): Unit defined in Derived1'
    //   Mangled name computed from Fir:        Derived1#<set-exn>@0:0(1:0){0§<kotlin.Any?>}
    //   Public signature: /Derived1.exn.<set-exn>|5747714515092438414[0]
    override set(value: T) {
    }

}

