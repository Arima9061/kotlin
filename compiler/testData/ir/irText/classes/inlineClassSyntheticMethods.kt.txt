// CHECK:
//   Mangled name: C
//   Public signature: /C|null[0]
class C<T : Any?> {
  // CHECK:
  //   Mangled name: C#<init>(1:0){}
  //   Public signature: /C.<init>|-8731461708390519279[0]
  constructor(t: T) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: C{}t
  //   Public signature: /C.t|-8767999791664836944[0]
  val t: T
    field = t
    // CHECK JVM_IR:
    //   Mangled name: C#<get-t>(){}1:0
    //   Public signature: /C.t.<get-t>|5296523675281381766[0]
    // CHECK JS_IR:
    //   Mangled name: C#<get-t>(){}
    //   Public signature: /C.t.<get-t>|7061140872129253552[0]
    get

  // CHECK JVM_IR:
  //   Mangled name: C#hashCode(){}kotlin.Int
  //   Public signature: /C.hashCode|-8048879360829830756[0]
  // CHECK JS_IR:
  //   Mangled name: C#hashCode(){}
  //   Public signature: /C.hashCode|3409210261493131192[0]
  override fun hashCode(): Int {
    return <this>.<get-t>() as Int
  }

}

// CHECK:
//   Mangled name: IC
//   Public signature: /IC|null[0]
value class IC<TT : Any?> {
  // CHECK:
  //   Mangled name: IC#<init>(C<1:0>){}
  //   Public signature: /IC.<init>|-2549303465575104617[0]
  constructor(c: C<TT>) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: IC{}c
  //   Public signature: /IC.c|-4416962153448040627[0]
  val c: C<TT>
    field = c
    // CHECK JVM_IR:
    //   Mangled name: IC#<get-c>(){}C<1:0>
    //   Public signature: /IC.c.<get-c>|-6707667902688835915[0]
    // CHECK JS_IR:
    //   Mangled name: IC#<get-c>(){}
    //   Public signature: /IC.c.<get-c>|2368736057102379596[0]
    get

  // CHECK JVM_IR:
  //   Mangled name: IC#foo(){}kotlin.Int
  //   Public signature: /IC.foo|-1256155405684507276[0]
  // CHECK JS_IR:
  //   Mangled name: IC#foo(){}
  //   Public signature: /IC.foo|-1041209573719867811[0]
  fun foo(): Int {
    return <this>.<get-c>().hashCode()
  }

  // CHECK JVM_IR:
  //   Mangled name: IC#toString(){}kotlin.String
  //   Public signature: /IC.toString|6958853723545266802[0]
  // CHECK JS_IR:
  //   Mangled name: IC#toString(){}
  //   Public signature: /IC.toString|-1522858123163872138[0]
  override fun toString(): String {
    return "IC(" + "c=" + <this>.#c + ")"
  }

  // CHECK JVM_IR:
  //   Mangled name: IC#hashCode(){}kotlin.Int
  //   Public signature: /IC.hashCode|-8048879360829830756[0]
  // CHECK JS_IR:
  //   Mangled name: IC#hashCode(){}
  //   Public signature: /IC.hashCode|3409210261493131192[0]
  override fun hashCode(): Int {
    return <this>.#c.hashCode()
  }

  // CHECK JVM_IR:
  //   Mangled name: IC#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /IC.equals|722809408929142791[0]
  // CHECK JS_IR:
  //   Mangled name: IC#equals(kotlin.Any?){}
  //   Public signature: /IC.equals|4638265728071529943[0]
  override operator fun equals(other: Any?): Boolean {
    when {
      other !is IC<TT> -> return false
    }
    val tmp0_other_with_cast: IC<TT> = other as IC<TT>
    when {
      EQEQ(arg0 = <this>.#c, arg1 = tmp0_other_with_cast.#c).not() -> return false
    }
    return true
  }

}

// CHECK JVM_IR:
//   Mangled name: #box(){}kotlin.String
//   Public signature: /box|-9347091776561469[0]
// CHECK JS_IR:
//   Mangled name: #box(){}
//   Public signature: /box|2173511048851971368[0]
fun box(): String {
  val ic: IC<Int> = IC<Int>(c = C<Int>(t = 42))
  when {
    EQEQ(arg0 = ic.foo(), arg1 = 42).not() -> return "FAIL"
  }
  return "OK"
}

