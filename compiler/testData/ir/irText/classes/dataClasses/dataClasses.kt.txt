// CHECK:
//   Mangled name: Test1
//   Public signature: /Test1|null[0]
data class Test1 {
  // CHECK:
  //   Mangled name: Test1#<init>(kotlin.Int;kotlin.String;kotlin.Any){}
  //   Public signature: /Test1.<init>|3237794121889594884[0]
  constructor(x: Int, y: String, z: Any) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: Test1{}x
  //   Public signature: /Test1.x|-8060530855978347579[0]
  val x: Int
    field = x
    // CHECK:
    //   Mangled name: Test1#<get-x>(){}kotlin.Int
    //   Public signature: /Test1.x.<get-x>|4966956098150895696[0]
    get

  // CHECK:
  //   Mangled name: Test1{}y
  //   Public signature: /Test1.y|3625903257357557171[0]
  val y: String
    field = y
    // CHECK:
    //   Mangled name: Test1#<get-y>(){}kotlin.String
    //   Public signature: /Test1.y.<get-y>|1760775372995524147[0]
    get

  // CHECK:
  //   Mangled name: Test1{}z
  //   Public signature: /Test1.z|7549650372729116193[0]
  val z: Any
    field = z
    // CHECK:
    //   Mangled name: Test1#<get-z>(){}kotlin.Any
    //   Public signature: /Test1.z.<get-z>|3264772919715209875[0]
    get

  // CHECK:
  //   Mangled name: Test1#component1(){}kotlin.Int
  //   Public signature: /Test1.component1|-8217597213800111288[0]
  operator fun component1(): Int {
    return <this>.#x
  }

  // CHECK:
  //   Mangled name: Test1#component2(){}kotlin.String
  //   Public signature: /Test1.component2|1228864375093914597[0]
  operator fun component2(): String {
    return <this>.#y
  }

  // CHECK:
  //   Mangled name: Test1#component3(){}kotlin.Any
  //   Public signature: /Test1.component3|-8402360621236361298[0]
  operator fun component3(): Any {
    return <this>.#z
  }

  // CHECK:
  //   Mangled name: Test1#copy(kotlin.Int;kotlin.String;kotlin.Any){}Test1
  //   Public signature: /Test1.copy|9126311422094034907[0]
  fun copy(x: Int = <this>.#x, y: String = <this>.#y, z: Any = <this>.#z): Test1 {
    return Test1(x = x, y = y, z = z)
  }

  // CHECK:
  //   Mangled name: Test1#toString(){}kotlin.String
  //   Public signature: /Test1.toString|6958853723545266802[0]
  override fun toString(): String {
    return "Test1(" + "x=" + <this>.#x + ", " + "y=" + <this>.#y + ", " + "z=" + <this>.#z + ")"
  }

  // CHECK:
  //   Mangled name: Test1#hashCode(){}kotlin.Int
  //   Public signature: /Test1.hashCode|-8048879360829830756[0]
  override fun hashCode(): Int {
    var result: Int = <this>.#x.hashCode()
    result = result.times(other = 31).plus(other = <this>.#y.hashCode())
    result = result.times(other = 31).plus(other = <this>.#z.hashCode())
    return result
  }

  // CHECK:
  //   Mangled name: Test1#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /Test1.equals|722809408929142791[0]
  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is Test1 -> return false
    }
    val tmp0_other_with_cast: Test1 = other as Test1
    when {
      EQEQ(arg0 = <this>.#x, arg1 = tmp0_other_with_cast.#x).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#y, arg1 = tmp0_other_with_cast.#y).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#z, arg1 = tmp0_other_with_cast.#z).not() -> return false
    }
    return true
  }

}

// CHECK:
//   Mangled name: Test2
//   Public signature: /Test2|null[0]
data class Test2 {
  // CHECK:
  //   Mangled name: Test2#<init>(kotlin.Any?){}
  //   Public signature: /Test2.<init>|-8205545948568413246[0]
  constructor(x: Any?) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: Test2{}x
  //   Public signature: /Test2.x|-8060530855978347579[0]
  val x: Any?
    field = x
    // CHECK:
    //   Mangled name: Test2#<get-x>(){}kotlin.Any?
    //   Public signature: /Test2.x.<get-x>|4529939993405876842[0]
    get

  // CHECK:
  //   Mangled name: Test2#component1(){}kotlin.Any?
  //   Public signature: /Test2.component1|-9062417290864755441[0]
  operator fun component1(): Any? {
    return <this>.#x
  }

  // CHECK:
  //   Mangled name: Test2#copy(kotlin.Any?){}Test2
  //   Public signature: /Test2.copy|6930260054694985237[0]
  fun copy(x: Any? = <this>.#x): Test2 {
    return Test2(x = x)
  }

  // CHECK:
  //   Mangled name: Test2#toString(){}kotlin.String
  //   Public signature: /Test2.toString|6958853723545266802[0]
  override fun toString(): String {
    return "Test2(" + "x=" + <this>.#x + ")"
  }

  // CHECK:
  //   Mangled name: Test2#hashCode(){}kotlin.Int
  //   Public signature: /Test2.hashCode|-8048879360829830756[0]
  override fun hashCode(): Int {
    return when {
      EQEQ(arg0 = <this>.#x, arg1 = null) -> 0
      else -> <this>.#x.hashCode()
    }
  }

  // CHECK:
  //   Mangled name: Test2#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /Test2.equals|722809408929142791[0]
  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is Test2 -> return false
    }
    val tmp0_other_with_cast: Test2 = other as Test2
    when {
      EQEQ(arg0 = <this>.#x, arg1 = tmp0_other_with_cast.#x).not() -> return false
    }
    return true
  }

}

// CHECK:
//   Mangled name: Test3
//   Public signature: /Test3|null[0]
data class Test3 {
  // CHECK:
  //   Mangled name: Test3#<init>(kotlin.Double;kotlin.Double?;kotlin.Float;kotlin.Float?){}
  //   Public signature: /Test3.<init>|8878758829470622568[0]
  constructor(d: Double, dn: Double?, f: Float, df: Float?) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: Test3{}d
  //   Public signature: /Test3.d|5174763769109925331[0]
  val d: Double
    field = d
    // CHECK:
    //   Mangled name: Test3#<get-d>(){}kotlin.Double
    //   Public signature: /Test3.d.<get-d>|-5403877192080381201[0]
    get

  // CHECK:
  //   Mangled name: Test3{}dn
  //   Public signature: /Test3.dn|-2746901618144580958[0]
  val dn: Double?
    field = dn
    // CHECK:
    //   Mangled name: Test3#<get-dn>(){}kotlin.Double?
    //   Public signature: /Test3.dn.<get-dn>|-6168917619305056925[0]
    get

  // CHECK:
  //   Mangled name: Test3{}f
  //   Public signature: /Test3.f|4026638760133205152[0]
  val f: Float
    field = f
    // CHECK:
    //   Mangled name: Test3#<get-f>(){}kotlin.Float
    //   Public signature: /Test3.f.<get-f>|6014982203170860581[0]
    get

  // CHECK:
  //   Mangled name: Test3{}df
  //   Public signature: /Test3.df|8501496894035980235[0]
  val df: Float?
    field = df
    // CHECK:
    //   Mangled name: Test3#<get-df>(){}kotlin.Float?
    //   Public signature: /Test3.df.<get-df>|-3259181884204926150[0]
    get

  // CHECK:
  //   Mangled name: Test3#component1(){}kotlin.Double
  //   Public signature: /Test3.component1|2948120330742694173[0]
  operator fun component1(): Double {
    return <this>.#d
  }

  // CHECK:
  //   Mangled name: Test3#component2(){}kotlin.Double?
  //   Public signature: /Test3.component2|-4142687720775551365[0]
  operator fun component2(): Double? {
    return <this>.#dn
  }

  // CHECK:
  //   Mangled name: Test3#component3(){}kotlin.Float
  //   Public signature: /Test3.component3|-7671183964878043859[0]
  operator fun component3(): Float {
    return <this>.#f
  }

  // CHECK:
  //   Mangled name: Test3#component4(){}kotlin.Float?
  //   Public signature: /Test3.component4|-5678719099315503302[0]
  operator fun component4(): Float? {
    return <this>.#df
  }

  // CHECK:
  //   Mangled name: Test3#copy(kotlin.Double;kotlin.Double?;kotlin.Float;kotlin.Float?){}Test3
  //   Public signature: /Test3.copy|-4127117122996434411[0]
  fun copy(d: Double = <this>.#d, dn: Double? = <this>.#dn, f: Float = <this>.#f, df: Float? = <this>.#df): Test3 {
    return Test3(d = d, dn = dn, f = f, df = df)
  }

  // CHECK:
  //   Mangled name: Test3#toString(){}kotlin.String
  //   Public signature: /Test3.toString|6958853723545266802[0]
  override fun toString(): String {
    return "Test3(" + "d=" + <this>.#d + ", " + "dn=" + <this>.#dn + ", " + "f=" + <this>.#f + ", " + "df=" + <this>.#df + ")"
  }

  // CHECK:
  //   Mangled name: Test3#hashCode(){}kotlin.Int
  //   Public signature: /Test3.hashCode|-8048879360829830756[0]
  override fun hashCode(): Int {
    var result: Int = <this>.#d.hashCode()
    result = result.times(other = 31).plus(other = when {
      EQEQ(arg0 = <this>.#dn, arg1 = null) -> 0
      else -> <this>.#dn.hashCode()
    })
    result = result.times(other = 31).plus(other = <this>.#f.hashCode())
    result = result.times(other = 31).plus(other = when {
      EQEQ(arg0 = <this>.#df, arg1 = null) -> 0
      else -> <this>.#df.hashCode()
    })
    return result
  }

  // CHECK:
  //   Mangled name: Test3#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /Test3.equals|722809408929142791[0]
  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is Test3 -> return false
    }
    val tmp0_other_with_cast: Test3 = other as Test3
    when {
      EQEQ(arg0 = <this>.#d, arg1 = tmp0_other_with_cast.#d).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#dn, arg1 = tmp0_other_with_cast.#dn).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#f, arg1 = tmp0_other_with_cast.#f).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#df, arg1 = tmp0_other_with_cast.#df).not() -> return false
    }
    return true
  }

}

