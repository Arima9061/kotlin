// CHECK:
//   Mangled name: A
//   Public signature: /A|null[0]
class A {
  // CHECK:
  //   Mangled name: A#<init>(){}
  //   Public signature: /A.<init>|-5645683436151566731[0]
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

// CHECK:
//   Mangled name: #plusAssign@A(kotlin.String){}
//   Public signature: /plusAssign|-3878040514225458311[0]
operator fun A.plusAssign(s: String) {
}

// CHECK:
//   Mangled name: #minusAssign@A(kotlin.String){}
//   Public signature: /minusAssign|7280125346699981355[0]
operator fun A.minusAssign(s: String) {
}

// CHECK:
//   Mangled name: #timesAssign@A(kotlin.String){}
//   Public signature: /timesAssign|-8299603771166721739[0]
operator fun A.timesAssign(s: String) {
}

// CHECK:
//   Mangled name: #divAssign@A(kotlin.String){}
//   Public signature: /divAssign|8861164861689844119[0]
operator fun A.divAssign(s: String) {
}

// CHECK:
//   Mangled name: #remAssign@A(kotlin.String){}
//   Public signature: /remAssign|-6176434065111215580[0]
operator fun A.remAssign(s: String) {
}

// CHECK:
//   Mangled name: {}p
//   Public signature: /p|6715504260787941082[0]
val p: A
  field = A()
  // CHECK JVM_IR:
  //   Mangled name: #<get-p>(){}A
  //   Public signature: /p.<get-p>|2133879666814551157[0]
  // CHECK JS_IR:
  //   Mangled name: #<get-p>(){}
  //   Public signature: /p.<get-p>|-1162552463316289847[0]
  get

// CHECK:
//   Mangled name: #testVariable(){}
//   Public signature: /testVariable|660968387512033895[0]
fun testVariable() {
  val a: A = A()
  a.plusAssign(s = "+=")
  a.minusAssign(s = "-=")
  a.timesAssign(s = "*=")
  a.divAssign(s = "/=")
  a.remAssign(s = "*=")
}

// CHECK:
//   Mangled name: #testProperty(){}
//   Public signature: /testProperty|5285658686723604291[0]
fun testProperty() {
  { // BLOCK
    <get-p>().plusAssign(s = "+=")
  }
  { // BLOCK
    <get-p>().minusAssign(s = "-=")
  }
  { // BLOCK
    <get-p>().timesAssign(s = "*=")
  }
  { // BLOCK
    <get-p>().divAssign(s = "/=")
  }
  { // BLOCK
    <get-p>().remAssign(s = "%=")
  }
}

