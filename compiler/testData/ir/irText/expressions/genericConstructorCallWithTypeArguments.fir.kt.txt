// CHECK JVM_IR:
//   Mangled name: #testSimple(){}Box<kotlin.Long>
//   Public signature: /testSimple|-4418410780086468517[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #testSimple(){}
//   Mangled name computed from Descriptor: #testSimple(){}
//   Mangled name computed from Fir:        #testSimple(){}Box<kotlin.Long>
//   Public signature: /testSimple|-4418410780086468517[0]
fun testSimple(): Box<Long> {
  return Box<Long>(value = 6L)
}

// CHECK JVM_IR:
//   Mangled name: #testArray(kotlin.Int;kotlin.Function0<0:0>){0§<kotlin.Any?>}kotlin.Array<0:0>
//   Public signature: /testArray|-2387335896299631149[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #testArray(kotlin.Int;kotlin.Function0<0:0>){0§<kotlin.Any?>}
//   Mangled name computed from Descriptor: #testArray(kotlin.Int;kotlin.Function0<0:0>){0§<kotlin.Any?>}
//   Mangled name computed from Fir:        #testArray(kotlin.Int;kotlin.Function0<0:0>){0§<kotlin.Any?>}kotlin.Array<0:0>
//   Public signature: /testArray|-2387335896299631149[0]
inline fun <reified T : Any?> testArray(n: Int, crossinline block: Function0<T>): Array<T> {
  return Array<T>(size = n, init = 
    // CHECK JVM_IR:
    //   Mangled name computed from Ir:         #testArray(kotlin.Int;kotlin.Function0<1:0>){0§<kotlin.Any?>}kotlin.Array<1:0>#<anonymous>#static(kotlin.Int){}1:0
    //   Mangled name computed from Descriptor: #testArray(kotlin.Int;kotlin.Function0<1:0>){0§<kotlin.Any?>}kotlin.Array<1:0>#<anonymous>#static(kotlin.Int){}1:0
    //   Mangled name computed from Fir:        could not compute mangled name: java.lang.IllegalStateException: unexpected element Array@fun <anonymous>(it: R|kotlin/Int|): R|T| <inline=Inline>  {... (truncated)
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         #testArray(kotlin.Int;kotlin.Function0<1:0>){0§<kotlin.Any?>}#<anonymous>#static(kotlin.Int){}
    //   Mangled name computed from Descriptor: #testArray(kotlin.Int;kotlin.Function0<1:0>){0§<kotlin.Any?>}#<anonymous>#static(kotlin.Int){}
    //   Mangled name computed from Fir:        could not compute mangled name: java.lang.IllegalStateException: unexpected element Array@fun <anonymous>(it: R|kotlin/Int|): R|T| <inline=Inline>  {... (truncated)
    local fun <anonymous>(it: Int): T {
      return block.invoke()
    }
)
}

// CHECK:
//   Mangled name: Box
//   Public signature: /Box|null[0]
class Box<T : Any?> {
  // CHECK:
  //   Mangled name computed from Ir:         Box#<init>(1:0){}
  //   Mangled name computed from Descriptor: Box#<init>(1:0){}
  //   Mangled name computed from Fir:        Box#<init>(0:-1){}
  //   Public signature: /Box.<init>|8751876555175556900[0]
  constructor(value: T) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: Box{}value
  //   Public signature: /Box.value|1987073854177347439[0]
  val value: T
    field = value
    // CHECK JVM_IR:
    //   Mangled name: Box#<get-value>(){}1:0
    //   Public signature: /Box.value.<get-value>|3167862337988859752[0]
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         Box#<get-value>(){}
    //   Mangled name computed from Descriptor: Box#<get-value>(){}
    //   Mangled name computed from Fir:        Box#<get-value>(){}1:0
    //   Public signature: /Box.value.<get-value>|3167862337988859752[0]
    get

}

