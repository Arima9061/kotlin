// CHECK:
//   Mangled name: A
//   Public signature: /A|null[0]
class A {
  // CHECK:
  //   Mangled name: A#<init>(){}
  //   Public signature: /A.<init>|-5645683436151566731[0]
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

// CHECK JVM_IR:
//   Mangled name: #get@A(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}kotlin.Int
//   Public signature: /get|925888735041089268[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #get@A(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}
//   Mangled name computed from Descriptor: #get@A(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}
//   Mangled name computed from Fir:        #get@A(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}kotlin.Int
//   Public signature: /get|925888735041089268[0]
operator fun A.get(i: Int, a: Int = 1, b: Int = 2, c: Int = 3, d: Int = 4): Int {
  return 0
}

// CHECK JVM_IR:
//   Mangled name: #set@A(kotlin.Int;kotlin.Int;kotlin.Int){}
//   Public signature: /set|-1889324313224580378[0]
// CHECK JS_IR:
//   Mangled name: #set@A(kotlin.Int;kotlin.Int;kotlin.Int){}
//   Public signature: /set|-1889324313224580378[0]
operator fun A.set(i: Int, j: Int = 42, v: Int) {
}

// CHECK:
//   Mangled name: #testSimpleAssignment(A){}
//   Public signature: /testSimpleAssignment|1100548656282165605[0]
fun testSimpleAssignment(a: A) {
  a.set(i = 1, v = 0)
}

// CHECK JVM_IR:
//   Mangled name: #testPostfixIncrement(A){}kotlin.Int
//   Public signature: /testPostfixIncrement|-2576964328021229709[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #testPostfixIncrement(A){}
//   Mangled name computed from Descriptor: #testPostfixIncrement(A){}
//   Mangled name computed from Fir:        #testPostfixIncrement(A){}kotlin.Int
//   Public signature: /testPostfixIncrement|-2576964328021229709[0]
fun testPostfixIncrement(a: A): Int {
  return { // BLOCK
    val <array>: A = a
    val <index_0>: Int = 1
    val <unary>: Int = <array>.get(i = <index_0>)
    <array>.set(i = <index_0>, v = <unary>.inc())
    <unary>
  }
}

// CHECK:
//   Mangled name: #testCompoundAssignment(A){}
//   Public signature: /testCompoundAssignment|446952120601658700[0]
fun testCompoundAssignment(a: A) {
  { // BLOCK
    val <array>: A = a
    val <index_0>: Int = 1
    <array>.set(i = <index_0>, v = <array>.get(i = <index_0>).plus(other = 10))
  }
}

