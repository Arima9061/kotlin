package test

// CHECK:
//   Mangled name: test.C
//   Public signature: test/C|null[0]
class C {
  // CHECK:
  //   Mangled name: test.C#<init>(){}
  //   Public signature: test/C.<init>|-5645683436151566731[0]
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

// CHECK:
//   Mangled name computed from Ir:         test@test.C?{}p
//   Mangled name computed from Descriptor: test@test.C?{}p
//   Mangled name computed from Fir:        @test.C?{}p
//   Public signature: test/p|-1845876355852807020[0]
var C?.p: Int
  // CHECK JVM_IR:
  //   Mangled name computed from Ir:         test#<get-p>@test.C?(){}kotlin.Int
  //   Mangled name computed from Descriptor: test#<get-p>@test.C?(){}kotlin.Int
  //   Mangled name computed from Fir:        #<get-p>@test.C?(){}kotlin.Int
  //   Public signature: test/p.<get-p>|-8557468444569568699[0]
  // CHECK JS_IR:
  //   Mangled name computed from Ir:         test#<get-p>@test.C?(){}
  //   Mangled name computed from Descriptor: test#<get-p>@test.C?(){}
  //   Mangled name computed from Fir:        #<get-p>@test.C?(){}kotlin.Int
  //   Public signature: test/p.<get-p>|-8557468444569568699[0]
  get(): Int {
    return 42
  }
  // CHECK:
  //   Mangled name computed from Ir:         test#<set-p>@test.C?(kotlin.Int){}
  //   Mangled name computed from Descriptor: test#<set-p>@test.C?(kotlin.Int){}
  //   Mangled name computed from Fir:        #<set-p>@test.C?(kotlin.Int){}
  //   Public signature: test/p.<set-p>|358628307976846417[0]
  set(value: Int) {
  }

// CHECK JVM_IR:
//   Mangled name computed from Ir:         test#inc@kotlin.Int?(){}kotlin.Int?
//   Mangled name computed from Descriptor: test#inc@kotlin.Int?(){}kotlin.Int?
//   Mangled name computed from Fir:        #inc@kotlin.Int?(){}kotlin.Int?
//   Public signature: test/inc|-8688916183051881962[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         test#inc@kotlin.Int?(){}
//   Mangled name computed from Descriptor: test#inc@kotlin.Int?(){}
//   Mangled name computed from Fir:        #inc@kotlin.Int?(){}kotlin.Int?
//   Public signature: test/inc|-8688916183051881962[0]
operator fun Int?.inc(): Int? {
  return { // BLOCK
    val tmp0_safe_receiver: Int? = <this>
    when {
      EQEQ(arg0 = tmp0_safe_receiver, arg1 = null) -> null
      else -> tmp0_safe_receiver.inc()
    }
  }
}

// CHECK JVM_IR:
//   Mangled name computed from Ir:         test#get@kotlin.Int?(kotlin.Int){}kotlin.Int
//   Mangled name computed from Descriptor: test#get@kotlin.Int?(kotlin.Int){}kotlin.Int
//   Mangled name computed from Fir:        #get@kotlin.Int?(kotlin.Int){}kotlin.Int
//   Public signature: test/get|-6221002532708237996[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         test#get@kotlin.Int?(kotlin.Int){}
//   Mangled name computed from Descriptor: test#get@kotlin.Int?(kotlin.Int){}
//   Mangled name computed from Fir:        #get@kotlin.Int?(kotlin.Int){}kotlin.Int
//   Public signature: test/get|-6221002532708237996[0]
operator fun Int?.get(index: Int): Int {
  return 42
}

// CHECK:
//   Mangled name computed from Ir:         test#set@kotlin.Int?(kotlin.Int;kotlin.Int){}
//   Mangled name computed from Descriptor: test#set@kotlin.Int?(kotlin.Int;kotlin.Int){}
//   Mangled name computed from Fir:        #set@kotlin.Int?(kotlin.Int;kotlin.Int){}
//   Public signature: test/set|6578463135726025700[0]
operator fun Int?.set(index: Int, value: Int) {
}

// CHECK:
//   Mangled name computed from Ir:         test#testProperty(test.C?){}
//   Mangled name computed from Descriptor: test#testProperty(test.C?){}
//   Mangled name computed from Fir:        #testProperty(test.C?){}
//   Public signature: test/testProperty|-2369045043413337370[0]
fun testProperty(nc: C?) {
  { // BLOCK
    val tmp1_safe_receiver: C? = nc
    when {
      EQEQ(arg0 = tmp1_safe_receiver, arg1 = null) -> null
      else -> { // BLOCK
        val <unary>: Int = tmp1_safe_receiver.<get-p>()
        tmp1_safe_receiver.<set-p>(value = <unary>.inc())
        <unary>
      }
    }
  } /*~> Unit */
}

// CHECK:
//   Mangled name computed from Ir:         test#testArrayAccess(test.C?){}
//   Mangled name computed from Descriptor: test#testArrayAccess(test.C?){}
//   Mangled name computed from Fir:        #testArrayAccess(test.C?){}
//   Public signature: test/testArrayAccess|4252489655706845013[0]
fun testArrayAccess(nc: C?) {
  { // BLOCK
    val tmp2_safe_receiver: C? = nc
    when {
      EQEQ(arg0 = tmp2_safe_receiver, arg1 = null) -> null
      else -> { // BLOCK
        val <array>: Int = tmp2_safe_receiver.<get-p>()
        val <index_0>: Int = 0
        val <unary>: Int = <array>.get(index = <index_0>)
        <array>.set(index = <index_0>, value = <unary>.inc())
        <unary>
      }
    }
  } /*~> Unit */
}

