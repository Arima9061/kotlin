// CHECK:
//   Mangled name: IFoo
//   Public signature: /IFoo|null[0]
fun interface IFoo {
  // CHECK:
  //   Mangled name: IFoo#foo(kotlin.Int){}
  //   Public signature: /IFoo.foo|-104159190164110731[0]
  abstract fun foo(i: Int)

}

// CHECK:
//   Mangled name: IFoo2
//   Public signature: /IFoo2|null[0]
fun interface IFoo2 : IFoo {

}

// CHECK:
//   Mangled name: A
//   Public signature: /A|null[0]
object A {
  // CHECK:
  //   Mangled name: A#<init>(){}
  //   Public signature: /A.<init>|-5645683436151566731[0]
  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

// CHECK:
//   Mangled name: B
//   Public signature: /B|null[0]
object B {
  // CHECK:
  //   Mangled name: B#<init>(){}
  //   Public signature: /B.<init>|-5645683436151566731[0]
  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

// CHECK JVM_IR:
//   Mangled name: #get@A(IFoo){}kotlin.Int
//   Public signature: /get|-3861638864893341854[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #get@A(IFoo){}
//   Mangled name computed from Descriptor: #get@A(IFoo){}
//   Mangled name computed from Fir:        #get@A(IFoo){}kotlin.Int
//   Public signature: /get|-3861638864893341854[0]
operator fun A.get(i: IFoo): Int {
  return 1
}

// CHECK:
//   Mangled name: #set@A(IFoo;kotlin.Int){}
//   Public signature: /set|2215990406215766902[0]
operator fun A.set(i: IFoo, newValue: Int) {
}

// CHECK JVM_IR:
//   Mangled name: #get@B(IFoo){}kotlin.Int
//   Public signature: /get|-7877609025632018899[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #get@B(IFoo){}
//   Mangled name computed from Descriptor: #get@B(IFoo){}
//   Mangled name computed from Fir:        #get@B(IFoo){}kotlin.Int
//   Public signature: /get|-7877609025632018899[0]
operator fun B.get(i: IFoo): Int {
  return 1
}

// CHECK:
//   Mangled name: #set@B(IFoo2;kotlin.Int){}
//   Public signature: /set|-3309277558159597845[0]
operator fun B.set(i: IFoo2, newValue: Int) {
}

// CHECK JVM_IR:
//   Mangled name: #withVararg(kotlin.IntArray...){}kotlin.Int
//   Public signature: /withVararg|2262699225692856772[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #withVararg(kotlin.IntArray...){}
//   Mangled name computed from Descriptor: #withVararg(kotlin.IntArray...){}
//   Mangled name computed from Fir:        #withVararg(kotlin.IntArray...){}kotlin.Int
//   Public signature: /withVararg|2262699225692856772[0]
fun withVararg(vararg xs: Int): Int {
  return 42
}

// CHECK:
//   Mangled name: #test1(){}
//   Public signature: /test1|4297044443957252634[0]
fun test1() {
  { // BLOCK
    val <array>: A = A
    val <index_0>: Function1<Int, Unit> = 
      // CHECK:
      //   Mangled name computed from Ir:         #test1(){}#withVararg#static(kotlin.Int){}
      //   Mangled name computed from Descriptor: #test1(){}#withVararg#static(kotlin.Int){}
      //   Mangled name computed from Fir:        #withVararg(kotlin.IntArray...){}kotlin.Int
      local fun withVararg(p0: Int) {
        withVararg(xs = [p0])
      }

    <array>.set(i = <index_0> /*-> IFoo */, newValue = <array>.get(i = <index_0> /*-> IFoo */).plus(other = 1))
  }
}

// CHECK:
//   Mangled name: #test2(){}
//   Public signature: /test2|4279114864133353152[0]
fun test2() {
  { // BLOCK
    val <array>: B = B
    val <index_0>: Function1<Int, Unit> = 
      // CHECK:
      //   Mangled name computed from Ir:         #test2(){}#withVararg#static(kotlin.Int){}
      //   Mangled name computed from Descriptor: #test2(){}#withVararg#static(kotlin.Int){}
      //   Mangled name computed from Fir:        #withVararg(kotlin.IntArray...){}kotlin.Int
      local fun withVararg(p0: Int) {
        withVararg(xs = [p0])
      }

    <array>.set(i = <index_0> /*-> IFoo2 */, newValue = <array>.get(i = <index_0> /*-> IFoo */).plus(other = 1))
  }
}

// CHECK:
//   Mangled name: #test3(kotlin.Function1<kotlin.Int,kotlin.Unit>){}
//   Public signature: /test3|-2027394029153051749[0]
fun test3(fn: Function1<Int, Unit>) {
  { // BLOCK
    val <array>: A = A
    val <index_0>: Function1<Int, Unit> = fn
    <array>.set(i = <index_0> /*-> IFoo */, newValue = <array>.get(i = <index_0> /*-> IFoo */).plus(other = 1))
  }
}

// CHECK:
//   Mangled name: #test4(kotlin.Function1<kotlin.Int,kotlin.Unit>){}
//   Public signature: /test4|5380102774610726252[0]
fun test4(fn: Function1<Int, Unit>) {
  when {
    fn is IFoo -> { // BLOCK
      val <array>: A = A
      val <index_0>: IFoo = fn /*as IFoo */
      <array>.set(i = <index_0>, newValue = <array>.get(i = <index_0>).plus(other = 1))
    }
  }
}

// CHECK:
//   Mangled name: #test5(kotlin.Any){}
//   Public signature: /test5|4504681808078971124[0]
fun test5(a: Any) {
  a as Function1<Int, Unit> /*~> Unit */
  { // BLOCK
    val <array>: A = A
    val <index_0>: Function1<Int, Unit> = a /*as Function1<Int, Unit> */
    <array>.set(i = <index_0> /*-> IFoo */, newValue = <array>.get(i = <index_0> /*-> IFoo */).plus(other = 1))
  }
}

// CHECK:
//   Mangled name: #test6(kotlin.Any){}
//   Public signature: /test6|-7590017673454141671[0]
fun test6(a: Any) {
  a as Function1<Int, Unit> /*~> Unit */
  a /*as Function1<Int, Unit> */ as IFoo /*~> Unit */
  { // BLOCK
    val <array>: A = A
    val <index_0>: Function1<Int, Unit> = a /*as Function1<Int, Unit> */
    <array>.set(i = <index_0>, newValue = <array>.get(i = <index_0>).plus(other = 1))
  }
}

