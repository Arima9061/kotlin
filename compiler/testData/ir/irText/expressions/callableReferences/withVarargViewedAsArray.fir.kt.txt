// CHECK JVM_IR:
//   Mangled name: #sum(kotlin.IntArray...){}kotlin.Int
//   Public signature: /sum|7786429240262788644[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #sum(kotlin.IntArray...){}
//   Mangled name computed from Descriptor: #sum(kotlin.IntArray...){}
//   Mangled name computed from Fir:        #sum(kotlin.IntArray...){}kotlin.Int
//   Public signature: /sum|7786429240262788644[0]
fun sum(vararg args: Int): Int {
  var result: Int = 0
  { // BLOCK
    val <iterator>: IntIterator = args.iterator()
    while (<iterator>.hasNext()) { // BLOCK
      val arg: Int = <iterator>.next()
      { // BLOCK
        result = result.plus(other = arg)
      }
    }
  }
  return result
}

// CHECK JVM_IR:
//   Mangled name: #nsum(kotlin.Array<out|kotlin.Number>...){}kotlin.Int
//   Public signature: /nsum|849274247512080219[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #nsum(kotlin.Array<out|kotlin.Number>...){}
//   Mangled name computed from Descriptor: #nsum(kotlin.Array<out|kotlin.Number>...){}
//   Mangled name computed from Fir:        #nsum(kotlin.Array<out|kotlin.Number>...){}kotlin.Int
//   Public signature: /nsum|849274247512080219[0]
fun nsum(vararg args: Number): Int {
  return sum(args = [*IntArray(size = args.<get-size>(), init = 
    // CHECK JVM_IR:
    //   Mangled name computed from Ir:         #nsum(kotlin.Array<out|kotlin.Number>...){}kotlin.Int#<anonymous>#static(kotlin.Int){}kotlin.Int
    //   Mangled name computed from Descriptor: #nsum(kotlin.Array<out|kotlin.Number>...){}kotlin.Int#<anonymous>#static(kotlin.Int){}kotlin.Int
    //   Mangled name computed from Fir:        could not compute mangled name: java.lang.IllegalStateException: unexpected element IntArray@fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Int| <inline=Inline>  {... (truncated)
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         #nsum(kotlin.Array<out|kotlin.Number>...){}#<anonymous>#static(kotlin.Int){}
    //   Mangled name computed from Descriptor: #nsum(kotlin.Array<out|kotlin.Number>...){}#<anonymous>#static(kotlin.Int){}
    //   Mangled name computed from Fir:        could not compute mangled name: java.lang.IllegalStateException: unexpected element IntArray@fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Int| <inline=Inline>  {... (truncated)
    local fun <anonymous>(it: Int): Int {
      return args.get(index = it).toInt()
    }
)])
}

// CHECK:
//   Mangled name: #zap(kotlin.Array<out|kotlin.String>...;kotlin.Int){}
//   Public signature: /zap|-516812668141712757[0]
fun zap(vararg b: String, k: Int = 42) {
}

// CHECK:
//   Mangled name: #usePlainArgs(kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Int>){}
//   Public signature: /usePlainArgs|-2723039808667754959[0]
fun usePlainArgs(fn: Function2<Int, Int, Int>) {
}

// CHECK:
//   Mangled name: #usePrimitiveArray(kotlin.Function1<kotlin.IntArray,kotlin.Int>){}
//   Public signature: /usePrimitiveArray|-3895122125685485943[0]
fun usePrimitiveArray(fn: Function1<IntArray, Int>) {
}

// CHECK:
//   Mangled name: #useArray(kotlin.Function1<kotlin.Array<kotlin.Int>,kotlin.Int>){}
//   Public signature: /useArray|7556411346761547128[0]
fun useArray(fn: Function1<Array<Int>, Int>) {
}

// CHECK:
//   Mangled name: #useStringArray(kotlin.Function1<kotlin.Array<kotlin.String>,kotlin.Unit>){}
//   Public signature: /useStringArray|-6441375296594019709[0]
fun useStringArray(fn: Function1<Array<String>, Unit>) {
}

// CHECK:
//   Mangled name: #testPlainArgs(){}
//   Public signature: /testPlainArgs|2446557808710455455[0]
fun testPlainArgs() {
  usePlainArgs(fn = 
    // CHECK JVM_IR:
    //   Mangled name computed from Ir:         #testPlainArgs(){}#sum#static(kotlin.Int;kotlin.Int){}kotlin.Int
    //   Mangled name computed from Descriptor: #testPlainArgs(){}#sum#static(kotlin.Int;kotlin.Int){}kotlin.Int
    //   Mangled name computed from Fir:        #sum(kotlin.IntArray...){}kotlin.Int
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         #testPlainArgs(){}#sum#static(kotlin.Int;kotlin.Int){}
    //   Mangled name computed from Descriptor: #testPlainArgs(){}#sum#static(kotlin.Int;kotlin.Int){}
    //   Mangled name computed from Fir:        #sum(kotlin.IntArray...){}kotlin.Int
    local fun sum(p0: Int, p1: Int): Int {
      return sum(args = [p0, p1])
    }
)
}

// CHECK:
//   Mangled name: #testPrimitiveArrayAsVararg(){}
//   Public signature: /testPrimitiveArrayAsVararg|-8111480002705343386[0]
fun testPrimitiveArrayAsVararg() {
  usePrimitiveArray(fn = ::sum)
}

// CHECK:
//   Mangled name: #testArrayAsVararg(){}
//   Public signature: /testArrayAsVararg|-3169605914862197201[0]
fun testArrayAsVararg() {
  useArray(fn = ::nsum)
}

// CHECK:
//   Mangled name: #testArrayAndDefaults(){}
//   Public signature: /testArrayAndDefaults|-7178960797889847684[0]
fun testArrayAndDefaults() {
  useStringArray(fn = 
    // CHECK:
    //   Mangled name computed from Ir:         #testArrayAndDefaults(){}#zap#static(kotlin.Array<out|kotlin.String>){}
    //   Mangled name computed from Descriptor: #testArrayAndDefaults(){}#zap#static(kotlin.Array<out|kotlin.String>){}
    //   Mangled name computed from Fir:        #zap(kotlin.Array<out|kotlin.String>...;kotlin.Int){}
    local fun zap(p0: Array<out String>) {
      zap(b = [*p0])
    }
)
}

