// CHECK JVM_IR:
//   Mangled name: #use(kotlin.Function1<kotlin.Int,kotlin.String>){}kotlin.String
//   Public signature: /use|6965134968711081892[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #use(kotlin.Function1<kotlin.Int,kotlin.String>){}
//   Mangled name computed from Descriptor: #use(kotlin.Function1<kotlin.Int,kotlin.String>){}
//   Mangled name computed from Fir:        #use(kotlin.Function1<kotlin.Int,kotlin.String>){}kotlin.String
//   Public signature: /use|6965134968711081892[0]
fun use(fn: Function1<Int, String>): String {
  return fn.invoke(p1 = 1)
}

// CHECK JVM_IR:
//   Mangled name: #use0(kotlin.Function0<kotlin.String>){}kotlin.String
//   Public signature: /use0|-1882178247581270166[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #use0(kotlin.Function0<kotlin.String>){}
//   Mangled name computed from Descriptor: #use0(kotlin.Function0<kotlin.String>){}
//   Mangled name computed from Fir:        #use0(kotlin.Function0<kotlin.String>){}kotlin.String
//   Public signature: /use0|-1882178247581270166[0]
fun use0(fn: Function0<String>): String {
  return fn.invoke()
}

// CHECK:
//   Mangled name: #coerceToUnit(kotlin.Function1<kotlin.Int,kotlin.Unit>){}
//   Public signature: /coerceToUnit|-7636359994506321399[0]
fun coerceToUnit(fn: Function1<Int, Unit>) {
}

// CHECK JVM_IR:
//   Mangled name: #fnWithDefault(kotlin.Int;kotlin.Int){}kotlin.String
//   Public signature: /fnWithDefault|615312624340614007[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #fnWithDefault(kotlin.Int;kotlin.Int){}
//   Mangled name computed from Descriptor: #fnWithDefault(kotlin.Int;kotlin.Int){}
//   Mangled name computed from Fir:        #fnWithDefault(kotlin.Int;kotlin.Int){}kotlin.String
//   Public signature: /fnWithDefault|615312624340614007[0]
fun fnWithDefault(a: Int, b: Int = 42): String {
  return "abc"
}

// CHECK JVM_IR:
//   Mangled name: #fnWithDefaults(kotlin.Int;kotlin.Int){}kotlin.String
//   Public signature: /fnWithDefaults|684786503990558671[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #fnWithDefaults(kotlin.Int;kotlin.Int){}
//   Mangled name computed from Descriptor: #fnWithDefaults(kotlin.Int;kotlin.Int){}
//   Mangled name computed from Fir:        #fnWithDefaults(kotlin.Int;kotlin.Int){}kotlin.String
//   Public signature: /fnWithDefaults|684786503990558671[0]
fun fnWithDefaults(a: Int = 1, b: Int = 2): String {
  return ""
}

// CHECK JVM_IR:
//   Mangled name: #fnWithVarargs(kotlin.IntArray...){}kotlin.String
//   Public signature: /fnWithVarargs|-2554710779226431969[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #fnWithVarargs(kotlin.IntArray...){}
//   Mangled name computed from Descriptor: #fnWithVarargs(kotlin.IntArray...){}
//   Mangled name computed from Fir:        #fnWithVarargs(kotlin.IntArray...){}kotlin.String
//   Public signature: /fnWithVarargs|-2554710779226431969[0]
fun fnWithVarargs(vararg xs: Int): String {
  return "abc"
}

// CHECK:
//   Mangled name: Host
//   Public signature: /Host|null[0]
object Host {
  // CHECK:
  //   Mangled name: Host#<init>(){}
  //   Public signature: /Host.<init>|-5645683436151566731[0]
  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK JVM_IR:
  //   Mangled name: Host#importedObjectMemberWithVarargs(kotlin.IntArray...){}kotlin.String
  //   Public signature: /Host.importedObjectMemberWithVarargs|7476492663444631478[0]
  // CHECK JS_IR:
  //   Mangled name computed from Ir:         Host#importedObjectMemberWithVarargs(kotlin.IntArray...){}
  //   Mangled name computed from Descriptor: Host#importedObjectMemberWithVarargs(kotlin.IntArray...){}
  //   Mangled name computed from Fir:        Host#importedObjectMemberWithVarargs(kotlin.IntArray...){}kotlin.String
  //   Public signature: /Host.importedObjectMemberWithVarargs|7476492663444631478[0]
  fun importedObjectMemberWithVarargs(vararg xs: Int): String {
    return "abc"
  }

}

// CHECK JVM_IR:
//   Mangled name: #testDefault(){}kotlin.String
//   Public signature: /testDefault|-5176015430445505410[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #testDefault(){}
//   Mangled name computed from Descriptor: #testDefault(){}
//   Mangled name computed from Fir:        #testDefault(){}kotlin.String
//   Public signature: /testDefault|-5176015430445505410[0]
fun testDefault(): String {
  return use(fn = 
    // CHECK JVM_IR:
    //   Mangled name computed from Ir:         #testDefault(){}kotlin.String#fnWithDefault#static(kotlin.Int){}kotlin.String
    //   Mangled name computed from Descriptor: #testDefault(){}kotlin.String#fnWithDefault#static(kotlin.Int){}kotlin.String
    //   Mangled name computed from Fir:        #fnWithDefault(kotlin.Int;kotlin.Int){}kotlin.String
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         #testDefault(){}#fnWithDefault#static(kotlin.Int){}
    //   Mangled name computed from Descriptor: #testDefault(){}#fnWithDefault#static(kotlin.Int){}
    //   Mangled name computed from Fir:        #fnWithDefault(kotlin.Int;kotlin.Int){}kotlin.String
    local fun fnWithDefault(p0: Int): String {
      return fnWithDefault(a = p0)
    }
)
}

// CHECK JVM_IR:
//   Mangled name: #testVararg(){}kotlin.String
//   Public signature: /testVararg|-987920175184523683[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #testVararg(){}
//   Mangled name computed from Descriptor: #testVararg(){}
//   Mangled name computed from Fir:        #testVararg(){}kotlin.String
//   Public signature: /testVararg|-987920175184523683[0]
fun testVararg(): String {
  return use(fn = 
    // CHECK JVM_IR:
    //   Mangled name computed from Ir:         #testVararg(){}kotlin.String#fnWithVarargs#static(kotlin.Int){}kotlin.String
    //   Mangled name computed from Descriptor: #testVararg(){}kotlin.String#fnWithVarargs#static(kotlin.Int){}kotlin.String
    //   Mangled name computed from Fir:        #fnWithVarargs(kotlin.IntArray...){}kotlin.String
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         #testVararg(){}#fnWithVarargs#static(kotlin.Int){}
    //   Mangled name computed from Descriptor: #testVararg(){}#fnWithVarargs#static(kotlin.Int){}
    //   Mangled name computed from Fir:        #fnWithVarargs(kotlin.IntArray...){}kotlin.String
    local fun fnWithVarargs(p0: Int): String {
      return fnWithVarargs(xs = [p0])
    }
)
}

// CHECK:
//   Mangled name: #testCoercionToUnit(){}
//   Public signature: /testCoercionToUnit|5471888531952545525[0]
fun testCoercionToUnit() {
  return coerceToUnit(fn = 
    // CHECK:
    //   Mangled name computed from Ir:         #testCoercionToUnit(){}#fnWithDefault#static(kotlin.Int){}
    //   Mangled name computed from Descriptor: #testCoercionToUnit(){}#fnWithDefault#static(kotlin.Int){}
    //   Mangled name computed from Fir:        #fnWithDefault(kotlin.Int;kotlin.Int){}kotlin.String
    local fun fnWithDefault(p0: Int) {
      fnWithDefault(a = p0)
    }
)
}

// CHECK JVM_IR:
//   Mangled name: #testImportedObjectMember(){}kotlin.String
//   Public signature: /testImportedObjectMember|-2324367102610217786[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #testImportedObjectMember(){}
//   Mangled name computed from Descriptor: #testImportedObjectMember(){}
//   Mangled name computed from Fir:        #testImportedObjectMember(){}kotlin.String
//   Public signature: /testImportedObjectMember|-2324367102610217786[0]
fun testImportedObjectMember(): String {
  return use(fn = { // BLOCK
    // CHECK JVM_IR:
    //   Mangled name computed from Ir:         #testImportedObjectMember(){}kotlin.String#importedObjectMemberWithVarargs#static@Host(kotlin.Int){}kotlin.String
    //   Mangled name computed from Descriptor: #testImportedObjectMember(){}kotlin.String#importedObjectMemberWithVarargs#static@Host(kotlin.Int){}kotlin.String
    //   Mangled name computed from Fir:        Host#importedObjectMemberWithVarargs(kotlin.IntArray...){}kotlin.String
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         #testImportedObjectMember(){}#importedObjectMemberWithVarargs#static@Host(kotlin.Int){}
    //   Mangled name computed from Descriptor: #testImportedObjectMember(){}#importedObjectMemberWithVarargs#static@Host(kotlin.Int){}
    //   Mangled name computed from Fir:        Host#importedObjectMemberWithVarargs(kotlin.IntArray...){}kotlin.String
    local fun Host.importedObjectMemberWithVarargs(p0: Int): String {
      return receiver.importedObjectMemberWithVarargs(xs = [p0])
    }

    Host::importedObjectMemberWithVarargs
  })
}

// CHECK JVM_IR:
//   Mangled name: #testDefault0(){}kotlin.String
//   Public signature: /testDefault0|6498614662521529564[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #testDefault0(){}
//   Mangled name computed from Descriptor: #testDefault0(){}
//   Mangled name computed from Fir:        #testDefault0(){}kotlin.String
//   Public signature: /testDefault0|6498614662521529564[0]
fun testDefault0(): String {
  return use0(fn = 
    // CHECK JVM_IR:
    //   Mangled name computed from Ir:         #testDefault0(){}kotlin.String#fnWithDefaults#static(){}kotlin.String
    //   Mangled name computed from Descriptor: #testDefault0(){}kotlin.String#fnWithDefaults#static(){}kotlin.String
    //   Mangled name computed from Fir:        #fnWithDefaults(kotlin.Int;kotlin.Int){}kotlin.String
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         #testDefault0(){}#fnWithDefaults#static(){}
    //   Mangled name computed from Descriptor: #testDefault0(){}#fnWithDefaults#static(){}
    //   Mangled name computed from Fir:        #fnWithDefaults(kotlin.Int;kotlin.Int){}kotlin.String
    local fun fnWithDefaults(): String {
      return fnWithDefaults()
    }
)
}

// CHECK JVM_IR:
//   Mangled name: #testVararg0(){}kotlin.String
//   Public signature: /testVararg0|-3604981276033465673[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #testVararg0(){}
//   Mangled name computed from Descriptor: #testVararg0(){}
//   Mangled name computed from Fir:        #testVararg0(){}kotlin.String
//   Public signature: /testVararg0|-3604981276033465673[0]
fun testVararg0(): String {
  return use0(fn = 
    // CHECK JVM_IR:
    //   Mangled name computed from Ir:         #testVararg0(){}kotlin.String#fnWithVarargs#static(){}kotlin.String
    //   Mangled name computed from Descriptor: #testVararg0(){}kotlin.String#fnWithVarargs#static(){}kotlin.String
    //   Mangled name computed from Fir:        #fnWithVarargs(kotlin.IntArray...){}kotlin.String
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         #testVararg0(){}#fnWithVarargs#static(){}
    //   Mangled name computed from Descriptor: #testVararg0(){}#fnWithVarargs#static(){}
    //   Mangled name computed from Fir:        #fnWithVarargs(kotlin.IntArray...){}kotlin.String
    local fun fnWithVarargs(): String {
      return fnWithVarargs()
    }
)
}

