// CHECK:
//   Mangled name: #testForBreak1(kotlin.collections.List<kotlin.String>){}
//   Public signature: /testForBreak1|859715268937219552[0]
fun testForBreak1(ss: List<String>) {
  { // BLOCK
    val <iterator>: Iterator<String> = ss.iterator()
    while (<iterator>.hasNext()) { // BLOCK
      val s: String = <iterator>.next()
      break
    }
  }
}

// CHECK:
//   Mangled name: #testForBreak2(kotlin.collections.List<kotlin.String>){}
//   Public signature: /testForBreak2|-8316570653848899578[0]
fun testForBreak2(ss: List<String>) {
  { // BLOCK
    val <iterator>: Iterator<String> = ss.iterator()
    OUTER@ while (<iterator>.hasNext()) { // BLOCK
      val s1: String = <iterator>.next()
      { // BLOCK
        { // BLOCK
          val <iterator>: Iterator<String> = ss.iterator()
          INNER@ while (<iterator>.hasNext()) { // BLOCK
            val s2: String = <iterator>.next()
            { // BLOCK
              break@OUTER
              break@INNER
              break@INNER
            }
          }
        }
        break@OUTER
      }
    }
  }
}

// CHECK:
//   Mangled name: #testForContinue1(kotlin.collections.List<kotlin.String>){}
//   Public signature: /testForContinue1|1338147304246344442[0]
fun testForContinue1(ss: List<String>) {
  { // BLOCK
    val <iterator>: Iterator<String> = ss.iterator()
    while (<iterator>.hasNext()) { // BLOCK
      val s: String = <iterator>.next()
      continue
    }
  }
}

// CHECK:
//   Mangled name: #testForContinue2(kotlin.collections.List<kotlin.String>){}
//   Public signature: /testForContinue2|-2490600607304201756[0]
fun testForContinue2(ss: List<String>) {
  { // BLOCK
    val <iterator>: Iterator<String> = ss.iterator()
    OUTER@ while (<iterator>.hasNext()) { // BLOCK
      val s1: String = <iterator>.next()
      { // BLOCK
        { // BLOCK
          val <iterator>: Iterator<String> = ss.iterator()
          INNER@ while (<iterator>.hasNext()) { // BLOCK
            val s2: String = <iterator>.next()
            { // BLOCK
              continue@OUTER
              continue@INNER
              continue@INNER
            }
          }
        }
        continue@OUTER
      }
    }
  }
}

