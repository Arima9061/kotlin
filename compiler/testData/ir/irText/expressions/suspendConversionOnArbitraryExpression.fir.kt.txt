// CHECK:
//   Mangled name: #useSuspend(kotlin.coroutines.SuspendFunction0<kotlin.Unit>){}
//   Public signature: /useSuspend|60604456614172212[0]
fun useSuspend(sfn: SuspendFunction0<Unit>) {
}

// CHECK:
//   Mangled name: #useSuspendExt(kotlin.coroutines.SuspendFunction1<kotlin.Int,kotlin.Unit>){}
//   Public signature: /useSuspendExt|-8690505892244175114[0]
fun useSuspendExt(sfn: @ExtensionFunctionType SuspendFunction1<Int, Unit>) {
}

// CHECK:
//   Mangled name: #useSuspendArg(kotlin.coroutines.SuspendFunction1<kotlin.Int,kotlin.Unit>){}
//   Public signature: /useSuspendArg|3426050309145504362[0]
fun useSuspendArg(sfn: SuspendFunction1<Int, Unit>) {
}

// CHECK:
//   Mangled name: #useSuspendArgT(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0ยง<kotlin.Any?>}
//   Public signature: /useSuspendArgT|6442526549851733448[0]
fun <T : Any?> useSuspendArgT(sfn: SuspendFunction1<T, Unit>) {
}

// CHECK:
//   Mangled name: #useSuspendExtT(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0ยง<kotlin.Any?>}
//   Public signature: /useSuspendExtT|-926225216925468449[0]
fun <T : Any?> useSuspendExtT(sfn: @ExtensionFunctionType SuspendFunction1<T, Unit>) {
}

// CHECK JVM_IR:
//   Mangled name: #produceFun(){}kotlin.Function0<kotlin.Unit>
//   Public signature: /produceFun|4804189546570931998[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #produceFun(){}
//   Mangled name computed from Descriptor: #produceFun(){}
//   Mangled name computed from Fir:        #produceFun(){}kotlin.Function0<kotlin.Unit>
//   Public signature: /produceFun|4804189546570931998[0]
fun produceFun(): Function0<Unit> {
  return 
    // CHECK JVM_IR:
    //   Mangled name computed from Ir:         #produceFun(){}kotlin.Function0<kotlin.Unit>#<anonymous>#static(){}
    //   Mangled name computed from Descriptor: #produceFun(){}kotlin.Function0<kotlin.Unit>#<anonymous>#static(){}
    //   Mangled name computed from Fir:        could not compute mangled name: java.lang.IllegalStateException: unexpected element fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {... (truncated)
    // CHECK JS_IR:
    //   Mangled name computed from Ir:         #produceFun(){}#<anonymous>#static(){}
    //   Mangled name computed from Descriptor: #produceFun(){}#<anonymous>#static(){}
    //   Mangled name computed from Fir:        could not compute mangled name: java.lang.IllegalStateException: unexpected element fun <anonymous>(): R|kotlin/Unit| <inline=Unknown>  {... (truncated)
    local fun <anonymous>() {
      return Unit
    }

}

// CHECK:
//   Mangled name: #testSimple(kotlin.Function0<kotlin.Unit>){}
//   Public signature: /testSimple|-2671092887420400255[0]
fun testSimple(fn: Function0<Unit>) {
  useSuspend(sfn = { // BLOCK
    // CHECK:
    //   Mangled name: #testSimple(kotlin.Function0<kotlin.Unit>){}#suspendConversion#static@kotlin.Function0<kotlin.Unit>(){}
    local suspend fun Function0<Unit>.suspendConversion() {
      callee.invoke()
    }

    fn::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testSimpleNonVal(){}
//   Public signature: /testSimpleNonVal|8897109715568911238[0]
fun testSimpleNonVal() {
  useSuspend(sfn = { // BLOCK
    // CHECK:
    //   Mangled name: #testSimpleNonVal(){}#suspendConversion#static@kotlin.Function0<kotlin.Unit>(){}
    local suspend fun Function0<Unit>.suspendConversion() {
      callee.invoke()
    }

    produceFun()::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testExtAsExt(kotlin.Function1<kotlin.Int,kotlin.Unit>){}
//   Public signature: /testExtAsExt|-7977860665221117368[0]
fun testExtAsExt(fn: @ExtensionFunctionType Function1<Int, Unit>) {
  useSuspendExt(sfn = { // BLOCK
    // CHECK:
    //   Mangled name: #testExtAsExt(kotlin.Function1<kotlin.Int,kotlin.Unit>){}#suspendConversion#static@kotlin.Function1<kotlin.Int,kotlin.Unit>(kotlin.Int){}
    local suspend fun @ExtensionFunctionType Function1<Int, Unit>.suspendConversion(p0: Int) {
      callee.invoke(p1 = p0)
    }

    fn::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testExtAsSimple(kotlin.Function1<kotlin.Int,kotlin.Unit>){}
//   Public signature: /testExtAsSimple|-1067298536485961384[0]
fun testExtAsSimple(fn: @ExtensionFunctionType Function1<Int, Unit>) {
  useSuspendArg(sfn = { // BLOCK
    // CHECK:
    //   Mangled name: #testExtAsSimple(kotlin.Function1<kotlin.Int,kotlin.Unit>){}#suspendConversion#static@kotlin.Function1<kotlin.Int,kotlin.Unit>(kotlin.Int){}
    local suspend fun @ExtensionFunctionType Function1<Int, Unit>.suspendConversion(p0: Int) {
      callee.invoke(p1 = p0)
    }

    fn::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testSimpleAsExt(kotlin.Function1<kotlin.Int,kotlin.Unit>){}
//   Public signature: /testSimpleAsExt|9047906843313761541[0]
fun testSimpleAsExt(fn: Function1<Int, Unit>) {
  useSuspendExt(sfn = { // BLOCK
    // CHECK:
    //   Mangled name: #testSimpleAsExt(kotlin.Function1<kotlin.Int,kotlin.Unit>){}#suspendConversion#static@kotlin.Function1<kotlin.Int,kotlin.Unit>(kotlin.Int){}
    local suspend fun Function1<Int, Unit>.suspendConversion(p0: Int) {
      callee.invoke(p1 = p0)
    }

    fn::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testSimpleAsSimpleT(kotlin.Function1<kotlin.Int,kotlin.Unit>){}
//   Public signature: /testSimpleAsSimpleT|4911702590190727707[0]
fun testSimpleAsSimpleT(fn: Function1<Int, Unit>) {
  useSuspendArgT<Int>(sfn = { // BLOCK
    // CHECK:
    //   Mangled name computed from Ir:         could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'FUN name:useSuspendArgT visibility:public modality:FINAL <T> (sfn:kotlin.coroutines.SuspendFunction1<T of <root>.useSuspendArgT, kotlin.Unit>) returnType:kotlin.Unit'
    //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> useSuspendArgT(sfn: suspend (T) -> Unit): Unit defined in root package'
    local suspend fun Function1<Int, Unit>.suspendConversion(p0: T) {
      callee.invoke(p1 = p0)
    }

    fn::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testSimpleAsExtT(kotlin.Function1<kotlin.Int,kotlin.Unit>){}
//   Public signature: /testSimpleAsExtT|6234667294456337247[0]
fun testSimpleAsExtT(fn: Function1<Int, Unit>) {
  useSuspendExtT<Int>(sfn = { // BLOCK
    // CHECK:
    //   Mangled name computed from Ir:         could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'FUN name:useSuspendExtT visibility:public modality:FINAL <T> (sfn:@[ExtensionFunctionType] kotlin.coroutines.SuspendFunction1<T of <root>.useSuspendExtT, kotlin.Unit>) returnType:kotlin.Unit'
    //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> useSuspendExtT(sfn: suspend (T) -> Unit): Unit defined in root package'
    local suspend fun Function1<Int, Unit>.suspendConversion(p0: T) {
      callee.invoke(p1 = p0)
    }

    fn::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testExtAsSimpleT(kotlin.Function1<kotlin.Int,kotlin.Unit>){}
//   Public signature: /testExtAsSimpleT|2898108913573127027[0]
fun testExtAsSimpleT(fn: @ExtensionFunctionType Function1<Int, Unit>) {
  useSuspendArgT<Int>(sfn = { // BLOCK
    // CHECK:
    //   Mangled name computed from Ir:         could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'FUN name:useSuspendArgT visibility:public modality:FINAL <T> (sfn:kotlin.coroutines.SuspendFunction1<T of <root>.useSuspendArgT, kotlin.Unit>) returnType:kotlin.Unit'
    //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> useSuspendArgT(sfn: suspend (T) -> Unit): Unit defined in root package'
    local suspend fun @ExtensionFunctionType Function1<Int, Unit>.suspendConversion(p0: T) {
      callee.invoke(p1 = p0)
    }

    fn::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testExtAsExtT(kotlin.Function1<kotlin.Int,kotlin.Unit>){}
//   Public signature: /testExtAsExtT|7097873516490245685[0]
fun testExtAsExtT(fn: @ExtensionFunctionType Function1<Int, Unit>) {
  useSuspendExtT<Int>(sfn = { // BLOCK
    // CHECK:
    //   Mangled name computed from Ir:         could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'FUN name:useSuspendExtT visibility:public modality:FINAL <T> (sfn:@[ExtensionFunctionType] kotlin.coroutines.SuspendFunction1<T of <root>.useSuspendExtT, kotlin.Unit>) returnType:kotlin.Unit'
    //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> useSuspendExtT(sfn: suspend (T) -> Unit): Unit defined in root package'
    local suspend fun @ExtensionFunctionType Function1<Int, Unit>.suspendConversion(p0: T) {
      callee.invoke(p1 = p0)
    }

    fn::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testSimpleSAsSimpleT(kotlin.Function1<0:0,kotlin.Unit>){0ยง<kotlin.Any?>}
//   Public signature: /testSimpleSAsSimpleT|8425022052538754664[0]
fun <S : Any?> testSimpleSAsSimpleT(fn: Function1<S, Unit>) {
  useSuspendArgT<S>(sfn = { // BLOCK
    // CHECK:
    //   Mangled name computed from Ir:         could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'FUN name:useSuspendArgT visibility:public modality:FINAL <T> (sfn:kotlin.coroutines.SuspendFunction1<T of <root>.useSuspendArgT, kotlin.Unit>) returnType:kotlin.Unit'
    //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> useSuspendArgT(sfn: suspend (T) -> Unit): Unit defined in root package'
    local suspend fun Function1<S, Unit>.suspendConversion(p0: T) {
      callee.invoke(p1 = p0)
    }

    fn::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testSimpleSAsExtT(kotlin.Function1<0:0,kotlin.Unit>){0ยง<kotlin.Any?>}
//   Public signature: /testSimpleSAsExtT|6597420463751673979[0]
fun <S : Any?> testSimpleSAsExtT(fn: Function1<S, Unit>) {
  useSuspendExtT<S>(sfn = { // BLOCK
    // CHECK:
    //   Mangled name computed from Ir:         could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'FUN name:useSuspendExtT visibility:public modality:FINAL <T> (sfn:@[ExtensionFunctionType] kotlin.coroutines.SuspendFunction1<T of <root>.useSuspendExtT, kotlin.Unit>) returnType:kotlin.Unit'
    //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> useSuspendExtT(sfn: suspend (T) -> Unit): Unit defined in root package'
    local suspend fun Function1<S, Unit>.suspendConversion(p0: T) {
      callee.invoke(p1 = p0)
    }

    fn::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testExtSAsSimpleT(kotlin.Function1<0:0,kotlin.Unit>){0ยง<kotlin.Any?>}
//   Public signature: /testExtSAsSimpleT|-2358609713172847328[0]
fun <S : Any?> testExtSAsSimpleT(fn: @ExtensionFunctionType Function1<S, Unit>) {
  useSuspendArgT<S>(sfn = { // BLOCK
    // CHECK:
    //   Mangled name computed from Ir:         could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'FUN name:useSuspendArgT visibility:public modality:FINAL <T> (sfn:kotlin.coroutines.SuspendFunction1<T of <root>.useSuspendArgT, kotlin.Unit>) returnType:kotlin.Unit'
    //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> useSuspendArgT(sfn: suspend (T) -> Unit): Unit defined in root package'
    local suspend fun @ExtensionFunctionType Function1<S, Unit>.suspendConversion(p0: T) {
      callee.invoke(p1 = p0)
    }

    fn::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testExtSAsExtT(kotlin.Function1<0:0,kotlin.Unit>){0ยง<kotlin.Any?>}
//   Public signature: /testExtSAsExtT|1144176814022208305[0]
fun <S : Any?> testExtSAsExtT(fn: @ExtensionFunctionType Function1<S, Unit>) {
  useSuspendExtT<S>(sfn = { // BLOCK
    // CHECK:
    //   Mangled name computed from Ir:         could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'FUN name:useSuspendExtT visibility:public modality:FINAL <T> (sfn:@[ExtensionFunctionType] kotlin.coroutines.SuspendFunction1<T of <root>.useSuspendExtT, kotlin.Unit>) returnType:kotlin.Unit'
    //   Mangled name computed from Descriptor: could not compute mangled name: java.lang.IllegalArgumentException: No container found for type parameter 'T' of 'public fun <T> useSuspendExtT(sfn: suspend (T) -> Unit): Unit defined in root package'
    local suspend fun @ExtensionFunctionType Function1<S, Unit>.suspendConversion(p0: T) {
      callee.invoke(p1 = p0)
    }

    fn::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testSmartCastWithSuspendConversion(kotlin.Any){}
//   Public signature: /testSmartCastWithSuspendConversion|7215678361079943817[0]
fun testSmartCastWithSuspendConversion(a: Any) {
  a as Function0<Unit> /*~> Unit */
  useSuspend(sfn = { // BLOCK
    // CHECK:
    //   Mangled name: #testSmartCastWithSuspendConversion(kotlin.Any){}#suspendConversion#static@kotlin.Function0<kotlin.Unit>(){}
    local suspend fun Function0<Unit>.suspendConversion() {
      callee.invoke()
    }

    a /*as Function0<Unit> */::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testSmartCastOnVarWithSuspendConversion(kotlin.Any){}
//   Public signature: /testSmartCastOnVarWithSuspendConversion|9105739241469619247[0]
fun testSmartCastOnVarWithSuspendConversion(a: Any) {
  var b: Any = a
  b as Function0<Unit> /*~> Unit */
  useSuspend(sfn = { // BLOCK
    // CHECK:
    //   Mangled name: #testSmartCastOnVarWithSuspendConversion(kotlin.Any){}#suspendConversion#static@kotlin.Function0<kotlin.Unit>(){}
    local suspend fun Function0<Unit>.suspendConversion() {
      callee.invoke()
    }

    b /*as Function0<Unit> */::suspendConversion
  })
}

// CHECK:
//   Mangled name: #testSmartCastVsSuspendConversion(kotlin.Function0<kotlin.Unit>){}
//   Public signature: /testSmartCastVsSuspendConversion|-8980078119905187795[0]
fun testSmartCastVsSuspendConversion(a: Function0<Unit>) {
  a as SuspendFunction0<Unit> /*~> Unit */
  useSuspend(sfn = a /*as SuspendFunction0<Unit> */)
}

// CHECK:
//   Mangled name: #testSmartCastOnVarVsSuspendConversion(kotlin.Function0<kotlin.Unit>){}
//   Public signature: /testSmartCastOnVarVsSuspendConversion|2087060806377142132[0]
fun testSmartCastOnVarVsSuspendConversion(a: Function0<Unit>) {
  var b: Function0<Unit> = a
  b as SuspendFunction0<Unit> /*~> Unit */
  useSuspend(sfn = b /*as SuspendFunction0<Unit> */)
}

// CHECK:
//   Mangled name: #testIntersectionVsSuspendConversion(0:0){0ยง<kotlin.Function0<kotlin.Unit>&kotlin.coroutines.SuspendFunction0<kotlin.Unit>>}
//   Public signature: /testIntersectionVsSuspendConversion|3036580114518012351[0]
fun <T> testIntersectionVsSuspendConversion(x: T) where T : Function0<Unit>, T : SuspendFunction0<Unit> {
  useSuspend(sfn = x)
}

