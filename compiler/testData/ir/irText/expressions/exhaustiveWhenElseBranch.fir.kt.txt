// CHECK:
//   Mangled name: A
//   Public signature: /A|null[0]
enum class A : Enum<A> {
  // CHECK:
  //   Mangled name: A#<init>(){}
  //   Public signature: /A.<init>|-5645683436151566731[0]
  private constructor() /* primary */ {
    super/*Enum*/<A>()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: A.V1
  //   Public signature: /A.V1|null[0]
  V1 = A()

  // CHECK:
  //   Mangled name: A#values#static(){}kotlin.Array<A>
  //   Public signature: /A.values|5753238680897834936[0]
  fun values(): Array<A> /* Synthetic body for ENUM_VALUES */

  // CHECK:
  //   Mangled name: A#valueOf#static(kotlin.String){}A
  //   Public signature: /A.valueOf|8636923007498802918[0]
  fun valueOf(value: String): A /* Synthetic body for ENUM_VALUEOF */

  // CHECK:
  //   Mangled name: A#static{}entries
  //   Public signature: /A.entries|-5134227801081826149[0]
  val entries: EnumEntries<A>
    // CHECK:
    //   Mangled name computed from Ir:         A#<get-entries>#static(){}kotlin.enums.EnumEntries<A>
    //   Mangled name computed from Descriptor: A#<get-entries>#static(){}kotlin.enums.EnumEntries<A>
    //   Mangled name computed from Fir:        #<get-entries>#static(){}kotlin.enums.EnumEntries<A>
    //   Public signature: /A.entries.<get-entries>|3279885591622842062[0]
    get(): EnumEntries<A> /* Synthetic body for ENUM_ENTRIES */

}

// CHECK:
//   Mangled name: #testVariableAssignment_throws(A){}
//   Public signature: /testVariableAssignment_throws|3390143287882484978[0]
fun testVariableAssignment_throws(a: A) {
  val x: Int
  { // BLOCK
    val tmp0_subject: A = a
    when {
      EQEQ(arg0 = tmp0_subject, arg1 = A.V1) -> { // BLOCK
        x = 11
      }
      else -> noWhenBranchMatchedException()
    }
  }
}

// CHECK:
//   Mangled name: #testStatement_empty(A){}
//   Public signature: /testStatement_empty|7105275116252213819[0]
fun testStatement_empty(a: A) {
  { // BLOCK
    val tmp1_subject: A = a
    when {
      EQEQ(arg0 = tmp1_subject, arg1 = A.V1) -> 1
      else -> noWhenBranchMatchedException()
    }
  } /*~> Unit */
}

// CHECK:
//   Mangled name: #testParenthesized_throwsJvm(A){}
//   Public signature: /testParenthesized_throwsJvm|6011674528839266385[0]
fun testParenthesized_throwsJvm(a: A) {
  { // BLOCK
    val tmp2_subject: A = a
    when {
      EQEQ(arg0 = tmp2_subject, arg1 = A.V1) -> 1
      else -> noWhenBranchMatchedException()
    }
  } /*~> Unit */
}

// CHECK:
//   Mangled name: #testAnnotated_throwsJvm(A){}
//   Public signature: /testAnnotated_throwsJvm|4125008918330317559[0]
fun testAnnotated_throwsJvm(a: A) {
  { // BLOCK
    val tmp3_subject: A = a
    when {
      EQEQ(arg0 = tmp3_subject, arg1 = A.V1) -> 1
      else -> noWhenBranchMatchedException()
    }
  } /*~> Unit */
}

// CHECK:
//   Mangled name: #testExpression_throws(A){}kotlin.Int
//   Public signature: /testExpression_throws|-3237050390749274330[0]
fun testExpression_throws(a: A): Int {
  return { // BLOCK
    val tmp4_subject: A = a
    when {
      EQEQ(arg0 = tmp4_subject, arg1 = A.V1) -> 1
      else -> noWhenBranchMatchedException()
    }
  }
}

// CHECK:
//   Mangled name: #testIfTheElseStatement_empty(A;kotlin.Boolean){}
//   Public signature: /testIfTheElseStatement_empty|303316846698538218[0]
fun testIfTheElseStatement_empty(a: A, flag: Boolean) {
  when {
    flag -> 0
    else -> { // BLOCK
      val tmp5_subject: A = a
      when {
        EQEQ(arg0 = tmp5_subject, arg1 = A.V1) -> 1
        else -> noWhenBranchMatchedException()
      }
    }
  } /*~> Unit */
}

// CHECK:
//   Mangled name: #testIfTheElseParenthesized_throwsJvm(A;kotlin.Boolean){}
//   Public signature: /testIfTheElseParenthesized_throwsJvm|3170189440226289413[0]
fun testIfTheElseParenthesized_throwsJvm(a: A, flag: Boolean) {
  when {
    flag -> 0
    else -> { // BLOCK
      val tmp6_subject: A = a
      when {
        EQEQ(arg0 = tmp6_subject, arg1 = A.V1) -> 1
        else -> noWhenBranchMatchedException()
      }
    }
  } /*~> Unit */
}

// CHECK:
//   Mangled name: #testIfTheElseAnnotated_throwsJvm(A;kotlin.Boolean){}
//   Public signature: /testIfTheElseAnnotated_throwsJvm|2206683935431102388[0]
fun testIfTheElseAnnotated_throwsJvm(a: A, flag: Boolean) {
  when {
    flag -> 0
    else -> { // BLOCK
      val tmp7_subject: A = a
      when {
        EQEQ(arg0 = tmp7_subject, arg1 = A.V1) -> 1
        else -> noWhenBranchMatchedException()
      }
    }
  } /*~> Unit */
}

// CHECK:
//   Mangled name: #testLambdaResultExpression_throws(A){}
//   Public signature: /testLambdaResultExpression_throws|6372161286444781898[0]
fun testLambdaResultExpression_throws(a: A) {
  
    // CHECK:
    //   Mangled name computed from Ir:         #testLambdaResultExpression_throws(A){}#<anonymous>#static(){}kotlin.Int
    //   Mangled name computed from Descriptor: #testLambdaResultExpression_throws(A){}#<anonymous>#static(){}kotlin.Int
    //   Mangled name computed from Fir:        could not compute mangled name: java.lang.IllegalStateException: unexpected element fun <anonymous>(): R|kotlin/Int| <inline=Unknown>  {... (truncated)
    local fun <anonymous>(): Int {
      return { // BLOCK
        val tmp8_subject: A = a
        when {
          EQEQ(arg0 = tmp8_subject, arg1 = A.V1) -> 1
          else -> noWhenBranchMatchedException()
        }
      }
    }
.invoke() /*~> Unit */
}

