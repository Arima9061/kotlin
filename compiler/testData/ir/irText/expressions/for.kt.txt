// CHECK:
//   Mangled name: #testEmpty(kotlin.collections.List<kotlin.String>){}
//   Public signature: /testEmpty|4311987365375111339[0]
fun testEmpty(ss: List<String>) {
  { // BLOCK
    val tmp0_iterator: Iterator<String> = ss.iterator()
    while (tmp0_iterator.hasNext()) { // BLOCK
      val s: String = tmp0_iterator.next()
    }
  }
}

// CHECK:
//   Mangled name: #testIterable(kotlin.collections.List<kotlin.String>){}
//   Public signature: /testIterable|3066285127841729695[0]
fun testIterable(ss: List<String>) {
  { // BLOCK
    val tmp0_iterator: Iterator<String> = ss.iterator()
    while (tmp0_iterator.hasNext()) { // BLOCK
      val s: String = tmp0_iterator.next()
      { // BLOCK
        println(message = s)
      }
    }
  }
}

// CHECK:
//   Mangled name: #testDestructuring(kotlin.collections.List<kotlin.Pair<kotlin.Int,kotlin.String>>){}
//   Public signature: /testDestructuring|-7027332132873483477[0]
fun testDestructuring(pp: List<Pair<Int, String>>) {
  { // BLOCK
    val tmp0_iterator: Iterator<Pair<Int, String>> = pp.iterator()
    while (tmp0_iterator.hasNext()) { // BLOCK
      val tmp1_loop_parameter: Pair<Int, String> = tmp0_iterator.next()
      val i: Int = tmp1_loop_parameter.component1()
      val s: String = tmp1_loop_parameter.component2()
      { // BLOCK
        println(message = i)
        println(message = s)
      }
    }
  }
}

// CHECK:
//   Mangled name: #testRange(){}
//   Public signature: /testRange|5870058580411114415[0]
fun testRange() {
  { // BLOCK
    val tmp0_iterator: IntIterator = 1.rangeTo(other = 10).iterator()
    while (tmp0_iterator.hasNext()) { // BLOCK
      val i: Int = tmp0_iterator.next()
    }
  }
}

