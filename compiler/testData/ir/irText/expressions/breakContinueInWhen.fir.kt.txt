// CHECK:
//   Mangled name: #testBreakFor(){}
//   Public signature: /testBreakFor|-7772840210562213149[0]
fun testBreakFor() {
  val xs: IntArray = IntArray(size = 10, init = 
    // CHECK:
    //   Mangled name computed from Ir:         #testBreakFor(){}#<anonymous>#static(kotlin.Int){}kotlin.Int
    //   Mangled name computed from Descriptor: #testBreakFor(){}#<anonymous>#static(kotlin.Int){}kotlin.Int
    //   Mangled name computed from Fir:        could not compute mangled name: java.lang.IllegalStateException: unexpected element IntArray@fun <anonymous>(i: R|kotlin/Int|): R|kotlin/Int| <inline=Inline>  {... (truncated)
    local fun <anonymous>(i: Int): Int {
      return i
    }
)
  var k: Int = 0
  { // BLOCK
    val <iterator>: IntIterator = xs.iterator()
    while (<iterator>.hasNext()) { // BLOCK
      val x: Int = <iterator>.next()
      when {
        greater(arg0 = k, arg1 = 2) -> break
      }
    }
  }
}

// CHECK:
//   Mangled name: #testBreakWhile(){}
//   Public signature: /testBreakWhile|3882710933639253522[0]
fun testBreakWhile() {
  var k: Int = 0
  while (less(arg0 = k, arg1 = 10)) when {
    greater(arg0 = k, arg1 = 2) -> break
  }
}

// CHECK:
//   Mangled name: #testBreakDoWhile(){}
//   Public signature: /testBreakDoWhile|-1704674514591918334[0]
fun testBreakDoWhile() {
  var k: Int = 0
  { // BLOCK
    dowhen {
      greater(arg0 = k, arg1 = 2) -> break
    }    while (less(arg0 = k, arg1 = 10))
  }
}

// CHECK:
//   Mangled name: #testContinueFor(){}
//   Public signature: /testContinueFor|-6520729324717708312[0]
fun testContinueFor() {
  val xs: IntArray = IntArray(size = 10, init = 
    // CHECK:
    //   Mangled name computed from Ir:         #testContinueFor(){}#<anonymous>#static(kotlin.Int){}kotlin.Int
    //   Mangled name computed from Descriptor: #testContinueFor(){}#<anonymous>#static(kotlin.Int){}kotlin.Int
    //   Mangled name computed from Fir:        could not compute mangled name: java.lang.IllegalStateException: unexpected element IntArray@fun <anonymous>(i: R|kotlin/Int|): R|kotlin/Int| <inline=Inline>  {... (truncated)
    local fun <anonymous>(i: Int): Int {
      return i
    }
)
  var k: Int = 0
  { // BLOCK
    val <iterator>: IntIterator = xs.iterator()
    while (<iterator>.hasNext()) { // BLOCK
      val x: Int = <iterator>.next()
      when {
        greater(arg0 = k, arg1 = 2) -> continue
      }
    }
  }
}

// CHECK:
//   Mangled name: #testContinueWhile(){}
//   Public signature: /testContinueWhile|2151596509430082894[0]
fun testContinueWhile() {
  var k: Int = 0
  while (less(arg0 = k, arg1 = 10)) when {
    greater(arg0 = k, arg1 = 2) -> continue
  }
}

// CHECK:
//   Mangled name: #testContinueDoWhile(){}
//   Public signature: /testContinueDoWhile|-1939470436794612956[0]
fun testContinueDoWhile() {
  var k: Int = 0
  var s: String = ""
  { // BLOCK
    do// COMPOSITE {
    { // BLOCK
      k = k.inc()
      k
    } /*~> Unit */
    when {
      greater(arg0 = k, arg1 = 2) -> continue
    }
    s = s.plus(other = k + ";")
    // }    while (less(arg0 = k, arg1 = 10))
  }
  when {
    EQEQ(arg0 = s, arg1 = "1;2;").not() -> throw AssertionError(p0 = s)
  }
}

