// CHECK:
//   Mangled name: Z
//   Public signature: /Z|null[0]
object Z {
  // CHECK:
  //   Mangled name: Z#<init>(){}
  //   Public signature: /Z.<init>|-5645683436151566731[0]
  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  // CHECK:
  //   Mangled name: Z{}counter
  //   Public signature: /Z.counter|3849500605769271673[0]
  var counter: Int
    field = 0
    // CHECK JVM_IR:
    //   Mangled name: Z#<get-counter>(){}kotlin.Int
    //   Public signature: /Z.counter.<get-counter>|6416265643848993228[0]
    // CHECK JS_IR:
    //   Mangled name: Z#<get-counter>(){}
    //   Public signature: /Z.counter.<get-counter>|6903507550118978958[0]
    get
    // CHECK:
    //   Mangled name: Z#<set-counter>(kotlin.Int){}
    //   Public signature: /Z.counter.<set-counter>|-8124462411591632783[0]
    set

  // CHECK:
  //   Mangled name: Z#foo(){}
  //   Public signature: /Z.foo|-1041209573719867811[0]
  fun foo() {
  }

  // CHECK:
  //   Mangled name: Z#bar(){}
  //   Public signature: /Z.bar|496682602797471549[0]
  fun bar() {
    <this>.<set-counter>(<set-?> = 1)
    <this>.foo()
    Z.<set-counter>(<set-?> = 1)
    Z.foo()
  }

  // CHECK:
  //   Mangled name: Z.Nested
  //   Public signature: /Z.Nested|null[0]
  class Nested {
    // CHECK:
    //   Mangled name: Z.Nested#<init>(){}
    //   Public signature: /Z.Nested.<init>|-5645683436151566731[0]
    constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    // CHECK:
    //   Mangled name computed from Ir:         Z.Nested.<ANI>
    //   Mangled name computed from Descriptor: Z.Nested
    init {
      Z.<set-counter>(<set-?> = 1)
      Z.foo()
      Z.<set-counter>(<set-?> = 1)
      Z.foo()
    }

    // CHECK:
    //   Mangled name: Z.Nested#test(){}
    //   Public signature: /Z.Nested.test|6620506149988718649[0]
    fun test() {
      Z.<set-counter>(<set-?> = 1)
      Z.foo()
      Z.<set-counter>(<set-?> = 1)
      Z.foo()
    }

  }

  // CHECK:
  //   Mangled name: Z{}aLambda
  //   Public signature: /Z.aLambda|3337321219156655813[0]
  val aLambda: Function0<Unit>
    field = 
      // CHECK:
      //   Mangled name (compatible mode: false): Z{}aLambda#<anonymous>#static(){}
      //   Mangled name (compatible mode: true):  Z.aLambda#<anonymous>#static(){}
      local fun <anonymous>() {
        Z.<set-counter>(<set-?> = 1)
        Z.foo()
        Z.<set-counter>(<set-?> = 1)
        Z.foo()
      }

    // CHECK JVM_IR:
    //   Mangled name: Z#<get-aLambda>(){}kotlin.Function0<kotlin.Unit>
    //   Public signature: /Z.aLambda.<get-aLambda>|9058518221524596568[0]
    // CHECK JS_IR:
    //   Mangled name: Z#<get-aLambda>(){}
    //   Public signature: /Z.aLambda.<get-aLambda>|8927671768328125269[0]
    get

  // CHECK:
  //   Mangled name: Z{}anObject
  //   Public signature: /Z.anObject|409091113626572731[0]
  val anObject: Any
    field = { // BLOCK
      // CHECK:
      //   Mangled name (compatible mode: false): Z{}anObject.<no name provided>
      //   Mangled name (compatible mode: true):  Z.anObject.<no name provided>
      local class <no name provided> {
        // CHECK:
        //   Mangled name (compatible mode: false): Z{}anObject.<no name provided>#<init>(){}
        //   Mangled name (compatible mode: true):  Z.anObject.<no name provided>#<init>(){}
        constructor() /* primary */ {
          super/*Any*/()
          /* <init>() */

        }

        // CHECK:
        //   Mangled name computed from Ir (compatible mode: false):         Z{}anObject.<no name provided>.<ANI>
        //   Mangled name computed from Ir (compatible mode: true):          Z.anObject.<no name provided>.<ANI>
        //   Mangled name computed from Descriptor (compatible mode: false): Z{}anObject.<no name provided>
        //   Mangled name computed from Descriptor (compatible mode: true):  Z{}anObject.<no name provided>
        init {
          Z.<set-counter>(<set-?> = 1)
          Z.foo()
          Z.<set-counter>(<set-?> = 1)
          Z.foo()
        }

        // CHECK:
        //   Mangled name (compatible mode: false): Z{}anObject.<no name provided>#test(){}
        //   Mangled name (compatible mode: true):  Z.anObject.<no name provided>#test(){}
        fun test() {
          Z.<set-counter>(<set-?> = 1)
          Z.foo()
          Z.<set-counter>(<set-?> = 1)
          Z.foo()
        }

      }

      <no name provided>()
    }
    // CHECK JVM_IR:
    //   Mangled name: Z#<get-anObject>(){}kotlin.Any
    //   Public signature: /Z.anObject.<get-anObject>|-6807306499596507825[0]
    // CHECK JS_IR:
    //   Mangled name: Z#<get-anObject>(){}
    //   Public signature: /Z.anObject.<get-anObject>|6468357437342963609[0]
    get

}

// CHECK:
//   Mangled name: #test@Z(){}
//   Public signature: /test|2491484829934192138[0]
fun Z.test() {
  <this>.<set-counter>(<set-?> = 1)
  <this>.foo()
  Z.<set-counter>(<set-?> = 1)
  Z.foo()
}

