// CHECK JVM_IR:
//   Mangled name: #testDD(kotlin.Double?;kotlin.Double?){}kotlin.Boolean
//   Public signature: /testDD|6324676724672008011[0]
// CHECK JS_IR:
//   Mangled name: #testDD(kotlin.Double?;kotlin.Double?){}
//   Public signature: /testDD|6448090919849267088[0]
fun testDD(x: Double?, y: Double?): Boolean {
  return ieee754equals(arg0 = x, arg1 = y)
}

// CHECK JVM_IR:
//   Mangled name: #testDF(kotlin.Double?;kotlin.Any?){}kotlin.Boolean
//   Public signature: /testDF|9116951022031676909[0]
// CHECK JS_IR:
//   Mangled name: #testDF(kotlin.Double?;kotlin.Any?){}
//   Public signature: /testDF|8975597351648058215[0]
fun testDF(x: Double?, y: Any?): Boolean {
  return when {
    y is Float? -> ieee754equals(arg0 = x, arg1 = { // BLOCK
      val tmp0_safe_receiver: Any? = y
      when {
        EQEQ(arg0 = tmp0_safe_receiver, arg1 = null) -> null
        else -> tmp0_safe_receiver /*as Float */.toDouble()
      }
    })
    else -> false
  }
}

// CHECK JVM_IR:
//   Mangled name: #testDI(kotlin.Double?;kotlin.Any?){}kotlin.Boolean
//   Public signature: /testDI|-2518117290397712484[0]
// CHECK JS_IR:
//   Mangled name: #testDI(kotlin.Double?;kotlin.Any?){}
//   Public signature: /testDI|-2492360038280217235[0]
fun testDI(x: Double?, y: Any?): Boolean {
  return when {
    y is Int? -> ieee754equals(arg0 = x, arg1 = { // BLOCK
      val tmp0_safe_receiver: Any? = y
      when {
        EQEQ(arg0 = tmp0_safe_receiver, arg1 = null) -> null
        else -> tmp0_safe_receiver /*as Int */.toDouble()
      }
    })
    else -> false
  }
}

// CHECK JVM_IR:
//   Mangled name: #testDI2(kotlin.Any?;kotlin.Any?){}kotlin.Boolean
//   Public signature: /testDI2|5408730355929274743[0]
// CHECK JS_IR:
//   Mangled name: #testDI2(kotlin.Any?;kotlin.Any?){}
//   Public signature: /testDI2|-1156893754545330465[0]
fun testDI2(x: Any?, y: Any?): Boolean {
  return when {
    when {
      x is Int? -> y is Double
      else -> false
    } -> ieee754equals(arg0 = { // BLOCK
      val tmp0_safe_receiver: Any? = x
      when {
        EQEQ(arg0 = tmp0_safe_receiver, arg1 = null) -> null
        else -> tmp0_safe_receiver /*as Int */.toDouble()
      }
    }, arg1 = y /*as Double? */)
    else -> false
  }
}

