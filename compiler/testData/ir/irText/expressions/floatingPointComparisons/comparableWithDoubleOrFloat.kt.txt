// CHECK JVM_IR:
//   Mangled name: #testD(kotlin.Comparable<kotlin.Double>;kotlin.Comparable<kotlin.Double>){}kotlin.Boolean
//   Public signature: /testD|-8334682674453061094[0]
// CHECK JS_IR:
//   Mangled name: #testD(kotlin.Comparable<kotlin.Double>;kotlin.Comparable<kotlin.Double>){}
//   Public signature: /testD|6420307726503450357[0]
fun testD(x: Comparable<Double>, y: Comparable<Double>): Boolean {
  return when {
    when {
      x is Double -> y is Double
      else -> false
    } -> less(arg0 = x /*as Double */, arg1 = y /*as Double */)
    else -> false
  }
}

// CHECK JVM_IR:
//   Mangled name: #testF(kotlin.Comparable<kotlin.Float>;kotlin.Comparable<kotlin.Float>){}kotlin.Boolean
//   Public signature: /testF|2241994539085447467[0]
// CHECK JS_IR:
//   Mangled name: #testF(kotlin.Comparable<kotlin.Float>;kotlin.Comparable<kotlin.Float>){}
//   Public signature: /testF|5734029490201124122[0]
fun testF(x: Comparable<Float>, y: Comparable<Float>): Boolean {
  return when {
    when {
      x is Float -> y is Float
      else -> false
    } -> less(arg0 = x /*as Float */, arg1 = y /*as Float */)
    else -> false
  }
}

