// CHECK JVM_IR:
//   Mangled name: #test1d(kotlin.Double;kotlin.Double){}kotlin.Boolean
//   Public signature: /test1d|-6076864717398730791[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test1d(kotlin.Double;kotlin.Double){}
//   Mangled name computed from Descriptor: #test1d(kotlin.Double;kotlin.Double){}
//   Mangled name computed from Fir:        #test1d(kotlin.Double;kotlin.Double){}kotlin.Boolean
//   Public signature: /test1d|-6076864717398730791[0]
fun test1d(x: Double, y: Double): Boolean {
  return x.equals(other = y)
}

// CHECK JVM_IR:
//   Mangled name: #test2d(kotlin.Double;kotlin.Double?){}kotlin.Boolean
//   Public signature: /test2d|486392787565228433[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test2d(kotlin.Double;kotlin.Double?){}
//   Mangled name computed from Descriptor: #test2d(kotlin.Double;kotlin.Double?){}
//   Mangled name computed from Fir:        #test2d(kotlin.Double;kotlin.Double?){}kotlin.Boolean
//   Public signature: /test2d|486392787565228433[0]
fun test2d(x: Double, y: Double?): Boolean {
  return x.equals(other = y)
}

// CHECK JVM_IR:
//   Mangled name: #test3d(kotlin.Double;kotlin.Any){}kotlin.Boolean
//   Public signature: /test3d|-7647993882327577455[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test3d(kotlin.Double;kotlin.Any){}
//   Mangled name computed from Descriptor: #test3d(kotlin.Double;kotlin.Any){}
//   Mangled name computed from Fir:        #test3d(kotlin.Double;kotlin.Any){}kotlin.Boolean
//   Public signature: /test3d|-7647993882327577455[0]
fun test3d(x: Double, y: Any): Boolean {
  return x.equals(other = y)
}

// CHECK JVM_IR:
//   Mangled name: #test4d(kotlin.Double;kotlin.Number){}kotlin.Boolean
//   Public signature: /test4d|6663537144393076314[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test4d(kotlin.Double;kotlin.Number){}
//   Mangled name computed from Descriptor: #test4d(kotlin.Double;kotlin.Number){}
//   Mangled name computed from Fir:        #test4d(kotlin.Double;kotlin.Number){}kotlin.Boolean
//   Public signature: /test4d|6663537144393076314[0]
fun test4d(x: Double, y: Number): Boolean {
  return x.equals(other = y)
}

// CHECK JVM_IR:
//   Mangled name: #test5d(kotlin.Double;kotlin.Any){}kotlin.Boolean
//   Public signature: /test5d|3958951524111099104[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test5d(kotlin.Double;kotlin.Any){}
//   Mangled name computed from Descriptor: #test5d(kotlin.Double;kotlin.Any){}
//   Mangled name computed from Fir:        #test5d(kotlin.Double;kotlin.Any){}kotlin.Boolean
//   Public signature: /test5d|3958951524111099104[0]
fun test5d(x: Double, y: Any): Boolean {
  return when {
    y is Double -> x.equals(other = y /*as Double */)
    else -> false
  }
}

// CHECK JVM_IR:
//   Mangled name: #test6d(kotlin.Any;kotlin.Any){}kotlin.Boolean
//   Public signature: /test6d|4973138391607645243[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test6d(kotlin.Any;kotlin.Any){}
//   Mangled name computed from Descriptor: #test6d(kotlin.Any;kotlin.Any){}
//   Mangled name computed from Fir:        #test6d(kotlin.Any;kotlin.Any){}kotlin.Boolean
//   Public signature: /test6d|4973138391607645243[0]
fun test6d(x: Any, y: Any): Boolean {
  return when {
    when {
      x is Double -> y is Double
      else -> false
    } -> x /*as Double */.equals(other = y /*as Double */)
    else -> false
  }
}

// CHECK JVM_IR:
//   Mangled name: #test1f(kotlin.Float;kotlin.Float){}kotlin.Boolean
//   Public signature: /test1f|-2409682264718997877[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test1f(kotlin.Float;kotlin.Float){}
//   Mangled name computed from Descriptor: #test1f(kotlin.Float;kotlin.Float){}
//   Mangled name computed from Fir:        #test1f(kotlin.Float;kotlin.Float){}kotlin.Boolean
//   Public signature: /test1f|-2409682264718997877[0]
fun test1f(x: Float, y: Float): Boolean {
  return x.equals(other = y)
}

// CHECK JVM_IR:
//   Mangled name: #test2f(kotlin.Float;kotlin.Float?){}kotlin.Boolean
//   Public signature: /test2f|-1096698028658974991[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test2f(kotlin.Float;kotlin.Float?){}
//   Mangled name computed from Descriptor: #test2f(kotlin.Float;kotlin.Float?){}
//   Mangled name computed from Fir:        #test2f(kotlin.Float;kotlin.Float?){}kotlin.Boolean
//   Public signature: /test2f|-1096698028658974991[0]
fun test2f(x: Float, y: Float?): Boolean {
  return x.equals(other = y)
}

// CHECK JVM_IR:
//   Mangled name: #test3f(kotlin.Float;kotlin.Any){}kotlin.Boolean
//   Public signature: /test3f|-6031401993389855448[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test3f(kotlin.Float;kotlin.Any){}
//   Mangled name computed from Descriptor: #test3f(kotlin.Float;kotlin.Any){}
//   Mangled name computed from Fir:        #test3f(kotlin.Float;kotlin.Any){}kotlin.Boolean
//   Public signature: /test3f|-6031401993389855448[0]
fun test3f(x: Float, y: Any): Boolean {
  return x.equals(other = y)
}

// CHECK JVM_IR:
//   Mangled name: #test4f(kotlin.Float;kotlin.Number){}kotlin.Boolean
//   Public signature: /test4f|3595885060539941485[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test4f(kotlin.Float;kotlin.Number){}
//   Mangled name computed from Descriptor: #test4f(kotlin.Float;kotlin.Number){}
//   Mangled name computed from Fir:        #test4f(kotlin.Float;kotlin.Number){}kotlin.Boolean
//   Public signature: /test4f|3595885060539941485[0]
fun test4f(x: Float, y: Number): Boolean {
  return x.equals(other = y)
}

// CHECK JVM_IR:
//   Mangled name: #test5f(kotlin.Float;kotlin.Any){}kotlin.Boolean
//   Public signature: /test5f|3370721745745603328[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test5f(kotlin.Float;kotlin.Any){}
//   Mangled name computed from Descriptor: #test5f(kotlin.Float;kotlin.Any){}
//   Mangled name computed from Fir:        #test5f(kotlin.Float;kotlin.Any){}kotlin.Boolean
//   Public signature: /test5f|3370721745745603328[0]
fun test5f(x: Float, y: Any): Boolean {
  return when {
    y is Float -> x.equals(other = y /*as Float */)
    else -> false
  }
}

// CHECK JVM_IR:
//   Mangled name: #test6f(kotlin.Any;kotlin.Any){}kotlin.Boolean
//   Public signature: /test6f|-4566736704199373988[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test6f(kotlin.Any;kotlin.Any){}
//   Mangled name computed from Descriptor: #test6f(kotlin.Any;kotlin.Any){}
//   Mangled name computed from Fir:        #test6f(kotlin.Any;kotlin.Any){}kotlin.Boolean
//   Public signature: /test6f|-4566736704199373988[0]
fun test6f(x: Any, y: Any): Boolean {
  return when {
    when {
      x is Float -> y is Float
      else -> false
    } -> x /*as Float */.equals(other = y /*as Float */)
    else -> false
  }
}

// CHECK JVM_IR:
//   Mangled name: #testFD(kotlin.Any;kotlin.Any){}kotlin.Boolean
//   Public signature: /testFD|-1860793291456176126[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #testFD(kotlin.Any;kotlin.Any){}
//   Mangled name computed from Descriptor: #testFD(kotlin.Any;kotlin.Any){}
//   Mangled name computed from Fir:        #testFD(kotlin.Any;kotlin.Any){}kotlin.Boolean
//   Public signature: /testFD|-1860793291456176126[0]
fun testFD(x: Any, y: Any): Boolean {
  return when {
    when {
      x is Float -> y is Double
      else -> false
    } -> x /*as Float */.equals(other = y /*as Double */)
    else -> false
  }
}

// CHECK JVM_IR:
//   Mangled name: #testDF(kotlin.Any;kotlin.Any){}kotlin.Boolean
//   Public signature: /testDF|9162091323093859710[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #testDF(kotlin.Any;kotlin.Any){}
//   Mangled name computed from Descriptor: #testDF(kotlin.Any;kotlin.Any){}
//   Mangled name computed from Fir:        #testDF(kotlin.Any;kotlin.Any){}kotlin.Boolean
//   Public signature: /testDF|9162091323093859710[0]
fun testDF(x: Any, y: Any): Boolean {
  return when {
    when {
      x is Double -> y is Float
      else -> false
    } -> x /*as Double */.equals(other = y /*as Float */)
    else -> false
  }
}

// CHECK JVM_IR:
//   Mangled name: #test1fr@kotlin.Float(kotlin.Float){}kotlin.Boolean
//   Public signature: /test1fr|-694393964183188653[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test1fr@kotlin.Float(kotlin.Float){}
//   Mangled name computed from Descriptor: #test1fr@kotlin.Float(kotlin.Float){}
//   Mangled name computed from Fir:        #test1fr@kotlin.Float(kotlin.Float){}kotlin.Boolean
//   Public signature: /test1fr|-694393964183188653[0]
fun Float.test1fr(x: Float): Boolean {
  return <this>.equals(other = x)
}

// CHECK JVM_IR:
//   Mangled name: #test2fr@kotlin.Float(kotlin.Float?){}kotlin.Boolean
//   Public signature: /test2fr|-7195652255237968185[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test2fr@kotlin.Float(kotlin.Float?){}
//   Mangled name computed from Descriptor: #test2fr@kotlin.Float(kotlin.Float?){}
//   Mangled name computed from Fir:        #test2fr@kotlin.Float(kotlin.Float?){}kotlin.Boolean
//   Public signature: /test2fr|-7195652255237968185[0]
fun Float.test2fr(x: Float?): Boolean {
  return <this>.equals(other = x)
}

// CHECK JVM_IR:
//   Mangled name: #test3fr@kotlin.Float(kotlin.Any){}kotlin.Boolean
//   Public signature: /test3fr|1133351613663431340[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test3fr@kotlin.Float(kotlin.Any){}
//   Mangled name computed from Descriptor: #test3fr@kotlin.Float(kotlin.Any){}
//   Mangled name computed from Fir:        #test3fr@kotlin.Float(kotlin.Any){}kotlin.Boolean
//   Public signature: /test3fr|1133351613663431340[0]
fun Float.test3fr(x: Any): Boolean {
  return <this>.equals(other = x)
}

// CHECK JVM_IR:
//   Mangled name: #test4fr@kotlin.Float(kotlin.Number){}kotlin.Boolean
//   Public signature: /test4fr|4585384914379603000[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test4fr@kotlin.Float(kotlin.Number){}
//   Mangled name computed from Descriptor: #test4fr@kotlin.Float(kotlin.Number){}
//   Mangled name computed from Fir:        #test4fr@kotlin.Float(kotlin.Number){}kotlin.Boolean
//   Public signature: /test4fr|4585384914379603000[0]
fun Float.test4fr(x: Number): Boolean {
  return <this>.equals(other = x)
}

// CHECK JVM_IR:
//   Mangled name: #test5fr@kotlin.Float(kotlin.Any){}kotlin.Boolean
//   Public signature: /test5fr|-7273239139732099583[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test5fr@kotlin.Float(kotlin.Any){}
//   Mangled name computed from Descriptor: #test5fr@kotlin.Float(kotlin.Any){}
//   Mangled name computed from Fir:        #test5fr@kotlin.Float(kotlin.Any){}kotlin.Boolean
//   Public signature: /test5fr|-7273239139732099583[0]
fun Float.test5fr(x: Any): Boolean {
  return when {
    x is Float -> <this>.equals(other = x /*as Float */)
    else -> false
  }
}

// CHECK JVM_IR:
//   Mangled name: #test6fr@kotlin.Float(kotlin.Any){}kotlin.Boolean
//   Public signature: /test6fr|-6547972600052106597[0]
// CHECK JS_IR:
//   Mangled name computed from Ir:         #test6fr@kotlin.Float(kotlin.Any){}
//   Mangled name computed from Descriptor: #test6fr@kotlin.Float(kotlin.Any){}
//   Mangled name computed from Fir:        #test6fr@kotlin.Float(kotlin.Any){}kotlin.Boolean
//   Public signature: /test6fr|-6547972600052106597[0]
fun Float.test6fr(x: Any): Boolean {
  return when {
    x is Double -> <this>.equals(other = x /*as Double */)
    else -> false
  }
}

