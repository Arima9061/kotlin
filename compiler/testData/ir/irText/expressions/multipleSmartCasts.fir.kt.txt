// CHECK:
//   Mangled name: IC1
//   Public signature: /IC1|null[0]
interface IC1 {
  // CHECK JVM_IR:
  //   Mangled name: IC1#component1(){}kotlin.Int
  //   Public signature: /IC1.component1|-8217597213800111288[0]
  // CHECK JS_IR:
  //   Mangled name computed from Ir:         IC1#component1(){}
  //   Mangled name computed from Descriptor: IC1#component1(){}
  //   Mangled name computed from Fir:        IC1#component1(){}kotlin.Int
  //   Public signature: /IC1.component1|-8217597213800111288[0]
  abstract operator fun component1(): Int

}

// CHECK:
//   Mangled name: IC2
//   Public signature: /IC2|null[0]
interface IC2 {
  // CHECK JVM_IR:
  //   Mangled name: IC2#component2(){}kotlin.String
  //   Public signature: /IC2.component2|1228864375093914597[0]
  // CHECK JS_IR:
  //   Mangled name computed from Ir:         IC2#component2(){}
  //   Mangled name computed from Descriptor: IC2#component2(){}
  //   Mangled name computed from Fir:        IC2#component2(){}kotlin.String
  //   Public signature: /IC2.component2|1228864375093914597[0]
  abstract operator fun component2(): String

}

// CHECK:
//   Mangled name: #test(kotlin.Any){}
//   Public signature: /test|-7985792749252989017[0]
fun test(x: Any) {
  when {
    when {
      x is IC1 -> x /*as IC1 */ is IC2
      else -> false
    } -> { // BLOCK
      val <destruct>: Any = x /*as IC1 */
      val x1: Int = <destruct> /*as IC1 */.component1()
      val x2: String = <destruct> /*as IC1 */ /*as IC2 */.component2()
    }
  }
}

