library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: AbstractFoo
    // class name: AnyFoo
    // class name: IntFoo
    // class name: StringFoo

    public abstract class AbstractFoo<T#0 /* K */, T#1 /* V */> : kotlin/collections/Map<T#0, T#1> {

      public constructor()

      public open fun containsKey(key: T#0): kotlin/Boolean

      public open fun containsValue(value: T#1): kotlin/Boolean

      public open operator fun get(key: T#0): T#1?

      public open fun isEmpty(): kotlin/Boolean

      public open val entries: kotlin/collections/Set<kotlin/collections/Map.Entry<T#0, T#1>>
        public open /* non-default */ get

      public open val keys: kotlin/collections/Set<T#0>
        public open /* non-default */ get

      public open val size: kotlin/Int
        public open /* non-default */ get

      public open val values: kotlin/collections/Collection<T#1>
        public open /* non-default */ get
    }

    public final class AnyFoo<T#0 /* E */> : AbstractFoo<kotlin/Any?, T#0> {

      public constructor()
    }

    public final class IntFoo<T#0 /* E */> : AbstractFoo<kotlin/Int, T#0> {

      public constructor()

      public open operator fun get(key: kotlin/Int): T#0?
    }

    public open class StringFoo<T#0 /* E */> : AbstractFoo<kotlin/String, T#0> {

      public constructor()

      public open operator fun get(key: kotlin/String): T#0?
    }

    package {

      public final fun box(): kotlin/String

      public final var result: kotlin/String
        public final get
        public final set
    }
  }
}
