MODULE_FRAGMENT name:<main>
  FILE fqName:<root> fileName:/switchBreakNoLabel.kt
    FUN name:test signature:/test|test(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:flagOuter type:<unbound IrClassSymbolImpl> [var]
          CONST Boolean type=<unbound IrClassSymbolImpl> value=false
        VAR name:flagInner type:<unbound IrClassSymbolImpl> [var]
          CONST Boolean type=<unbound IrClassSymbolImpl> value=false
        BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP
          VAR FOR_LOOP_ITERATOR name:<iterator> type:<unbound IrClassSymbolImpl> [val]
            CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_ITERATOR
              $this: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=RANGE
                $this: CONST Int type=<unbound IrClassSymbolImpl> value=0
                1: CONST Int type=<unbound IrClassSymbolImpl> value=5
          WHILE label=null origin=FOR_LOOP_INNER_WHILE
            condition: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
            body: BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_INNER_WHILE
              VAR FOR_LOOP_VARIABLE name:i type:<unbound IrClassSymbolImpl> [val]
                CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_NEXT
                  $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
              BLOCK type=<unbound IrClassSymbolImpl> origin=null
                BLOCK type=<unbound IrClassSymbolImpl> origin=WHEN
                  VAR IR_TEMPORARY_VARIABLE name:tmp0_subject type:<unbound IrClassSymbolImpl> [val]
                    GET_VAR 'val i: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
                  WHEN type=<unbound IrClassSymbolImpl> origin=WHEN
                    BRANCH
                      if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                        arg0: GET_VAR 'val tmp0_subject: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
                        arg1: CONST Int type=<unbound IrClassSymbolImpl> value=1
                      then: GET_OBJECT 'UNBOUND IrClassSymbolImpl' type=<unbound IrClassSymbolImpl>
                    BRANCH
                      if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                        arg0: GET_VAR 'val tmp0_subject: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
                        arg1: CONST Int type=<unbound IrClassSymbolImpl> value=2
                      then: GET_OBJECT 'UNBOUND IrClassSymbolImpl' type=<unbound IrClassSymbolImpl>
                    BRANCH
                      if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                        arg0: GET_VAR 'val tmp0_subject: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
                        arg1: CONST Int type=<unbound IrClassSymbolImpl> value=3
                      then: BLOCK type=<unbound IrClassSymbolImpl> origin=null
                        BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP
                          VAR FOR_LOOP_ITERATOR name:<iterator> type:<unbound IrClassSymbolImpl> [val]
                            CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_ITERATOR
                              $this: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=RANGE
                                $this: CONST Int type=<unbound IrClassSymbolImpl> value=0
                                1: CONST Int type=<unbound IrClassSymbolImpl> value=5
                          WHILE label=null origin=FOR_LOOP_INNER_WHILE
                            condition: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_HAS_NEXT
                              $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
                            body: BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_INNER_WHILE
                              VAR FOR_LOOP_VARIABLE name:j type:<unbound IrClassSymbolImpl> [val]
                                CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_NEXT
                                  $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
                              BLOCK type=<unbound IrClassSymbolImpl> origin=null
                                BLOCK type=<unbound IrClassSymbolImpl> origin=WHEN
                                  VAR IR_TEMPORARY_VARIABLE name:tmp1_subject type:<unbound IrClassSymbolImpl> [val]
                                    GET_VAR 'val j: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
                                  WHEN type=<unbound IrClassSymbolImpl> origin=WHEN
                                    BRANCH
                                      if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                                        arg0: GET_VAR 'val tmp1_subject: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
                                        arg1: CONST Int type=<unbound IrClassSymbolImpl> value=1
                                      then: GET_OBJECT 'UNBOUND IrClassSymbolImpl' type=<unbound IrClassSymbolImpl>
                                    BRANCH
                                      if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                                        arg0: GET_VAR 'val tmp1_subject: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
                                        arg1: CONST Int type=<unbound IrClassSymbolImpl> value=2
                                      then: BLOCK type=<unbound IrClassSymbolImpl> origin=null
                                        SET_VAR 'var flagInner: <unbound IrClassSymbolImpl> [var] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=EQ
                                          CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                                        BREAK label=null loop.label=null
                                    BRANCH
                                      if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                                      then: SET_VAR 'var flagInner: <unbound IrClassSymbolImpl> [var] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=EQ
                                        CONST Boolean type=<unbound IrClassSymbolImpl> value=false
                    BRANCH
                      if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                        arg0: GET_VAR 'val tmp0_subject: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
                        arg1: CONST Int type=<unbound IrClassSymbolImpl> value=4
                      then: BLOCK type=<unbound IrClassSymbolImpl> origin=null
                        SET_VAR 'var flagOuter: <unbound IrClassSymbolImpl> [var] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=EQ
                          CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                        BREAK label=null loop.label=null
                    BRANCH
                      if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                      then: SET_VAR 'var flagOuter: <unbound IrClassSymbolImpl> [var] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=EQ
                        CONST Boolean type=<unbound IrClassSymbolImpl> value=false
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun test (): <unbound IrClassSymbolImpl> declared in <root>'
          CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
            $this: GET_VAR 'var flagOuter: <unbound IrClassSymbolImpl> [var] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
            1: GET_VAR 'var flagInner: <unbound IrClassSymbolImpl> [var] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:flag type:<unbound IrClassSymbolImpl> [val]
          CALL 'public final fun test (): <unbound IrClassSymbolImpl> declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          WHEN type=<unbound IrClassSymbolImpl> origin=IF
            BRANCH
              if: GET_VAR 'val flag: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
              then: CONST String type=<unbound IrClassSymbolImpl> value="OK"
            BRANCH
              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
              then: CONST String type=<unbound IrClassSymbolImpl> value="fail1"
