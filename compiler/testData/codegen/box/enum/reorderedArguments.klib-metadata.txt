library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Bar
    // class name: Base
    // class name: Foo

    public final enum class Bar : Base<Foo>, kotlin/Enum<Bar> {

      private constructor(value: Foo)

      public open val value: Foo
        public open get

      A,

      B,

      C,

      D,

      E,

      // has Enum.entries
    }

    public abstract interface Base<T#0 /* T */> : kotlin/Any {

      public abstract val value: T#0
        public abstract get
    }

    public final enum class Foo : kotlin/Enum<Foo> {

      private constructor(a: kotlin/Int, b: kotlin/Int, c: kotlin/Int /* = ... */)

      public final val a: kotlin/Int
        public final get

      public final val b: kotlin/Int
        public final get

      public final val c: kotlin/Int
        public final get

      A,

      B,

      C,

      D,

      E,

      // has Enum.entries
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
