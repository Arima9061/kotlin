library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Base
    // class name: Host
    // class name: Host.Companion

    public abstract class Base : kotlin/Any {

      public constructor(fn: kotlin/Function0<kotlin/String>)

      public final val fn: kotlin/Function0<kotlin/String>
        public final get
    }

    public abstract interface Host : kotlin/Any {

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object Host.Companion : Base {

      private constructor()

      public final fun ok(): kotlin/String
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
