library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Anno
    // class name: Anno.Companion
    // class name: Test
    // class name: Test.Companion

    public final annotation class Anno : kotlin/Annotation {

      public constructor()

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object Anno.Companion : kotlin/Any {

      private constructor()

      public final fun method(): kotlin/String

      public final val anonObject: kotlin/Any
        public final get

      public final val x: kotlin/String /* = ... */
        public final get

      public final val y1: kotlin/String
        public final get

      public final val y2: kotlin/String
        public final get

      public final val y3: kotlin/String
        public final get

      public final val y4: kotlin/String
        public final get

      public final val y5: kotlin/String
        public final get
    }

    public abstract interface Test : kotlin/Any {

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object Test.Companion : kotlin/Any {

      private constructor()

      public final fun method(): kotlin/String

      public final val anonObject: kotlin/Any
        public final get

      public final val x: kotlin/String /* = ... */
        public final get

      public final val y1: kotlin/String
        public final get

      public final val y2: kotlin/String
        public final get

      public final val y3: kotlin/String
        public final get

      public final val y4: kotlin/String
        public final get

      public final val y5: kotlin/String
        public final get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
