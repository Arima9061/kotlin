library {
  // module name: <main>

  library fragment {
    // package name: <root>

    package {

      public final fun box(): kotlin/String
    }
  }

  library fragment {
    // package name: a

    // class name: a/A
    // class name: a/A.Companion

    public open class a/A : kotlin/Any {

      public constructor()

      // companion object: Companion

      // nested class: Companion
    }

    protected final companion object a/A.Companion : kotlin/Any {

      private constructor()

      public final val vo: kotlin/String /* = ... */
        public final get
    }
  }

  library fragment {
    // package name: b

    // class name: b/Outer
    // class name: b/Outer.Companion
    // class name: b/Outer.Nested

    public final class b/Outer : a/A {

      public constructor()

      public final fun test(): kotlin/String

      // companion object: Companion

      // nested class: Companion

      // nested class: Nested
    }

    private final companion object b/Outer.Companion : kotlin/Any {

      private constructor()

      public final val vk: kotlin/String /* = ... */
        public final get
    }

    public final class b/Outer.Nested : kotlin/Any {

      public constructor()

      public final fun foo(): kotlin/String
    }

    package {

      public final inline fun <T#0 /* T */> run(fn: kotlin/Function0<T#0>): T#0
    }
  }
}
