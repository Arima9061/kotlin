library {
  // module name: <jvm>

  library fragment {
    // package name: <root>

    // class name: Base
    // class name: Derived
    // class name: OtherBase
    // class name: Platform

    public abstract interface Base : kotlin/Any {

      public abstract fun foo(e: kotlin/String): kotlin/String
    }

    public abstract class Derived : Base, OtherBase {

      public constructor()

      public open fun foo(e: kotlin/String /* = Expect^ */): kotlin/String /* = Expect^ */
    }

    public abstract interface OtherBase : kotlin/Any {

      public abstract fun foo(e: kotlin/String /* = Expect^ */): kotlin/String /* = Expect^ */
    }

    public final class Platform : Derived {

      public constructor()
    }

    package {

      public final fun bar(d: Derived, e: kotlin/String, f: kotlin/String /* = Expect^ */): kotlin/String

      public final fun box(): kotlin/String

      public typealias Expect = kotlin/String /* = kotlin/String */
    }
  }
}
