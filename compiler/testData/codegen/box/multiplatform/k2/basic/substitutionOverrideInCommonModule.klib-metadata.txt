library {
  // module name: <platform>

  library fragment {
    // package name: <root>

    // class name: ActualTarget
    // class name: Base
    // class name: Derived
    // class name: Impl

    public final class ActualTarget : kotlin/Any {

      public constructor()

      public final fun o(): kotlin/String

      public final val k: kotlin/String /* = ... */
        public final get
    }

    public abstract interface Base<T#0 /* E */> : kotlin/Any {

      public open fun foo(x: ActualTarget /* = Expect^ */): kotlin/String

      public open val ActualTarget /* = Expect^ */.bar: kotlin/String
        public open /* non-default */ get
    }

    public abstract interface Derived : Base<kotlin/Any?> {
    }

    public final class Impl : Derived {

      public constructor()
    }

    package {

      public final fun box(): kotlin/String

      public final fun test(x: Derived): kotlin/String

      public typealias Expect = ActualTarget /* = ActualTarget */
    }
  }
}
