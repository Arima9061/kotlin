library {
  // module name: <platform>

  library fragment {
    // package name: <root>

    // class name: AbstractImpl
    // class name: ActualTarget
    // class name: Base
    // class name: Derived

    public open class AbstractImpl : Derived, Base {

      public constructor()
    }

    public final class ActualTarget : kotlin/Any {

      public constructor()

      public final fun foo(): kotlin/String
    }

    public abstract interface Base : kotlin/Any {

      public abstract fun cancel(s: ActualTarget? /* = Expect^? */ /* = ... */): kotlin/String
    }

    public open class Derived : Base {

      public constructor()

      public open fun cancel(s: ActualTarget? /* = Expect^? */): kotlin/String
    }

    package {

      public final fun box(): kotlin/String

      public final fun testCommon(): kotlin/String

      public final fun testPlatform(): kotlin/String

      public typealias Expect = ActualTarget /* = ActualTarget */
    }
  }
}
