MODULE_FRAGMENT name:<main>
  FILE fqName:<root> fileName:/forInUntilChar.kt
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        CALL 'private final fun testChar (): <unbound IrClassSymbolImpl> declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
        CALL 'private final fun testNullableChar (): <unbound IrClassSymbolImpl> declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          CONST String type=<unbound IrClassSymbolImpl> value="OK"
    FUN name:testChar signature:[ File '/forInUntilChar.kt' <- /testChar|testChar(){}[0] ] visibility:private modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:sum type:<unbound IrClassSymbolImpl> [var]
          CONST String type=<unbound IrClassSymbolImpl> value=""
        BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP
          VAR FOR_LOOP_ITERATOR name:<iterator> type:<unbound IrClassSymbolImpl> [val]
            CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_ITERATOR
              $this: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
                $receiver: CONST Char type=<unbound IrClassSymbolImpl> value='1'
                1: CONST Char type=<unbound IrClassSymbolImpl> value='5'
          WHILE label=null origin=FOR_LOOP_INNER_WHILE
            condition: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testChar' type=<unbound IrClassSymbolImpl> origin=null
            body: BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_INNER_WHILE
              VAR FOR_LOOP_VARIABLE name:ch type:<unbound IrClassSymbolImpl> [val]
                CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_NEXT
                  $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testChar' type=<unbound IrClassSymbolImpl> origin=null
              BLOCK type=<unbound IrClassSymbolImpl> origin=null
                SET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testChar' type=<unbound IrClassSymbolImpl> origin=EQ
                  CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                    $this: GET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testChar' type=<unbound IrClassSymbolImpl> origin=null
                    1: GET_VAR 'val ch: <unbound IrClassSymbolImpl> [val] declared in <root>.testChar' type=<unbound IrClassSymbolImpl> origin=null
        CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
          <1>: <unbound IrClassSymbolImpl>
          1: CONST String type=<unbound IrClassSymbolImpl> value="1234"
          2: GET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testChar' type=<unbound IrClassSymbolImpl> origin=null
    FUN name:testNullableChar signature:[ File '/forInUntilChar.kt' <- /testNullableChar|testNullableChar(){}[0] ] visibility:private modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:sum type:<unbound IrClassSymbolImpl> [var]
          CONST String type=<unbound IrClassSymbolImpl> value=""
        BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP
          VAR FOR_LOOP_ITERATOR name:<iterator> type:<unbound IrClassSymbolImpl> [val]
            CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_ITERATOR
              $this: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
                $receiver: CONST Char type=<unbound IrClassSymbolImpl> value='1'
                1: CONST Char type=<unbound IrClassSymbolImpl> value='5'
          WHILE label=null origin=FOR_LOOP_INNER_WHILE
            condition: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testNullableChar' type=<unbound IrClassSymbolImpl> origin=null
            body: BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_INNER_WHILE
              VAR FOR_LOOP_VARIABLE name:ch type:<unbound IrClassSymbolImpl>? [val]
                CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_NEXT
                  $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testNullableChar' type=<unbound IrClassSymbolImpl> origin=null
              BLOCK type=<unbound IrClassSymbolImpl> origin=null
                SET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testNullableChar' type=<unbound IrClassSymbolImpl> origin=EQ
                  CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                    $this: GET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testNullableChar' type=<unbound IrClassSymbolImpl> origin=null
                    1: BLOCK type=<unbound IrClassSymbolImpl> origin=ELVIS
                      VAR IR_TEMPORARY_VARIABLE name:tmp0_elvis_lhs type:<unbound IrClassSymbolImpl>? [val]
                        GET_VAR 'val ch: <unbound IrClassSymbolImpl>? [val] declared in <root>.testNullableChar' type=<unbound IrClassSymbolImpl>? origin=null
                      WHEN type=<unbound IrClassSymbolImpl> origin=null
                        BRANCH
                          if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                            arg0: GET_VAR 'val tmp0_elvis_lhs: <unbound IrClassSymbolImpl>? [val] declared in <root>.testNullableChar' type=<unbound IrClassSymbolImpl>? origin=null
                            arg1: CONST Null type=<unbound IrClassSymbolImpl>? value=null
                          then: BREAK label=null loop.label=null
                        BRANCH
                          if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                          then: GET_VAR 'val tmp0_elvis_lhs: <unbound IrClassSymbolImpl>? [val] declared in <root>.testNullableChar' type=<unbound IrClassSymbolImpl>? origin=null
        CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
          <1>: <unbound IrClassSymbolImpl>
          1: CONST String type=<unbound IrClassSymbolImpl> value="1234"
          2: GET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testNullableChar' type=<unbound IrClassSymbolImpl> origin=null
