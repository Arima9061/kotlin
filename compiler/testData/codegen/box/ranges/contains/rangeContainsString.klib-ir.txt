MODULE_FRAGMENT name:<main>
  FILE fqName:<root> fileName:/rangeContainsString.kt
    FUN name:contains signature:/contains|contains@kotlin.ranges.IntRange(kotlin.String){}[0] visibility:public modality:FINAL <> ($receiver:<unbound IrClassSymbolImpl>, s:<unbound IrClassSymbolImpl>) returnType:<unbound IrClassSymbolImpl> [operator]
      $receiver: VALUE_PARAMETER name:<this> type:<unbound IrClassSymbolImpl>
      VALUE_PARAMETER name:s index:0 type:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun contains (s: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> [operator] declared in <root>'
          CONST Boolean type=<unbound IrClassSymbolImpl> value=true
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          WHEN type=<unbound IrClassSymbolImpl> origin=IF
            BRANCH
              if: CALL 'public final fun contains (s: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> [operator] declared in <root>' type=<unbound IrClassSymbolImpl> origin=IN
                $receiver: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=RANGE
                  $this: CONST Int type=<unbound IrClassSymbolImpl> value=0
                  1: CONST Int type=<unbound IrClassSymbolImpl> value=1
                s: CONST String type=<unbound IrClassSymbolImpl> value="s"
              then: CONST String type=<unbound IrClassSymbolImpl> value="OK"
            BRANCH
              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
              then: CONST String type=<unbound IrClassSymbolImpl> value="fail"
