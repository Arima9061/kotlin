library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: ResultType
    // class name: ResultType.Companion

    public final enum class ResultType : kotlin/Enum<ResultType> {

      private constructor(reason: kotlin/String)

      public final val reason: kotlin/String
        public final get

      // companion object: Companion

      // nested class: Companion

      SOMETHING,

      OK,

      UNKNOWN,

      // has Enum.entries
    }

    public final companion object ResultType.Companion : kotlin/Any {

      private constructor()

      public final fun getByVal(reason: kotlin/String): ResultType
    }

    package {

      public final fun box(): kotlin/String

      public final inline fun <T#0 /* T */> kotlin/Array<out T#0>.firstOrDefault(predicate: kotlin/Function1<T#0, kotlin/Boolean>, default: T#0): T#0
    }
  }
}
