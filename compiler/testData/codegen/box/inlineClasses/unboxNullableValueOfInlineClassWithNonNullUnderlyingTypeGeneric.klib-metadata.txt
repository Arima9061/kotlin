library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: BoxAny
    // class name: BoxFoo
    // class name: BoxT
    // class name: BoxT2
    // class name: IFoo
    // class name: Str
    // class name: Str2
    // class name: StrArr

    public final class BoxAny : kotlin/Any {

      public constructor(boxed: kotlin/Any?)

      public final val boxed: kotlin/Any?
        public final get
    }

    public final class BoxFoo : kotlin/Any {

      public constructor(boxed: IFoo?)

      public final val boxed: IFoo?
        public final get
    }

    public final class BoxT<T#0 /* T */> : kotlin/Any {

      public constructor(boxed: T#0)

      public final val boxed: T#0
        public final get
    }

    public final class BoxT2<T#0 /* T */ : kotlin/Any> : kotlin/Any {

      public constructor(boxed: T#0?)

      public final val boxed: T#0?
        public final get
    }

    public abstract interface IFoo : kotlin/Any {
    }

    public final value class Str<T#0 /* T */ : kotlin/String> : IFoo {

      public constructor(value: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val value: T#0
        public final get

      // underlying property: value

      // underlying type: T#0
    }

    public final value class Str2<T#0 /* T */ : Str<kotlin/String>> : IFoo {

      public constructor(value: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val value: T#0
        public final get

      // underlying property: value

      // underlying type: T#0
    }

    public final value class StrArr : IFoo {

      public constructor(value: kotlin/Array<kotlin/String>)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val value: kotlin/Array<kotlin/String>
        public final get

      // underlying property: value

      // underlying type: kotlin/Array<kotlin/String>
    }

    package {

      public final fun box(): kotlin/String

      public final fun <T#0 /* T */ : Str<kotlin/String>> box2ToNullableAny(x: Str2<T#0>?): BoxAny

      public final fun <T#0 /* T */ : Str<kotlin/String>> box2ToNullableInterface(x: Str2<T#0>?): BoxFoo

      public final fun <T#0 /* T */ : Str<kotlin/String>> box2ToTypeParameter(x: Str2<T#0>?): BoxT<Str2<T#0>?>

      public final fun <T#0 /* T */ : Str<kotlin/String>> box2ToTypeParameter2(x: Str2<T#0>?): BoxT2<Str2<T#0>>

      public final fun boxArrToNullableAny(x: StrArr?): BoxAny

      public final fun boxArrToNullableInterface(x: StrArr?): BoxFoo

      public final fun boxArrToTypeParameter(x: StrArr?): BoxT<StrArr?>

      public final fun boxArrToTypeParameter2(x: StrArr?): BoxT2<StrArr>

      public final fun <T#0 /* T */ : kotlin/String> boxToNullableAny(x: Str<T#0>?): BoxAny

      public final fun <T#0 /* T */ : kotlin/String> boxToNullableInterface(x: Str<T#0>?): BoxFoo

      public final fun <T#0 /* T */ : kotlin/String> boxToTypeParameter(x: Str<T#0>?): BoxT<Str<T#0>?>

      public final fun <T#0 /* T */ : kotlin/String> boxToTypeParameter2(x: Str<T#0>?): BoxT2<Str<T#0>>

      public final fun <T#0 /* T */ : kotlin/String> useNullableStr(x: Str<T#0>?): kotlin/Unit

      public final fun <T#0 /* T */ : Str<kotlin/String>> useNullableStr2(x: Str2<T#0>?): kotlin/Unit

      public final fun useNullableStrArr(x: StrArr?): kotlin/Unit
    }
  }
}
