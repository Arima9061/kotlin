library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Outer
    // class name: Outer.Inner
    // class name: Z1
    // class name: Z2
    // class name: ZN

    public final class Outer<T#0 /* X */> : kotlin/Any {

      public constructor(x: T#0)

      public final val x: T#0
        public final get

      // nested class: Inner
    }

    public final inner class Outer.Inner<T#1 /* Y */> : kotlin/Any {

      public constructor(y: T#1)

      public open operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public final fun outerX(): T#0

      public final val hasNull: kotlin/Boolean
        public final get

      public final val y: T#1
        public final get
    }

    public final value class Z1<T#0 /* X */, T#1 /* Y */> : kotlin/Any {

      public constructor(x: Outer<T#0>.Inner<T#1>)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: Outer<T#0>.Inner<T#1>
        public final get

      // underlying property: x

      // underlying type: Outer<T#0>.Inner<T#1>
    }

    public final value class Z2<T#0 /* X */, T#1 /* Y */> : kotlin/Any {

      public constructor(z: Z1<T#0, T#1>)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val z: Z1<T#0, T#1>
        public final get

      // underlying property: z

      // underlying type: Z1<T#0, T#1>
    }

    public final value class ZN<T#0 /* X */, T#1 /* Y */> : kotlin/Any {

      public constructor(z: Z1<T#0, T#1>?)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val z: Z1<T#0, T#1>?
        public final get

      // underlying property: z

      // underlying type: Z1<T#0, T#1>?
    }

    package {

      public final fun box(): kotlin/String

      public final fun <T#0 /* X */, T#1 /* Y */> wrap1(xy: Outer<T#0>.Inner<T#1>): Z1<T#0, T#1>?

      public final fun <T#0 /* X */, T#1 /* Y */> wrap2(xy: Outer<T#0>.Inner<T#1>): Z2<T#0, T#1>?

      public final fun <T#0 /* X */, T#1 /* Y */> wrapN(xy: Outer<T#0>.Inner<T#1>): ZN<T#0, T#1>?
    }
  }
}
