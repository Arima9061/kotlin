library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: A
    // class name: B
    // class name: B2
    // class name: I
    // class name: IC

    public abstract class A<T#0 /* T */> : kotlin/Any {

      public constructor()

      public final fun foo(): T#0

      public final var t: T#0?
        public final get
        public final set
    }

    public final class B : A<IC> {

      public constructor()
    }

    public final class B2 : A<IC>, I {

      public constructor()
    }

    public abstract interface I : kotlin/Any {

      public abstract fun foo(): IC
    }

    public final value class IC : kotlin/Any {

      public constructor(x: kotlin/Int)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: kotlin/Int
        public final get

      // underlying property: x

      // underlying type: kotlin/Int
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
