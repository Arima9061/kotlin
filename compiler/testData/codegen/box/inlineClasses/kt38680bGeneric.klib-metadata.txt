library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: FooImpl
    // class name: IC
    // class name: IFoo
    // class name: IFoo2

    public final class FooImpl : IFoo2<IC<kotlin/String>> {

      public constructor()

      public open fun foo(x: IC<kotlin/String>, s: kotlin/String): kotlin/String
    }

    public final value class IC<T#0 /* T */ : kotlin/String> : kotlin/Any {

      public constructor(s: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val s: T#0
        public final get

      // underlying property: s

      // underlying type: T#0
    }

    public abstract interface IFoo<T#0 /* T */> : kotlin/Any {

      public abstract fun foo(x: T#0, s: kotlin/String /* = ... */): kotlin/String
    }

    public abstract interface IFoo2<T#0 /* T */> : IFoo<T#0> {

      public open fun bar(x: T#0): kotlin/String
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
