library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: AsAny
    // class name: Augmented
    // class name: AugmentedAndAsAny

    public final value class AsAny : kotlin/Any {

      public constructor(a: kotlin/Any)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open fun toString(): kotlin/String

      public final val a: kotlin/Any
        public final get

      // underlying property: a

      // underlying type: kotlin/Any
    }

    public final value class Augmented : kotlin/Any {

      public constructor(x: kotlin/Int)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open fun toString(): kotlin/String

      public final val x: kotlin/Int
        public final get

      // underlying property: x

      // underlying type: kotlin/Int
    }

    public final data class AugmentedAndAsAny : kotlin/Any {

      public constructor(a: Augmented, b: AsAny)

      public final /* synthesized */ operator fun component1(): Augmented

      public final /* synthesized */ operator fun component2(): AsAny

      public final /* synthesized */ fun copy(a: Augmented /* = ... */, b: AsAny /* = ... */): AugmentedAndAsAny

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: Augmented
        public final get

      public final val b: AsAny
        public final get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
