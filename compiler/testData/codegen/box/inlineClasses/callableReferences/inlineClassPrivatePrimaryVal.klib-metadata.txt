library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: L
    // class name: L.Companion
    // class name: S
    // class name: S.Companion
    // class name: Z
    // class name: Z.Companion

    public final value class L : kotlin/Any {

      public constructor(x: kotlin/Long)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      private final val x: kotlin/Long
        private final get

      // companion object: Companion

      // nested class: Companion

      // underlying property: x

      // underlying type: kotlin/Long
    }

    public final companion object L.Companion : kotlin/Any {

      private constructor()

      public final val xref: kotlin/reflect/KProperty1<L, kotlin/Long>
        public final get
    }

    public final value class S : kotlin/Any {

      public constructor(x: kotlin/String)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      private final val x: kotlin/String
        private final get

      // companion object: Companion

      // nested class: Companion

      // underlying property: x

      // underlying type: kotlin/String
    }

    public final companion object S.Companion : kotlin/Any {

      private constructor()

      public final val xref: kotlin/reflect/KProperty1<S, kotlin/String>
        public final get
    }

    public final value class Z : kotlin/Any {

      public constructor(x: kotlin/Int)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      private final val x: kotlin/Int
        private final get

      // companion object: Companion

      // nested class: Companion

      // underlying property: x

      // underlying type: kotlin/Int
    }

    public final companion object Z.Companion : kotlin/Any {

      private constructor()

      public final val xref: kotlin/reflect/KProperty1<Z, kotlin/Int>
        public final get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
