library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: A
    // class name: B
    // class name: C
    // class name: I
    // class name: I2
    // class name: IC

    public open class A<T#0 /* T */> : kotlin/Any {

      public constructor()

      public final fun foo(t: T#0): T#0
    }

    public open class B : A<IC> {

      public constructor()
    }

    public final class C : I2, B {

      public constructor()
    }

    public abstract interface I<T#0 /* T */> : kotlin/Any {

      public abstract fun foo(t: T#0): T#0
    }

    public abstract interface I2 : I<IC> {
    }

    public final value class IC : kotlin/Any {

      public constructor(x: kotlin/Int)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: kotlin/Int
        public final get

      // underlying property: x

      // underlying type: kotlin/Int
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
