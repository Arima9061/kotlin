library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: A

    public final value class A<T#0 /* T */> : kotlin/Any {

      public constructor(x: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: T#0
        public final get

      // underlying property: x

      // underlying type: T#0
    }

    package {

      public final fun box(): kotlin/String

      public final fun <T#0 /* T */> isNotEqualAnyLeft(s: A<T#0>, t: kotlin/Any?): kotlin/Boolean

      public final fun <T#0 /* T */> isNotEqualAnyNullableLeft(s: A<T#0>?, t: kotlin/Any?): kotlin/Boolean

      public final fun <T#0 /* T */> isNotEqualAnyNullableRight(s: kotlin/Any?, t: A<T#0>?): kotlin/Boolean

      public final fun <T#0 /* T */> isNotEqualAnyRight(s: kotlin/Any?, t: A<T#0>): kotlin/Boolean

      public final fun <T#0 /* T */> isNotEqualNullableUnboxedLeft(s: A<T#0>, t: A<T#0>?): kotlin/Boolean

      public final fun <T#0 /* T */> isNotEqualNullableUnboxedRight(s: A<T#0>?, t: A<T#0>): kotlin/Boolean

      public final fun <T#0 /* T */> isNotEqualSame(s: A<T#0>, t: A<T#0>): kotlin/Boolean

      public final fun <T#0 /* T */> isNotEqualSameNullable(s: A<T#0>?, t: A<T#0>?): kotlin/Boolean

      public final fun <T#0 /* T */> isNotNullLeft(s: A<T#0>?): kotlin/Boolean

      public final fun <T#0 /* T */> isNotNullRight(s: A<T#0>?): kotlin/Boolean

      public final fun <T#0 /* T */> isNotNullVacuousLeft(s: A<T#0>): kotlin/Boolean

      public final fun <T#0 /* T */> isNotNullVacuousRight(s: A<T#0>): kotlin/Boolean
    }
  }
}
