library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: C
    // class name: D
    // class name: V

    public abstract class C<T#0 /* T */> : kotlin/Any {

      public constructor()

      public final fun foo(v: T#0?, x: kotlin/Function1<T#0, kotlin/Any?>): kotlin/Any?
    }

    public final class D : C<V> {

      public constructor()
    }

    public final value class V : kotlin/Any {

      public constructor(value: kotlin/Any?)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val value: kotlin/Any?
        public final get

      // underlying property: value

      // underlying type: kotlin/Any?
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
