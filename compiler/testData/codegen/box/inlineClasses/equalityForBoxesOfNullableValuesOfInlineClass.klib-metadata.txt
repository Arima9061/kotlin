library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: NX
    // class name: NY
    // class name: X
    // class name: Y

    public final value class NX : kotlin/Any {

      public constructor(x: kotlin/String?)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: kotlin/String?
        public final get

      // underlying property: x

      // underlying type: kotlin/String?
    }

    public final value class NY : kotlin/Any {

      public constructor(y: kotlin/Number?)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val y: kotlin/Number?
        public final get

      // underlying property: y

      // underlying type: kotlin/Number?
    }

    public final value class X : kotlin/Any {

      public constructor(x: kotlin/String)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: kotlin/String
        public final get

      // underlying property: x

      // underlying type: kotlin/String
    }

    public final value class Y : kotlin/Any {

      public constructor(y: kotlin/Number)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val y: kotlin/Number
        public final get

      // underlying property: y

      // underlying type: kotlin/Number
    }

    package {

      public final fun box(): kotlin/String

      public final fun testNotNull(x: X?, y: Y?): kotlin/Unit

      public final fun testNullable(x: NX?, y: NY?): kotlin/Unit

      public final fun testNullsAsNullable(x: NX?, y: NY?): kotlin/Unit
    }
  }
}
