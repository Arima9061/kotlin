library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Result
    // class name: ResultReceiver

    public final value class Result<T#0 /* T */ : kotlin/Any> : kotlin/Any {

      public constructor(a: T#0?)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public final fun getOrThrow(): T#0?

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: T#0?
        public final get

      // underlying property: a

      // underlying type: T#0?
    }

    public abstract class ResultReceiver<T#0 /* T */ : kotlin/Any> : kotlin/Any {

      public constructor()

      public abstract fun receive(result: Result<T#0>): kotlin/Unit
    }

    package {

      public final inline fun <T#0 /* T */ : kotlin/Any> ResultReceiver(crossinline f: kotlin/Function1<Result<T#0>, kotlin/Unit>): ResultReceiver<T#0>

      public final fun box(): kotlin/String

      public final fun test(): kotlin/Unit
    }
  }
}
