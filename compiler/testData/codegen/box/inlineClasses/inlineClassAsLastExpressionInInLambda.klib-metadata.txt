library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Name
    // class name: UInt

    public final value class Name : kotlin/Any {

      public constructor(value: kotlin/String)

      public final fun asValue(): kotlin/String

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      private final val value: kotlin/String
        private final get

      // underlying property: value

      // underlying type: kotlin/String
    }

    public final value class UInt : kotlin/Any {

      public constructor(value: kotlin/Int)

      public final fun asValue(): kotlin/Int

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      private final val value: kotlin/Int
        private final get

      // underlying property: value

      // underlying type: kotlin/Int
    }

    package {

      public final fun box(): kotlin/String

      public final fun concat(a: Name, b: Name): kotlin/String

      public final inline fun <T#0 /* R */> inlinedRun(block: kotlin/Function0<T#0>): T#0

      public final fun <T#0 /* R */> notInlinedRun(block: kotlin/Function0<T#0>): T#0
    }
  }
}
