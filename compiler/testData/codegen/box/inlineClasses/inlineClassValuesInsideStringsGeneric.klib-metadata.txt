library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: AsAny
    // class name: Augmented
    // class name: AugmentedAndAsAny

    public final value class AsAny<T#0 /* T */ : kotlin/Any> : kotlin/Any {

      public constructor(a: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open fun toString(): kotlin/String

      public final val a: T#0
        public final get

      // underlying property: a

      // underlying type: T#0
    }

    public final value class Augmented<T#0 /* T */ : kotlin/Int> : kotlin/Any {

      public constructor(x: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open fun toString(): kotlin/String

      public final val x: T#0
        public final get

      // underlying property: x

      // underlying type: T#0
    }

    public final data class AugmentedAndAsAny : kotlin/Any {

      public constructor(a: Augmented<kotlin/Int>, b: AsAny<kotlin/Int>)

      public final /* synthesized */ operator fun component1(): Augmented<kotlin/Int>

      public final /* synthesized */ operator fun component2(): AsAny<kotlin/Int>

      public final /* synthesized */ fun copy(a: Augmented<kotlin/Int> /* = ... */, b: AsAny<kotlin/Int> /* = ... */): AugmentedAndAsAny

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: Augmented<kotlin/Int>
        public final get

      public final val b: AsAny<kotlin/Int>
        public final get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
