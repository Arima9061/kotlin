library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Result
    // class name: ResultHandler

    public final value class Result<T#0 /* T */> : kotlin/Any {

      public constructor(isSuccess: kotlin/Boolean)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val isSuccess: kotlin/Boolean
        public final get

      // underlying property: isSuccess

      // underlying type: kotlin/Boolean
    }

    public abstract fun interface ResultHandler<T#0 /* T */> : kotlin/Any {

      public abstract fun onResult(result: Result<T#0>): kotlin/Unit
    }

    package {

      public final fun box(): kotlin/String

      public final fun doSmth(resultHandler: ResultHandler<kotlin/Boolean>): kotlin/Unit
    }
  }
}
