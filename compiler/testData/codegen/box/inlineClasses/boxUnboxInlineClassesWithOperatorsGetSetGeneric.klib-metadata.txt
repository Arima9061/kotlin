library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: UInt
    // class name: UIntArray

    public final value class UInt<T#0 /* T */ : kotlin/Int> : kotlin/Any {

      public constructor(value: T#0)

      public final fun asInt(): T#0

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      private final val value: T#0
        private final get

      // underlying property: value

      // underlying type: T#0
    }

    public final value class UIntArray : kotlin/Any {

      public constructor(intArray: kotlin/IntArray)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public final operator fun get(index: kotlin/Int): UInt<kotlin/Int>

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public final operator fun set(index: kotlin/Int, value: UInt<kotlin/Int>): kotlin/Unit

      public open /* synthesized */ fun toString(): kotlin/String

      private final val intArray: kotlin/IntArray
        private final get

      // underlying property: intArray

      // underlying type: kotlin/IntArray
    }

    package {

      public final fun box(): kotlin/String

      public final fun UIntArray.swap(i: kotlin/Int, j: kotlin/Int): kotlin/Unit

      public final fun uIntArrayOf(vararg elements: kotlin/Int /* kotlin/IntArray */): UIntArray
    }
  }
}
