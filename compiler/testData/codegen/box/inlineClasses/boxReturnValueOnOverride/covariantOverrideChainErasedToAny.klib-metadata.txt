library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: IBar
    // class name: IFoo
    // class name: TestX
    // class name: X

    public abstract interface IBar : kotlin/Any {

      public abstract fun bar(): kotlin/Any
    }

    public abstract interface IFoo : IBar {

      public abstract fun bar(): X

      public abstract fun foo(): kotlin/Any
    }

    public final class TestX : IFoo {

      public constructor()

      public open fun bar(): X

      public open fun foo(): X
    }

    public final value class X : kotlin/Any {

      public constructor(x: kotlin/Any)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: kotlin/Any
        public final get

      // underlying property: x

      // underlying type: kotlin/Any
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
