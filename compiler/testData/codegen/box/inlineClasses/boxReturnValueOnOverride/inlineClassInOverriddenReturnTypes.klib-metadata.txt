library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: IFoo1
    // class name: IFoo2
    // class name: Test
    // class name: X

    public abstract interface IFoo1<T#0 /* T */> : kotlin/Any {

      public abstract fun foo(x: T#0): X
    }

    public abstract interface IFoo2 : kotlin/Any {

      public abstract fun foo(x: kotlin/String): X
    }

    public final class Test : IFoo1<kotlin/String>, IFoo2 {

      public constructor()

      public open fun foo(x: kotlin/String): X
    }

    public final value class X : kotlin/Any {

      public constructor(x: kotlin/String)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: kotlin/String
        public final get

      // underlying property: x

      // underlying type: kotlin/String
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
