library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: A
    // class name: B
    // class name: ResultOrClosed

    public abstract interface A<T#0 /* T */> : kotlin/Any {

      public abstract fun foo(): T#0
    }

    public final class B : A<ResultOrClosed> {

      public constructor()

      public open fun foo(): ResultOrClosed
    }

    public final value class ResultOrClosed : kotlin/Any {

      public constructor(x: kotlin/Any?)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: kotlin/Any?
        public final get

      // underlying property: x

      // underlying type: kotlin/Any?
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
