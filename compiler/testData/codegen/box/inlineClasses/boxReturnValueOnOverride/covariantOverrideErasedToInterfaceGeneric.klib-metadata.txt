library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: FooOK
    // class name: IBar
    // class name: ICFoo
    // class name: IFoo
    // class name: Test

    public final object FooOK : IFoo {

      private constructor()

      public open fun foo(): kotlin/String
    }

    public abstract interface IBar : kotlin/Any {

      public abstract fun bar(): IFoo
    }

    public final value class ICFoo<T#0 /* T */ : IFoo> : IFoo {

      public constructor(t: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open fun foo(): kotlin/String

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val t: T#0
        public final get

      // underlying property: t

      // underlying type: T#0
    }

    public abstract interface IFoo : kotlin/Any {

      public abstract fun foo(): kotlin/String
    }

    public final class Test : IBar {

      public constructor()

      public open fun bar(): ICFoo<IFoo>
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
