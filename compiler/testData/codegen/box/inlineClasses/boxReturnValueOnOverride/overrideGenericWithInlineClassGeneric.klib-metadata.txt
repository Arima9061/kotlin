library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: C
    // class name: I
    // class name: IC
    // class name: Marker

    public final class C : I<IC<kotlin/String>> {

      public constructor()

      public open fun foo(i: Marker): IC<kotlin/String>
    }

    public abstract interface I<T#0 /* T */> : kotlin/Any {

      public abstract fun foo(i: Marker): T#0
    }

    public final value class IC<T#0 /* T */ : kotlin/Any> : kotlin/Any {

      public constructor(a: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: T#0
        public final get

      // underlying property: a

      // underlying type: T#0
    }

    public final value class Marker : kotlin/Any {

      public constructor(i: kotlin/Int)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val i: kotlin/Int
        public final get

      // underlying property: i

      // underlying type: kotlin/Int
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
