library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: IBase
    // class name: IFoo1
    // class name: IFoo2
    // class name: IQ
    // class name: OK
    // class name: Test
    // class name: X

    public abstract interface IBase : kotlin/Any {
    }

    public abstract interface IFoo1<T#0 /* T */ : IBase> : kotlin/Any {

      public abstract fun foo(): T#0
    }

    public abstract interface IFoo2 : kotlin/Any {

      public abstract fun foo(): kotlin/Any
    }

    public abstract interface IQ : IBase {

      public abstract fun ok(): kotlin/String
    }

    public final object OK : IQ {

      private constructor()

      public open fun ok(): kotlin/String
    }

    public final class Test : IFoo1<IQ>, IFoo2 {

      public constructor()

      public open fun foo(): X<IQ>
    }

    public final value class X<T#0 /* T */ : IQ> : IQ {

      public constructor(t: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open fun ok(): kotlin/String

      public open /* synthesized */ fun toString(): kotlin/String

      public final val t: T#0
        public final get

      // underlying property: t

      // underlying type: T#0
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
