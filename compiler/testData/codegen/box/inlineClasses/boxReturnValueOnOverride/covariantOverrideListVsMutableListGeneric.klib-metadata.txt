library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: AL
    // class name: IFooList
    // class name: IFooMutableList
    // class name: Test

    public final value class AL<T#0 /* T */ : kotlin/collections/MutableList<kotlin/String>> : kotlin/collections/MutableList<kotlin/String> {

      public constructor(t: T#0)

      public open fun add(element: kotlin/String): kotlin/Boolean

      public open fun add(index: kotlin/Int, element: kotlin/String): kotlin/Unit

      public open fun addAll(elements: kotlin/collections/Collection<kotlin/String>): kotlin/Boolean

      public open fun addAll(index: kotlin/Int, elements: kotlin/collections/Collection<kotlin/String>): kotlin/Boolean

      public open fun clear(): kotlin/Unit

      public open operator fun contains(element: kotlin/String): kotlin/Boolean

      public open fun containsAll(elements: kotlin/collections/Collection<kotlin/String>): kotlin/Boolean

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open operator fun get(index: kotlin/Int): kotlin/String

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open fun indexOf(element: kotlin/String): kotlin/Int

      public open fun isEmpty(): kotlin/Boolean

      public open operator fun iterator(): kotlin/collections/MutableIterator<kotlin/String>

      public open fun lastIndexOf(element: kotlin/String): kotlin/Int

      public open fun listIterator(): kotlin/collections/MutableListIterator<kotlin/String>

      public open fun listIterator(index: kotlin/Int): kotlin/collections/MutableListIterator<kotlin/String>

      public open fun remove(element: kotlin/String): kotlin/Boolean

      public open fun removeAll(elements: kotlin/collections/Collection<kotlin/String>): kotlin/Boolean

      public open fun removeAt(index: kotlin/Int): kotlin/String

      public open fun retainAll(elements: kotlin/collections/Collection<kotlin/String>): kotlin/Boolean

      public open operator fun set(index: kotlin/Int, element: kotlin/String): kotlin/String

      public open fun subList(fromIndex: kotlin/Int, toIndex: kotlin/Int): kotlin/collections/MutableList<kotlin/String>

      public open /* synthesized */ fun toString(): kotlin/String

      public open val size: kotlin/Int
        public open /* non-default */ get

      public final val t: T#0
        public final get

      // underlying property: t

      // underlying type: T#0
    }

    public abstract interface IFooList : kotlin/Any {

      public abstract fun foo(): kotlin/collections/List<kotlin/String>
    }

    public abstract interface IFooMutableList : kotlin/Any {

      public abstract fun foo(): kotlin/collections/MutableList<kotlin/String>
    }

    public final class Test : IFooList, IFooMutableList {

      public constructor()

      public open fun foo(): AL<kotlin/collections/ArrayList<kotlin/String>>

      public final val arr: kotlin/collections/ArrayList<kotlin/String>
        public final get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
