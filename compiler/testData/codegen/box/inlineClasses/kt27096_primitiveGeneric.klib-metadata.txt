library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Z1
    // class name: Z2
    // class name: ZN
    // class name: ZN2

    public final value class Z1<T#0 /* T */ : kotlin/Int> : kotlin/Any {

      public constructor(x: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: T#0
        public final get

      // underlying property: x

      // underlying type: T#0
    }

    public final value class Z2<T#0 /* T */ : Z1<kotlin/Int>> : kotlin/Any {

      public constructor(z1: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val z1: T#0
        public final get

      // underlying property: z1

      // underlying type: T#0
    }

    public final value class ZN<T#0 /* TN */ : Z1<kotlin/Int>> : kotlin/Any {

      public constructor(z1: T#0?)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val z1: T#0?
        public final get

      // underlying property: z1

      // underlying type: T#0?
    }

    public final value class ZN2<T#0 /* T */ : ZN<Z1<kotlin/Int>>> : kotlin/Any {

      public constructor(zn: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val zn: T#0
        public final get

      // underlying property: zn

      // underlying type: T#0
    }

    package {

      public final fun box(): kotlin/String

      public final fun wrap1(n: kotlin/Int): Z1<kotlin/Int>?

      public final fun wrap2(n: kotlin/Int): Z2<Z1<kotlin/Int>>?

      public final fun wrapN(n: kotlin/Int): ZN<Z1<kotlin/Int>>?

      public final fun wrapN2(n: kotlin/Int): ZN2<ZN<Z1<kotlin/Int>>>?
    }
  }
}
