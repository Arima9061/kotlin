library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: BoxAny
    // class name: BoxFoo
    // class name: BoxT
    // class name: I32
    // class name: IFoo

    public final class BoxAny : kotlin/Any {

      public constructor(boxed: kotlin/Any?)

      public final val boxed: kotlin/Any?
        public final get
    }

    public final class BoxFoo : kotlin/Any {

      public constructor(boxed: IFoo?)

      public final val boxed: IFoo?
        public final get
    }

    public final class BoxT<T#0 /* T */ : kotlin/Any> : kotlin/Any {

      public constructor(boxed: T#0?)

      public final val boxed: T#0?
        public final get
    }

    public final value class I32<T#0 /* T */ : kotlin/Int> : IFoo {

      public constructor(value: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val value: T#0
        public final get

      // underlying property: value

      // underlying type: T#0
    }

    public abstract interface IFoo : kotlin/Any {
    }

    package {

      public final fun box(): kotlin/String

      public final fun boxToNullableAny(x: I32<kotlin/Int>?): BoxAny

      public final fun boxToNullableInterface(x: I32<kotlin/Int>?): BoxFoo

      public final fun boxToTypeParameter(x: I32<kotlin/Int>?): BoxT<I32<kotlin/Int>>
    }
  }
}
