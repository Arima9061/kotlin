library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Input
    // class name: Kx
    // class name: Ucn

    public abstract interface Input<T#0 /* T */> : kotlin/Any {

      public abstract fun foo(n: kotlin/Int /* = ... */): T#0
    }

    public final class Kx : Input<Ucn> {

      public constructor(x: kotlin/UInt)

      public open fun foo(n: kotlin/Int): Ucn

      public final val x: kotlin/UInt
        public final get
    }

    public final value class Ucn : kotlin/Any {

      public constructor(i: kotlin/UInt)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      private final val i: kotlin/UInt
        private final get

      // underlying property: i

      // underlying type: kotlin/UInt
    }

    package {

      public final fun box(): kotlin/String

      public final fun kotlin/Char.toUInt(): kotlin/UInt
    }
  }
}
