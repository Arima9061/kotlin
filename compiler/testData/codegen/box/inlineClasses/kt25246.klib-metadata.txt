library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Rgba
    // class name: RgbaArray

    public final value class Rgba : kotlin/Any {

      public constructor(value: kotlin/Int)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: kotlin/Int
        public final /* non-default */ inline get

      public final val b: kotlin/Int
        public final /* non-default */ inline get

      public final val g: kotlin/Int
        public final /* non-default */ inline get

      public final val r: kotlin/Int
        public final /* non-default */ inline get

      public final val value: kotlin/Int
        public final get

      // underlying property: value

      // underlying type: kotlin/Int
    }

    public final value class RgbaArray : kotlin/Any {

      public /* secondary */ constructor(size: kotlin/Int)

      public constructor(array: kotlin/IntArray)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public final operator fun get(index: kotlin/Int): Rgba

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public final operator fun set(index: kotlin/Int, color: Rgba): kotlin/Unit

      public open /* synthesized */ fun toString(): kotlin/String

      public final val array: kotlin/IntArray
        public final get

      // underlying property: array

      // underlying type: kotlin/IntArray
    }

    package {

      public final fun Rgba(r: kotlin/Int, g: kotlin/Int, b: kotlin/Int, a: kotlin/Int): Rgba

      public final fun box(): kotlin/String

      public final fun Rgba.withA(a: kotlin/Int): Rgba

      public final fun Rgba.withB(b: kotlin/Int): Rgba

      public final fun Rgba.withG(g: kotlin/Int): Rgba

      public final fun Rgba.withR(r: kotlin/Int): Rgba
    }
  }
}
