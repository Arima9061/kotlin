library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: InlineNotNullPrimitive
    // class name: InlineNotNullReference

    public final value class InlineNotNullPrimitive<T#0 /* T */ : kotlin/Int> : kotlin/Any {

      public constructor(x: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: T#0
        public final get

      // underlying property: x

      // underlying type: T#0
    }

    public final value class InlineNotNullReference<T#0 /* T */ : kotlin/String> : kotlin/Any {

      public constructor(y: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val y: T#0
        public final get

      // underlying property: y

      // underlying type: T#0
    }

    package {

      public final fun box(): kotlin/String

      public final fun test(a: InlineNotNullPrimitive<kotlin/Int>, b: InlineNotNullReference<kotlin/String>): kotlin/Unit

      public final fun <T#0 /* A */, T#1 /* T */ : kotlin/Int> testNotNullPrimitive(a: kotlin/Any, b: T#0, c: InlineNotNullPrimitive<T#1>, d: InlineNotNullPrimitive<T#1>?): kotlin/Unit

      public final fun <T#0 /* A */, T#1 /* T */ : kotlin/String> testNotNullReference(a: kotlin/Any, b: T#0, c: InlineNotNullReference<T#1>, d: InlineNotNullReference<T#1>?): kotlin/Unit
    }
  }
}
