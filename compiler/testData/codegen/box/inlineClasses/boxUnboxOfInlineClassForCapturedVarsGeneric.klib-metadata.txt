library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: UInt

    public final value class UInt<T#0 /* T */ : kotlin/Int> : kotlin/Any {

      public constructor(value: T#0)

      public final fun asValue(): kotlin/Int

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public final operator fun plus(other: UInt<kotlin/Int>): UInt<kotlin/Int>

      public open /* synthesized */ fun toString(): kotlin/String

      private final val value: T#0
        private final get

      // underlying property: value

      // underlying type: T#0
    }

    package {

      public final fun box(): kotlin/String

      public final inline fun <T#0 /* T */> T#0.myLet(f: kotlin/Function1<T#0, kotlin/Unit>): kotlin/Unit

      public final fun <T#0 /* T */> T#0.nonInlineLet(f: kotlin/Function1<T#0, kotlin/Unit>): kotlin/Unit

      public final fun takeNullableUInt(y: UInt<kotlin/Int>?): kotlin/Unit

      public final fun takeUInt(y: UInt<kotlin/Int>): kotlin/Unit

      public final fun testInlined(x: UInt<kotlin/Int>?, withAssert: kotlin/Boolean): kotlin/Unit

      public final fun testNotInlined(x: UInt<kotlin/Int>?): kotlin/Unit

      public final var global: UInt<kotlin/Int>
        public final get
        public final set

      public final val kotlin/Int.u: UInt<kotlin/Int>
        public final /* non-default */ get
    }
  }
}
