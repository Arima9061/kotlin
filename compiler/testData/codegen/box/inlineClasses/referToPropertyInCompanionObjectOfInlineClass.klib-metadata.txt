library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Foo
    // class name: Foo.Companion

    public final value class Foo : kotlin/Any {

      public constructor(c: kotlin/Char)

      public final fun asResult(): kotlin/String

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public final fun simple(): kotlin/Unit

      public open /* synthesized */ fun toString(): kotlin/String

      public final val c: kotlin/Char
        public final get

      // companion object: Companion

      // nested class: Companion

      // underlying property: c

      // underlying type: kotlin/Char
    }

    public final companion object Foo.Companion : kotlin/Any {

      private constructor()

      public final fun funInCompanion(): kotlin/String

      public final const val constVal: kotlin/Int /* = 1 */
        public final get

      public final val prop: kotlin/String /* = ... */
        public final get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
