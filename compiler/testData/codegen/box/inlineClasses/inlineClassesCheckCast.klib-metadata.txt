library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: AsAny
    // class name: AsInt
    // class name: Primitive
    // class name: Reference

    public final value class AsAny<T#0 /* T */> : kotlin/Any {

      public constructor(x: kotlin/Any?)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: kotlin/Any?
        public final get

      // underlying property: x

      // underlying type: kotlin/Any?
    }

    public final value class AsInt : kotlin/Any {

      public constructor(x: kotlin/Int)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: kotlin/Int
        public final get

      // underlying property: x

      // underlying type: kotlin/Int
    }

    public final object Primitive : kotlin/Any {

      private constructor()

      public final fun transform(a: AsInt): AsInt

      public final fun transformNullable(a: AsInt?): AsInt

      public final fun transformNullableToNullableTarget(a: AsInt?): AsInt?

      public final fun transformToNullable(a: AsInt): AsInt?

      public final fun transformToNullableTarget(a: AsInt): AsInt?
    }

    public final object Reference : kotlin/Any {

      private constructor()

      public final fun <T#0 /* T */, T#1 /* R */> transform(a: AsAny<T#0>): AsAny<T#1>

      public final fun <T#0 /* T */, T#1 /* R */> transformNullable(a: AsAny<T#0>?): AsAny<T#1>

      public final fun <T#0 /* T */, T#1 /* R */> transformNullableToNullableTarget(a: AsAny<T#0>?): AsAny<T#1>?

      public final fun <T#0 /* T */, T#1 /* R */> transformToNullable(a: AsAny<T#0>): AsAny<T#1>?

      public final fun <T#0 /* T */, T#1 /* R */> transformToNullableTarget(a: AsAny<T#0>): AsAny<T#1>?
    }

    package {

      public final fun box(): kotlin/String

      public final inline fun <reified T#0 /* T */> kotlin/Any?.checkcast(): T#0
    }
  }
}
