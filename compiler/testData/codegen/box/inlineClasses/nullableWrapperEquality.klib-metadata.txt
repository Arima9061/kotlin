library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Z1
    // class name: ZN
    // class name: ZN2

    public final value class Z1 : kotlin/Any {

      public constructor(x: kotlin/String)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: kotlin/String
        public final get

      // underlying property: x

      // underlying type: kotlin/String
    }

    public final value class ZN : kotlin/Any {

      public constructor(z: Z1?)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val z: Z1?
        public final get

      // underlying property: z

      // underlying type: Z1?
    }

    public final value class ZN2 : kotlin/Any {

      public constructor(z: ZN)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val z: ZN
        public final get

      // underlying property: z

      // underlying type: ZN
    }

    package {

      public final fun box(): kotlin/String

      public final fun eq(a: kotlin/Any?, b: kotlin/Any?): kotlin/Boolean

      public final fun zap(b: kotlin/Boolean): ZN2?
    }
  }
}
