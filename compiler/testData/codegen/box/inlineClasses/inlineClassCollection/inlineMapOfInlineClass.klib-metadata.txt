library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Z
    // class name: ZArrayMap
    // class name: ZArrayMap.MapEntry
    // class name: ZArrayMap.MapEntrySet
    // class name: ZArrayMap.MapEntrySet.MyIterator

    public final value class Z : kotlin/Any {

      public constructor(x: kotlin/Int)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: kotlin/Int
        public final get

      // underlying property: x

      // underlying type: kotlin/Int
    }

    public final value class ZArrayMap : kotlin/collections/Map<Z, Z> {

      public constructor(storage: kotlin/IntArray)

      public open fun containsKey(key: Z): kotlin/Boolean

      public open fun containsValue(value: Z): kotlin/Boolean

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open operator fun get(key: Z): Z?

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open fun isEmpty(): kotlin/Boolean

      public open /* synthesized */ fun toString(): kotlin/String

      public open val entries: kotlin/collections/Set<kotlin/collections/Map.Entry<Z, Z>>
        public open /* non-default */ get

      public open val keys: kotlin/collections/Set<Z>
        public open /* non-default */ get

      public open val size: kotlin/Int
        public open /* non-default */ get

      public final val storage: kotlin/IntArray
        public final get

      public open val values: kotlin/collections/Collection<Z>
        public open /* non-default */ get

      // nested class: MapEntry

      // nested class: MapEntrySet

      // underlying property: storage

      // underlying type: kotlin/IntArray
    }

    private final class ZArrayMap.MapEntry : kotlin/collections/Map.Entry<Z, Z> {

      public constructor(i: kotlin/Int, si: kotlin/Int)

      public final val i: kotlin/Int
        public final get

      public open val key: Z
        public open /* non-default */ get

      public final val si: kotlin/Int
        public final get

      public open val value: Z
        public open /* non-default */ get
    }

    private final class ZArrayMap.MapEntrySet : kotlin/collections/AbstractSet<kotlin/collections/Map.Entry<Z, Z>> {

      public constructor(storage: kotlin/IntArray)

      public open operator fun iterator(): kotlin/collections/Iterator<kotlin/collections/Map.Entry<Z, Z>>

      public open val size: kotlin/Int
        public open /* non-default */ get

      public final val storage: kotlin/IntArray
        public final get

      // nested class: MyIterator
    }

    private final inner class ZArrayMap.MapEntrySet.MyIterator : kotlin/collections/Iterator<kotlin/collections/Map.Entry<Z, Z>> {

      public constructor()

      public open operator fun hasNext(): kotlin/Boolean

      public open operator fun next(): kotlin/collections/Map.Entry<Z, Z>

      public final var index: kotlin/Int
        public final get
        public final set
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
