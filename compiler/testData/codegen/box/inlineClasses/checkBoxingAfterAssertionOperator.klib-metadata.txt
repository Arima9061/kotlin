library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: WithNullableReference
    // class name: WithPrimitive
    // class name: WithReference

    public final value class WithNullableReference : kotlin/Any {

      public constructor(a: kotlin/Any?)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: kotlin/Any?
        public final get

      // underlying property: a

      // underlying type: kotlin/Any?
    }

    public final value class WithPrimitive : kotlin/Any {

      public constructor(a: kotlin/Int)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: kotlin/Int
        public final get

      // underlying property: a

      // underlying type: kotlin/Int
    }

    public final value class WithReference : kotlin/Any {

      public constructor(a: kotlin/Any)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: kotlin/Any
        public final get

      // underlying property: a

      // underlying type: kotlin/Any
    }

    package {

      public final fun bar(a: WithReference?, b: WithReference): kotlin/Unit

      public final fun baz(a: WithNullableReference?, b: WithNullableReference): kotlin/Unit

      public final fun box(): kotlin/String

      public final fun foo(a: WithPrimitive?, b: WithPrimitive): kotlin/Unit

      public final fun takeWithNullableReference(a: WithNullableReference): kotlin/Unit

      public final fun takeWithPrimitive(a: WithPrimitive): kotlin/Unit

      public final fun takeWithReference(a: WithReference): kotlin/Unit
    }
  }
}
