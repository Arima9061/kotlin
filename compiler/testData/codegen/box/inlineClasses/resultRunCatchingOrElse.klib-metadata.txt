library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: A
    // class name: Result
    // class name: Result.Companion
    // class name: Result.Failure

    public final class A : kotlin/Any {

      public constructor()

      public final fun f(): kotlin/String
    }

    public final value class Result<out T#0 /* T */> : kotlin/Any {

      public constructor(value: kotlin/Any?)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public final fun exceptionOrNull(): kotlin/Throwable?

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val value: kotlin/Any?
        public final get

      // companion object: Companion

      // nested class: Companion

      // nested class: Failure

      // underlying property: value

      // underlying type: kotlin/Any?
    }

    public final companion object Result.Companion : kotlin/Any {

      private constructor()

      public final inline fun <T#1 /* T */> failure(exception: kotlin/Throwable): Result<T#1>

      public final inline fun <T#1 /* T */> success(value: T#1): Result<T#1>
    }

    public final class Result.Failure : kotlin/Any {

      public constructor(exception: kotlin/Throwable)

      public final val exception: kotlin/Throwable
        public final get
    }

    package {

      public final fun box(): kotlin/String

      public final inline fun <T#0 /* R */, T#1 /* T */ : T#0> Result<T#1>.getOrElse(onFailure: kotlin/Function1<@kotlin/ParameterName(name = "exception") kotlin/Throwable, T#0>): T#0

      public final inline fun <T#0 /* T */, T#1 /* R */> T#0.runCatching(block: @kotlin/ExtensionFunctionType kotlin/Function1<T#0, T#1>): Result<T#1>
    }
  }
}
