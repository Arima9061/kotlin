library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: AsAny
    // class name: AsAny2
    // class name: AsInt
    // class name: Primitive
    // class name: Reference
    // class name: Reference2

    public final value class AsAny<T#0 /* T */> : kotlin/Any {

      public constructor(a: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public final fun myEq(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: T#0
        public final get

      // underlying property: a

      // underlying type: T#0
    }

    public final value class AsAny2<T#0 /* T */ : kotlin/Any> : kotlin/Any {

      public constructor(a: T#0?)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public final fun myEq(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: T#0?
        public final get

      // underlying property: a

      // underlying type: T#0?
    }

    public final value class AsInt<T#0 /* T */ : kotlin/Int> : kotlin/Any {

      public constructor(a: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public final fun myEq(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: T#0
        public final get

      // underlying property: a

      // underlying type: T#0
    }

    public final object Primitive : kotlin/Any {

      private constructor()

      public final fun <T#0 /* T */ : kotlin/Int> isNotNullable(a: AsInt<T#0>): kotlin/Boolean

      public final fun <T#0 /* T */ : kotlin/Int> isNullable(a: AsInt<T#0>): kotlin/Boolean

      public final fun <T#0 /* T */ : kotlin/Int> isNullableNotNullable(a: AsInt<T#0>?): kotlin/Boolean

      public final fun <T#0 /* T */ : kotlin/Int> isNullableNullable(a: AsInt<T#0>?): kotlin/Boolean
    }

    public final object Reference : kotlin/Any {

      private constructor()

      public final fun <T#0 /* T */> isNotNullable(a: AsAny<T#0>): kotlin/Boolean

      public final fun <T#0 /* T */> isNullable(a: AsAny<T#0>): kotlin/Boolean

      public final fun <T#0 /* T */> isNullableNotNullable(a: AsAny<T#0>?): kotlin/Boolean

      public final fun <T#0 /* T */> isNullableNullable(a: AsAny<T#0>?): kotlin/Boolean
    }

    public final object Reference2 : kotlin/Any {

      private constructor()

      public final fun <T#0 /* T */ : kotlin/Any> isNotNullable(a: AsAny2<T#0>): kotlin/Boolean

      public final fun <T#0 /* T */ : kotlin/Any> isNullable(a: AsAny2<T#0>): kotlin/Boolean

      public final fun <T#0 /* T */ : kotlin/Any> isNullableNotNullable(a: AsAny2<T#0>?): kotlin/Boolean

      public final fun <T#0 /* T */ : kotlin/Any> isNullableNullable(a: AsAny2<T#0>?): kotlin/Boolean
    }

    package {

      public final fun box(): kotlin/String

      public final inline fun <reified T#0 /* T */> kotlin/Any?.isCheck(): kotlin/Boolean
    }
  }
}
