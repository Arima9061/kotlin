library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Foo

    public final value class Foo<T#0 /* T */ : kotlin/Int> : kotlin/Any {

      public constructor(i: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val i: T#0
        public final get

      // underlying property: i

      // underlying type: T#0
    }

    package {

      public final fun box(): kotlin/String

      public final operator fun <T#0 /* R */> kotlin/reflect/KMutableProperty0<T#0>.getValue(host: kotlin/Any?, property: kotlin/reflect/KProperty<*>): T#0

      public final fun <T#0 /* T */ : kotlin/Int> modify(ref: kotlin/reflect/KMutableProperty0<Foo<T#0>>): kotlin/Unit

      public final operator fun <T#0 /* R */> kotlin/reflect/KMutableProperty0<T#0>.setValue(host: kotlin/Any?, property: kotlin/reflect/KProperty<*>, value: T#0): kotlin/Unit

      public final var f: Foo<kotlin/Int>
        public final get
        public final set
    }
  }
}
