library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: WithNullableReference
    // class name: WithNullableReference2
    // class name: WithPrimitive
    // class name: WithReference

    public final value class WithNullableReference<T#0 /* T */> : kotlin/Any {

      public constructor(a: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: T#0
        public final get

      // underlying property: a

      // underlying type: T#0
    }

    public final value class WithNullableReference2<T#0 /* T */ : kotlin/Any> : kotlin/Any {

      public constructor(a: T#0?)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: T#0?
        public final get

      // underlying property: a

      // underlying type: T#0?
    }

    public final value class WithPrimitive<T#0 /* T */ : kotlin/Int> : kotlin/Any {

      public constructor(a: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: T#0
        public final get

      // underlying property: a

      // underlying type: T#0
    }

    public final value class WithReference<T#0 /* T */ : kotlin/Any> : kotlin/Any {

      public constructor(a: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val a: T#0
        public final get

      // underlying property: a

      // underlying type: T#0
    }

    package {

      public final fun <T#0 /* T */ : kotlin/Any, T#1 /* T2 */ : kotlin/Any> bar(a: WithReference<T#0>?, b: WithReference<T#1>): kotlin/Unit

      public final fun <T#0 /* T */, T#1 /* R */> baz(a: WithNullableReference<T#0>?, b: WithNullableReference<T#1>): kotlin/Unit

      public final fun <T#0 /* T */ : kotlin/Any, T#1 /* R */ : kotlin/Any> baz2(a: WithNullableReference2<T#0>?, b: WithNullableReference2<T#1>): kotlin/Unit

      public final fun box(): kotlin/String

      public final fun <T#0 /* T */ : kotlin/Int> foo(a: WithPrimitive<T#0>?, b: WithPrimitive<T#0>): kotlin/Unit

      public final fun <T#0 /* T */> takeWithNullableReference(a: WithNullableReference<T#0>): kotlin/Unit

      public final fun <T#0 /* T */ : kotlin/Any> takeWithNullableReference2(a: WithNullableReference2<T#0>): kotlin/Unit

      public final fun <T#0 /* T */ : kotlin/Int> takeWithPrimitive(a: WithPrimitive<T#0>): kotlin/Unit

      public final fun <T#0 /* T */ : kotlin/Any> takeWithReference(a: WithReference<T#0>): kotlin/Unit
    }
  }
}
