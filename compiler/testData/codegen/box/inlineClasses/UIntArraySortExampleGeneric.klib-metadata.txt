library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: UInt
    // class name: UInt.Companion
    // class name: UIntArray
    // class name: UIntIterator

    public final value class UInt<T#0 /* T */ : kotlin/Int> : kotlin/Comparable<UInt<T#0>> {

      public constructor(value: T#0)

      public final fun asInt(): kotlin/Int

      public open operator fun compareTo(other: UInt<T#0>): kotlin/Int

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      private final fun flip(): kotlin/Int

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public final fun toLong(): kotlin/Long

      public open fun toString(): kotlin/String

      private final val value: T#0
        private final get

      // companion object: Companion

      // nested class: Companion

      // underlying property: value

      // underlying type: T#0
    }

    public final companion object UInt.Companion : kotlin/Any {

      private constructor()

      private final const val INT_MASK: kotlin/Long /* = 4294967295L */
        private final get
    }

    public final value class UIntArray : kotlin/Any {

      public constructor(intArray: kotlin/IntArray)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public final operator fun get(index: kotlin/Int): UInt<kotlin/Int>

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public final operator fun iterator(): UIntIterator

      public final operator fun set(index: kotlin/Int, value: UInt<kotlin/Int>): kotlin/Unit

      public open /* synthesized */ fun toString(): kotlin/String

      private final val intArray: kotlin/IntArray
        private final get

      public final val size: kotlin/Int
        public final /* non-default */ get

      // underlying property: intArray

      // underlying type: kotlin/IntArray
    }

    public final value class UIntIterator : kotlin/collections/Iterator<UInt<kotlin/Int>> {

      public constructor(intIterator: kotlin/collections/IntIterator)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open operator fun hasNext(): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open operator fun next(): UInt<kotlin/Int>

      public open /* synthesized */ fun toString(): kotlin/String

      private final val intIterator: kotlin/collections/IntIterator
        private final get

      // underlying property: intIterator

      // underlying type: kotlin/collections/IntIterator
    }

    package {

      public final fun box(): kotlin/String

      public final fun check(array: UIntArray, resultAsInt: kotlin/String, resultAsInner: kotlin/String): kotlin/Unit

      private final fun UIntArray.partition(l: kotlin/Int, r: kotlin/Int): kotlin/Int

      public final fun UIntArray.quickSort(): kotlin/Unit

      private final fun UIntArray.quickSort(l: kotlin/Int, r: kotlin/Int): kotlin/Unit

      public final fun UIntArray.swap(i: kotlin/Int, j: kotlin/Int): kotlin/Unit

      public final fun uIntArrayOf(vararg u: kotlin/Int /* kotlin/IntArray */): UIntArray
    }
  }
}
