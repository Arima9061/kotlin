library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: A
    // class name: B
    // class name: C
    // class name: D
    // class name: E

    public final value class A<T#0 /* T */ : kotlin/String> : kotlin/Any {

      public constructor(s: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val s: T#0
        public final get

      // underlying property: s

      // underlying type: T#0
    }

    public abstract class B<T#0 /* T */, T#1 /* U */> : kotlin/Any {

      public constructor()

      public abstract fun f(x: T#0, y: T#1): kotlin/String
    }

    public open class C<T#0 /* T */> : B<T#0, A<kotlin/String>> {

      public constructor()

      public open fun f(x: T#0, y: A<kotlin/String>): kotlin/String
    }

    public open class D : C<A<kotlin/String>> {

      public constructor()

      public open fun f(x: A<kotlin/String>, y: A<kotlin/String>): kotlin/String
    }

    public final class E : D {

      public constructor()

      public open fun f(x: A<kotlin/String>, y: A<kotlin/String>): kotlin/String
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
