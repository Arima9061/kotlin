library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: FunIFace
    // class name: IC

    public abstract fun interface FunIFace<T#0 /* T1 */, T#1 /* T2 */, T#2 /* R */> : kotlin/Any {

      public abstract fun call(t1: T#0, t2: T#1): T#2
    }

    public final value class IC<T#0 /* T */ : kotlin/Any> : kotlin/Any {

      public constructor(value: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val value: T#0
        public final get

      // underlying property: value

      // underlying type: T#0
    }

    package {

      public final fun <T#0 /* T1 */, T#1 /* T2 */, T#2 /* R */> bar(t1: T#0, t2: T#1, f: FunIFace<T#0, T#1, T#2>): T#2

      public final fun box(): kotlin/String

      public final fun <T#0 /* T */ : kotlin/Any> foo(a: kotlin/Result<T#0>, ic: IC<T#0>): kotlin/Pair<T#0, kotlin/Any>

      public final fun kotlin/Pair<kotlin/Any, kotlin/Any>.join(): kotlin/String
    }
  }
}
