library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: IC

    public final value class IC<T#0 /* T */> : kotlin/Any {

      public constructor(value: T#0)

      public final fun dispatchValue(): T#0

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val value: T#0
        public final get

      // underlying property: value

      // underlying type: T#0
    }

    package {

      public final fun <T#0 /* T */, T#1 /* R */> bar(value: T#0, f: kotlin/Function1<T#0, T#1>): T#1

      public final fun box(): kotlin/String

      public final fun <T#0 /* T */> dispatch(a: IC<T#0>): T#0

      public final fun <T#0 /* T */> extension(a: IC<T#0>): T#0

      public final fun <T#0 /* T */> IC<T#0>.extensionValue(): T#0

      public final fun <T#0 /* T */> normal(a: IC<T#0>): T#0

      public final fun <T#0 /* T */> normalValue(ic: IC<T#0>): T#0

      public final fun <T#0 /* T */> underlying(a: IC<T#0>): T#0
    }
  }
}
