library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Foo
    // class name: FooHolder
    // class name: IC

    public abstract interface Foo : kotlin/Any {
    }

    public final class FooHolder : Foo {

      public constructor(value: kotlin/Any)

      public final val value: kotlin/Any
        public final get
    }

    public final value class IC : Foo {

      public constructor(value: Foo)

      public final fun <T#0 /* T */> dispatchValue(): T#0

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val value: Foo
        public final get

      // underlying property: value

      // underlying type: Foo
    }

    package {

      public final fun <T#0 /* T */, T#1 /* R */> bar(value: T#0, f: kotlin/Function1<T#0, T#1>): T#1

      public final fun box(): kotlin/String

      public final fun <T#0 /* T */> dispatch(a: IC): T#0

      public final fun <T#0 /* T */> extension(a: IC): T#0

      public final fun <T#0 /* T */> IC.extensionValue(): T#0

      public final fun <T#0 /* T */> normal(a: IC): T#0

      public final fun <T#0 /* T */> normalValue(ic: IC): T#0

      public final fun <T#0 /* T */> underlying(a: IC): T#0
    }
  }
}
