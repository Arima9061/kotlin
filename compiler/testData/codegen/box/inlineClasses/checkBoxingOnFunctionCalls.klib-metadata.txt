library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: InlineNotNullPrimitive
    // class name: InlineNotNullReference

    public final value class InlineNotNullPrimitive : kotlin/Any {

      public constructor(x: kotlin/Int)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: kotlin/Int
        public final get

      // underlying property: x

      // underlying type: kotlin/Int
    }

    public final value class InlineNotNullReference : kotlin/Any {

      public constructor(y: kotlin/String)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val y: kotlin/String
        public final get

      // underlying property: y

      // underlying type: kotlin/String
    }

    package {

      public final fun box(): kotlin/String

      public final fun test(a: InlineNotNullPrimitive, b: InlineNotNullReference): kotlin/Unit

      public final fun <T#0 /* T */> testNotNullPrimitive(a: kotlin/Any, b: T#0, c: InlineNotNullPrimitive, d: InlineNotNullPrimitive?): kotlin/Unit

      public final fun <T#0 /* T */> testNotNullReference(a: kotlin/Any, b: T#0, c: InlineNotNullReference, d: InlineNotNullReference?): kotlin/Unit
    }
  }
}
