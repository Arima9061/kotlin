library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Delegate
    // class name: Foo

    public final value class Delegate<T#0 /* T */ : kotlin/Int> : kotlin/properties/ReadOnlyProperty<Foo, kotlin/Int> {

      public constructor(ignored: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open operator fun getValue(thisRef: Foo, property: kotlin/reflect/KProperty<*>): kotlin/Int

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val ignored: T#0
        public final get

      // underlying property: ignored

      // underlying type: T#0
    }

    public final class Foo : kotlin/Any {

      public constructor()

      public final val a: kotlin/Int /* = ... */
        public final get

      public final /* delegated */ val b: kotlin/Int
        public final /* non-default */ get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
