library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Delegate

    public final value class Delegate : kotlin/Any {

      public constructor(ignored: kotlin/Int)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public final operator fun getValue(thisRef: kotlin/Any?, prop: kotlin/Any?): kotlin/Int

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public final operator fun setValue(thisRef: kotlin/Any?, prop: kotlin/Any?, newValue: kotlin/Int): kotlin/Unit

      public open /* synthesized */ fun toString(): kotlin/String

      public final val ignored: kotlin/Int
        public final get

      // underlying property: ignored

      // underlying type: kotlin/Int
    }

    package {

      public final fun box(): kotlin/String

      public final var backing: kotlin/Int
        public final get
        public final set

      public final var setterInvoked: kotlin/Int
        public final get
        public final set

      public final /* delegated */ var topLevelD: kotlin/Int
        public final /* non-default */ get
        public final /* non-default */ set(<set-?>: kotlin/Int)
    }
  }
}
