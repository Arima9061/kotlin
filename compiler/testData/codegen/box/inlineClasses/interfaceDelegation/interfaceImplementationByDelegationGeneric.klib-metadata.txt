library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: IFoo
    // class name: InlineFooImpl
    // class name: Test

    public abstract interface IFoo : kotlin/Any {

      public abstract fun getO(): kotlin/String

      public abstract val k: kotlin/String
        public abstract get

      public open val ok: kotlin/String
        public open /* non-default */ get
    }

    public final value class InlineFooImpl<T#0 /* T */ : kotlin/String> : IFoo {

      public constructor(s: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open fun getO(): kotlin/String

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public open val k: kotlin/String
        public open /* non-default */ get

      public final val s: T#0
        public final get

      // underlying property: s

      // underlying type: T#0
    }

    public final class Test : IFoo {

      public constructor(s: kotlin/String)

      public open /* delegation */ fun getO(): kotlin/String

      public open /* delegation */ val k: kotlin/String
        public open get

      public open /* delegation */ val ok: kotlin/String
        public open /* non-default */ get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
