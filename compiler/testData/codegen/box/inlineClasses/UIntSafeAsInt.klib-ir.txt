MODULE_FRAGMENT name:<main>
  FILE fqName:<root> fileName:/UIntSafeAsInt.kt
    FUN name:testUIntSafeAsInt signature:/testUIntSafeAsInt|testUIntSafeAsInt(kotlin.UInt){}[0] visibility:public modality:FINAL <> (x:<unbound IrClassSymbolImpl>) returnType:<unbound IrClassSymbolImpl>?
      VALUE_PARAMETER name:x index:0 type:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun testUIntSafeAsInt (x: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl>? declared in <root>'
          TYPE_OP type=<unbound IrClassSymbolImpl>? origin=SAFE_CAST typeOperand=<unbound IrClassSymbolImpl>
            GET_VAR 'x: <unbound IrClassSymbolImpl> declared in <root>.testUIntSafeAsInt' type=<unbound IrClassSymbolImpl> origin=null
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          WHEN type=<unbound IrClassSymbolImpl> origin=IF
            BRANCH
              if: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                  arg0: CALL 'public final fun testUIntSafeAsInt (x: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl>? declared in <root>' type=<unbound IrClassSymbolImpl>? origin=null
                    x: CONST Int type=<unbound IrClassSymbolImpl> value=1
                  arg1: CONST Null type=<unbound IrClassSymbolImpl>? value=null
              then: CONST String type=<unbound IrClassSymbolImpl> value="fail"
            BRANCH
              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
              then: CONST String type=<unbound IrClassSymbolImpl> value="OK"
