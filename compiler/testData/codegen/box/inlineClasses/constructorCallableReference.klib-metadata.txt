library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: I
    // class name: I.Companion
    // class name: IC

    public abstract interface I : kotlin/Any {

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object I.Companion : kotlin/Any {

      private constructor()

      public final /* delegated */ val default: IC
        public final /* non-default */ get
    }

    public final value class IC : I {

      public constructor(ok: kotlin/String /* = ... */)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val ok: kotlin/String
        public final get

      // underlying property: ok

      // underlying type: kotlin/String
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
