library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Base
    // class name: Inlined

    public abstract interface Base : kotlin/Any {

      public abstract fun result(): kotlin/Int
    }

    public final value class Inlined<T#0 /* T */ : kotlin/Int> : Base {

      public constructor(x: T#0)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open fun result(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val x: T#0
        public final get

      // underlying property: x

      // underlying type: T#0
    }

    package {

      public final fun box(): kotlin/String

      public final fun foo(b: kotlin/Boolean): Base
    }
  }
}
