library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: BaseClass
    // class name: BaseInterface
    // class name: ConcreteType
    // class name: ConcreteType2
    // class name: Consumer
    // class name: GenericHolder

    public abstract class BaseClass : kotlin/Any {

      public constructor()
    }

    public abstract interface BaseInterface : kotlin/Any {
    }

    public final class ConcreteType : BaseClass, BaseInterface {

      public constructor()
    }

    public final class ConcreteType2 : BaseClass, BaseInterface {

      public constructor()
    }

    public abstract fun interface Consumer<T#0 /* T */> : kotlin/Any {

      public abstract fun accept(t: T#0): kotlin/Unit
    }

    public final class GenericHolder<T#0 /* T */> : kotlin/Any {

      public constructor()

      public final fun doOnSuccess(onSuccess: Consumer<in T#0>): kotlin/Unit
    }

    package {

      public final fun box(): kotlin/String

      public final fun example(input: kotlin/Int): kotlin/Unit

      public final fun functionReference(x: kotlin/Any): kotlin/Unit
    }
  }
}
