library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Test
    // class name: Test.Style

    public final class Test : kotlin/Any {

      public constructor()

      // nested class: Style
    }

    public final data class Test.Style : kotlin/Any {

      public constructor(color: kotlin/Int? /* = ... */, underlined: kotlin/Boolean? /* = ... */, separator: kotlin/String /* = ... */)

      public final /* synthesized */ operator fun component1(): kotlin/Int?

      public final /* synthesized */ operator fun component2(): kotlin/Boolean?

      public final /* synthesized */ operator fun component3(): kotlin/String

      public final /* synthesized */ fun copy(color: kotlin/Int? /* = ... */, underlined: kotlin/Boolean? /* = ... */, separator: kotlin/String /* = ... */): Test.Style

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val color: kotlin/Int?
        public final get

      public final val separator: kotlin/String
        public final get

      public final val underlined: kotlin/Boolean?
        public final get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
