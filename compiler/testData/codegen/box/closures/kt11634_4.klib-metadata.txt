library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: A
    // class name: Base
    // class name: Derived1
    // class name: Derived1.Derived2

    public abstract interface A : kotlin/Any {

      public abstract fun foo(): kotlin/String
    }

    public open class Base : kotlin/Any {

      public constructor(p: kotlin/String)

      public open val a: A
        public open get

      public final val p: kotlin/String
        public final get
    }

    public open class Derived1 : Base {

      public constructor(p: kotlin/String)

      public open val a: A
        public open get

      // nested class: Derived2
    }

    public final inner class Derived1.Derived2 : Base {

      public constructor(p: kotlin/String)

      public final val x: A
        public final get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
