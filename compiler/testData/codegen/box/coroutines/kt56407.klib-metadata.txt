library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Client
    // class name: DefaultAuthorizableClient
    // class name: ServerBase

    public abstract interface Client<T#0 /* ServerType */ : ServerBase> : kotlin/Any {

      public abstract suspend fun connectToServer(): kotlin/Unit
    }

    public abstract class DefaultAuthorizableClient<T#0 /* ServerType */ : ServerBase> : Client<T#0> {

      public constructor()

      public open suspend fun connectToServer(): kotlin/Unit
    }

    public abstract interface ServerBase : kotlin/Any {
    }

    package {

      public final fun box(): kotlin/String

      public final fun builder(c: suspend kotlin/Function2<kotlin/String, kotlin/coroutines/Continuation<kotlin/Unit>, kotlin/Any?>): kotlin/Unit

      public final inline suspend fun <T#0 /* E */> T#0.consumeEach(action: kotlin/Function1<T#0, kotlin/Unit>): kotlin/Unit
    }
  }
}
