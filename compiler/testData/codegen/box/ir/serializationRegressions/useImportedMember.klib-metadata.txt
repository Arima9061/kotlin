// MODULE: lib
library {
  // module name: <lib>

  library fragment {
    // package name: test

    // class name: test/BaseClass
    // class name: test/C
    // class name: test/I

    public open class test/BaseClass : kotlin/Any {

      public constructor()

      public final val <T#0 /* T */> T#0.fromClass: T#0
        public final /* non-default */ get
    }

    public final object test/C : test/BaseClass, test/I<kotlin/String> {

      private constructor()

      public final fun f(s: kotlin/Int): kotlin/Int

      public final fun f(s: kotlin/String): kotlin/Int

      public final fun kotlin/Boolean.f(): kotlin/Int

      public final fun <T#0 /* T */> g1(t: T#0): T#0

      public final val kotlin/Int.ext: kotlin/Int
        public final /* non-default */ get

      public final val <T#0 /* T */> T#0.g2: T#0
        public final /* non-default */ get

      public final var p: kotlin/Int
        public final get
        public final set
    }

    public abstract interface test/I<T#0 /* G */> : kotlin/Any {

      public open fun <T#1 /* T */> T#1.fromInterface(): T#1

      public open fun genericFromSuper(g: T#0): T#0
    }
  }
}

// MODULE: main
library {
  // module name: <main>

  library fragment {
    // package name: <root>

    package {

      public final fun box(): kotlin/String
    }
  }
}
