library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: B
    // class name: BB
    // class name: BX
    // class name: CC
    // class name: CCC
    // class name: CCCC
    // class name: CI
    // class name: CIB
    // class name: DB
    // class name: I
    // class name: II
    // class name: O

    public open class B<T#0 /* T */> : kotlin/Any {

      public constructor()
    }

    public open class BB<T#0 /* T */> : kotlin/Any {

      public constructor()
    }

    public open class BX<T#0 /* T1 */, T#1 /* T2 */> : kotlin/Any {

      public constructor()
    }

    public final class CC : I<CC> {

      public constructor()
    }

    public final class CCC : I<CCC>, II<CCC>, B<CCC> {

      public constructor()
    }

    public final class CCCC : I<CCCC>, II<CCCC> {

      public constructor()
    }

    public final class CI : I<CI> {

      public constructor()
    }

    public final class CIB : BX<CIB, CI>, I<CIB> {

      public constructor()
    }

    public final class DB : BX<DB, CI> {

      public constructor()
    }

    public abstract interface I<T#0 /* T */> : kotlin/Any {
    }

    public abstract interface II<T#0 /* T */> : kotlin/Any {

      public open fun bar(): kotlin/String
    }

    public final object O : II<I<kotlin/Any>> {

      private constructor()
    }

    package {

      public final fun box(): kotlin/String

      public final fun foo(a: kotlin/Any): kotlin/String

      public final inline fun <T#0 /* T */ : I<T#0>> test0(a: kotlin/Any): kotlin/String

      public final inline fun <T#0 /* T */ : I<T#0> & II<T#0> & B<T#0>> test1(a: kotlin/Any): kotlin/String

      public final inline fun <T#0 /* T */ : I<T#0> & II<T#0>> test2(a: kotlin/Any): kotlin/String

      public final inline fun <T#0 /* TI */ : I<T#0>, T#1 /* TC */ : BX<T#1, T#0>> test3(a: kotlin/Any): kotlin/String

      public final inline fun <T#0 /* T */ : I<T#0>> testKt(): II<T#0>
    }
  }
}
