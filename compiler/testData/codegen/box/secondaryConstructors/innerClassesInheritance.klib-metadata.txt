library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Outer
    // class name: Outer.A1
    // class name: Outer.A2

    public final class Outer : kotlin/Any {

      public /* secondary */ constructor(x: kotlin/String)

      public final val outerProp: kotlin/String
        public final get

      public final var sideEffects: kotlin/String
        public final get
        public final set

      // nested class: A1

      // nested class: A2
    }

    public abstract inner class Outer.A1 : kotlin/Any {

      protected /* secondary */ constructor(x: kotlin/Int)

      protected /* secondary */ constructor(x: kotlin/String)

      public final var parentProp: kotlin/String
        public final get
        public final set
    }

    public final inner class Outer.A2 : Outer.A1 {

      public /* secondary */ constructor(x: kotlin/Int)

      public /* secondary */ constructor(x: kotlin/String)

      public final var prop: kotlin/String
        public final get
        public final set
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
