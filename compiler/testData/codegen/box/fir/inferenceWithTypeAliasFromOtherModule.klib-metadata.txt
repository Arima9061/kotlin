// MODULE: m1
library {
  // module name: <m1>

  library fragment {
    // package name: failure

    // class name: failure/Failure
    // class name: failure/Result

    public final class failure/Failure<out T#0 /* E */> : kotlin/Any {

      public constructor(error: T#0)

      public final val error: T#0
        public final get
    }

    public final class failure/Result<out T#0 /* R */> : kotlin/Any {

      public constructor(value: kotlin/Any?)

      public final val value: kotlin/Any?
        public final get
    }

    package {

      public final fun <T#0 /* U */> failure(): failure/Result<T#0> /* = failure/FailureOr^<T#0> */

      public final fun <T#0 /* T */> success(value: T#0): failure/Result<T#0>

      public typealias FailureOr<T#0 /* F */> = failure/Result<T#0> /* = failure/Result<T#0> */
    }
  }
}

// MODULE: m2
library {
  // module name: <m2>

  library fragment {
    // package name: <root>

    // class name: Single

    public final class Single<T#0 /* S */ : kotlin/Any> : kotlin/Any {

      public constructor(initialValue: T#0? /* = ... */)

      public final val initialValue: T#0?
        public final get
    }

    package {

      public final fun box(): kotlin/String

      public final fun getLicense(key: kotlin/String?): Single<failure/Result<kotlin/String> /* = failure/FailureOr^<kotlin/String> */>

      public final fun <T#0 /* I */, T#1 /* O */> T#0.let(f: kotlin/Function1<T#0, T#1>): T#1
    }
  }
}
