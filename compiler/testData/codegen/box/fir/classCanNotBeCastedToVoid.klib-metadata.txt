library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: ASTNode
    // class name: Wrap

    public final class ASTNode : kotlin/Any {

      public constructor()
    }

    public final class Wrap : kotlin/Any {

      public constructor(message: kotlin/String)

      public final val message: kotlin/String
        public final get
    }

    package {

      public final fun box(): kotlin/String

      public final fun getWrapAfterAnnotation(childElement: ASTNode): Wrap?

      public final fun getWrappingStrategy(): kotlin/Function1<@kotlin/ParameterName(name = "childElement") ASTNode, Wrap?> /* = WrappingStrategy^ */

      public typealias WrappingStrategy = kotlin/Function1<@kotlin/ParameterName(name = "childElement") ASTNode, Wrap?> /* = kotlin/Function1<@kotlin/ParameterName(name = "childElement") ASTNode, Wrap?> */
    }
  }
}
