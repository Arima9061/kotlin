// MODULE: lib1
library {
  // module name: <lib1>

  library fragment {
    // package name: <root>

    // class name: Annotation1

    @kotlin/reflect/AssociatedObjectKey
    public final annotation class Annotation1 : kotlin/Annotation {

      public constructor(kClass: kotlin/reflect/KClass<out kotlin/Any>)

      public final val kClass: kotlin/reflect/KClass<out kotlin/Any>
        public final get
    }
  }
}

// MODULE: lib2
library {
  // module name: <lib2>

  library fragment {
    // package name: <root>

    // class name: Annotation2

    @kotlin/reflect/AssociatedObjectKey
    public final annotation class Annotation2 : kotlin/Annotation {

      public constructor(kClass: kotlin/reflect/KClass<out kotlin/Any>)

      public final val kClass: kotlin/reflect/KClass<out kotlin/Any>
        public final get
    }
  }
}

// MODULE: main
library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Outer
    // class name: Outer.Inner1
    // class name: Outer.Inner1.Companion
    // class name: Outer.Inner2
    // class name: Outer.Inner2.Companion

    @Annotation1(kClass = Outer.Inner1.Companion::class)
    public final class Outer : kotlin/Any {

      public constructor()

      // nested class: Inner1

      // nested class: Inner2
    }

    public final class Outer.Inner1 : kotlin/Any {

      public constructor()

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object Outer.Inner1.Companion : kotlin/Any {

      private constructor()
    }

    @Annotation2(kClass = Outer.Inner2.Companion::class)
    public final class Outer.Inner2 : kotlin/Any {

      public constructor()

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object Outer.Inner2.Companion : kotlin/Any {

      private constructor()
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
