library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Base
    // class name: Base2
    // class name: C
    // class name: D
    // class name: Derived
    // class name: Derived2
    // class name: I1
    // class name: I2

    public open class Base<T#0 /* T */ : I1> : kotlin/Any {

      public constructor()

      public open fun foo(x: T#0): I1
    }

    public open class Base2<in T#0 /* T */ : I1> : kotlin/Any {

      public constructor()

      public open fun foo(x: T#0): I1
    }

    public final class C : I1 {

      public constructor()
    }

    public final class D : I1, I2 {

      public constructor()

      public open val z: kotlin/Int /* = ... */
        public open get
    }

    public open class Derived<T#0 /* T */ : I1 & I2> : Base<T#0> {

      public constructor()

      public open fun foo(x: T#0): I1
    }

    public open class Derived2<in T#0 /* T */ : I1 & I2> : Base2<T#0> {

      public constructor()

      public open fun foo(x: T#0): I1
    }

    public abstract interface I1 : kotlin/Any {
    }

    public abstract interface I2 : kotlin/Any {

      public abstract val z: kotlin/Int
        public abstract get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
