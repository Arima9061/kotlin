library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Delegate
    // class name: Provider
    // class name: Test
    // class name: Test.Companion

    public final class Delegate : kotlin/properties/ReadOnlyProperty<Test, kotlin/String> {

      public constructor()

      public open operator fun getValue(thisRef: Test, property: kotlin/reflect/KProperty<*>): kotlin/String
    }

    public final class Provider : kotlin/Any {

      public constructor()

      public final operator fun provideDelegate(thisRef: Test, property: kotlin/reflect/KProperty<*>): Delegate
    }

    public final class Test : kotlin/Any {

      public constructor()

      public final /* delegated */ val message: kotlin/String
        public final /* non-default */ get

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object Test.Companion : kotlin/Any {

      private constructor()

      public final val instance: Test
        public final get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
