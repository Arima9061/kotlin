library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Delegate
    // class name: TestClass
    // class name: TestClass.Companion

    public final class Delegate : kotlin/Any {

      public constructor()

      public final operator fun getValue(thisRef: kotlin/Any?, property: kotlin/reflect/KProperty<*>): kotlin/String

      public final operator fun provideDelegate(thisRef: kotlin/Any?, property: kotlin/reflect/KProperty<*>): Delegate
    }

    public final class TestClass : kotlin/Any {

      public constructor()

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object TestClass.Companion : kotlin/Any {

      private constructor()

      public final /* delegated */ val test: kotlin/String
        public final /* non-default */ get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
