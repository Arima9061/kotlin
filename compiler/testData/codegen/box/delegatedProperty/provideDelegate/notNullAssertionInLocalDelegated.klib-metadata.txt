library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: GenericDelegate
    // class name: Ref

    public final class GenericDelegate<T#0 /* G */> : kotlin/Any {

      public constructor(value: T#0)

      public final val value: T#0
        public final get
    }

    public final data class Ref<T#0 /* D */> : kotlin/Any {

      public constructor(t: T#0)

      public final /* synthesized */ operator fun component1(): T#0

      public final /* synthesized */ fun copy(t: T#0 /* = ... */): Ref<T#0>

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val t: T#0
        public final get
    }

    package {

      public final fun box(): kotlin/String

      public final fun <T#0 /* E */> kotlin/collections/List<Ref<*>>.getElement(i: kotlin/Int): Ref<T#0>

      public final operator fun <T#0 /* W */> GenericDelegate<T#0>.getValue(a: kotlin/Any?, p: kotlin/reflect/KProperty<*>): T#0

      public final operator fun <T#0 /* V */> Ref<T#0>.provideDelegate(a: kotlin/Any?, p: kotlin/reflect/KProperty<*>): GenericDelegate<T#0>

      public final fun test(list: kotlin/collections/List<Ref<*>>): kotlin/Unit
    }
  }
}
