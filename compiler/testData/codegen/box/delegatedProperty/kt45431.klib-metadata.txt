library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: DP
    // class name: H
    // class name: H.Companion

    public final class DP : kotlin/Any {

      public constructor()

      public final operator fun provideDelegate(t: kotlin/Any?, kp: kotlin/reflect/KProperty<*>): kotlin/Lazy<kotlin/String>
    }

    public final class H : kotlin/Any {

      public constructor()

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object H.Companion : kotlin/Any {

      private constructor()

      public final /* delegated */ val property: kotlin/String
        public final /* non-default */ get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
