library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: O
    // class name: O.Companion
    // class name: Z

    public abstract interface O : kotlin/Any {

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object O.Companion : kotlin/Any {

      private constructor()

      public final /* delegated */ val instance: Z
        public final /* non-default */ get

      public final /* delegated */ var y: kotlin/String
        public final /* non-default */ get
        public final /* non-default */ set(<set-?>: kotlin/String)
    }

    public final class Z : kotlin/Any {

      public constructor(x: kotlin/String /* = ... */)

      public final var x: kotlin/String
        public final get
        public final set
    }

    package {

      public final fun box(): kotlin/String

      public final operator fun Z.getValue(x: kotlin/Any?, y: kotlin/Any?): Z

      public final operator fun Z.setValue(x: kotlin/Any?, y: kotlin/Any?, value: Z): kotlin/Unit
    }
  }
}
