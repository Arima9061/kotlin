MODULE_FRAGMENT name:<main>
  FILE fqName:<root> fileName:/withReturnValueNested.kt
    FUN name:foo signature:/foo|foo(kotlin.Function0<kotlin.Int>){}[0] visibility:public modality:FINAL <> (block:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>) returnType:<unbound IrClassSymbolImpl> [inline]
      VALUE_PARAMETER name:block index:0 type:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun foo (block: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>): <unbound IrClassSymbolImpl> [inline] declared in <root>'
          CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=INVOKE
            $this: GET_VAR 'block: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> declared in <root>.foo' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=VARIABLE_AS_FUNCTION
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:resultNonLabeled type:<unbound IrClassSymbolImpl> [val]
          CALL 'private final fun testNonLabeledBreaks (): <unbound IrClassSymbolImpl> declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
        WHEN type=<unbound IrClassSymbolImpl> origin=IF
          BRANCH
            if: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
              $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                arg0: GET_VAR 'val resultNonLabeled: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                arg1: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                  $this: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                    $this: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                      $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                      1: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                        $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                        1: CONST Int type=<unbound IrClassSymbolImpl> value=2
                    1: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                      $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                      1: CONST Int type=<unbound IrClassSymbolImpl> value=2
                  1: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                    $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                    1: CONST Int type=<unbound IrClassSymbolImpl> value=2
            then: RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
              STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                CONST String type=<unbound IrClassSymbolImpl> value="FAIL testNonLabeledBreaks: "
                GET_VAR 'val resultNonLabeled: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
        VAR name:resultLabeled type:<unbound IrClassSymbolImpl> [val]
          CALL 'private final fun testLabeledBreaks (): <unbound IrClassSymbolImpl> declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
        WHEN type=<unbound IrClassSymbolImpl> origin=IF
          BRANCH
            if: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
              $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                arg0: GET_VAR 'val resultLabeled: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                arg1: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                  $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                  1: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                    $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                    1: CONST Int type=<unbound IrClassSymbolImpl> value=2
            then: RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
              STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                CONST String type=<unbound IrClassSymbolImpl> value="FAIL testLabeledBreaks: "
                GET_VAR 'val resultLabeled: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
        VAR name:resultForEach type:<unbound IrClassSymbolImpl> [val]
          CALL 'private final fun testForEach (): <unbound IrClassSymbolImpl> declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
        WHEN type=<unbound IrClassSymbolImpl> origin=IF
          BRANCH
            if: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
              $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                arg0: GET_VAR 'val resultForEach: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                arg1: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                  $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                  1: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                    $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                    1: CONST Int type=<unbound IrClassSymbolImpl> value=2
            then: RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
              STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                CONST String type=<unbound IrClassSymbolImpl> value="FAIL testForEach: "
                GET_VAR 'val resultForEach: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          CONST String type=<unbound IrClassSymbolImpl> value="OK"
    FUN name:testNonLabeledBreaks signature:[ File '/withReturnValueNested.kt' <- /testNonLabeledBreaks|testNonLabeledBreaks(){}[0] ] visibility:private modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:sum type:<unbound IrClassSymbolImpl> [var]
          CONST Int type=<unbound IrClassSymbolImpl> value=0
        BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP
          VAR FOR_LOOP_ITERATOR name:<iterator> type:<unbound IrClassSymbolImpl> [val]
            CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_ITERATOR
              $this: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=RANGE
                $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                1: CONST Int type=<unbound IrClassSymbolImpl> value=10
          WHILE label=null origin=FOR_LOOP_INNER_WHILE
            condition: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testNonLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=null
            body: BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_INNER_WHILE
              VAR FOR_LOOP_VARIABLE name:i type:<unbound IrClassSymbolImpl> [val]
                CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_NEXT
                  $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testNonLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=null
              BLOCK type=<unbound IrClassSymbolImpl> origin=null
                SET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testNonLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                  CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                    $this: GET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testNonLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                    1: CALL 'public final fun foo (block: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>): <unbound IrClassSymbolImpl> [inline] declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
                      block: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=LAMBDA
                        FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
                          BLOCK_BODY
                            RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.testNonLabeledBreaks'
                              WHEN type=<unbound IrClassSymbolImpl> origin=IF
                                BRANCH
                                  if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                                    arg0: GET_VAR 'val i: <unbound IrClassSymbolImpl> [val] declared in <root>.testNonLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=null
                                    arg1: CONST Int type=<unbound IrClassSymbolImpl> value=5
                                  then: BREAK label=null loop.label=null
                                BRANCH
                                  if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                                  then: BLOCK type=<unbound IrClassSymbolImpl> origin=null
                                    VAR name:innerSum type:<unbound IrClassSymbolImpl> [var]
                                      CONST Int type=<unbound IrClassSymbolImpl> value=0
                                    BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP
                                      VAR FOR_LOOP_ITERATOR name:<iterator> type:<unbound IrClassSymbolImpl> [val]
                                        CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_ITERATOR
                                          $this: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=RANGE
                                            $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                                            1: GET_VAR 'val i: <unbound IrClassSymbolImpl> [val] declared in <root>.testNonLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=null
                                      WHILE label=null origin=FOR_LOOP_INNER_WHILE
                                        condition: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_HAS_NEXT
                                          $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testNonLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
                                        body: BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_INNER_WHILE
                                          VAR FOR_LOOP_VARIABLE name:j type:<unbound IrClassSymbolImpl> [val]
                                            CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_NEXT
                                              $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testNonLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
                                          BLOCK type=<unbound IrClassSymbolImpl> origin=null
                                            SET_VAR 'var innerSum: <unbound IrClassSymbolImpl> [var] declared in <root>.testNonLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                                              CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                                                $this: GET_VAR 'var innerSum: <unbound IrClassSymbolImpl> [var] declared in <root>.testNonLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                                                1: CALL 'public final fun foo (block: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>): <unbound IrClassSymbolImpl> [inline] declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
                                                  block: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=LAMBDA
                                                    FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
                                                      BLOCK_BODY
                                                        RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.testNonLabeledBreaks.<anonymous>'
                                                          WHEN type=<unbound IrClassSymbolImpl> origin=IF
                                                            BRANCH
                                                              if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                                                                arg0: GET_VAR 'val j: <unbound IrClassSymbolImpl> [val] declared in <root>.testNonLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
                                                                arg1: CONST Int type=<unbound IrClassSymbolImpl> value=3
                                                              then: BREAK label=null loop.label=null
                                                            BRANCH
                                                              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                                                              then: GET_VAR 'val j: <unbound IrClassSymbolImpl> [val] declared in <root>.testNonLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
                                    GET_VAR 'var innerSum: <unbound IrClassSymbolImpl> [var] declared in <root>.testNonLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
        RETURN type=<unbound IrClassSymbolImpl> from='private final fun testNonLabeledBreaks (): <unbound IrClassSymbolImpl> declared in <root>'
          GET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testNonLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=null
    FUN name:testLabeledBreaks signature:[ File '/withReturnValueNested.kt' <- /testLabeledBreaks|testLabeledBreaks(){}[0] ] visibility:private modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:sum type:<unbound IrClassSymbolImpl> [var]
          CONST Int type=<unbound IrClassSymbolImpl> value=0
        BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP
          VAR FOR_LOOP_ITERATOR name:<iterator> type:<unbound IrClassSymbolImpl> [val]
            CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_ITERATOR
              $this: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=RANGE
                $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                1: CONST Int type=<unbound IrClassSymbolImpl> value=10
          WHILE label=outer origin=FOR_LOOP_INNER_WHILE
            condition: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=null
            body: BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_INNER_WHILE
              VAR FOR_LOOP_VARIABLE name:i type:<unbound IrClassSymbolImpl> [val]
                CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_NEXT
                  $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=null
              BLOCK type=<unbound IrClassSymbolImpl> origin=null
                SET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                  CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                    $this: GET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                    1: CALL 'public final fun foo (block: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>): <unbound IrClassSymbolImpl> [inline] declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
                      block: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=LAMBDA
                        FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
                          BLOCK_BODY
                            RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.testLabeledBreaks'
                              WHEN type=<unbound IrClassSymbolImpl> origin=IF
                                BRANCH
                                  if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                                    arg0: GET_VAR 'val i: <unbound IrClassSymbolImpl> [val] declared in <root>.testLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=null
                                    arg1: CONST Int type=<unbound IrClassSymbolImpl> value=5
                                  then: BREAK label=outer loop.label=outer
                                BRANCH
                                  if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                                  then: BLOCK type=<unbound IrClassSymbolImpl> origin=null
                                    VAR name:innerSum type:<unbound IrClassSymbolImpl> [var]
                                      CONST Int type=<unbound IrClassSymbolImpl> value=0
                                    BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP
                                      VAR FOR_LOOP_ITERATOR name:<iterator> type:<unbound IrClassSymbolImpl> [val]
                                        CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_ITERATOR
                                          $this: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=RANGE
                                            $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                                            1: GET_VAR 'val i: <unbound IrClassSymbolImpl> [val] declared in <root>.testLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=null
                                      WHILE label=null origin=FOR_LOOP_INNER_WHILE
                                        condition: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_HAS_NEXT
                                          $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
                                        body: BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_INNER_WHILE
                                          VAR FOR_LOOP_VARIABLE name:j type:<unbound IrClassSymbolImpl> [val]
                                            CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_NEXT
                                              $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
                                          BLOCK type=<unbound IrClassSymbolImpl> origin=null
                                            SET_VAR 'var innerSum: <unbound IrClassSymbolImpl> [var] declared in <root>.testLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                                              CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                                                $this: GET_VAR 'var innerSum: <unbound IrClassSymbolImpl> [var] declared in <root>.testLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                                                1: CALL 'public final fun foo (block: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>): <unbound IrClassSymbolImpl> [inline] declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
                                                  block: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=LAMBDA
                                                    FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
                                                      BLOCK_BODY
                                                        RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.testLabeledBreaks.<anonymous>'
                                                          WHEN type=<unbound IrClassSymbolImpl> origin=IF
                                                            BRANCH
                                                              if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                                                                arg0: GET_VAR 'val j: <unbound IrClassSymbolImpl> [val] declared in <root>.testLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
                                                                arg1: CONST Int type=<unbound IrClassSymbolImpl> value=3
                                                              then: BREAK label=outer loop.label=outer
                                                            BRANCH
                                                              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                                                              then: GET_VAR 'val j: <unbound IrClassSymbolImpl> [val] declared in <root>.testLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
                                    GET_VAR 'var innerSum: <unbound IrClassSymbolImpl> [var] declared in <root>.testLabeledBreaks.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
        RETURN type=<unbound IrClassSymbolImpl> from='private final fun testLabeledBreaks (): <unbound IrClassSymbolImpl> declared in <root>'
          GET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testLabeledBreaks' type=<unbound IrClassSymbolImpl> origin=null
    FUN name:testForEach signature:[ File '/withReturnValueNested.kt' <- /testForEach|testForEach(){}[0] ] visibility:private modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:sum type:<unbound IrClassSymbolImpl> [var]
          CONST Int type=<unbound IrClassSymbolImpl> value=0
        BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP
          VAR FOR_LOOP_ITERATOR name:<iterator> type:<unbound IrClassSymbolImpl> [val]
            CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_ITERATOR
              $this: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=RANGE
                $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                1: CONST Int type=<unbound IrClassSymbolImpl> value=10
          WHILE label=null origin=FOR_LOOP_INNER_WHILE
            condition: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testForEach' type=<unbound IrClassSymbolImpl> origin=null
            body: BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_INNER_WHILE
              VAR FOR_LOOP_VARIABLE name:i type:<unbound IrClassSymbolImpl> [val]
                CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_NEXT
                  $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testForEach' type=<unbound IrClassSymbolImpl> origin=null
              BLOCK type=<unbound IrClassSymbolImpl> origin=null
                SET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testForEach' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                  CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                    $this: GET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testForEach' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                    1: CALL 'public final fun foo (block: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>): <unbound IrClassSymbolImpl> [inline] declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
                      block: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=LAMBDA
                        FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
                          BLOCK_BODY
                            RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.testForEach'
                              WHEN type=<unbound IrClassSymbolImpl> origin=IF
                                BRANCH
                                  if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                                    arg0: GET_VAR 'val i: <unbound IrClassSymbolImpl> [val] declared in <root>.testForEach' type=<unbound IrClassSymbolImpl> origin=null
                                    arg1: CONST Int type=<unbound IrClassSymbolImpl> value=5
                                  then: BREAK label=null loop.label=null
                                BRANCH
                                  if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                                  then: BLOCK type=<unbound IrClassSymbolImpl> origin=null
                                    VAR name:innerSum type:<unbound IrClassSymbolImpl> [var]
                                      CONST Int type=<unbound IrClassSymbolImpl> value=0
                                    CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
                                      <1>: <unbound IrClassSymbolImpl>
                                      $receiver: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=RANGE
                                        $this: CONST Int type=<unbound IrClassSymbolImpl> value=1
                                        1: GET_VAR 'val i: <unbound IrClassSymbolImpl> [val] declared in <root>.testForEach' type=<unbound IrClassSymbolImpl> origin=null
                                      1: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>, <unbound IrClassSymbolImpl>> origin=LAMBDA
                                        FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> (j:<unbound IrClassSymbolImpl>) returnType:<unbound IrClassSymbolImpl>
                                          VALUE_PARAMETER name:j index:0 type:<unbound IrClassSymbolImpl>
                                          BLOCK_BODY
                                            SET_VAR 'var innerSum: <unbound IrClassSymbolImpl> [var] declared in <root>.testForEach.<anonymous>' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                                              CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                                                $this: GET_VAR 'var innerSum: <unbound IrClassSymbolImpl> [var] declared in <root>.testForEach.<anonymous>' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                                                1: CALL 'public final fun foo (block: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>): <unbound IrClassSymbolImpl> [inline] declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
                                                  block: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=LAMBDA
                                                    FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
                                                      BLOCK_BODY
                                                        RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.testForEach.<anonymous>.<anonymous>'
                                                          WHEN type=<unbound IrClassSymbolImpl> origin=IF
                                                            BRANCH
                                                              if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                                                                arg0: GET_VAR 'j: <unbound IrClassSymbolImpl> declared in <root>.testForEach.<anonymous>.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
                                                                arg1: CONST Int type=<unbound IrClassSymbolImpl> value=3
                                                              then: BREAK label=null loop.label=null
                                                            BRANCH
                                                              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                                                              then: GET_VAR 'j: <unbound IrClassSymbolImpl> declared in <root>.testForEach.<anonymous>.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
                                    GET_VAR 'var innerSum: <unbound IrClassSymbolImpl> [var] declared in <root>.testForEach.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
        RETURN type=<unbound IrClassSymbolImpl> from='private final fun testForEach (): <unbound IrClassSymbolImpl> declared in <root>'
          GET_VAR 'var sum: <unbound IrClassSymbolImpl> [var] declared in <root>.testForEach' type=<unbound IrClassSymbolImpl> origin=null
