MODULE_FRAGMENT name:<main>
  FILE fqName:<root> fileName:/forInSequenceTypeParameterWithIndex.kt
    PROPERTY name:xs signature:/xs|{}xs[0] visibility:public modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:xs signature:[ /xs|{}xs[0] <- Local[<BF>|FIELD PROPERTY_BACKING_FIELD name:xs type:kotlin.sequences.Sequence<kotlin.String> visibility:private [final,static]] ] type:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> visibility:private [final,static]
        EXPRESSION_BODY
          CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=null
            <1>: <unbound IrClassSymbolImpl>
            $receiver: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=null
              <1>: <unbound IrClassSymbolImpl>
              1: VARARG type=<unbound IrClassSymbolImpl><out <unbound IrClassSymbolImpl>> varargElementType=<unbound IrClassSymbolImpl>
                CONST String type=<unbound IrClassSymbolImpl> value="a"
                CONST String type=<unbound IrClassSymbolImpl> value="b"
                CONST String type=<unbound IrClassSymbolImpl> value="c"
                CONST String type=<unbound IrClassSymbolImpl> value="d"
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-xs> signature:/xs.<get-xs>|<get-xs>(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>
        correspondingProperty: PROPERTY name:xs signature:/xs|{}xs[0] visibility:public modality:FINAL [val]
        BLOCK_BODY
          RETURN type=<unbound IrClassSymbolImpl> from='public final fun <get-xs> (): <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> declared in <root>'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:xs signature:[ /xs|{}xs[0] <- Local[<BF>|FIELD PROPERTY_BACKING_FIELD name:xs type:kotlin.sequences.Sequence<kotlin.String> visibility:private [final,static]] ] type:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> visibility:private [final,static]' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=null
    FUN name:test signature:/test|test(0:0){0ยง<kotlin.sequences.Sequence<*>>}[0] visibility:public modality:FINAL <T> (sequence:T of <root>.test) returnType:<unbound IrClassSymbolImpl>
      TYPE_PARAMETER name:T index:0 variance: signature:[ /test|test(0:0){0ยง<kotlin.sequences.Sequence<*>>}[0] <- Local[<TP>,0|TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.sequences.Sequence<*>] reified:false] ] superTypes:[<unbound IrClassSymbolImpl><*>] reified:false
      VALUE_PARAMETER name:sequence index:0 type:T of <root>.test
      BLOCK_BODY
        VAR name:s type:<unbound IrClassSymbolImpl> [val]
          CONSTRUCTOR_CALL 'UNBOUND IrConstructorSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
        BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP
          VAR FOR_LOOP_ITERATOR name:<iterator> type:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>?>> [val]
            CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>?>> origin=null
              $this: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>?>> origin=null
                <1>: <unbound IrClassSymbolImpl>?
                $receiver: GET_VAR 'sequence: T of <root>.test declared in <root>.test' type=T of <root>.test origin=null
          WHILE label=null origin=FOR_LOOP_INNER_WHILE
            condition: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>?>> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>?>> origin=null
            body: BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_INNER_WHILE
              VAR IR_TEMPORARY_VARIABLE name:<destruct> type:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>?> [val]
                CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>?> origin=FOR_LOOP_NEXT
                  $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>?>> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>?>> origin=null
              VAR name:index type:<unbound IrClassSymbolImpl> [val]
                CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=COMPONENT_N(index=1)
                  $this: GET_VAR 'val <destruct>: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>?> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>?> origin=null
              VAR name:x type:<unbound IrClassSymbolImpl>? [val]
                CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl>? origin=COMPONENT_N(index=2)
                  $this: GET_VAR 'val <destruct>: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>?> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>?> origin=null
              TYPE_OP type=<unbound IrClassSymbolImpl> origin=IMPLICIT_COERCION_TO_UNIT typeOperand=<unbound IrClassSymbolImpl>
                BLOCK type=<unbound IrClassSymbolImpl> origin=null
                  CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
                    $this: GET_VAR 'val s: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
                    1: STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                      GET_VAR 'val index: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
                      CONST String type=<unbound IrClassSymbolImpl> value=":"
                      GET_VAR 'val x: <unbound IrClassSymbolImpl>? [val] declared in <root>.test' type=<unbound IrClassSymbolImpl>? origin=null
                      CONST String type=<unbound IrClassSymbolImpl> value=";"
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun test <T> (sequence: T of <root>.test): <unbound IrClassSymbolImpl> declared in <root>'
          CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
            $this: GET_VAR 'val s: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:ss type:<unbound IrClassSymbolImpl> [val]
          CALL 'public final fun test <T> (sequence: T of <root>.test): <unbound IrClassSymbolImpl> declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
            <T>: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>
            sequence: CALL 'public final fun <get-xs> (): <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> declared in <root>' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=GET_PROPERTY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          WHEN type=<unbound IrClassSymbolImpl> origin=IF
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                arg0: GET_VAR 'val ss: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                arg1: CONST String type=<unbound IrClassSymbolImpl> value="0:a;1:b;2:c;3:d;"
              then: CONST String type=<unbound IrClassSymbolImpl> value="OK"
            BRANCH
              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
              then: STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                CONST String type=<unbound IrClassSymbolImpl> value="fail: '"
                GET_VAR 'val ss: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                CONST String type=<unbound IrClassSymbolImpl> value="'"
