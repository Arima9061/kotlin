MODULE_FRAGMENT name:<main>
  FILE fqName:<root> fileName:/continueInWhen.kt
    FUN name:testFor signature:/testFor|testFor(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:xs type:<unbound IrClassSymbolImpl> [val]
          CONSTRUCTOR_CALL 'UNBOUND IrConstructorSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
            1: CONST Int type=<unbound IrClassSymbolImpl> value=10
            2: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>, <unbound IrClassSymbolImpl>> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> (i:<unbound IrClassSymbolImpl>) returnType:<unbound IrClassSymbolImpl>
                VALUE_PARAMETER name:i index:0 type:<unbound IrClassSymbolImpl>
                BLOCK_BODY
                  RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (i: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in <root>.testFor'
                    GET_VAR 'i: <unbound IrClassSymbolImpl> declared in <root>.testFor.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
        VAR name:k type:<unbound IrClassSymbolImpl> [var]
          CONST Int type=<unbound IrClassSymbolImpl> value=0
        VAR name:s type:<unbound IrClassSymbolImpl> [var]
          CONST String type=<unbound IrClassSymbolImpl> value=""
        BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP
          VAR FOR_LOOP_ITERATOR name:<iterator> type:<unbound IrClassSymbolImpl> [val]
            CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_ITERATOR
              $this: GET_VAR 'val xs: <unbound IrClassSymbolImpl> [val] declared in <root>.testFor' type=<unbound IrClassSymbolImpl> origin=null
          WHILE label=null origin=FOR_LOOP_INNER_WHILE
            condition: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_HAS_NEXT
              $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testFor' type=<unbound IrClassSymbolImpl> origin=null
            body: BLOCK type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_INNER_WHILE
              VAR FOR_LOOP_VARIABLE name:x type:<unbound IrClassSymbolImpl> [val]
                CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=FOR_LOOP_NEXT
                  $this: GET_VAR 'val <iterator>: <unbound IrClassSymbolImpl> [val] declared in <root>.testFor' type=<unbound IrClassSymbolImpl> origin=null
              BLOCK type=<unbound IrClassSymbolImpl> origin=null
                TYPE_OP type=<unbound IrClassSymbolImpl> origin=IMPLICIT_COERCION_TO_UNIT typeOperand=<unbound IrClassSymbolImpl>
                  BLOCK type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
                    SET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testFor' type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
                      CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
                        $this: GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testFor' type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
                    GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testFor' type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
                WHEN type=<unbound IrClassSymbolImpl> origin=WHEN
                  BRANCH
                    if: CALL 'public final fun greater (arg0: <unbound IrClassSymbolImpl>, arg1: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=GT
                      arg0: GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testFor' type=<unbound IrClassSymbolImpl> origin=null
                      arg1: CONST Int type=<unbound IrClassSymbolImpl> value=2
                    then: CONTINUE label=null loop.label=null
                SET_VAR 'var s: <unbound IrClassSymbolImpl> [var] declared in <root>.testFor' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                  CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                    $this: GET_VAR 'var s: <unbound IrClassSymbolImpl> [var] declared in <root>.testFor' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                    1: STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                      GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testFor' type=<unbound IrClassSymbolImpl> origin=null
                      CONST String type=<unbound IrClassSymbolImpl> value=";"
        WHEN type=<unbound IrClassSymbolImpl> origin=IF
          BRANCH
            if: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
              $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                arg0: GET_VAR 'var s: <unbound IrClassSymbolImpl> [var] declared in <root>.testFor' type=<unbound IrClassSymbolImpl> origin=null
                arg1: CONST String type=<unbound IrClassSymbolImpl> value="1;2;"
            then: THROW type=<unbound IrClassSymbolImpl>
              CONSTRUCTOR_CALL 'UNBOUND IrConstructorSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
                1: GET_VAR 'var s: <unbound IrClassSymbolImpl> [var] declared in <root>.testFor' type=<unbound IrClassSymbolImpl> origin=null
    FUN name:testWhile signature:/testWhile|testWhile(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:k type:<unbound IrClassSymbolImpl> [var]
          CONST Int type=<unbound IrClassSymbolImpl> value=0
        VAR name:s type:<unbound IrClassSymbolImpl> [var]
          CONST String type=<unbound IrClassSymbolImpl> value=""
        WHILE label=null origin=WHILE_LOOP
          condition: CALL 'public final fun less (arg0: <unbound IrClassSymbolImpl>, arg1: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=LT
            arg0: GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testWhile' type=<unbound IrClassSymbolImpl> origin=null
            arg1: CONST Int type=<unbound IrClassSymbolImpl> value=10
          body: BLOCK type=<unbound IrClassSymbolImpl> origin=null
            TYPE_OP type=<unbound IrClassSymbolImpl> origin=IMPLICIT_COERCION_TO_UNIT typeOperand=<unbound IrClassSymbolImpl>
              BLOCK type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
                SET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testWhile' type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
                  CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
                    $this: GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testWhile' type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
                GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testWhile' type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
            WHEN type=<unbound IrClassSymbolImpl> origin=WHEN
              BRANCH
                if: CALL 'public final fun greater (arg0: <unbound IrClassSymbolImpl>, arg1: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=GT
                  arg0: GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testWhile' type=<unbound IrClassSymbolImpl> origin=null
                  arg1: CONST Int type=<unbound IrClassSymbolImpl> value=2
                then: CONTINUE label=null loop.label=null
            SET_VAR 'var s: <unbound IrClassSymbolImpl> [var] declared in <root>.testWhile' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
              CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                $this: GET_VAR 'var s: <unbound IrClassSymbolImpl> [var] declared in <root>.testWhile' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                1: STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                  GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testWhile' type=<unbound IrClassSymbolImpl> origin=null
                  CONST String type=<unbound IrClassSymbolImpl> value=";"
        WHEN type=<unbound IrClassSymbolImpl> origin=IF
          BRANCH
            if: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
              $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                arg0: GET_VAR 'var s: <unbound IrClassSymbolImpl> [var] declared in <root>.testWhile' type=<unbound IrClassSymbolImpl> origin=null
                arg1: CONST String type=<unbound IrClassSymbolImpl> value="1;2;"
            then: THROW type=<unbound IrClassSymbolImpl>
              CONSTRUCTOR_CALL 'UNBOUND IrConstructorSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
                1: GET_VAR 'var s: <unbound IrClassSymbolImpl> [var] declared in <root>.testWhile' type=<unbound IrClassSymbolImpl> origin=null
    FUN name:testDoWhile signature:/testDoWhile|testDoWhile(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:k type:<unbound IrClassSymbolImpl> [var]
          CONST Int type=<unbound IrClassSymbolImpl> value=0
        VAR name:s type:<unbound IrClassSymbolImpl> [var]
          CONST String type=<unbound IrClassSymbolImpl> value=""
        BLOCK type=<unbound IrClassSymbolImpl> origin=null
          DO_WHILE label=null origin=DO_WHILE_LOOP
            body: COMPOSITE type=<unbound IrClassSymbolImpl> origin=null
              TYPE_OP type=<unbound IrClassSymbolImpl> origin=IMPLICIT_COERCION_TO_UNIT typeOperand=<unbound IrClassSymbolImpl>
                BLOCK type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
                  SET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testDoWhile' type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
                    CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
                      $this: GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testDoWhile' type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
                  GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testDoWhile' type=<unbound IrClassSymbolImpl> origin=PREFIX_INCR
              WHEN type=<unbound IrClassSymbolImpl> origin=WHEN
                BRANCH
                  if: CALL 'public final fun greater (arg0: <unbound IrClassSymbolImpl>, arg1: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=GT
                    arg0: GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testDoWhile' type=<unbound IrClassSymbolImpl> origin=null
                    arg1: CONST Int type=<unbound IrClassSymbolImpl> value=2
                  then: CONTINUE label=null loop.label=null
              SET_VAR 'var s: <unbound IrClassSymbolImpl> [var] declared in <root>.testDoWhile' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                  $this: GET_VAR 'var s: <unbound IrClassSymbolImpl> [var] declared in <root>.testDoWhile' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                  1: STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                    GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testDoWhile' type=<unbound IrClassSymbolImpl> origin=null
                    CONST String type=<unbound IrClassSymbolImpl> value=";"
            condition: CALL 'public final fun less (arg0: <unbound IrClassSymbolImpl>, arg1: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=LT
              arg0: GET_VAR 'var k: <unbound IrClassSymbolImpl> [var] declared in <root>.testDoWhile' type=<unbound IrClassSymbolImpl> origin=null
              arg1: CONST Int type=<unbound IrClassSymbolImpl> value=10
        WHEN type=<unbound IrClassSymbolImpl> origin=IF
          BRANCH
            if: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
              $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                arg0: GET_VAR 'var s: <unbound IrClassSymbolImpl> [var] declared in <root>.testDoWhile' type=<unbound IrClassSymbolImpl> origin=null
                arg1: CONST String type=<unbound IrClassSymbolImpl> value="1;2;"
            then: THROW type=<unbound IrClassSymbolImpl>
              CONSTRUCTOR_CALL 'UNBOUND IrConstructorSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
                1: GET_VAR 'var s: <unbound IrClassSymbolImpl> [var] declared in <root>.testDoWhile' type=<unbound IrClassSymbolImpl> origin=null
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        CALL 'public final fun testFor (): <unbound IrClassSymbolImpl> declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
        CALL 'public final fun testWhile (): <unbound IrClassSymbolImpl> declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
        CALL 'public final fun testDoWhile (): <unbound IrClassSymbolImpl> declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          CONST String type=<unbound IrClassSymbolImpl> value="OK"
