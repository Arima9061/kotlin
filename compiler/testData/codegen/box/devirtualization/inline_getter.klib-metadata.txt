library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Base
    // class name: Base2
    // class name: Child
    // class name: Child2

    public abstract interface Base : kotlin/Any {

      public abstract val id: kotlin/Int
        public abstract get
    }

    public abstract interface Base2 : kotlin/Any {

      public abstract val prop: Base
        public abstract get
    }

    public final value class Child : Base {

      public constructor(id: kotlin/Int /* = ... */)

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public open val id: kotlin/Int
        public open get

      // underlying property: id

      // underlying type: kotlin/Int
    }

    public final class Child2 : Base2 {

      public constructor(prop: Child)

      public open val prop: Child
        public open get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
