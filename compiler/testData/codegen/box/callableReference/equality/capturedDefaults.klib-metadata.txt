library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: V

    public final class V : kotlin/Any {

      public constructor()

      public final fun target(x: kotlin/String /* = ... */, y: kotlin/String /* = ... */, z: kotlin/String /* = ... */): kotlin/String
    }

    package {

      public final fun box(): kotlin/String

      private final fun captureAllDefaults(f: kotlin/Function1<V, kotlin/String>): kotlin/Any

      private final fun captureAllDefaultsBound(f: kotlin/Function0<kotlin/String>): kotlin/Any

      private final fun captureNoDefaults(f: kotlin/Function4<V, kotlin/String, kotlin/String, kotlin/String, kotlin/String>): kotlin/Any

      private final fun captureNoDefaults(f: kotlin/Function4<V, kotlin/String, kotlin/String, kotlin/String, kotlin/String>): kotlin/Any

      private final fun captureNoDefaultsBound(f: kotlin/Function3<kotlin/String, kotlin/String, kotlin/String, kotlin/String>): kotlin/Any

      private final fun captureNoDefaultsBound(f: kotlin/Function3<kotlin/String, kotlin/String, kotlin/String, kotlin/String>): kotlin/Any

      public final fun captureNoDefaultsBoundFromOtherFile(v0: V): kotlin/Any

      public final fun captureNoDefaultsFromOtherFile(): kotlin/Any

      private final fun captureOneDefault(f: kotlin/Function3<V, kotlin/String, kotlin/String, kotlin/String>): kotlin/Any

      private final fun captureOneDefault(f: kotlin/Function3<V, kotlin/String, kotlin/String, kotlin/String>): kotlin/Any

      private final fun captureOneDefaultBound(f: kotlin/Function2<kotlin/String, kotlin/String, kotlin/String>): kotlin/Any

      public final fun captureOneDefaultFromOtherFile(): kotlin/Any

      public final fun checkEqual(x: kotlin/Any, y: kotlin/Any): kotlin/Unit

      public final fun checkNotEqual(x: kotlin/Any, y: kotlin/Any): kotlin/Unit
    }
  }
}
