library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Foo
    // class name: Foo.Companion

    public final class Foo : kotlin/Any {

      public constructor()

      public final val bar: kotlin/String /* = ... */
        public final get

      private final val baz: kotlin/String /* = ... */
        private final get

      public final val memberVal: kotlin/String /* = ... */
        public final get

      public final var memberVar: kotlin/String
        public final get
        public final set

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object Foo.Companion : kotlin/Any {

      private constructor()

      public final fun referenceToMemberBaz(): kotlin/reflect/KProperty1<Foo, kotlin/String>
    }

    package {

      public final fun box(): kotlin/String

      public final fun checkEqual(x: kotlin/Any, y: kotlin/Any): kotlin/Unit

      public final fun checkNotEqual(x: kotlin/Any, y: kotlin/Any): kotlin/Unit

      public final fun referenceMemberValFromOtherFile(): kotlin/reflect/KProperty1<Foo, kotlin/String>

      public final fun referenceMemberVarFromOtherFile(): kotlin/reflect/KMutableProperty1<Foo, kotlin/String>

      public final fun referenceTopLevelValFromOtherFile(): kotlin/reflect/KProperty0<kotlin/String>

      public final fun referenceTopLevelVarFromOtherFile(): kotlin/reflect/KMutableProperty0<kotlin/String>

      public final val kotlin/String.bar: kotlin/String
        public final /* non-default */ get

      public final val Foo.baz: kotlin/String
        public final /* non-default */ get

      public final val topLevelVal: kotlin/String /* = ... */
        public final get

      public final var topLevelVar: kotlin/String
        public final get
        public final set
    }
  }
}
