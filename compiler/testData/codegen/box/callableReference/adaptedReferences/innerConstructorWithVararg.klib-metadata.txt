library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Outer
    // class name: Outer.Inner1
    // class name: Outer.Inner2

    public final class Outer : kotlin/Any {

      public constructor(o: kotlin/String)

      public final val o: kotlin/String
        public final get

      // nested class: Inner1

      // nested class: Inner2
    }

    public final inner class Outer.Inner1 : kotlin/Any {

      public constructor(i: kotlin/Int, vararg v: kotlin/String /* kotlin/Array<out kotlin/String> */)

      public final val i: kotlin/Int
        public final get

      public final val result: kotlin/String
        public final get
    }

    public final inner class Outer.Inner2 : kotlin/Any {

      public constructor(i: kotlin/Int, vararg v: kotlin/String /* kotlin/Array<out kotlin/String> */ /* = ... */)

      public final val i: kotlin/Int
        public final get

      public final val result: kotlin/String
        public final get
    }

    package {

      public final fun box(): kotlin/String

      public final fun <T#0 /* T */> use0(f: kotlin/Function1<kotlin/Int, T#0>): T#0

      public final fun <T#0 /* T */> use1(f: kotlin/Function2<kotlin/Int, kotlin/String, T#0>): T#0
    }
  }
}
