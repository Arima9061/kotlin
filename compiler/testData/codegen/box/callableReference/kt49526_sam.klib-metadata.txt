library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: C1
    // class name: C2
    // class name: I1
    // class name: I2
    // class name: K
    // class name: KFun

    public final class C1 : I1, I2 {

      public constructor()

      public open fun toString(): kotlin/String
    }

    public final class C2 : I1, I2 {

      public constructor()
    }

    public abstract interface I1 : kotlin/Any {
    }

    public abstract interface I2 : kotlin/Any {
    }

    public final class K<T#0 /* T */> : kotlin/Any {

      public constructor(x: T#0)

      public final fun with(kf: KFun<T#0>): kotlin/Unit

      private final val x: T#0
        private final get
    }

    public abstract fun interface KFun<T#0 /* T */> : kotlin/Any {

      public abstract fun invoke(x: T#0): kotlin/Unit
    }

    package {

      public final fun box(): kotlin/String

      public final fun <T#0 /* T */> intersect(x: T#0, y: T#0): T#0

      public final fun <T#0 /* T */> T#0.k(): K<T#0>
    }
  }
}
