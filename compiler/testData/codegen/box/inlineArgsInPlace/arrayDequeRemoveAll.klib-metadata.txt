library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: ArrayDeque
    // class name: ArrayDeque.Companion

    public final class ArrayDeque<T#0 /* E */> : kotlin/collections/AbstractMutableList<T#0> {

      public /* secondary */ constructor(elements: kotlin/collections/Collection<T#0>)

      public open fun add(index: kotlin/Int, element: T#0): kotlin/Unit

      private final inline fun filterInPlace(predicate: kotlin/Function1<T#0, kotlin/Boolean>): kotlin/Boolean

      public open operator fun get(index: kotlin/Int): T#0

      private final fun incremented(index: kotlin/Int): kotlin/Int

      @kotlin/internal/InlineOnly
      private final inline fun internalGet(internalIndex: kotlin/Int): T#0

      @kotlin/internal/InlineOnly
      private final inline fun internalIndex(index: kotlin/Int): kotlin/Int

      private final fun negativeMod(index: kotlin/Int): kotlin/Int

      private final fun positiveMod(index: kotlin/Int): kotlin/Int

      public open fun removeAll(elements: kotlin/collections/Collection<T#0>): kotlin/Boolean

      public open fun removeAt(index: kotlin/Int): T#0

      public open operator fun set(index: kotlin/Int, element: T#0): T#0

      private final var elementData: kotlin/Array<kotlin/Any?>
        private final get
        private final set

      private final var head: kotlin/Int
        private final get
        private final set

      public open var size: kotlin/Int
        public open get
        private open /* non-default */ set(value: kotlin/Int)

      // companion object: Companion

      // nested class: Companion
    }

    internal final companion object ArrayDeque.Companion : kotlin/Any {

      private constructor()

      private final val emptyElementData: kotlin/Array<kotlin/Any?>
        private final get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
