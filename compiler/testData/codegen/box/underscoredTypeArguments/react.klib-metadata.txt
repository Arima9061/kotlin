library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Component
    // class name: MyComponent
    // class name: MyProps
    // class name: RBuilder
    // class name: RComponent
    // class name: RElementBuilder
    // class name: RProps
    // class name: RState
    // class name: ReactElement

    public abstract interface Component<T#0 /* K1 */, T#1 /* K2 */> : kotlin/Any {
    }

    public final class MyComponent<T#0 /* T */> : RComponent<MyProps<T#0>, RState> {

      public constructor()
    }

    public abstract interface MyProps<T#0 /* T */> : RProps {

      public abstract var list: kotlin/collections/List<T#0>
        public abstract get
        public abstract set
    }

    public final class RBuilder : kotlin/Any {

      public constructor()
    }

    public open class RComponent<T#0 /* K */, T#1 /* T */> : Component<T#0, T#1> {

      public constructor()
    }

    public final class RElementBuilder<T#0 /* A */> : kotlin/Any {

      public constructor()
    }

    public abstract interface RProps : kotlin/Any {
    }

    public abstract interface RState : kotlin/Any {
    }

    public abstract interface ReactElement : kotlin/Any {
    }

    package {

      public final fun box(): kotlin/String

      public final inline fun <T#0 /* P */ : RProps, reified T#1 /* C */ : Component<T#0, *>> child(noinline handler: @kotlin/ExtensionFunctionType kotlin/Function1<RElementBuilder<T#0>, kotlin/Unit>): kotlin/String
    }
  }
}
