// MODULE: lib1
library {
  // module name: <lib1>

  library fragment {
    // package name: <root>

    // class name: DemoClassInternal1
    // class name: DemoInterface1

    public abstract class DemoClassInternal1 : kotlin/Any {

      public constructor()

      internal open fun demo(): kotlin/Int
    }

    public abstract interface DemoInterface1 : kotlin/Any {

      public open fun demo(): kotlin/Int
    }

    package {

      public final fun testDemoClassInternal1(d: DemoClassInternal1): kotlin/Int

      public final fun testDemoInterface1(d: DemoInterface1): kotlin/Int
    }
  }
}

// MODULE: lib2
library {
  // module name: <lib2>

  library fragment {
    // package name: <root>

    // class name: DemoClassInternal2
    // class name: DemoInterface2

    public abstract class DemoClassInternal2 : kotlin/Any {

      public constructor()

      internal open fun demo(): kotlin/Int
    }

    public abstract interface DemoInterface2 : kotlin/Any {

      public open fun demo(): kotlin/Int
    }

    package {

      public final fun testDemoClassInternal2(d: DemoClassInternal2): kotlin/Int

      public final fun testDemoInterface2(d: DemoInterface2): kotlin/Int
    }
  }
}

// MODULE: main
library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: MyDemo1
    // class name: MyDemo2

    public final class MyDemo1 : DemoClassInternal1, DemoInterface1, DemoInterface2 {

      public constructor()

      public open fun demo(): kotlin/Int
    }

    public final class MyDemo2 : DemoClassInternal2, DemoInterface1, DemoInterface2 {

      public constructor()

      public open fun demo(): kotlin/Int
    }

    package {

      public final fun box(): kotlin/String

      public final fun testMyDemo1(): kotlin/Unit

      public final fun testMyDemo2(): kotlin/Unit
    }
  }
}
