library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: A
    // class name: AbstractClass
    // class name: B
    // class name: C
    // class name: ExtendsInterface
    // class name: MultiParser
    // class name: Parser

    public final class A : kotlin/Any {

      public constructor()
    }

    public abstract class AbstractClass : ExtendsInterface<C> {

      public constructor()

      public open fun parse(source: A): C
    }

    public final class B : kotlin/Any {

      public constructor()
    }

    public final class C : kotlin/Any {

      public constructor()
    }

    public abstract interface ExtendsInterface<T#0 /* T */ : kotlin/Any> : Parser<A, T#0>, MultiParser<B, T#0> {

      public open fun parse(source: B): kotlin/collections/Collection<T#0>
    }

    public abstract interface MultiParser<in T#0 /* IN */ : kotlin/Any, out T#1 /* OUT */ : kotlin/Any> : kotlin/Any {

      public abstract fun parse(source: T#0): kotlin/collections/Collection<T#1>
    }

    public abstract interface Parser<in T#0 /* IN */ : kotlin/Any, out T#1 /* OUT */ : kotlin/Any> : kotlin/Any {

      public abstract fun parse(source: T#0): T#1
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
