library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Base
    // class name: Base2
    // class name: Derived
    // class name: Derived2
    // class name: Foo

    public abstract class Base<T#0 /* T */> : kotlin/Any {

      public constructor()

      public abstract fun bar(x: T#0): kotlin/Unit
    }

    public abstract class Base2<in T#0 /* T */> : kotlin/Any {

      public constructor()

      public abstract fun bar(x: T#0): kotlin/Unit
    }

    public final class Derived<T#0 /* T */ : Foo> : Base<T#0> {

      public constructor()

      public open fun bar(x: T#0): kotlin/Unit
    }

    public final class Derived2<in T#0 /* T */ : Foo> : Base2<T#0> {

      public constructor()

      public open fun bar(x: T#0): kotlin/Unit
    }

    public open class Foo : kotlin/Any {

      public constructor(x: kotlin/Int)

      public final val x: kotlin/Int
        public final get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
