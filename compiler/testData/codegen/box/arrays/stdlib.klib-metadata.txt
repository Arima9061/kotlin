library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: ISized
    // class name: MutableArray
    // class name: MyIterator
    // class name: ReadOnlyArray
    // class name: WriteOnlyArray
    // class name: javaUtilIterator

    public abstract interface ISized : kotlin/Any {

      public abstract val size: kotlin/Int
        public abstract get
    }

    public final class MutableArray<T#0 /* T */> : ReadOnlyArray<T#0>, WriteOnlyArray<T#0> {

      public constructor(length: kotlin/Int, init: kotlin/Function1<kotlin/Int, T#0>)

      public open operator fun get(index: kotlin/Int): T#0

      public open operator fun set(index: kotlin/Int, value: T#0): kotlin/Unit

      private final val array: kotlin/Array<kotlin/Any?>
        private final get

      public open val size: kotlin/Int
        public open /* non-default */ get
    }

    public final class MyIterator<T#0 /* T */> : javaUtilIterator<T#0> {

      public constructor(array: ReadOnlyArray<T#0>)

      public open operator fun hasNext(): kotlin/Boolean

      public open operator fun next(): T#0

      public final val array: ReadOnlyArray<T#0>
        public final get

      private final var index: kotlin/Int
        private final get
        private final set
    }

    public abstract interface ReadOnlyArray<out T#0 /* T */> : ISized, kotlin/collections/Iterable<T#0> {

      public abstract operator fun get(index: kotlin/Int): T#0

      public open operator fun iterator(): kotlin/collections/Iterator<T#0>
    }

    public abstract interface WriteOnlyArray<in T#0 /* T */> : ISized {

      public abstract operator fun set(index: kotlin/Int, value: T#0): kotlin/Unit

      public open operator fun set(from: kotlin/Int, count: kotlin/Int, value: T#0): kotlin/Unit
    }

    public abstract interface javaUtilIterator<T#0 /* T */> : kotlin/collections/Iterator<T#0> {

      public open fun remove(): kotlin/Unit
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
