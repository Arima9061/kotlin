MODULE_FRAGMENT name:<main>
  FILE fqName:<root> fileName:/objectToPrimitiveWithAssertion.kt
    FUN name:f signature:/f|f(){0ยง<kotlin.Any?>}[0] visibility:public modality:FINAL <T> () returnType:T of <root>.f
      annotations:
        <unbound>(1 = ["UNCHECKED_CAST"] type=<unbound IrClassSymbolImpl><out <unbound IrClassSymbolImpl>> varargElementType=<unbound IrClassSymbolImpl>)
      TYPE_PARAMETER name:T index:0 variance: signature:[ /f|f(){0ยง<kotlin.Any?>}[0] <- Local[<TP>,0|TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any?] reified:false] ] superTypes:[<unbound IrClassSymbolImpl>?] reified:false
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun f <T> (): T of <root>.f declared in <root>'
          TYPE_OP type=T of <root>.f origin=CAST typeOperand=T of <root>.f
            CONST Long type=<unbound IrClassSymbolImpl> value=1
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:x type:<unbound IrClassSymbolImpl> [val]
          CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEXCL
            <T0>: <unbound IrClassSymbolImpl>
            arg0: CALL 'public final fun f <T> (): T of <root>.f declared in <root>' type=<unbound IrClassSymbolImpl>? origin=null
              <T>: <unbound IrClassSymbolImpl>?
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          WHEN type=<unbound IrClassSymbolImpl> origin=IF
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                arg0: GET_VAR 'val x: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                arg1: CONST Int type=<unbound IrClassSymbolImpl> value=1
              then: CONST String type=<unbound IrClassSymbolImpl> value="OK"
            BRANCH
              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
              then: STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                CONST String type=<unbound IrClassSymbolImpl> value="fail: "
                GET_VAR 'val x: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
