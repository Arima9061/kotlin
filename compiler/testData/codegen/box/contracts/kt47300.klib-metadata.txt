library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Content

    public final data class Content<out T#0 /* T */> : kotlin/Any {

      public constructor(value: T#0)

      public final /* synthesized */ operator fun component1(): T#0

      public final /* synthesized */ fun copy(value: T#0 /* = ... */): Content<T#0>

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val value: T#0
        public final get
    }

    package {

      @kotlin/contracts/ExperimentalContracts
      public final fun box(): kotlin/String

      public final fun <T#0 /* T */> content(value: T#0): Content<T#0>

      @kotlin/contracts/ExperimentalContracts
      public final inline fun <T#0 /* R */, T#1 /* T */> Content<T#1>.fold(onContent: kotlin/Function1<@kotlin/ParameterName(name = "value") T#1, T#0>, onException: kotlin/Function1<@kotlin/ParameterName(name = "exception") kotlin/Exception, T#0>): T#0
        contract {
          callsInPlace(p#1, InvocationKind.AT_MOST_ONCE)
          callsInPlace(p#2, InvocationKind.AT_MOST_ONCE)
        }

      @kotlin/contracts/ExperimentalContracts
      public final inline fun <T#0 /* R */, T#1 /* T */ : T#0> Content<T#1>.getOrElse(onException: kotlin/Function1<@kotlin/ParameterName(name = "exception") kotlin/Exception, T#0>): T#0
    }
  }
}
