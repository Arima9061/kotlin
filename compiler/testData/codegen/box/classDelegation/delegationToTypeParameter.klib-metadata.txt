library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Base
    // class name: BaseImpl
    // class name: BaseImpl2
    // class name: BaseImpl3
    // class name: BaseImpl4
    // class name: BaseImpl5
    // class name: BaseImpl6
    // class name: BaseImpl7
    // class name: BaseImpl8

    public abstract interface Base<T#0 /* T */> : kotlin/Any {

      public abstract fun foo(a: T#0): T#0
    }

    public final class BaseImpl : Base<kotlin/Int> {

      public constructor(a: Base<kotlin/Int>)

      public open /* delegation */ fun foo(a: kotlin/Int): kotlin/Int

      public final val a: Base<kotlin/Int>
        public final get
    }

    public final class BaseImpl2<T#0 /* D */> : Base<T#0> {

      public constructor(a: Base<T#0>)

      public open /* delegation */ fun foo(a: T#0): T#0

      public final val a: Base<T#0>
        public final get
    }

    public final class BaseImpl3<T#0 /* D */ : kotlin/Number> : Base<T#0> {

      public constructor(a: Base<T#0>)

      public open /* delegation */ fun foo(a: T#0): T#0

      public final val a: Base<T#0>
        public final get
    }

    public final class BaseImpl4<T#0 /* D */ : Base<kotlin/Int>> : Base<kotlin/Int> {

      public constructor(a: T#0)

      public open /* delegation */ fun foo(a: kotlin/Int): kotlin/Int

      public final val a: T#0
        public final get
    }

    public final class BaseImpl5<T#0 /* D */ : Base<T#0>> : Base<T#0> {

      public constructor(a: T#0)

      public open /* delegation */ fun foo(a: T#0): T#0

      public final val a: T#0
        public final get
    }

    public final class BaseImpl6<T#0 /* A */, T#1 /* D */ : Base<T#0>> : Base<T#0> {

      public constructor(a: T#1)

      public open /* delegation */ fun foo(a: T#0): T#0

      public final val a: T#1
        public final get
    }

    public final class BaseImpl7<T#0 /* A */, T#1 /* D */ : Base<Base<T#0>>> : Base<Base<T#0>> {

      public constructor(a: T#1)

      public open /* delegation */ fun foo(a: Base<T#0>): Base<T#0>

      public final val a: T#1
        public final get
    }

    public final class BaseImpl8<T#0 /* A */ : Base<*>, T#1 /* D */ : Base<T#0>> : Base<T#0> {

      public constructor(a: T#1)

      public open /* delegation */ fun foo(a: T#0): T#0

      public final val a: T#1
        public final get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
