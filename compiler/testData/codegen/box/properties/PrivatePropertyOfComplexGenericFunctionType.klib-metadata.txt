library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: State

    public final data class State<T#0 /* S */, out T#1 /* A */> : kotlin/Any {

      public constructor(action: kotlin/Function1<T#0, kotlin/Pair<T#1, T#0>>)

      private final /* synthesized */ operator fun component1(): kotlin/Function1<T#0, kotlin/Pair<T#1, T#0>>

      public final /* synthesized */ fun copy(action: kotlin/Function1<T#0, kotlin/Pair<T#1, T#0>> /* = ... */): State<T#0, T#1>

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public final fun <T#2 /* B */> flatMap(f: kotlin/Function1<T#1, State<T#0, T#2>>): State<T#0, T#2>

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      private final val action: kotlin/Function1<T#0, kotlin/Pair<T#1, T#0>>
        private final get
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
