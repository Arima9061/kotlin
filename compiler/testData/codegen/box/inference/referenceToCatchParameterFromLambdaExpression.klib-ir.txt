MODULE_FRAGMENT name:<main>
  FILE fqName:<root> fileName:/referenceToCatchParameterFromLambdaExpression.kt
    FUN name:test signature:/test|test(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun test (): <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> declared in <root>'
          TRY type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>
            try: BLOCK type=<unbound IrClassSymbolImpl> origin=null
              CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=null
            CATCH parameter=val e: <unbound IrClassSymbolImpl> [val] declared in <root>.test
              VAR CATCH_PARAMETER name:e type:<unbound IrClassSymbolImpl> [val]
              BLOCK type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=null
                FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=LAMBDA
                  FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
                    BLOCK_BODY
                      RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.test'
                        GET_VAR 'val e: <unbound IrClassSymbolImpl> [val] declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:exception type:<unbound IrClassSymbolImpl> [val]
          CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=INVOKE
            $this: CALL 'public final fun test (): <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> declared in <root>' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=null
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          WHEN type=<unbound IrClassSymbolImpl> origin=IF
            BRANCH
              if: TYPE_OP type=<unbound IrClassSymbolImpl> origin=INSTANCEOF typeOperand=<unbound IrClassSymbolImpl>
                GET_VAR 'val exception: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
              then: CONST String type=<unbound IrClassSymbolImpl> value="OK"
            BRANCH
              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
              then: STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                CONST String type=<unbound IrClassSymbolImpl> value="fail: "
                GET_VAR 'val exception: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
