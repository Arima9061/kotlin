library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: A
    // class name: B
    // class name: Consumer

    public abstract class A : kotlin/Any {

      public constructor(x: kotlin/Any?)

      public final val x: kotlin/Any?
        public final get
    }

    public final class B : A {

      public constructor()
    }

    public abstract interface Consumer<in T#0 /* T */> : kotlin/Any {
    }

    package {

      public final fun box(): kotlin/String

      public final fun <T#0 /* T */> buildConsumer(block: kotlin/Function1<Consumer<T#0>, kotlin/Unit>): kotlin/Any?

      public final fun expectConsumerString(x: Consumer<kotlin/String>): kotlin/Unit
    }
  }
}
