library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: MyFlow
    // class name: MyProducerScope

    public abstract interface MyFlow<out T#0 /* T */> : kotlin/Any {
    }

    public abstract interface MyProducerScope<in T#0 /* E */> : kotlin/Any {
    }

    package {

      public final fun box(): kotlin/String

      public final fun MyProducerScope<*>.myAwaitClose(block: kotlin/Function0<kotlin/Unit> /* = ... */): kotlin/Unit

      public final fun <T#0 /* T */> myCallbackFlow(block: @kotlin/ExtensionFunctionType kotlin/Function1<MyProducerScope<T#0>, kotlin/Unit>): MyFlow<T#0>

      public final fun <T#0 /* E */> myEmptyFlow(): MyFlow<T#0>

      public final fun <T#0 /* K */> select(x: T#0, y: T#0): T#0

      public final fun test(): MyFlow<kotlin/Int>
    }
  }
}
