library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: In
    // class name: InImpl

    public abstract interface In<in T#0 /* E */> : kotlin/Any {

      public abstract suspend fun send(element: T#0): kotlin/Unit
    }

    public final class InImpl<T#0 /* E */> : In<T#0> {

      public constructor(block: @kotlin/ExtensionFunctionType suspend kotlin/Function2<In<T#0>, kotlin/coroutines/Continuation<kotlin/Unit>, kotlin/Any?>)

      public open suspend fun send(element: T#0): kotlin/Unit

      public final val block: @kotlin/ExtensionFunctionType suspend kotlin/Function2<In<T#0>, kotlin/coroutines/Continuation<kotlin/Unit>, kotlin/Any?>
        public final get
    }

    package {

      public final fun box(): kotlin/String

      public final fun <T#0 /* T */> builder(block: @kotlin/ExtensionFunctionType suspend kotlin/Function2<In<T#0>, kotlin/coroutines/Continuation<kotlin/Unit>, kotlin/Any?>): kotlin/Unit

      public final fun test33542(): kotlin/Unit

      public final fun test33544(): kotlin/Unit
    }
  }
}
