MODULE_FRAGMENT name:<main>
  FILE fqName:<root> fileName:/insideElvis.kt
    FUN name:test signature:/test|test(kotlin.Int){}[0] visibility:public modality:FINAL <> (counter:<unbound IrClassSymbolImpl>) returnType:<unbound IrClassSymbolImpl>? [tailrec]
      VALUE_PARAMETER name:counter index:0 type:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        WHEN type=<unbound IrClassSymbolImpl> origin=IF
          BRANCH
            if: CALL 'public final fun less (arg0: <unbound IrClassSymbolImpl>, arg1: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=LT
              arg0: GET_VAR 'counter: <unbound IrClassSymbolImpl> declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
              arg1: CONST Int type=<unbound IrClassSymbolImpl> value=0
            then: RETURN type=<unbound IrClassSymbolImpl> from='public final fun test (counter: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl>? [tailrec] declared in <root>'
              CONST Null type=<unbound IrClassSymbolImpl>? value=null
        WHEN type=<unbound IrClassSymbolImpl> origin=IF
          BRANCH
            if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
              arg0: GET_VAR 'counter: <unbound IrClassSymbolImpl> declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
              arg1: CONST Int type=<unbound IrClassSymbolImpl> value=0
            then: RETURN type=<unbound IrClassSymbolImpl> from='public final fun test (counter: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl>? [tailrec] declared in <root>'
              CONST Int type=<unbound IrClassSymbolImpl> value=777
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun test (counter: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl>? [tailrec] declared in <root>'
          BLOCK type=<unbound IrClassSymbolImpl>? origin=ELVIS
            VAR IR_TEMPORARY_VARIABLE name:tmp1_elvis_lhs type:<unbound IrClassSymbolImpl>? [val]
              BLOCK type=<unbound IrClassSymbolImpl>? origin=ELVIS
                VAR IR_TEMPORARY_VARIABLE name:tmp0_elvis_lhs type:<unbound IrClassSymbolImpl>? [val]
                  CALL 'public final fun test (counter: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl>? [tailrec] declared in <root>' type=<unbound IrClassSymbolImpl>? origin=null
                    counter: CONST Int type=<unbound IrClassSymbolImpl> value=-1
                WHEN type=<unbound IrClassSymbolImpl>? origin=null
                  BRANCH
                    if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                      arg0: GET_VAR 'val tmp0_elvis_lhs: <unbound IrClassSymbolImpl>? [val] declared in <root>.test' type=<unbound IrClassSymbolImpl>? origin=null
                      arg1: CONST Null type=<unbound IrClassSymbolImpl>? value=null
                    then: CALL 'public final fun test (counter: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl>? [tailrec] declared in <root>' type=<unbound IrClassSymbolImpl>? origin=null
                      counter: CONST Int type=<unbound IrClassSymbolImpl> value=-2
                  BRANCH
                    if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                    then: GET_VAR 'val tmp0_elvis_lhs: <unbound IrClassSymbolImpl>? [val] declared in <root>.test' type=<unbound IrClassSymbolImpl>? origin=null
            WHEN type=<unbound IrClassSymbolImpl>? origin=null
              BRANCH
                if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                  arg0: GET_VAR 'val tmp1_elvis_lhs: <unbound IrClassSymbolImpl>? [val] declared in <root>.test' type=<unbound IrClassSymbolImpl>? origin=null
                  arg1: CONST Null type=<unbound IrClassSymbolImpl>? value=null
                then: CALL 'public final fun test (counter: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl>? [tailrec] declared in <root>' type=<unbound IrClassSymbolImpl>? origin=null
                  counter: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=MINUS
                    $this: GET_VAR 'counter: <unbound IrClassSymbolImpl> declared in <root>.test' type=<unbound IrClassSymbolImpl> origin=null
                    1: CONST Int type=<unbound IrClassSymbolImpl> value=1
              BRANCH
                if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                then: GET_VAR 'val tmp1_elvis_lhs: <unbound IrClassSymbolImpl>? [val] declared in <root>.test' type=<unbound IrClassSymbolImpl>? origin=null
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          WHEN type=<unbound IrClassSymbolImpl> origin=IF
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                arg0: CALL 'public final fun test (counter: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl>? [tailrec] declared in <root>' type=<unbound IrClassSymbolImpl>? origin=null
                  counter: CONST Int type=<unbound IrClassSymbolImpl> value=100000
                arg1: CONST Int type=<unbound IrClassSymbolImpl> value=777
              then: CONST String type=<unbound IrClassSymbolImpl> value="OK"
            BRANCH
              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
              then: CONST String type=<unbound IrClassSymbolImpl> value="FAIL"
