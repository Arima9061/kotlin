library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: A
    // class name: A.Companion
    // class name: B

    public abstract interface A<T#0 /* T */> : kotlin/Any {

      public open fun f(s: kotlin/String /* = ... */): T#0?

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object A.Companion : kotlin/Any {

      private constructor()

      private final val RESULT: kotlin/String /* = ... */
        private final get
    }

    public final class B : A<kotlin/String> {

      public constructor()
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
