library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Formatter
    // class name: JsonArray
    // class name: JsonFormatter
    // class name: JsonObject
    // class name: MultiFormatter
    // class name: Project
    // class name: ProjectJsonFormatter

    public abstract interface Formatter<in T#0 /* IN */ : kotlin/Any, out T#1 /* OUT */ : kotlin/Any> : kotlin/Any {

      public abstract fun format(source: T#0?): T#1
    }

    public final class JsonArray : kotlin/Any {

      public constructor()
    }

    public abstract interface JsonFormatter<in T#0 /* IN */ : kotlin/Any> : Formatter<T#0, JsonObject>, MultiFormatter<T#0, JsonArray> {

      public open fun format(source: kotlin/collections/Collection<T#0>): JsonArray
    }

    public final class JsonObject : kotlin/Any {

      public constructor()
    }

    public abstract interface MultiFormatter<in T#0 /* IN */ : kotlin/Any, out T#1 /* OUT */ : kotlin/Any> : kotlin/Any {

      public abstract fun format(source: kotlin/collections/Collection<T#0>): T#1
    }

    public final class Project : kotlin/Any {

      public constructor()
    }

    public final class ProjectJsonFormatter : JsonFormatter<Project> {

      public constructor()

      public open fun format(source: Project?): JsonObject
    }

    package {

      public final fun box(): kotlin/String
    }
  }
}
