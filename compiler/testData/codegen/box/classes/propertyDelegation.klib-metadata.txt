library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Abstract
    // class name: Base
    // class name: Derived1
    // class name: Derived2

    public abstract interface Abstract : kotlin/Any {
    }

    public open class Base : kotlin/Any {

      public constructor()

      public final val plain: kotlin/Int /* = ... */
        public final get

      public final val read: kotlin/Int
        public final /* non-default */ get

      public final var readwrite: kotlin/Int
        public final /* non-default */ get
        public final /* non-default */ set(n: kotlin/Int)
    }

    public final class Derived1 : Base, Abstract {

      public constructor()
    }

    public final class Derived2 : Abstract, Base {

      public constructor()
    }

    package {

      public final fun box(): kotlin/String

      public final fun code(s: Base): kotlin/Int

      public final fun test(s: Base): kotlin/Boolean
    }
  }
}
