// MODULE: lib
library {
  // module name: <lib>

  library fragment {
    // package name: <root>

    // class name: A
    // class name: Annotation
    // class name: AnnotationWithAnnotation
    // class name: AnnotationWithAnnotationWithAnnotation
    // class name: B

    @AnnotationWithAnnotation(anno = Annotation(str = "String"))
    public final class A : kotlin/Any {

      public constructor()
    }

    @kotlin/annotation/Target(allowedTargets = [kotlin/annotation/AnnotationTarget.CLASS])
    @kotlin/annotation/Retention(value = kotlin/annotation/AnnotationRetention.BINARY)
    public final annotation class Annotation : kotlin/Annotation {

      public constructor(str: kotlin/String)

      public final val str: kotlin/String
        public final get
    }

    @kotlin/annotation/Target(allowedTargets = [kotlin/annotation/AnnotationTarget.CLASS])
    @kotlin/annotation/Retention(value = kotlin/annotation/AnnotationRetention.BINARY)
    public final annotation class AnnotationWithAnnotation : kotlin/Annotation {

      public constructor(anno: Annotation)

      public final val anno: Annotation
        public final get
    }

    @kotlin/annotation/Target(allowedTargets = [kotlin/annotation/AnnotationTarget.CLASS])
    @kotlin/annotation/Retention(value = kotlin/annotation/AnnotationRetention.BINARY)
    public final annotation class AnnotationWithAnnotationWithAnnotation : kotlin/Annotation {

      public constructor(anno: AnnotationWithAnnotation)

      public final val anno: AnnotationWithAnnotation
        public final get
    }

    @AnnotationWithAnnotationWithAnnotation(anno = AnnotationWithAnnotation(anno = Annotation(str = "String")))
    public final class B : kotlin/Any {

      public constructor()
    }
  }
}

// MODULE: main
library {
  // module name: <main>

  library fragment {
    // package name: <root>

    package {

      public final fun box(): kotlin/String
    }
  }
}
