library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Bound
    // class name: CompilerPhase
    // class name: CompositePhase

    public abstract interface Bound : kotlin/Any {
    }

    public abstract interface CompilerPhase<in T#0 /* X1 */ : Bound, T#1 /* Y1 */> : kotlin/Any {
    }

    private final class CompositePhase<T#0 /* X2 */ : Bound, T#1 /* Y2 */> : CompilerPhase<T#0, T#1> {

      public constructor(foo: kotlin/String)

      public final val foo: kotlin/String
        public final get
    }

    package {

      public final fun <T#0 /* X3 */ : Bound, T#1 /* Y3 */> CompilerPhase<T#0, T#1>.bar(): kotlin/String

      public final fun box(): kotlin/String
    }
  }
}
