MODULE_FRAGMENT name:<main>
  FILE fqName:test fileName:/1.kt
    FUN name:foo signature:test/foo|foo(kotlin.LongArray...;kotlin.String){}[0] visibility:public modality:FINAL <> (l:<unbound IrClassSymbolImpl>, s:<unbound IrClassSymbolImpl>) returnType:<unbound IrClassSymbolImpl> [inline]
      VALUE_PARAMETER name:l index:0 type:<unbound IrClassSymbolImpl> varargElementType:<unbound IrClassSymbolImpl> [vararg]
      VALUE_PARAMETER name:s index:1 type:<unbound IrClassSymbolImpl>
        EXPRESSION_BODY
          CONST String type=<unbound IrClassSymbolImpl> value="OK"
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun foo (vararg l: <unbound IrClassSymbolImpl>, s: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> [inline] declared in test'
          WHEN type=<unbound IrClassSymbolImpl> origin=IF
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                arg0: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=GET_PROPERTY
                  $this: GET_VAR 'l: <unbound IrClassSymbolImpl> [vararg] declared in test.foo' type=<unbound IrClassSymbolImpl> origin=null
                arg1: CONST Int type=<unbound IrClassSymbolImpl> value=0
              then: GET_VAR 's: <unbound IrClassSymbolImpl> declared in test.foo' type=<unbound IrClassSymbolImpl> origin=null
            BRANCH
              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
              then: CONST String type=<unbound IrClassSymbolImpl> value="Fail"
    FUN name:bar signature:test/bar|bar(kotlin.Function0<kotlin.String>){}[0] visibility:public modality:FINAL <> (f:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>) returnType:<unbound IrClassSymbolImpl> [inline]
      VALUE_PARAMETER name:f index:0 type:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun bar (f: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>): <unbound IrClassSymbolImpl> [inline] declared in test'
          CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=INVOKE
            $this: GET_VAR 'f: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> declared in test.bar' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=VARIABLE_AS_FUNCTION
  FILE fqName:<root> fileName:/2.kt
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          CALL 'public final fun bar (f: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>): <unbound IrClassSymbolImpl> [inline] declared in test' type=<unbound IrClassSymbolImpl> origin=null
            f: BLOCK type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=ADAPTED_FUNCTION_REFERENCE
              FUN ADAPTER_FOR_CALLABLE_REFERENCE name:foo visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl> [inline]
                BLOCK_BODY
                  RETURN type=<unbound IrClassSymbolImpl> from='local final fun foo (): <unbound IrClassSymbolImpl> [inline] declared in <root>.box'
                    CALL 'public final fun foo (vararg l: <unbound IrClassSymbolImpl>, s: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> [inline] declared in test' type=<unbound IrClassSymbolImpl> origin=null
              FUNCTION_REFERENCE 'local final fun foo (): <unbound IrClassSymbolImpl> [inline] declared in <root>.box' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=ADAPTED_FUNCTION_REFERENCE reflectionTarget=public final fun foo (vararg l: <unbound IrClassSymbolImpl>, s: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> [inline] declared in test
