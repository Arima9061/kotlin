MODULE_FRAGMENT name:<main>
  FILE fqName:test fileName:/1.kt
    FUN name:with2 signature:test/with2|with2(0:0;kotlin.Function1<0:0,kotlin.String>){0ยง<kotlin.Any?>}[0] visibility:public modality:FINAL <T> (receiver:T of test.with2, body:@[<unbound>] <unbound IrClassSymbolImpl><T of test.with2, <unbound IrClassSymbolImpl>>) returnType:<unbound IrClassSymbolImpl> [inline]
      TYPE_PARAMETER name:T index:0 variance: signature:[ test/with2|with2(0:0;kotlin.Function1<0:0,kotlin.String>){0ยง<kotlin.Any?>}[0] <- Local[<TP>,0|TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any?] reified:false] ] superTypes:[<unbound IrClassSymbolImpl>?] reified:false
      VALUE_PARAMETER name:receiver index:0 type:T of test.with2
      VALUE_PARAMETER name:body index:1 type:@[<unbound>] <unbound IrClassSymbolImpl><T of test.with2, <unbound IrClassSymbolImpl>>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun with2 <T> (receiver: T of test.with2, body: @[<unbound>] <unbound IrClassSymbolImpl><T of test.with2, <unbound IrClassSymbolImpl>>): <unbound IrClassSymbolImpl> [inline] declared in test'
          CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=INVOKE
            $this: GET_VAR 'body: @[<unbound>] <unbound IrClassSymbolImpl><T of test.with2, <unbound IrClassSymbolImpl>> declared in test.with2' type=@[<unbound>] <unbound IrClassSymbolImpl><T of test.with2, <unbound IrClassSymbolImpl>> origin=VARIABLE_AS_FUNCTION
            1: GET_VAR 'receiver: T of test.with2 declared in test.with2' type=T of test.with2 origin=null
  FILE fqName:<root> fileName:/2.kt
    FUN name:test signature:/test|test(0:0?;kotlin.Function1<0:0,kotlin.String>){0ยง<kotlin.Any>}[0] visibility:public modality:FINAL <T> (item:T of <root>.test?, defaultLink:@[<unbound>] <unbound IrClassSymbolImpl><T of <root>.test, <unbound IrClassSymbolImpl>>) returnType:<unbound IrClassSymbolImpl> [inline]
      TYPE_PARAMETER name:T index:0 variance: signature:[ /test|test(0:0?;kotlin.Function1<0:0,kotlin.String>){0ยง<kotlin.Any>}[0] <- Local[<TP>,0|TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any] reified:false] ] superTypes:[<unbound IrClassSymbolImpl>] reified:false
      VALUE_PARAMETER name:item index:0 type:T of <root>.test?
      VALUE_PARAMETER name:defaultLink index:1 type:@[<unbound>] <unbound IrClassSymbolImpl><T of <root>.test, <unbound IrClassSymbolImpl>>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun test <T> (item: T of <root>.test?, defaultLink: @[<unbound>] <unbound IrClassSymbolImpl><T of <root>.test, <unbound IrClassSymbolImpl>>): <unbound IrClassSymbolImpl> [inline] declared in <root>'
          CALL 'public final fun with2 <T> (receiver: T of test.with2, body: @[<unbound>] <unbound IrClassSymbolImpl><T of test.with2, <unbound IrClassSymbolImpl>>): <unbound IrClassSymbolImpl> [inline] declared in test' type=<unbound IrClassSymbolImpl> origin=null
            <T>: <unbound IrClassSymbolImpl>
            receiver: CONST String type=<unbound IrClassSymbolImpl> value=""
            body: FUN_EXPR type=@[<unbound>] <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>, <unbound IrClassSymbolImpl>> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> ($receiver:<unbound IrClassSymbolImpl>) returnType:<unbound IrClassSymbolImpl>
                $receiver: VALUE_PARAMETER name:$this$with2 type:<unbound IrClassSymbolImpl>
                BLOCK_BODY
                  RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.test'
                    BLOCK type=<unbound IrClassSymbolImpl> origin=ELVIS
                      VAR IR_TEMPORARY_VARIABLE name:tmp1_elvis_lhs type:<unbound IrClassSymbolImpl>? [val]
                        BLOCK type=<unbound IrClassSymbolImpl>? origin=SAFE_CALL
                          VAR IR_TEMPORARY_VARIABLE name:tmp0_safe_receiver type:T of <root>.test? [val]
                            GET_VAR 'item: T of <root>.test? declared in <root>.test' type=T of <root>.test? origin=null
                          WHEN type=<unbound IrClassSymbolImpl>? origin=null
                            BRANCH
                              if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                                arg0: GET_VAR 'val tmp0_safe_receiver: T of <root>.test? [val] declared in <root>.test.<anonymous>' type=T of <root>.test? origin=null
                                arg1: CONST Null type=<unbound IrClassSymbolImpl>? value=null
                              then: CONST Null type=<unbound IrClassSymbolImpl>? value=null
                            BRANCH
                              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                              then: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=INVOKE
                                $this: GET_VAR 'defaultLink: @[<unbound>] <unbound IrClassSymbolImpl><T of <root>.test, <unbound IrClassSymbolImpl>> declared in <root>.test' type=@[<unbound>] <unbound IrClassSymbolImpl><T of <root>.test, <unbound IrClassSymbolImpl>> origin=VARIABLE_AS_FUNCTION
                                1: GET_VAR 'val tmp0_safe_receiver: T of <root>.test? [val] declared in <root>.test.<anonymous>' type=T of <root>.test? origin=null
                      WHEN type=<unbound IrClassSymbolImpl> origin=null
                        BRANCH
                          if: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                            arg0: GET_VAR 'val tmp1_elvis_lhs: <unbound IrClassSymbolImpl>? [val] declared in <root>.test.<anonymous>' type=<unbound IrClassSymbolImpl>? origin=null
                            arg1: CONST Null type=<unbound IrClassSymbolImpl>? value=null
                          then: CONST String type=<unbound IrClassSymbolImpl> value="fail"
                        BRANCH
                          if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                          then: GET_VAR 'val tmp1_elvis_lhs: <unbound IrClassSymbolImpl>? [val] declared in <root>.test.<anonymous>' type=<unbound IrClassSymbolImpl>? origin=null
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          CALL 'public final fun test <T> (item: T of <root>.test?, defaultLink: @[<unbound>] <unbound IrClassSymbolImpl><T of <root>.test, <unbound IrClassSymbolImpl>>): <unbound IrClassSymbolImpl> [inline] declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
            <T>: <unbound IrClassSymbolImpl>
            item: CONST String type=<unbound IrClassSymbolImpl> value="O"
            defaultLink: FUN_EXPR type=@[<unbound>] <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>, <unbound IrClassSymbolImpl>> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> ($receiver:<unbound IrClassSymbolImpl>) returnType:<unbound IrClassSymbolImpl>
                $receiver: VALUE_PARAMETER name:$this$test type:<unbound IrClassSymbolImpl>
                BLOCK_BODY
                  RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.box'
                    CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                      $this: GET_VAR '$this$test: <unbound IrClassSymbolImpl> declared in <root>.box.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
                      1: CONST String type=<unbound IrClassSymbolImpl> value="K"
