library {
  // module name: <main>

  library fragment {
    // package name: <root>

    package {

      public final fun box(): kotlin/String

      public final fun test/Data.test1(d: test/Data): kotlin/Long

      public final fun test/Data.test2(d: test/Data): kotlin/Long
    }
  }

  library fragment {
    // package name: test

    // class name: test/Closeable
    // class name: test/Data
    // class name: test/Input
    // class name: test/Output

    public abstract interface test/Closeable : kotlin/Any {

      public open fun close(): kotlin/Unit
    }

    public final class test/Data : kotlin/Any {

      public constructor()
    }

    public final class test/Input : test/Closeable {

      public constructor(d: test/Data)

      public final fun data(): kotlin/Int

      public final val d: test/Data
        public final get
    }

    public final class test/Output : test/Closeable {

      public constructor(d: test/Data)

      public final fun doOutput(data: kotlin/Int): kotlin/Int

      public final val d: test/Data
        public final get
    }

    package {

      public final fun test/Input.copyTo(output: test/Output, size: kotlin/Int): kotlin/Long

      public final inline fun <T#0 /* R */> use(block: kotlin/Function0<T#0>): T#0

      public final fun <T#0 /* R */> useNoInline(block: kotlin/Function0<T#0>): T#0

      public final inline fun <T#0 /* T */> with2(receiver: T#0, crossinline body: @kotlin/ExtensionFunctionType kotlin/Function1<T#0, kotlin/Unit>): kotlin/Unit
    }
  }
}
