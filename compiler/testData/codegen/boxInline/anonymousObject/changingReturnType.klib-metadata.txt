library {
  // module name: <main>

  library fragment {
    // package name: <root>

    package {

      public final fun box(): kotlin/String
    }
  }

  library fragment {
    // package name: test

    // class name: test/Entity
    // class name: test/Task

    public open class test/Entity : kotlin/Any {

      public constructor(value: kotlin/String)

      public final val value: kotlin/String
        public final get
    }

    public abstract class test/Task<T#0 /* T */> : kotlin/Any {

      public constructor()

      public abstract fun calc(): T#0
    }

    package {

      public final inline fun <reified T#0 /* Self */ : test/Entity> T#0.directed(): test/Task<T#0>

      public final fun <T#0 /* Self */ : test/Entity> nullableTask(factory: kotlin/Function0<test/Task<T#0>>): test/Task<T#0>
    }
  }
}
