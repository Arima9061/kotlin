library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: StringWrapper
    // class name: TestClass

    public final class StringWrapper : kotlin/Any {

      public constructor(s: kotlin/String)

      public final inline fun testApplyToDispatchReceiver(block: @kotlin/ExtensionFunctionType kotlin/Function1<StringWrapper, kotlin/Unit>): kotlin/String

      public final val s: kotlin/String
        public final get
    }

    public final class TestClass : kotlin/Any {

      public constructor()

      public final val testArg0: kotlin/String
        public final get

      public final val testChain: kotlin/String
        public final get

      public final val testDispatchReceiver: kotlin/String
        public final get

      public final val testExtensionReceiver: kotlin/String
        public final get
    }

    package {

      public final fun box(): kotlin/String

      public final fun functionWithLambda(f: kotlin/Function1<StringWrapper, StringWrapper>): StringWrapper

      public final fun functionWithLambda(f: kotlin/Function1<kotlin/String, kotlin/String>): kotlin/String

      public final fun <T#0 /* T */> genericFunctionWithLambda(f: kotlin/Function0<T#0>): T#0

      public final inline fun <T#0 /* T */> testApplyToArg0(args: T#0, block: @kotlin/ExtensionFunctionType kotlin/Function1<T#0, kotlin/Unit>): T#0

      public final inline fun <T#0 /* T */> T#0.testApplyToExtensionReceiver(block: @kotlin/ExtensionFunctionType kotlin/Function1<T#0, kotlin/Unit>): T#0

      public final inline fun <T#0 /* T */, T#1 /* R */> T#0.testLet(block: kotlin/Function1<T#0, T#1>): T#1
    }
  }
}
