MODULE_FRAGMENT name:<main>
  FILE fqName:test fileName:/1.kt
    CLASS CLASS name:Holder signature:test/Holder|null[0] modality:FINAL visibility:public superTypes:[<unbound IrClassSymbolImpl>]
      $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:test.Holder
      CONSTRUCTOR signature:test/Holder.<init>|<init>(kotlin.String){}[0] visibility:public <> (value:<unbound IrClassSymbolImpl>) returnType:test.Holder [primary]
        VALUE_PARAMETER name:value index:0 type:<unbound IrClassSymbolImpl>
          EXPRESSION_BODY
            CONST String type=<unbound IrClassSymbolImpl> value=""
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'UNBOUND IrConstructorSymbolImpl'
          INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:Holder signature:test/Holder|null[0] modality:FINAL visibility:public superTypes:[<unbound IrClassSymbolImpl>]'
      PROPERTY name:value signature:test/Holder.value|{}value[0] visibility:public modality:FINAL [var]
        FIELD PROPERTY_BACKING_FIELD name:value signature:[ test/Holder.value|{}value[0] <- Local[<BF>|FIELD PROPERTY_BACKING_FIELD name:value type:kotlin.String visibility:private] ] type:<unbound IrClassSymbolImpl> visibility:private
          EXPRESSION_BODY
            GET_VAR 'value: <unbound IrClassSymbolImpl> declared in test.Holder.<init>' type=<unbound IrClassSymbolImpl> origin=INITIALIZE_PROPERTY_FROM_PARAMETER
        FUN DEFAULT_PROPERTY_ACCESSOR name:<get-value> signature:test/Holder.value.<get-value>|<get-value>(){}[0] visibility:public modality:FINAL <> ($this:test.Holder) returnType:<unbound IrClassSymbolImpl>
          correspondingProperty: PROPERTY name:value signature:test/Holder.value|{}value[0] visibility:public modality:FINAL [var]
          $this: VALUE_PARAMETER name:<this> type:test.Holder
          BLOCK_BODY
            RETURN type=<unbound IrClassSymbolImpl> from='public final fun <get-value> (): <unbound IrClassSymbolImpl> declared in test.Holder'
              GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:value signature:[ test/Holder.value|{}value[0] <- Local[<BF>|FIELD PROPERTY_BACKING_FIELD name:value type:kotlin.String visibility:private] ] type:<unbound IrClassSymbolImpl> visibility:private' type=<unbound IrClassSymbolImpl> origin=null
                receiver: GET_VAR '<this>: test.Holder declared in test.Holder.<get-value>' type=test.Holder origin=null
        FUN DEFAULT_PROPERTY_ACCESSOR name:<set-value> signature:test/Holder.value.<set-value>|<set-value>(kotlin.String){}[0] visibility:public modality:FINAL <> ($this:test.Holder, <set-?>:<unbound IrClassSymbolImpl>) returnType:<unbound IrClassSymbolImpl>
          correspondingProperty: PROPERTY name:value signature:test/Holder.value|{}value[0] visibility:public modality:FINAL [var]
          $this: VALUE_PARAMETER name:<this> type:test.Holder
          VALUE_PARAMETER name:<set-?> index:0 type:<unbound IrClassSymbolImpl>
          BLOCK_BODY
            SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:value signature:[ test/Holder.value|{}value[0] <- Local[<BF>|FIELD PROPERTY_BACKING_FIELD name:value type:kotlin.String visibility:private] ] type:<unbound IrClassSymbolImpl> visibility:private' type=<unbound IrClassSymbolImpl> origin=null
              receiver: GET_VAR '<this>: test.Holder declared in test.Holder.<set-value>' type=test.Holder origin=null
              value: GET_VAR '<set-?>: <unbound IrClassSymbolImpl> declared in test.Holder.<set-value>' type=<unbound IrClassSymbolImpl> origin=null
      FUN name:plusAssign signature:test/Holder.plusAssign|plusAssign(kotlin.String?){}[0] visibility:public modality:FINAL <> ($this:test.Holder, s:<unbound IrClassSymbolImpl>?) returnType:<unbound IrClassSymbolImpl> [operator]
        $this: VALUE_PARAMETER name:<this> type:test.Holder
        VALUE_PARAMETER name:s index:0 type:<unbound IrClassSymbolImpl>?
        BLOCK_BODY
          WHEN type=<unbound IrClassSymbolImpl> origin=IF
            BRANCH
              if: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                  arg0: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=GET_PROPERTY
                    $this: CALL 'public final fun <get-value> (): <unbound IrClassSymbolImpl> declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=GET_PROPERTY
                      $this: GET_VAR '<this>: test.Holder declared in test.Holder.plusAssign' type=test.Holder origin=null
                  arg1: CONST Int type=<unbound IrClassSymbolImpl> value=0
              then: BLOCK type=<unbound IrClassSymbolImpl> origin=null
                CALL 'public final fun <set-value> (<set-?>: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                  $this: GET_VAR '<this>: test.Holder declared in test.Holder.plusAssign' type=test.Holder origin=null
                  <set-?>: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                    $this: CALL 'public final fun <get-value> (): <unbound IrClassSymbolImpl> declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                      $this: GET_VAR '<this>: test.Holder declared in test.Holder.plusAssign' type=test.Holder origin=null
                    1: CONST String type=<unbound IrClassSymbolImpl> value=" -> "
          CALL 'public final fun <set-value> (<set-?>: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
            $this: GET_VAR '<this>: test.Holder declared in test.Holder.plusAssign' type=test.Holder origin=null
            <set-?>: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
              $this: CALL 'public final fun <get-value> (): <unbound IrClassSymbolImpl> declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                $this: GET_VAR '<this>: test.Holder declared in test.Holder.plusAssign' type=test.Holder origin=null
              1: GET_VAR 's: <unbound IrClassSymbolImpl>? declared in test.Holder.plusAssign' type=<unbound IrClassSymbolImpl>? origin=null
      FUN name:toString signature:test/Holder.toString|toString(){}[0] visibility:public modality:OPEN <> ($this:test.Holder) returnType:<unbound IrClassSymbolImpl>
        overridden:
          UNBOUND IrSimpleFunctionSymbolImpl
        $this: VALUE_PARAMETER name:<this> type:test.Holder
        BLOCK_BODY
          RETURN type=<unbound IrClassSymbolImpl> from='public open fun toString (): <unbound IrClassSymbolImpl> declared in test.Holder'
            CALL 'public final fun <get-value> (): <unbound IrClassSymbolImpl> declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=GET_PROPERTY
              $this: GET_VAR '<this>: test.Holder declared in test.Holder.toString' type=test.Holder origin=null
    CLASS CLASS name:Exception1 signature:test/Exception1|null[0] modality:FINAL visibility:public superTypes:[<unbound IrClassSymbolImpl>]
      $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:test.Exception1
      CONSTRUCTOR signature:test/Exception1.<init>|<init>(kotlin.String){}[0] visibility:public <> (message:<unbound IrClassSymbolImpl>) returnType:test.Exception1 [primary]
        VALUE_PARAMETER name:message index:0 type:<unbound IrClassSymbolImpl>
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'UNBOUND IrConstructorSymbolImpl'
            1: GET_VAR 'message: <unbound IrClassSymbolImpl> declared in test.Exception1.<init>' type=<unbound IrClassSymbolImpl> origin=null
          INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:Exception1 signature:test/Exception1|null[0] modality:FINAL visibility:public superTypes:[<unbound IrClassSymbolImpl>]'
    CLASS CLASS name:Exception2 signature:test/Exception2|null[0] modality:FINAL visibility:public superTypes:[<unbound IrClassSymbolImpl>]
      $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:test.Exception2
      CONSTRUCTOR signature:test/Exception2.<init>|<init>(kotlin.String){}[0] visibility:public <> (message:<unbound IrClassSymbolImpl>) returnType:test.Exception2 [primary]
        VALUE_PARAMETER name:message index:0 type:<unbound IrClassSymbolImpl>
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'UNBOUND IrConstructorSymbolImpl'
            1: GET_VAR 'message: <unbound IrClassSymbolImpl> declared in test.Exception2.<init>' type=<unbound IrClassSymbolImpl> origin=null
          INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:Exception2 signature:test/Exception2|null[0] modality:FINAL visibility:public superTypes:[<unbound IrClassSymbolImpl>]'
    FUN name:doCall signature:test/doCall|doCall(kotlin.Function0<kotlin.String>;kotlin.Function0<kotlin.String>;kotlin.Function0<kotlin.String>;kotlin.Function0<kotlin.String>;kotlin.String){}[0] visibility:public modality:FINAL <> (block:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>, finallyBlock:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>, tryBlock2:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>, catchBlock2:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>, res:<unbound IrClassSymbolImpl>) returnType:<unbound IrClassSymbolImpl> [inline]
      VALUE_PARAMETER name:block index:0 type:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>
      VALUE_PARAMETER name:finallyBlock index:1 type:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>
      VALUE_PARAMETER name:tryBlock2 index:2 type:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>
      VALUE_PARAMETER name:catchBlock2 index:3 type:<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>
      VALUE_PARAMETER name:res index:4 type:<unbound IrClassSymbolImpl>
        EXPRESSION_BODY
          CONST String type=<unbound IrClassSymbolImpl> value="Fail"
      BLOCK_BODY
        TYPE_OP type=<unbound IrClassSymbolImpl> origin=IMPLICIT_COERCION_TO_UNIT typeOperand=<unbound IrClassSymbolImpl>
          TRY type=<unbound IrClassSymbolImpl>
            try: BLOCK type=<unbound IrClassSymbolImpl> origin=null
              CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=INVOKE
                $this: GET_VAR 'block: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> declared in test.doCall' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=VARIABLE_AS_FUNCTION
            finally: BLOCK type=<unbound IrClassSymbolImpl> origin=null
              TYPE_OP type=<unbound IrClassSymbolImpl> origin=IMPLICIT_COERCION_TO_UNIT typeOperand=<unbound IrClassSymbolImpl>
                CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=INVOKE
                  $this: GET_VAR 'finallyBlock: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> declared in test.doCall' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=VARIABLE_AS_FUNCTION
              TYPE_OP type=<unbound IrClassSymbolImpl> origin=IMPLICIT_COERCION_TO_UNIT typeOperand=<unbound IrClassSymbolImpl>
                TRY type=<unbound IrClassSymbolImpl>
                  try: BLOCK type=<unbound IrClassSymbolImpl> origin=null
                    CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=INVOKE
                      $this: GET_VAR 'tryBlock2: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> declared in test.doCall' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=VARIABLE_AS_FUNCTION
                  CATCH parameter=val e: <unbound IrClassSymbolImpl> [val] declared in test.doCall
                    VAR CATCH_PARAMETER name:e type:<unbound IrClassSymbolImpl> [val]
                    BLOCK type=<unbound IrClassSymbolImpl> origin=null
                      CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=INVOKE
                        $this: GET_VAR 'catchBlock2: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> declared in test.doCall' type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=VARIABLE_AS_FUNCTION
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun doCall (block: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>, finallyBlock: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>, tryBlock2: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>, catchBlock2: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>, res: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> [inline] declared in test'
          GET_VAR 'res: <unbound IrClassSymbolImpl> declared in test.doCall' type=<unbound IrClassSymbolImpl> origin=null
  FILE fqName:<root> fileName:/2.kt
    FUN name:test0 signature:/test0|test0(test.Holder;kotlin.Boolean;kotlin.String){}[0] visibility:public modality:FINAL <> (h:test.Holder, throwExternalFinEx1:<unbound IrClassSymbolImpl>, res:<unbound IrClassSymbolImpl>) returnType:<unbound IrClassSymbolImpl>
      VALUE_PARAMETER name:h index:0 type:test.Holder
      VALUE_PARAMETER name:throwExternalFinEx1 index:1 type:<unbound IrClassSymbolImpl>
        EXPRESSION_BODY
          CONST Boolean type=<unbound IrClassSymbolImpl> value=false
      VALUE_PARAMETER name:res index:2 type:<unbound IrClassSymbolImpl>
        EXPRESSION_BODY
          CONST String type=<unbound IrClassSymbolImpl> value="Fail"
      BLOCK_BODY
        TRY type=<unbound IrClassSymbolImpl>
          try: BLOCK type=<unbound IrClassSymbolImpl> origin=null
            VAR name:localResult type:<unbound IrClassSymbolImpl> [val]
              CALL 'public final fun doCall (block: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>, finallyBlock: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>, tryBlock2: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>, catchBlock2: <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>>, res: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> [inline] declared in test' type=<unbound IrClassSymbolImpl> origin=null
                block: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=LAMBDA
                  FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
                    BLOCK_BODY
                      CALL 'public final fun plusAssign (s: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> [operator] declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                        $this: GET_VAR 'h: test.Holder declared in <root>.test0' type=test.Holder origin=PLUSEQ
                        s: CONST String type=<unbound IrClassSymbolImpl> value="OK_NON_LOCAL"
                      RETURN type=<unbound IrClassSymbolImpl> from='public final fun test0 (h: test.Holder, throwExternalFinEx1: <unbound IrClassSymbolImpl>, res: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in <root>'
                        CONST String type=<unbound IrClassSymbolImpl> value="OK_NON_LOCAL"
                finallyBlock: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=LAMBDA
                  FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
                    BLOCK_BODY
                      CALL 'public final fun plusAssign (s: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> [operator] declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                        $this: GET_VAR 'h: test.Holder declared in <root>.test0' type=test.Holder origin=PLUSEQ
                        s: CONST String type=<unbound IrClassSymbolImpl> value="OK_FINALLY1"
                      RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.test0'
                        CONST String type=<unbound IrClassSymbolImpl> value="OK_FINALLY1"
                tryBlock2: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=LAMBDA
                  FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
                    BLOCK_BODY
                      CALL 'public final fun plusAssign (s: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> [operator] declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                        $this: GET_VAR 'h: test.Holder declared in <root>.test0' type=test.Holder origin=PLUSEQ
                        s: CONST String type=<unbound IrClassSymbolImpl> value="innerTryBlock"
                      WHEN type=<unbound IrClassSymbolImpl> origin=IF
                        BRANCH
                          if: GET_VAR 'throwExternalFinEx1: <unbound IrClassSymbolImpl> declared in <root>.test0' type=<unbound IrClassSymbolImpl> origin=null
                          then: BLOCK type=<unbound IrClassSymbolImpl> origin=null
                            THROW type=<unbound IrClassSymbolImpl>
                              CONSTRUCTOR_CALL 'public constructor <init> (message: <unbound IrClassSymbolImpl>) [primary] declared in test.Exception1' type=test.Exception1 origin=null
                                message: CONST String type=<unbound IrClassSymbolImpl> value="EXCEPTION_IN_EXTERNAL_FINALLY"
                      RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.test0'
                        CONST String type=<unbound IrClassSymbolImpl> value="innerTryBlock"
                catchBlock2: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=LAMBDA
                  FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
                    BLOCK_BODY
                      CALL 'public final fun plusAssign (s: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> [operator] declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=PLUSEQ
                        $this: GET_VAR 'h: test.Holder declared in <root>.test0' type=test.Holder origin=PLUSEQ
                        s: CONST String type=<unbound IrClassSymbolImpl> value="CATCHBLOCK"
                      RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.test0'
                        CONST String type=<unbound IrClassSymbolImpl> value="CATCHBLOCK"
                res: GET_VAR 'res: <unbound IrClassSymbolImpl> declared in <root>.test0' type=<unbound IrClassSymbolImpl> origin=null
            RETURN type=<unbound IrClassSymbolImpl> from='public final fun test0 (h: test.Holder, throwExternalFinEx1: <unbound IrClassSymbolImpl>, res: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in <root>'
              GET_VAR 'val localResult: <unbound IrClassSymbolImpl> [val] declared in <root>.test0' type=<unbound IrClassSymbolImpl> origin=null
          CATCH parameter=val e: test.Exception1 [val] declared in <root>.test0
            VAR CATCH_PARAMETER name:e type:test.Exception1 [val]
            BLOCK type=<unbound IrClassSymbolImpl> origin=null
              RETURN type=<unbound IrClassSymbolImpl> from='public final fun test0 (h: test.Holder, throwExternalFinEx1: <unbound IrClassSymbolImpl>, res: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in <root>'
                CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEXCL
                  <T0>: <unbound IrClassSymbolImpl>
                  arg0: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl>? origin=GET_PROPERTY
                    $this: GET_VAR 'val e: test.Exception1 [val] declared in <root>.test0' type=test.Exception1 origin=null
          CATCH parameter=val e: test.Exception2 [val] declared in <root>.test0
            VAR CATCH_PARAMETER name:e type:test.Exception2 [val]
            BLOCK type=<unbound IrClassSymbolImpl> origin=null
              RETURN type=<unbound IrClassSymbolImpl> from='public final fun test0 (h: test.Holder, throwExternalFinEx1: <unbound IrClassSymbolImpl>, res: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in <root>'
                CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEXCL
                  <T0>: <unbound IrClassSymbolImpl>
                  arg0: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl>? origin=GET_PROPERTY
                    $this: GET_VAR 'val e: test.Exception2 [val] declared in <root>.test0' type=test.Exception2 origin=null
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:h type:test.Holder [var]
          CONSTRUCTOR_CALL 'public constructor <init> (value: <unbound IrClassSymbolImpl>) [primary] declared in test.Holder' type=test.Holder origin=null
        VAR name:test0 type:<unbound IrClassSymbolImpl> [var]
          CALL 'public final fun test0 (h: test.Holder, throwExternalFinEx1: <unbound IrClassSymbolImpl>, res: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
            h: GET_VAR 'var h: test.Holder [var] declared in <root>.box' type=test.Holder origin=null
            res: CONST String type=<unbound IrClassSymbolImpl> value="OK"
        WHEN type=<unbound IrClassSymbolImpl> origin=IF
          BRANCH
            if: WHEN type=<unbound IrClassSymbolImpl> origin=OROR
              BRANCH
                if: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                  $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                    arg0: GET_VAR 'var test0: <unbound IrClassSymbolImpl> [var] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                    arg1: CONST String type=<unbound IrClassSymbolImpl> value="OK_NON_LOCAL"
                then: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
              BRANCH
                if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                then: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                  $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                    arg0: CALL 'public final fun <get-value> (): <unbound IrClassSymbolImpl> declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=GET_PROPERTY
                      $this: GET_VAR 'var h: test.Holder [var] declared in <root>.box' type=test.Holder origin=null
                    arg1: CONST String type=<unbound IrClassSymbolImpl> value="OK_NON_LOCAL -> OK_FINALLY1 -> innerTryBlock"
            then: RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
              STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                CONST String type=<unbound IrClassSymbolImpl> value="test0_1: "
                GET_VAR 'var test0: <unbound IrClassSymbolImpl> [var] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                CONST String type=<unbound IrClassSymbolImpl> value=", holder: "
                CALL 'public final fun <get-value> (): <unbound IrClassSymbolImpl> declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=GET_PROPERTY
                  $this: GET_VAR 'var h: test.Holder [var] declared in <root>.box' type=test.Holder origin=null
        SET_VAR 'var h: test.Holder [var] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=EQ
          CONSTRUCTOR_CALL 'public constructor <init> (value: <unbound IrClassSymbolImpl>) [primary] declared in test.Holder' type=test.Holder origin=null
        SET_VAR 'var test0: <unbound IrClassSymbolImpl> [var] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=EQ
          CALL 'public final fun test0 (h: test.Holder, throwExternalFinEx1: <unbound IrClassSymbolImpl>, res: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in <root>' type=<unbound IrClassSymbolImpl> origin=null
            h: GET_VAR 'var h: test.Holder [var] declared in <root>.box' type=test.Holder origin=null
            throwExternalFinEx1: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
            res: CONST String type=<unbound IrClassSymbolImpl> value="OK"
        WHEN type=<unbound IrClassSymbolImpl> origin=IF
          BRANCH
            if: WHEN type=<unbound IrClassSymbolImpl> origin=OROR
              BRANCH
                if: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                  $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                    arg0: GET_VAR 'var test0: <unbound IrClassSymbolImpl> [var] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                    arg1: CONST String type=<unbound IrClassSymbolImpl> value="OK_NON_LOCAL"
                then: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
              BRANCH
                if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
                then: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                  $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                    arg0: CALL 'public final fun <get-value> (): <unbound IrClassSymbolImpl> declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=GET_PROPERTY
                      $this: GET_VAR 'var h: test.Holder [var] declared in <root>.box' type=test.Holder origin=null
                    arg1: CONST String type=<unbound IrClassSymbolImpl> value="OK_NON_LOCAL -> OK_FINALLY1 -> innerTryBlock -> CATCHBLOCK"
            then: RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
              STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                CONST String type=<unbound IrClassSymbolImpl> value="test0_2: "
                GET_VAR 'var test0: <unbound IrClassSymbolImpl> [var] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                CONST String type=<unbound IrClassSymbolImpl> value=", holder: "
                CALL 'public final fun <get-value> (): <unbound IrClassSymbolImpl> declared in test.Holder' type=<unbound IrClassSymbolImpl> origin=GET_PROPERTY
                  $this: GET_VAR 'var h: test.Holder [var] declared in <root>.box' type=test.Holder origin=null
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          CONST String type=<unbound IrClassSymbolImpl> value="OK"
