library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Holder
    // class name: MyException
    // class name: Test

    public final class Holder : kotlin/Any {

      public constructor(value: kotlin/String)

      public final operator fun plusAssign(s: kotlin/String?): kotlin/Unit

      public final var value: kotlin/String
        public final get
        public final set
    }

    public final class MyException : kotlin/Exception {

      public constructor(message: kotlin/String)
    }

    public final class Test : test/MCloseable {

      public constructor()

      public open fun close(): kotlin/Unit

      private final fun jobFun(): kotlin/Unit

      public final fun nonLocalWithExceptionAndFinally(): Holder

      public final val status: Holder
        public final get
    }

    package {

      public final inline fun assertError(index: kotlin/Int, expected: kotlin/String, l: @kotlin/ExtensionFunctionType kotlin/Function1<Test, kotlin/Unit>): kotlin/Unit

      public final fun box(): kotlin/String
    }
  }

  library fragment {
    // package name: test

    // class name: test/MCloseable

    public abstract interface test/MCloseable : kotlin/Any {

      public abstract fun close(): kotlin/Unit
    }

    package {

      public final inline fun <T#0 /* T */ : test/MCloseable, T#1 /* R */> T#0.muse(block: kotlin/Function1<T#0, T#1>): T#1
    }
  }
}
