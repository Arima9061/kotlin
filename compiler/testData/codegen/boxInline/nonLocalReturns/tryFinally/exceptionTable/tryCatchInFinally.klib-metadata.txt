library {
  // module name: <main>

  library fragment {
    // package name: <root>

    package {

      public final fun box(): kotlin/String

      public final fun test0(h: test/Holder, throwExternalFinEx1: kotlin/Boolean /* = ... */, res: kotlin/String /* = ... */): kotlin/String
    }
  }

  library fragment {
    // package name: test

    // class name: test/Exception1
    // class name: test/Exception2
    // class name: test/Holder

    public final class test/Exception1 : kotlin/RuntimeException {

      public constructor(message: kotlin/String)
    }

    public final class test/Exception2 : kotlin/RuntimeException {

      public constructor(message: kotlin/String)
    }

    public final class test/Holder : kotlin/Any {

      public constructor(value: kotlin/String /* = ... */)

      public final operator fun plusAssign(s: kotlin/String?): kotlin/Unit

      public open fun toString(): kotlin/String

      public final var value: kotlin/String
        public final get
        public final set
    }

    package {

      public final inline fun doCall(block: kotlin/Function0<kotlin/String>, finallyBlock: kotlin/Function0<kotlin/String>, tryBlock2: kotlin/Function0<kotlin/String>, catchBlock2: kotlin/Function0<kotlin/String>, res: kotlin/String /* = ... */): kotlin/String
    }
  }
}
