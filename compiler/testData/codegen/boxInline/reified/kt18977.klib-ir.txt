MODULE_FRAGMENT name:<main>
  FILE fqName:test fileName:/1.kt
    CLASS CLASS name:AbstractTreeNode signature:test/AbstractTreeNode|null[0] modality:FINAL visibility:public superTypes:[<unbound IrClassSymbolImpl>]
      $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:test.AbstractTreeNode<T of test.AbstractTreeNode>
      TYPE_PARAMETER name:T index:0 variance: signature:[ test/AbstractTreeNode|null[0] <- Local[<TP>,0|TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any?] reified:false] ] superTypes:[<unbound IrClassSymbolImpl>?] reified:false
      CONSTRUCTOR signature:test/AbstractTreeNode.<init>|<init>(1:0;test.AbstractTreeNode<1:0>?){}[0] visibility:public <> (value:T of test.AbstractTreeNode, parent:test.AbstractTreeNode<T of test.AbstractTreeNode>?) returnType:test.AbstractTreeNode<T of test.AbstractTreeNode> [primary]
        VALUE_PARAMETER name:value index:0 type:T of test.AbstractTreeNode
        VALUE_PARAMETER name:parent index:1 type:test.AbstractTreeNode<T of test.AbstractTreeNode>?
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'UNBOUND IrConstructorSymbolImpl'
          INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:AbstractTreeNode signature:test/AbstractTreeNode|null[0] modality:FINAL visibility:public superTypes:[<unbound IrClassSymbolImpl>]'
      PROPERTY name:value signature:test/AbstractTreeNode.value|{}value[0] visibility:public modality:FINAL [val]
        FIELD PROPERTY_BACKING_FIELD name:value signature:[ test/AbstractTreeNode.value|{}value[0] <- Local[<BF>|FIELD PROPERTY_BACKING_FIELD name:value type:T of test.AbstractTreeNode visibility:private [final]] ] type:T of test.AbstractTreeNode visibility:private [final]
          EXPRESSION_BODY
            GET_VAR 'value: T of test.AbstractTreeNode declared in test.AbstractTreeNode.<init>' type=T of test.AbstractTreeNode origin=INITIALIZE_PROPERTY_FROM_PARAMETER
        FUN DEFAULT_PROPERTY_ACCESSOR name:<get-value> signature:test/AbstractTreeNode.value.<get-value>|<get-value>(){}[0] visibility:public modality:FINAL <> ($this:test.AbstractTreeNode<T of test.AbstractTreeNode>) returnType:T of test.AbstractTreeNode
          correspondingProperty: PROPERTY name:value signature:test/AbstractTreeNode.value|{}value[0] visibility:public modality:FINAL [val]
          $this: VALUE_PARAMETER name:<this> type:test.AbstractTreeNode<T of test.AbstractTreeNode>
          BLOCK_BODY
            RETURN type=<unbound IrClassSymbolImpl> from='public final fun <get-value> (): T of test.AbstractTreeNode declared in test.AbstractTreeNode'
              GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:value signature:[ test/AbstractTreeNode.value|{}value[0] <- Local[<BF>|FIELD PROPERTY_BACKING_FIELD name:value type:T of test.AbstractTreeNode visibility:private [final]] ] type:T of test.AbstractTreeNode visibility:private [final]' type=T of test.AbstractTreeNode origin=null
                receiver: GET_VAR '<this>: test.AbstractTreeNode<T of test.AbstractTreeNode> declared in test.AbstractTreeNode.<get-value>' type=test.AbstractTreeNode<T of test.AbstractTreeNode> origin=null
      PROPERTY name:parent signature:test/AbstractTreeNode.parent|{}parent[0] visibility:public modality:FINAL [val]
        FIELD PROPERTY_BACKING_FIELD name:parent signature:[ test/AbstractTreeNode.parent|{}parent[0] <- Local[<BF>|FIELD PROPERTY_BACKING_FIELD name:value type:T of test.AbstractTreeNode visibility:private [final]] ] type:test.AbstractTreeNode<T of test.AbstractTreeNode>? visibility:private [final]
          EXPRESSION_BODY
            GET_VAR 'parent: test.AbstractTreeNode<T of test.AbstractTreeNode>? declared in test.AbstractTreeNode.<init>' type=test.AbstractTreeNode<T of test.AbstractTreeNode>? origin=INITIALIZE_PROPERTY_FROM_PARAMETER
        FUN DEFAULT_PROPERTY_ACCESSOR name:<get-parent> signature:test/AbstractTreeNode.parent.<get-parent>|<get-parent>(){}[0] visibility:public modality:FINAL <> ($this:test.AbstractTreeNode<T of test.AbstractTreeNode>) returnType:test.AbstractTreeNode<T of test.AbstractTreeNode>?
          correspondingProperty: PROPERTY name:parent signature:test/AbstractTreeNode.parent|{}parent[0] visibility:public modality:FINAL [val]
          $this: VALUE_PARAMETER name:<this> type:test.AbstractTreeNode<T of test.AbstractTreeNode>
          BLOCK_BODY
            RETURN type=<unbound IrClassSymbolImpl> from='public final fun <get-parent> (): test.AbstractTreeNode<T of test.AbstractTreeNode>? declared in test.AbstractTreeNode'
              GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:parent signature:[ test/AbstractTreeNode.parent|{}parent[0] <- Local[<BF>|FIELD PROPERTY_BACKING_FIELD name:value type:T of test.AbstractTreeNode visibility:private [final]] ] type:test.AbstractTreeNode<T of test.AbstractTreeNode>? visibility:private [final]' type=test.AbstractTreeNode<T of test.AbstractTreeNode>? origin=null
                receiver: GET_VAR '<this>: test.AbstractTreeNode<T of test.AbstractTreeNode> declared in test.AbstractTreeNode.<get-parent>' type=test.AbstractTreeNode<T of test.AbstractTreeNode> origin=null
    FUN name:findNotNullValueOfType signature:test/findNotNullValueOfType|findNotNullValueOfType@test.AbstractTreeNode<*>(kotlin.Boolean){0ยง<kotlin.Any>}[0] visibility:internal modality:FINAL <T> ($receiver:test.AbstractTreeNode<*>, strict:<unbound IrClassSymbolImpl>) returnType:T of test.findNotNullValueOfType [inline]
      TYPE_PARAMETER name:T index:0 variance: signature:[ test/findNotNullValueOfType|findNotNullValueOfType@test.AbstractTreeNode<*>(kotlin.Boolean){0ยง<kotlin.Any>}[0] <- Local[<TP>,0|TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any?] reified:false] ] superTypes:[<unbound IrClassSymbolImpl>] reified:true
      $receiver: VALUE_PARAMETER name:<this> type:test.AbstractTreeNode<*>
      VALUE_PARAMETER name:strict index:0 type:<unbound IrClassSymbolImpl>
        EXPRESSION_BODY
          CONST Boolean type=<unbound IrClassSymbolImpl> value=false
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='internal final fun findNotNullValueOfType <T> (strict: <unbound IrClassSymbolImpl>): T of test.findNotNullValueOfType [inline] declared in test'
          CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type={T of test.findNotNullValueOfType & Any} origin=EXCLEXCL
            <T0>: {T of test.findNotNullValueOfType & Any}
            arg0: CALL 'internal final fun findValueOfType <T> (strict: <unbound IrClassSymbolImpl>): T of test.findValueOfType? [inline] declared in test' type=T of test.findNotNullValueOfType? origin=null
              <T>: T of test.findNotNullValueOfType
              $receiver: GET_VAR '<this>: test.AbstractTreeNode<*> declared in test.findNotNullValueOfType' type=test.AbstractTreeNode<*> origin=null
              strict: GET_VAR 'strict: <unbound IrClassSymbolImpl> declared in test.findNotNullValueOfType' type=<unbound IrClassSymbolImpl> origin=null
    FUN name:findValueOfType signature:test/findValueOfType|findValueOfType@test.AbstractTreeNode<*>(kotlin.Boolean){0ยง<kotlin.Any>}[0] visibility:internal modality:FINAL <T> ($receiver:test.AbstractTreeNode<*>, strict:<unbound IrClassSymbolImpl>) returnType:T of test.findValueOfType? [inline]
      TYPE_PARAMETER name:T index:0 variance: signature:[ test/findValueOfType|findValueOfType@test.AbstractTreeNode<*>(kotlin.Boolean){0ยง<kotlin.Any>}[0] <- Local[<TP>,0|TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any?] reified:false] ] superTypes:[<unbound IrClassSymbolImpl>] reified:true
      $receiver: VALUE_PARAMETER name:<this> type:test.AbstractTreeNode<*>
      VALUE_PARAMETER name:strict index:0 type:<unbound IrClassSymbolImpl>
        EXPRESSION_BODY
          CONST Boolean type=<unbound IrClassSymbolImpl> value=true
      BLOCK_BODY
        VAR name:current type:test.AbstractTreeNode<*>? [var]
          WHEN type=test.AbstractTreeNode<*>? origin=IF
            BRANCH
              if: GET_VAR 'strict: <unbound IrClassSymbolImpl> declared in test.findValueOfType' type=<unbound IrClassSymbolImpl> origin=null
              then: CALL 'public final fun <get-parent> (): test.AbstractTreeNode<T of test.AbstractTreeNode>? declared in test.AbstractTreeNode' type=test.AbstractTreeNode<*>? origin=GET_PROPERTY
                $this: GET_VAR '<this>: test.AbstractTreeNode<*> declared in test.findValueOfType' type=test.AbstractTreeNode<*> origin=null
            BRANCH
              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
              then: GET_VAR '<this>: test.AbstractTreeNode<*> declared in test.findValueOfType' type=test.AbstractTreeNode<*> origin=null
        WHILE label=null origin=WHILE_LOOP
          condition: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
            $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
              arg0: GET_VAR 'var current: test.AbstractTreeNode<*>? [var] declared in test.findValueOfType' type=test.AbstractTreeNode<*>? origin=null
              arg1: CONST Null type=<unbound IrClassSymbolImpl>? value=null
          body: BLOCK type=<unbound IrClassSymbolImpl> origin=null
            VAR name:value type:<unbound IrClassSymbolImpl>? [val]
              CALL 'public final fun <get-value> (): T of test.AbstractTreeNode declared in test.AbstractTreeNode' type=<unbound IrClassSymbolImpl>? origin=GET_PROPERTY
                $this: GET_VAR 'var current: test.AbstractTreeNode<*>? [var] declared in test.findValueOfType' type=test.AbstractTreeNode<*>? origin=null
            WHEN type=<unbound IrClassSymbolImpl> origin=IF
              BRANCH
                if: TYPE_OP type=<unbound IrClassSymbolImpl> origin=INSTANCEOF typeOperand=T of test.findValueOfType
                  GET_VAR 'val value: <unbound IrClassSymbolImpl>? [val] declared in test.findValueOfType' type=<unbound IrClassSymbolImpl>? origin=null
                then: RETURN type=<unbound IrClassSymbolImpl> from='internal final fun findValueOfType <T> (strict: <unbound IrClassSymbolImpl>): T of test.findValueOfType? [inline] declared in test'
                  TYPE_OP type=T of test.findValueOfType origin=IMPLICIT_CAST typeOperand=T of test.findValueOfType
                    GET_VAR 'val value: <unbound IrClassSymbolImpl>? [val] declared in test.findValueOfType' type=<unbound IrClassSymbolImpl>? origin=null
            SET_VAR 'var current: test.AbstractTreeNode<*>? [var] declared in test.findValueOfType' type=<unbound IrClassSymbolImpl> origin=EQ
              CALL 'public final fun <get-parent> (): test.AbstractTreeNode<T of test.AbstractTreeNode>? declared in test.AbstractTreeNode' type=test.AbstractTreeNode<*>? origin=GET_PROPERTY
                $this: GET_VAR 'var current: test.AbstractTreeNode<*>? [var] declared in test.findValueOfType' type=test.AbstractTreeNode<*>? origin=null
        RETURN type=<unbound IrClassSymbolImpl> from='internal final fun findValueOfType <T> (strict: <unbound IrClassSymbolImpl>): T of test.findValueOfType? [inline] declared in test'
          CONST Null type=<unbound IrClassSymbolImpl>? value=null
  FILE fqName:<root> fileName:/2.kt
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEXCL
            <T0>: <unbound IrClassSymbolImpl>
            arg0: CALL 'internal final fun findNotNullValueOfType <T> (strict: <unbound IrClassSymbolImpl>): T of test.findNotNullValueOfType [inline] declared in test' type=<unbound IrClassSymbolImpl> origin=null
              <T>: <unbound IrClassSymbolImpl>
              $receiver: CONSTRUCTOR_CALL 'public constructor <init> (value: T of test.AbstractTreeNode, parent: test.AbstractTreeNode<T of test.AbstractTreeNode>?) [primary] declared in test.AbstractTreeNode' type=test.AbstractTreeNode<<unbound IrClassSymbolImpl>> origin=null
                <class: T>: <unbound IrClassSymbolImpl>
                value: CONST String type=<unbound IrClassSymbolImpl> value="OK"
                parent: CONST Null type=<unbound IrClassSymbolImpl>? value=null
