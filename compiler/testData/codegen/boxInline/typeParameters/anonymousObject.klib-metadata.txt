library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: Box
    // class name: I
    // class name: J
    // class name: X

    public final class Box<T#0 /* T */> : kotlin/Any {

      public constructor(x: T#0)

      public final inline fun getI(crossinline block: kotlin/Function0<kotlin/Unit>): I<T#0>

      public final val x: T#0
        public final get
    }

    public abstract interface I<T#0 /* TTTT */> : kotlin/Any {

      public abstract fun get(): T#0

      public abstract fun set(x: T#0): kotlin/Unit
    }

    public abstract interface J : kotlin/Any {
    }

    public final class X : J {

      public constructor(result: kotlin/String)

      public final val result: kotlin/String
        public final get
    }

    package {

      public final fun box(): kotlin/String

      public final fun Box<*>.getIExt(): I<out kotlin/Any?>
    }
  }
}
