library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: IntrospectorImpl
    // class name: IntrospectorImpl.SchemaRetriever

    public final class IntrospectorImpl : test/Introspector {

      public constructor()

      // nested class: SchemaRetriever
    }

    public final inner class IntrospectorImpl.SchemaRetriever : test/Introspector.SchemaRetriever {

      public constructor(transaction: kotlin/String)

      internal final fun retrieve(): kotlin/Unit
    }

    package {

      public final fun box(): kotlin/String

      public final var result: kotlin/String
        public final get
        public final set
    }
  }

  library fragment {
    // package name: test

    // class name: test/Introspector
    // class name: test/Introspector.SchemaRetriever

    public abstract class test/Introspector : kotlin/Any {

      public constructor()

      // nested class: SchemaRetriever
    }

    public abstract inner class test/Introspector.SchemaRetriever : kotlin/Any {

      public constructor(transaction: kotlin/String)

      public final inline fun inSchema(crossinline modifier: kotlin/Function1<kotlin/String, kotlin/Unit>): kotlin/Unit

      public final val transaction: kotlin/String
        public final get
    }
  }
}
