MODULE_FRAGMENT name:<main>
  FILE fqName:test fileName:/1.kt
    FUN name:doWork signature:test/doWork|doWork(kotlin.Function0<0:0>){0ยง<kotlin.Any?>}[0] visibility:public modality:FINAL <R> (job:<unbound IrClassSymbolImpl><R of test.doWork>) returnType:R of test.doWork [inline]
      TYPE_PARAMETER name:R index:0 variance: signature:[ test/doWork|doWork(kotlin.Function0<0:0>){0ยง<kotlin.Any?>}[0] <- Local[<TP>,0|TYPE_PARAMETER name:R index:0 variance: superTypes:[kotlin.Any?] reified:false] ] superTypes:[<unbound IrClassSymbolImpl>?] reified:false
      VALUE_PARAMETER name:job index:0 type:<unbound IrClassSymbolImpl><R of test.doWork> [crossinline]
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun doWork <R> (job: <unbound IrClassSymbolImpl><R of test.doWork>): R of test.doWork [inline] declared in test'
          CALL 'public final fun notInline <R> (job: <unbound IrClassSymbolImpl><R of test.notInline>): R of test.notInline declared in test' type=R of test.doWork origin=null
            <R>: R of test.doWork
            job: FUN_EXPR type=<unbound IrClassSymbolImpl><R of test.doWork> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:R of test.doWork
                BLOCK_BODY
                  RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): R of test.doWork declared in test.doWork'
                    CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=R of test.doWork origin=INVOKE
                      $this: GET_VAR 'job: <unbound IrClassSymbolImpl><R of test.doWork> [crossinline] declared in test.doWork' type=<unbound IrClassSymbolImpl><R of test.doWork> origin=VARIABLE_AS_FUNCTION
    FUN name:notInline signature:test/notInline|notInline(kotlin.Function0<0:0>){0ยง<kotlin.Any?>}[0] visibility:public modality:FINAL <R> (job:<unbound IrClassSymbolImpl><R of test.notInline>) returnType:R of test.notInline
      TYPE_PARAMETER name:R index:0 variance: signature:[ test/notInline|notInline(kotlin.Function0<0:0>){0ยง<kotlin.Any?>}[0] <- Local[<TP>,0|TYPE_PARAMETER name:R index:0 variance: superTypes:[kotlin.Any?] reified:false] ] superTypes:[<unbound IrClassSymbolImpl>?] reified:false
      VALUE_PARAMETER name:job index:0 type:<unbound IrClassSymbolImpl><R of test.notInline>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun notInline <R> (job: <unbound IrClassSymbolImpl><R of test.notInline>): R of test.notInline declared in test'
          CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=R of test.notInline origin=INVOKE
            $this: GET_VAR 'job: <unbound IrClassSymbolImpl><R of test.notInline> declared in test.notInline' type=<unbound IrClassSymbolImpl><R of test.notInline> origin=VARIABLE_AS_FUNCTION
  FILE fqName:<root> fileName:/2.kt
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:result type:<unbound IrClassSymbolImpl> [val]
          CALL 'public final fun doWork <R> (job: <unbound IrClassSymbolImpl><R of test.doWork>): R of test.doWork [inline] declared in test' type=<unbound IrClassSymbolImpl> origin=null
            <R>: <unbound IrClassSymbolImpl>
            job: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
                BLOCK_BODY
                  RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.box'
                    CONST Int type=<unbound IrClassSymbolImpl> value=11
        WHEN type=<unbound IrClassSymbolImpl> origin=IF
          BRANCH
            if: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
              $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                arg0: GET_VAR 'val result: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                arg1: CONST Int type=<unbound IrClassSymbolImpl> value=11
            then: RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
              STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                CONST String type=<unbound IrClassSymbolImpl> value="test1: "
                GET_VAR 'val result: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
        VAR name:result2 type:<unbound IrClassSymbolImpl> [val]
          CALL 'public final fun doWork <R> (job: <unbound IrClassSymbolImpl><R of test.doWork>): R of test.doWork [inline] declared in test' type=<unbound IrClassSymbolImpl> origin=null
            <R>: <unbound IrClassSymbolImpl>
            job: FUN_EXPR type=<unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
                BLOCK_BODY
                  TYPE_OP type=<unbound IrClassSymbolImpl> origin=IMPLICIT_COERCION_TO_UNIT typeOperand=<unbound IrClassSymbolImpl>
                    CONST Int type=<unbound IrClassSymbolImpl> value=12
                  RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (): <unbound IrClassSymbolImpl> declared in <root>.box'
                    CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=PLUS
                      $this: GET_VAR 'val result: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                      1: CONST Int type=<unbound IrClassSymbolImpl> value=1
        WHEN type=<unbound IrClassSymbolImpl> origin=IF
          BRANCH
            if: CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
              $this: CALL 'public final fun EQEQ (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EXCLEQ
                arg0: GET_VAR 'val result2: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                arg1: CONST Int type=<unbound IrClassSymbolImpl> value=12
            then: RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
              STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                CONST String type=<unbound IrClassSymbolImpl> value="test2: "
                GET_VAR 'val result2: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          CONST String type=<unbound IrClassSymbolImpl> value="OK"
