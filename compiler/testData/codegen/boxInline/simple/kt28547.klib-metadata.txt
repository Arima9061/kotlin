library {
  // module name: <main>

  library fragment {
    // package name: <root>

    package {

      public final fun box(): kotlin/String
    }
  }

  library fragment {
    // package name: test

    // class name: test/A
    // class name: test/B
    // class name: test/C

    public final class test/A<T#0 /* T */> : kotlin/Any {

      public constructor(composer: test/C<T#0>)

      public final inline fun foo(key: kotlin/Any, ctor: kotlin/Function0<T#0>, update: @kotlin/ExtensionFunctionType kotlin/Function1<test/B<T#0>, kotlin/Unit>): kotlin/Unit

      public final val composer: test/C<T#0>
        public final get
    }

    public final class test/B<T#0 /* T */> : kotlin/Any {

      public constructor(composer: test/C<T#0>, node: T#0)

      public final inline fun <T#1 /* V */> bar(value: T#1, block: @kotlin/ExtensionFunctionType kotlin/Function2<T#0, T#1, kotlin/Unit>): kotlin/Unit

      public final val composer: test/C<T#0>
        public final get

      public final val node: T#0
        public final get
    }

    public final class test/C<T#0 /* T */> : kotlin/Any {

      public constructor(value: T#0)

      public final fun emitNode(node: kotlin/Any?): kotlin/Unit

      public final fun endNode(): kotlin/Unit

      public final fun nextSlot(): kotlin/Any?

      public final fun skipValue(): kotlin/Unit

      public final fun startNode(key: kotlin/Any?): kotlin/Unit

      public final fun updateValue(value: kotlin/Any?): kotlin/Unit

      public final fun useNode(): T#0

      public final var inserting: kotlin/Boolean
        public final get
        public final set

      public final val value: T#0
        public final get
    }
  }
}
