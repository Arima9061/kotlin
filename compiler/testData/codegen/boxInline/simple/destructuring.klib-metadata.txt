library {
  // module name: <main>

  library fragment {
    // package name: <root>

    package {

      public final fun box(): kotlin/String
    }
  }

  library fragment {
    // package name: test

    // class name: test/Station

    public final data class test/Station : kotlin/Any {

      public constructor(id: kotlin/String?, name: kotlin/String, distance: kotlin/Int)

      public final /* synthesized */ operator fun component1(): kotlin/String?

      public final /* synthesized */ operator fun component2(): kotlin/String

      public final /* synthesized */ operator fun component3(): kotlin/Int

      public final /* synthesized */ fun copy(id: kotlin/String? /* = ... */, name: kotlin/String /* = ... */, distance: kotlin/Int /* = ... */): test/Station

      public open /* synthesized */ operator fun equals(other: kotlin/Any?): kotlin/Boolean

      public open /* synthesized */ fun hashCode(): kotlin/Int

      public open /* synthesized */ fun toString(): kotlin/String

      public final val distance: kotlin/Int
        public final get

      public final val id: kotlin/String?
        public final get

      public final val name: kotlin/String
        public final get
    }

    package {

      public final inline fun foo(x: kotlin/Function2<kotlin/Int, test/Station, kotlin/Unit>): kotlin/Unit
    }
  }
}
