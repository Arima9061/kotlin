MODULE_FRAGMENT name:<main>
  FILE fqName:test fileName:/1.kt
    FUN name:test signature:test/test|test@kotlin.String(0:0;kotlin.Function2<kotlin.String,0:0,0:0>){0ยง<kotlin.Any?>}[0] visibility:public modality:FINAL <T> ($receiver:<unbound IrClassSymbolImpl>, default:T of test.test, cb:@[<unbound>] <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>, T of test.test, T of test.test>) returnType:T of test.test [inline]
      TYPE_PARAMETER name:T index:0 variance: signature:[ test/test|test@kotlin.String(0:0;kotlin.Function2<kotlin.String,0:0,0:0>){0ยง<kotlin.Any?>}[0] <- Local[<TP>,0|TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any?] reified:false] ] superTypes:[<unbound IrClassSymbolImpl>?] reified:false
      $receiver: VALUE_PARAMETER name:<this> type:<unbound IrClassSymbolImpl>
      VALUE_PARAMETER name:default index:0 type:T of test.test
      VALUE_PARAMETER name:cb index:1 type:@[<unbound>] <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>, T of test.test, T of test.test>
      BLOCK_BODY
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun test <T> (default: T of test.test, cb: @[<unbound>] <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>, T of test.test, T of test.test>): T of test.test [inline] declared in test'
          CALL 'UNBOUND IrSimpleFunctionSymbolImpl' type=T of test.test origin=INVOKE
            $this: GET_VAR 'cb: @[<unbound>] <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>, T of test.test, T of test.test> declared in test.test' type=@[<unbound>] <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>, T of test.test, T of test.test> origin=VARIABLE_AS_FUNCTION
            1: GET_VAR '<this>: <unbound IrClassSymbolImpl> declared in test.test' type=<unbound IrClassSymbolImpl> origin=null
            2: GET_VAR 'default: T of test.test declared in test.test' type=T of test.test origin=null
  FILE fqName:<root> fileName:/2.kt
    FUN name:box signature:/box|box(){}[0] visibility:public modality:FINAL <> () returnType:<unbound IrClassSymbolImpl>
      BLOCK_BODY
        VAR name:p type:<unbound IrClassSymbolImpl> [val]
          CALL 'public final fun test <T> (default: T of test.test, cb: @[<unbound>] <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>, T of test.test, T of test.test>): T of test.test [inline] declared in test' type=<unbound IrClassSymbolImpl> origin=null
            <T>: <unbound IrClassSymbolImpl>
            $receiver: CONST String type=<unbound IrClassSymbolImpl> value=""
            default: CONST Double type=<unbound IrClassSymbolImpl> value=50.0
            cb: FUN_EXPR type=@[<unbound>] <unbound IrClassSymbolImpl><<unbound IrClassSymbolImpl>, <unbound IrClassSymbolImpl>, <unbound IrClassSymbolImpl>> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> ($receiver:<unbound IrClassSymbolImpl>, it:<unbound IrClassSymbolImpl>) returnType:<unbound IrClassSymbolImpl>
                $receiver: VALUE_PARAMETER name:$this$test type:<unbound IrClassSymbolImpl>
                VALUE_PARAMETER name:it index:0 type:<unbound IrClassSymbolImpl>
                BLOCK_BODY
                  RETURN type=<unbound IrClassSymbolImpl> from='local final fun <anonymous> (it: <unbound IrClassSymbolImpl>): <unbound IrClassSymbolImpl> declared in <root>.box'
                    GET_VAR 'it: <unbound IrClassSymbolImpl> declared in <root>.box.<anonymous>' type=<unbound IrClassSymbolImpl> origin=null
        RETURN type=<unbound IrClassSymbolImpl> from='public final fun box (): <unbound IrClassSymbolImpl> declared in <root>'
          WHEN type=<unbound IrClassSymbolImpl> origin=IF
            BRANCH
              if: CALL 'public final fun ieee754equals (arg0: <unbound IrClassSymbolImpl>?, arg1: <unbound IrClassSymbolImpl>?): <unbound IrClassSymbolImpl> declared in kotlin.internal.ir' type=<unbound IrClassSymbolImpl> origin=EQEQ
                arg0: GET_VAR 'val p: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
                arg1: CONST Double type=<unbound IrClassSymbolImpl> value=50.0
              then: CONST String type=<unbound IrClassSymbolImpl> value="OK"
            BRANCH
              if: CONST Boolean type=<unbound IrClassSymbolImpl> value=true
              then: STRING_CONCATENATION type=<unbound IrClassSymbolImpl>
                CONST String type=<unbound IrClassSymbolImpl> value="fail "
                GET_VAR 'val p: <unbound IrClassSymbolImpl> [val] declared in <root>.box' type=<unbound IrClassSymbolImpl> origin=null
