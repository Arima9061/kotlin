library {
  // module name: <main>

  library fragment {
    // package name: <root>

    package {

      public final fun box(): kotlin/String

      public final fun testClassObject(): kotlin/String
    }
  }

  library fragment {
    // package name: test

    // class name: test/InlineTrait
    // class name: test/InlineTrait.Companion
    // class name: test/Z

    public abstract interface test/InlineTrait : kotlin/Any {

      private final inline fun privateInline(s: kotlin/Function0<kotlin/String>): kotlin/String

      public open fun testPrivateInline(): kotlin/String

      public open fun testPrivateInline2(): kotlin/String

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object test/InlineTrait.Companion : kotlin/Any {

      private constructor()

      public final inline fun finalInline(s: kotlin/Function0<kotlin/String>): kotlin/String
    }

    public final class test/Z : test/InlineTrait {

      public constructor()
    }
  }
}
