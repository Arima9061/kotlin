/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.test.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.utils.TransformersFunctions;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.RepeatedTest;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.test.generators.GenerateCompilerTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
public class DiagnosticTestGenerated extends AbstractDiagnosticTest {
  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests")
  @TestDataPath("$PROJECT_ROOT")
  public class Tests {
    @RepeatedTest(value = 5)
    @TestMetadata("Abstract.kt")
    public void testAbstract() {
      runTest("compiler/testData/diagnostics/tests/Abstract.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("AbstractAccessor.kt")
    public void testAbstractAccessor() {
      runTest("compiler/testData/diagnostics/tests/AbstractAccessor.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("abstractClassReference.kt")
    public void testAbstractClassReference() {
      runTest("compiler/testData/diagnostics/tests/abstractClassReference.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("AbstractInAbstractClass.kt")
    public void testAbstractInAbstractClass() {
      runTest("compiler/testData/diagnostics/tests/AbstractInAbstractClass.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("AbstractInClass.kt")
    public void testAbstractInClass() {
      runTest("compiler/testData/diagnostics/tests/AbstractInClass.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("AbstractInTrait.kt")
    public void testAbstractInTrait() {
      runTest("compiler/testData/diagnostics/tests/AbstractInTrait.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("addTestForFalsePositiveDuplicateLabelInWhen.kt")
    public void testAddTestForFalsePositiveDuplicateLabelInWhen() {
      runTest("compiler/testData/diagnostics/tests/addTestForFalsePositiveDuplicateLabelInWhen.kt");
    }

    @RepeatedTest(value = 5)
    public void testAllFilesPresentInTests() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ambiguityNamedVararg.kt")
    public void testAmbiguityNamedVararg() {
      runTest("compiler/testData/diagnostics/tests/ambiguityNamedVararg.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("annotationArgumentWithAliasedArrayType.kt")
    public void testAnnotationArgumentWithAliasedArrayType() {
      runTest("compiler/testData/diagnostics/tests/annotationArgumentWithAliasedArrayType.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("AnonymousInitializerVarAndConstructor.kt")
    public void testAnonymousInitializerVarAndConstructor() {
      runTest("compiler/testData/diagnostics/tests/AnonymousInitializerVarAndConstructor.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("AnonymousInitializers.kt")
    public void testAnonymousInitializers() {
      runTest("compiler/testData/diagnostics/tests/AnonymousInitializers.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("argumentTypeMismatchVsTooManyArgs.kt")
    public void testArgumentTypeMismatchVsTooManyArgs() {
      runTest("compiler/testData/diagnostics/tests/argumentTypeMismatchVsTooManyArgs.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("AssignToArrayElement.kt")
    public void testAssignToArrayElement() {
      runTest("compiler/testData/diagnostics/tests/AssignToArrayElement.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("assigningAssignments.kt")
    public void testAssigningAssignments() {
      runTest("compiler/testData/diagnostics/tests/assigningAssignments.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("AutoCreatedIt.kt")
    public void testAutoCreatedIt() {
      runTest("compiler/testData/diagnostics/tests/AutoCreatedIt.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("BacktickNames.kt")
    public void testBacktickNames() {
      runTest("compiler/testData/diagnostics/tests/BacktickNames.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Basic.kt")
    public void testBasic() {
      runTest("compiler/testData/diagnostics/tests/Basic.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("BinaryCallsOnNullableValues.kt")
    public void testBinaryCallsOnNullableValues() {
      runTest("compiler/testData/diagnostics/tests/BinaryCallsOnNullableValues.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Bounds.kt")
    public void testBounds() {
      runTest("compiler/testData/diagnostics/tests/Bounds.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("BreakContinue.kt")
    public void testBreakContinue() {
      runTest("compiler/testData/diagnostics/tests/BreakContinue.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("BreakContinueInWhen_after.kt")
    public void testBreakContinueInWhen_after() {
      runTest("compiler/testData/diagnostics/tests/BreakContinueInWhen_after.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("BreakContinueInWhen_before.kt")
    public void testBreakContinueInWhen_before() {
      runTest("compiler/testData/diagnostics/tests/BreakContinueInWhen_before.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Builders.kt")
    public void testBuilders() {
      runTest("compiler/testData/diagnostics/tests/Builders.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("callingProtectedFromInline.kt")
    public void testCallingProtectedFromInline() {
      runTest("compiler/testData/diagnostics/tests/callingProtectedFromInline.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("capturedTypesSubtyping.kt")
    public void testCapturedTypesSubtyping() {
      runTest("compiler/testData/diagnostics/tests/capturedTypesSubtyping.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Casts.kt")
    public void testCasts() {
      runTest("compiler/testData/diagnostics/tests/Casts.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("CharacterLiterals.kt")
    public void testCharacterLiterals() {
      runTest("compiler/testData/diagnostics/tests/CharacterLiterals.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("checkTypeTest.kt")
    public void testCheckTypeTest() {
      runTest("compiler/testData/diagnostics/tests/checkTypeTest.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("checkTypeWithExactTest.kt")
    public void testCheckTypeWithExactTest() {
      runTest("compiler/testData/diagnostics/tests/checkTypeWithExactTest.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("CompareToWithErrorType.kt")
    public void testCompareToWithErrorType() {
      runTest("compiler/testData/diagnostics/tests/CompareToWithErrorType.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("compareWithReified.kt")
    public void testCompareWithReified() {
      runTest("compiler/testData/diagnostics/tests/compareWithReified.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("comparingArbitraryClasses.kt")
    public void testComparingArbitraryClasses() {
      runTest("compiler/testData/diagnostics/tests/comparingArbitraryClasses.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("comparingCallableReferencesWithInstanceOfJavaClass.kt")
    public void testComparingCallableReferencesWithInstanceOfJavaClass() {
      runTest("compiler/testData/diagnostics/tests/comparingCallableReferencesWithInstanceOfJavaClass.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("comparisonOfGenericInterfaceWithGenericClass.kt")
    public void testComparisonOfGenericInterfaceWithGenericClass() {
      runTest("compiler/testData/diagnostics/tests/comparisonOfGenericInterfaceWithGenericClass.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("compilerCrashInTypeParameterBoundsChecker.kt")
    public void testCompilerCrashInTypeParameterBoundsChecker() {
      runTest("compiler/testData/diagnostics/tests/compilerCrashInTypeParameterBoundsChecker.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("compilerCrashParameterType.kt")
    public void testCompilerCrashParameterType() {
      runTest("compiler/testData/diagnostics/tests/compilerCrashParameterType.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("conflictingOverloadsPrivateFunctions.kt")
    public void testConflictingOverloadsPrivateFunctions() {
      runTest("compiler/testData/diagnostics/tests/conflictingOverloadsPrivateFunctions.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Constants.kt")
    public void testConstants() {
      runTest("compiler/testData/diagnostics/tests/Constants.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Constructors.kt")
    public void testConstructors() {
      runTest("compiler/testData/diagnostics/tests/Constructors.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ConstructorsOfPrimitives.kt")
    public void testConstructorsOfPrimitives() {
      runTest("compiler/testData/diagnostics/tests/ConstructorsOfPrimitives.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("CovariantOverrideType.kt")
    public void testCovariantOverrideType() {
      runTest("compiler/testData/diagnostics/tests/CovariantOverrideType.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("DefaultValueForParameterInFunctionType.kt")
    public void testDefaultValueForParameterInFunctionType() {
      runTest("compiler/testData/diagnostics/tests/DefaultValueForParameterInFunctionType.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("DefaultValuesCheckWithoutBody.kt")
    public void testDefaultValuesCheckWithoutBody() {
      runTest("compiler/testData/diagnostics/tests/DefaultValuesCheckWithoutBody.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("DefaultValuesTypechecking.kt")
    public void testDefaultValuesTypechecking() {
      runTest("compiler/testData/diagnostics/tests/DefaultValuesTypechecking.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("DeferredTypes.kt")
    public void testDeferredTypes() {
      runTest("compiler/testData/diagnostics/tests/DeferredTypes.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("delegatedMemberHidesSupertypeOverride.kt")
    public void testDelegatedMemberHidesSupertypeOverride() {
      runTest("compiler/testData/diagnostics/tests/delegatedMemberHidesSupertypeOverride.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("delegationTypeMismatch.kt")
    public void testDelegationTypeMismatch() {
      runTest("compiler/testData/diagnostics/tests/delegationTypeMismatch.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("DeprecatedGetSetPropertyDelegateConvention.kt")
    public void testDeprecatedGetSetPropertyDelegateConvention() {
      runTest("compiler/testData/diagnostics/tests/DeprecatedGetSetPropertyDelegateConvention.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("DeprecatedUnaryOperatorConventions.kt")
    public void testDeprecatedUnaryOperatorConventions() {
      runTest("compiler/testData/diagnostics/tests/DeprecatedUnaryOperatorConventions.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("derivedIntersectionPropertyShadowsBaseClassField.kt")
    public void testDerivedIntersectionPropertyShadowsBaseClassField() {
      runTest("compiler/testData/diagnostics/tests/derivedIntersectionPropertyShadowsBaseClassField.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("DiamondFunction.kt")
    public void testDiamondFunction() {
      runTest("compiler/testData/diagnostics/tests/DiamondFunction.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("DiamondFunctionGeneric.kt")
    public void testDiamondFunctionGeneric() {
      runTest("compiler/testData/diagnostics/tests/DiamondFunctionGeneric.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("DiamondProperty.kt")
    public void testDiamondProperty() {
      runTest("compiler/testData/diagnostics/tests/DiamondProperty.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("differentNumericTypesFromSmartCast.kt")
    public void testDifferentNumericTypesFromSmartCast() {
      runTest("compiler/testData/diagnostics/tests/differentNumericTypesFromSmartCast.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("dnnAsSuperTypeTypeArgument.kt")
    public void testDnnAsSuperTypeTypeArgument() {
      runTest("compiler/testData/diagnostics/tests/dnnAsSuperTypeTypeArgument.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Dollar.kt")
    public void testDollar() {
      runTest("compiler/testData/diagnostics/tests/Dollar.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("duplicateDefaultValuesSubsumedIntersection.kt")
    public void testDuplicateDefaultValuesSubsumedIntersection() {
      runTest("compiler/testData/diagnostics/tests/duplicateDefaultValuesSubsumedIntersection.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("duplicateDirrectOverriddenCallables.kt")
    public void testDuplicateDirrectOverriddenCallables() {
      runTest("compiler/testData/diagnostics/tests/duplicateDirrectOverriddenCallables.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("duplicateParameterName.kt")
    public void testDuplicateParameterName() {
      runTest("compiler/testData/diagnostics/tests/duplicateParameterName.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("duplicateParameterNameSimplified.kt")
    public void testDuplicateParameterNameSimplified() {
      runTest("compiler/testData/diagnostics/tests/duplicateParameterNameSimplified.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("emptyLhsClassLiterals.kt")
    public void testEmptyLhsClassLiterals() {
      runTest("compiler/testData/diagnostics/tests/emptyLhsClassLiterals.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("EmptyThrow.kt")
    public void testEmptyThrow() {
      runTest("compiler/testData/diagnostics/tests/EmptyThrow.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("EnumEntryAsType.kt")
    public void testEnumEntryAsType() {
      runTest("compiler/testData/diagnostics/tests/EnumEntryAsType.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("equalityComparisonToSelf.kt")
    public void testEqualityComparisonToSelf() {
      runTest("compiler/testData/diagnostics/tests/equalityComparisonToSelf.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("equalityWithSmartCastInIfBlock.kt")
    public void testEqualityWithSmartCastInIfBlock() {
      runTest("compiler/testData/diagnostics/tests/equalityWithSmartCastInIfBlock.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("expressionsInQaSelectorsCornerCases.kt")
    public void testExpressionsInQaSelectorsCornerCases() {
      runTest("compiler/testData/diagnostics/tests/expressionsInQaSelectorsCornerCases.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("expressionsInQaSelectorsReceiverConversion.kt")
    public void testExpressionsInQaSelectorsReceiverConversion() {
      runTest("compiler/testData/diagnostics/tests/expressionsInQaSelectorsReceiverConversion.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("expressionsInQaSelectorsWithElvis.kt")
    public void testExpressionsInQaSelectorsWithElvis() {
      runTest("compiler/testData/diagnostics/tests/expressionsInQaSelectorsWithElvis.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ExtensionCallInvoke.kt")
    public void testExtensionCallInvoke() {
      runTest("compiler/testData/diagnostics/tests/ExtensionCallInvoke.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ExternalAccessors.kt")
    public void testExternalAccessors() {
      runTest("compiler/testData/diagnostics/tests/ExternalAccessors.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ExternalAndAbstract.kt")
    public void testExternalAndAbstract() {
      runTest("compiler/testData/diagnostics/tests/ExternalAndAbstract.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("falseNegativeDuplicateDefaultValues1.kt")
    public void testFalseNegativeDuplicateDefaultValues1() {
      runTest("compiler/testData/diagnostics/tests/falseNegativeDuplicateDefaultValues1.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("falseNegativeDuplicateDefaultValues1_error.kt")
    public void testFalseNegativeDuplicateDefaultValues1_error() {
      runTest("compiler/testData/diagnostics/tests/falseNegativeDuplicateDefaultValues1_error.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("falseNegativeDuplicateDefaultValues2.kt")
    public void testFalseNegativeDuplicateDefaultValues2() {
      runTest("compiler/testData/diagnostics/tests/falseNegativeDuplicateDefaultValues2.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("falseNegativeDuplicateDefaultValues3.kt")
    public void testFalseNegativeDuplicateDefaultValues3() {
      runTest("compiler/testData/diagnostics/tests/falseNegativeDuplicateDefaultValues3.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("fileDependencyRecursion.kt")
    public void testFileDependencyRecursion() {
      runTest("compiler/testData/diagnostics/tests/fileDependencyRecursion.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("finalSupertype.kt")
    public void testFinalSupertype() {
      runTest("compiler/testData/diagnostics/tests/finalSupertype.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("fixExpressionsInQaSelectors.kt")
    public void testFixExpressionsInQaSelectors() {
      runTest("compiler/testData/diagnostics/tests/fixExpressionsInQaSelectors.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ForRangeConventions.kt")
    public void testForRangeConventions() {
      runTest("compiler/testData/diagnostics/tests/ForRangeConventions.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("fpRedundantProtected.kt")
    public void testFpRedundantProtected() {
      runTest("compiler/testData/diagnostics/tests/fpRedundantProtected.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("FreeFunctionCalledAsExtension.kt")
    public void testFreeFunctionCalledAsExtension() {
      runTest("compiler/testData/diagnostics/tests/FreeFunctionCalledAsExtension.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("funReturnsAny.kt")
    public void testFunReturnsAny() {
      runTest("compiler/testData/diagnostics/tests/funReturnsAny.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("FunctionCalleeExpressions.kt")
    public void testFunctionCalleeExpressions() {
      runTest("compiler/testData/diagnostics/tests/FunctionCalleeExpressions.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("FunctionParameterWithoutType.kt")
    public void testFunctionParameterWithoutType() {
      runTest("compiler/testData/diagnostics/tests/FunctionParameterWithoutType.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("FunctionReturnTypes.kt")
    public void testFunctionReturnTypes() {
      runTest("compiler/testData/diagnostics/tests/FunctionReturnTypes.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("GenericArgumentConsistency.kt")
    public void testGenericArgumentConsistency() {
      runTest("compiler/testData/diagnostics/tests/GenericArgumentConsistency.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("GenericFunctionIsLessSpecific.kt")
    public void testGenericFunctionIsLessSpecific() {
      runTest("compiler/testData/diagnostics/tests/GenericFunctionIsLessSpecific.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("IdentityComparisonWithPrimitives.kt")
    public void testIdentityComparisonWithPrimitives() {
      runTest("compiler/testData/diagnostics/tests/IdentityComparisonWithPrimitives.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("implicitIntersection.kt")
    public void testImplicitIntersection() {
      runTest("compiler/testData/diagnostics/tests/implicitIntersection.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("implicitNestedIntersection.kt")
    public void testImplicitNestedIntersection() {
      runTest("compiler/testData/diagnostics/tests/implicitNestedIntersection.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("implicitNothing.kt")
    public void testImplicitNothing() {
      runTest("compiler/testData/diagnostics/tests/implicitNothing.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("inapplicableTargetPropertyImmutableInPrimaryConstructor.kt")
    public void testInapplicableTargetPropertyImmutableInPrimaryConstructor() {
      runTest("compiler/testData/diagnostics/tests/inapplicableTargetPropertyImmutableInPrimaryConstructor.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("IncDec.kt")
    public void testIncDec() {
      runTest("compiler/testData/diagnostics/tests/IncDec.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("IncorrectCharacterLiterals.kt")
    public void testIncorrectCharacterLiterals() {
      runTest("compiler/testData/diagnostics/tests/IncorrectCharacterLiterals.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("incrementDecrementOnFullyQualified.kt")
    public void testIncrementDecrementOnFullyQualified() {
      runTest("compiler/testData/diagnostics/tests/incrementDecrementOnFullyQualified.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("incrementDecrementOnObject.kt")
    public void testIncrementDecrementOnObject() {
      runTest("compiler/testData/diagnostics/tests/incrementDecrementOnObject.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("InferNullabilityInThenBlock.kt")
    public void testInferNullabilityInThenBlock() {
      runTest("compiler/testData/diagnostics/tests/InferNullabilityInThenBlock.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Infix.kt")
    public void testInfix() {
      runTest("compiler/testData/diagnostics/tests/Infix.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("InfixModifierApplicability.kt")
    public void testInfixModifierApplicability() {
      runTest("compiler/testData/diagnostics/tests/InfixModifierApplicability.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("initializedAfterRethrow.kt")
    public void testInitializedAfterRethrow() {
      runTest("compiler/testData/diagnostics/tests/initializedAfterRethrow.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("inlineConstructorParameter.kt")
    public void testInlineConstructorParameter() {
      runTest("compiler/testData/diagnostics/tests/inlineConstructorParameter.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("inlineConstructorParameter_on.kt")
    public void testInlineConstructorParameter_on() {
      runTest("compiler/testData/diagnostics/tests/inlineConstructorParameter_on.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("inlineDeprecationsOnImplicitCalls.kt")
    public void testInlineDeprecationsOnImplicitCalls() {
      runTest("compiler/testData/diagnostics/tests/inlineDeprecationsOnImplicitCalls.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("intersectedVisibilitiesForAbstractPropertyAccessors.kt")
    public void testIntersectedVisibilitiesForAbstractPropertyAccessors() {
      runTest("compiler/testData/diagnostics/tests/intersectedVisibilitiesForAbstractPropertyAccessors.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("intersectedVisibilitiesForNonAbstractPropertyAccessors.kt")
    public void testIntersectedVisibilitiesForNonAbstractPropertyAccessors() {
      runTest("compiler/testData/diagnostics/tests/intersectedVisibilitiesForNonAbstractPropertyAccessors.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("intersectedVisibilitiesPropertyAccessorsAdditionalWarnigns.kt")
    public void testIntersectedVisibilitiesPropertyAccessorsAdditionalWarnigns() {
      runTest("compiler/testData/diagnostics/tests/intersectedVisibilitiesPropertyAccessorsAdditionalWarnigns.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("intersectionWithMultipleDefaultsInJava.kt")
    public void testIntersectionWithMultipleDefaultsInJava() {
      runTest("compiler/testData/diagnostics/tests/intersectionWithMultipleDefaultsInJava.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("intersectionWithMultipleDefaultsInJavaOverriddenByIntersectionInKotlin.kt")
    public void testIntersectionWithMultipleDefaultsInJavaOverriddenByIntersectionInKotlin() {
      runTest("compiler/testData/diagnostics/tests/intersectionWithMultipleDefaultsInJavaOverriddenByIntersectionInKotlin.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("intersectionWithMultipleDefaultsInJavaWithAdditionalSymbolsAfterNonSubsumed.kt")
    public void testIntersectionWithMultipleDefaultsInJavaWithAdditionalSymbolsAfterNonSubsumed() {
      runTest("compiler/testData/diagnostics/tests/intersectionWithMultipleDefaultsInJavaWithAdditionalSymbolsAfterNonSubsumed.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("invalidTargetCrashesCompiler.kt")
    public void testInvalidTargetCrashesCompiler() {
      runTest("compiler/testData/diagnostics/tests/invalidTargetCrashesCompiler.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("invisibleClassInsteadOfFun.kt")
    public void testInvisibleClassInsteadOfFun() {
      runTest("compiler/testData/diagnostics/tests/invisibleClassInsteadOfFun.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("invisibleMemberDestructuring.kt")
    public void testInvisibleMemberDestructuring() {
      runTest("compiler/testData/diagnostics/tests/invisibleMemberDestructuring.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("InvokeAndRecursiveResolve.kt")
    public void testInvokeAndRecursiveResolve() {
      runTest("compiler/testData/diagnostics/tests/InvokeAndRecursiveResolve.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("IsExpressions.kt")
    public void testIsExpressions() {
      runTest("compiler/testData/diagnostics/tests/IsExpressions.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("k2IrParentIssue.kt")
    public void testK2IrParentIssue() {
      runTest("compiler/testData/diagnostics/tests/k2IrParentIssue.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt11167.kt")
    public void testKt11167() {
      runTest("compiler/testData/diagnostics/tests/kt11167.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt13401.kt")
    public void testKt13401() {
      runTest("compiler/testData/diagnostics/tests/kt13401.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt310.kt")
    public void testKt310() {
      runTest("compiler/testData/diagnostics/tests/kt310.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt34440.kt")
    public void testKt34440() {
      runTest("compiler/testData/diagnostics/tests/kt34440.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt34857.kt")
    public void testKt34857() {
      runTest("compiler/testData/diagnostics/tests/kt34857.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt435.kt")
    public void testKt435() {
      runTest("compiler/testData/diagnostics/tests/kt435.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt46483.kt")
    public void testKt46483() {
      runTest("compiler/testData/diagnostics/tests/kt46483.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt49438.kt")
    public void testKt49438() {
      runTest("compiler/testData/diagnostics/tests/kt49438.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt53.kt")
    public void testKt53() {
      runTest("compiler/testData/diagnostics/tests/kt53.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt53988.kt")
    public void testKt53988() {
      runTest("compiler/testData/diagnostics/tests/kt53988.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt54587_1.kt")
    public void testKt54587_1() {
      runTest("compiler/testData/diagnostics/tests/kt54587_1.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt54587_2.kt")
    public void testKt54587_2() {
      runTest("compiler/testData/diagnostics/tests/kt54587_2.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt55181.kt")
    public void testKt55181() {
      runTest("compiler/testData/diagnostics/tests/kt55181.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt55666.kt")
    public void testKt55666() {
      runTest("compiler/testData/diagnostics/tests/kt55666.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt55733.kt")
    public void testKt55733() {
      runTest("compiler/testData/diagnostics/tests/kt55733.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt56612.kt")
    public void testKt56612() {
      runTest("compiler/testData/diagnostics/tests/kt56612.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt56665.kt")
    public void testKt56665() {
      runTest("compiler/testData/diagnostics/tests/kt56665.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt56723.kt")
    public void testKt56723() {
      runTest("compiler/testData/diagnostics/tests/kt56723.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt56769.kt")
    public void testKt56769() {
      runTest("compiler/testData/diagnostics/tests/kt56769.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt56876.kt")
    public void testKt56876() {
      runTest("compiler/testData/diagnostics/tests/kt56876.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt56877.kt")
    public void testKt56877() {
      runTest("compiler/testData/diagnostics/tests/kt56877.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt57085.kt")
    public void testKt57085() {
      runTest("compiler/testData/diagnostics/tests/kt57085.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt57175.kt")
    public void testKt57175() {
      runTest("compiler/testData/diagnostics/tests/kt57175.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt57214.kt")
    public void testKt57214() {
      runTest("compiler/testData/diagnostics/tests/kt57214.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt58583.kt")
    public void testKt58583() {
      runTest("compiler/testData/diagnostics/tests/kt58583.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Kt60343.kt")
    public void testKt60343() {
      runTest("compiler/testData/diagnostics/tests/Kt60343.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt60638.kt")
    public void testKt60638() {
      runTest("compiler/testData/diagnostics/tests/kt60638.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("LValueAssignment.kt")
    public void testLValueAssignment() {
      runTest("compiler/testData/diagnostics/tests/LValueAssignment.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("labeledLambda.kt")
    public void testLabeledLambda() {
      runTest("compiler/testData/diagnostics/tests/labeledLambda.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("LiteralAsResult.kt")
    public void testLiteralAsResult() {
      runTest("compiler/testData/diagnostics/tests/LiteralAsResult.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("LocalClassAndShortSubpackageNames.kt")
    public void testLocalClassAndShortSubpackageNames() {
      runTest("compiler/testData/diagnostics/tests/LocalClassAndShortSubpackageNames.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("localInterfaces.kt")
    public void testLocalInterfaces() {
      runTest("compiler/testData/diagnostics/tests/localInterfaces.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("missedTypeArgumentsInAnnotationCall.kt")
    public void testMissedTypeArgumentsInAnnotationCall() {
      runTest("compiler/testData/diagnostics/tests/missedTypeArgumentsInAnnotationCall.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("missingConflictingOverloads.kt")
    public void testMissingConflictingOverloads() {
      runTest("compiler/testData/diagnostics/tests/missingConflictingOverloads.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("missingIteratorMissing.kt")
    public void testMissingIteratorMissing() {
      runTest("compiler/testData/diagnostics/tests/missingIteratorMissing.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("missingMultipleDefaultsOnTransitiveInheritance1.kt")
    public void testMissingMultipleDefaultsOnTransitiveInheritance1() {
      runTest("compiler/testData/diagnostics/tests/missingMultipleDefaultsOnTransitiveInheritance1.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("missingMultipleDefaultsOnTransitiveInheritance2.kt")
    public void testMissingMultipleDefaultsOnTransitiveInheritance2() {
      runTest("compiler/testData/diagnostics/tests/missingMultipleDefaultsOnTransitiveInheritance2.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("missingWrongAnnotationTarget.kt")
    public void testMissingWrongAnnotationTarget() {
      runTest("compiler/testData/diagnostics/tests/missingWrongAnnotationTarget.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("moreThanOneOverriddenMissingK2.kt")
    public void testMoreThanOneOverriddenMissingK2() {
      runTest("compiler/testData/diagnostics/tests/moreThanOneOverriddenMissingK2.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("MultilineStringTemplates.kt")
    public void testMultilineStringTemplates() {
      runTest("compiler/testData/diagnostics/tests/MultilineStringTemplates.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("MultipleBounds.kt")
    public void testMultipleBounds() {
      runTest("compiler/testData/diagnostics/tests/MultipleBounds.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("multipleDefaultsIncorrectlyAllowed1.kt")
    public void testMultipleDefaultsIncorrectlyAllowed1() {
      runTest("compiler/testData/diagnostics/tests/multipleDefaultsIncorrectlyAllowed1.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("multipleDefaultsIncorrectlyAllowed2.kt")
    public void testMultipleDefaultsIncorrectlyAllowed2() {
      runTest("compiler/testData/diagnostics/tests/multipleDefaultsIncorrectlyAllowed2.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("multipleDefaultsNoSource.kt")
    public void testMultipleDefaultsNoSource() {
      runTest("compiler/testData/diagnostics/tests/multipleDefaultsNoSource.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("NamedFunctionTypeParameterInSupertype.kt")
    public void testNamedFunctionTypeParameterInSupertype() {
      runTest("compiler/testData/diagnostics/tests/NamedFunctionTypeParameterInSupertype.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("nestedClassConstructorVsMemberFunctionConflict.kt")
    public void testNestedClassConstructorVsMemberFunctionConflict() {
      runTest("compiler/testData/diagnostics/tests/nestedClassConstructorVsMemberFunctionConflict.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("noLibraryProvidersDuplication.kt")
    public void testNoLibraryProvidersDuplication() {
      runTest("compiler/testData/diagnostics/tests/noLibraryProvidersDuplication.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("noLibraryProvidersDuplicationWithMpp.kt")
    public void testNoLibraryProvidersDuplicationWithMpp() {
      runTest("compiler/testData/diagnostics/tests/noLibraryProvidersDuplicationWithMpp.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("noSymbolProvidersDuplicationInDiamond.kt")
    public void testNoSymbolProvidersDuplicationInDiamond() {
      runTest("compiler/testData/diagnostics/tests/noSymbolProvidersDuplicationInDiamond.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("noUnusedOnDelegationWithProvider.kt")
    public void testNoUnusedOnDelegationWithProvider() {
      runTest("compiler/testData/diagnostics/tests/noUnusedOnDelegationWithProvider.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("nonConstNotCall.kt")
    public void testNonConstNotCall() {
      runTest("compiler/testData/diagnostics/tests/nonConstNotCall.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Nullability.kt")
    public void testNullability() {
      runTest("compiler/testData/diagnostics/tests/Nullability.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("NumberPrefixAndSuffix.kt")
    public void testNumberPrefixAndSuffix() {
      runTest("compiler/testData/diagnostics/tests/NumberPrefixAndSuffix.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ObjectWithConstructor.kt")
    public void testObjectWithConstructor() {
      runTest("compiler/testData/diagnostics/tests/ObjectWithConstructor.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("OperatorChecks.kt")
    public void testOperatorChecks() {
      runTest("compiler/testData/diagnostics/tests/OperatorChecks.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("OperatorConventions.kt")
    public void testOperatorConventions() {
      runTest("compiler/testData/diagnostics/tests/OperatorConventions.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Operators.kt")
    public void testOperators() {
      runTest("compiler/testData/diagnostics/tests/Operators.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("OperatorsWithWrongNames.kt")
    public void testOperatorsWithWrongNames() {
      runTest("compiler/testData/diagnostics/tests/OperatorsWithWrongNames.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("OverrideFunctionWithParamDefaultValue.kt")
    public void testOverrideFunctionWithParamDefaultValue() {
      runTest("compiler/testData/diagnostics/tests/OverrideFunctionWithParamDefaultValue.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("overrideNotNull_Fail.kt")
    public void testOverrideNotNull_Fail() {
      runTest("compiler/testData/diagnostics/tests/overrideNotNull_Fail.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("overrideNotNull_Ok.kt")
    public void testOverrideNotNull_Ok() {
      runTest("compiler/testData/diagnostics/tests/overrideNotNull_Ok.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("OverridenFunctionAndSpecifiedTypeParameter.kt")
    public void testOverridenFunctionAndSpecifiedTypeParameter() {
      runTest("compiler/testData/diagnostics/tests/OverridenFunctionAndSpecifiedTypeParameter.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("OverridenSetterVisibility.kt")
    public void testOverridenSetterVisibility() {
      runTest("compiler/testData/diagnostics/tests/OverridenSetterVisibility.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("OverridingVarByVal.kt")
    public void testOverridingVarByVal() {
      runTest("compiler/testData/diagnostics/tests/OverridingVarByVal.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("PackageInExpressionPosition.kt")
    public void testPackageInExpressionPosition() {
      runTest("compiler/testData/diagnostics/tests/PackageInExpressionPosition.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("PackageInTypePosition.kt")
    public void testPackageInTypePosition() {
      runTest("compiler/testData/diagnostics/tests/PackageInTypePosition.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("PackageQualified.kt")
    public void testPackageQualified() {
      runTest("compiler/testData/diagnostics/tests/PackageQualified.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("phantomIntersections.kt")
    public void testPhantomIntersections() {
      runTest("compiler/testData/diagnostics/tests/phantomIntersections.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("postfixIncSmartCast.kt")
    public void testPostfixIncSmartCast() {
      runTest("compiler/testData/diagnostics/tests/postfixIncSmartCast.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("prefixIncReturnType.kt")
    public void testPrefixIncReturnType() {
      runTest("compiler/testData/diagnostics/tests/prefixIncReturnType.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("prefixIncSmartCast.kt")
    public void testPrefixIncSmartCast() {
      runTest("compiler/testData/diagnostics/tests/prefixIncSmartCast.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("PrimaryConstructors.kt")
    public void testPrimaryConstructors() {
      runTest("compiler/testData/diagnostics/tests/PrimaryConstructors.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("PrivateFromOuterPackage.kt")
    public void testPrivateFromOuterPackage() {
      runTest("compiler/testData/diagnostics/tests/PrivateFromOuterPackage.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("PrivateSetterForOverridden.kt")
    public void testPrivateSetterForOverridden() {
      runTest("compiler/testData/diagnostics/tests/PrivateSetterForOverridden.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ProcessingEmptyImport.kt")
    public void testProcessingEmptyImport() {
      runTest("compiler/testData/diagnostics/tests/ProcessingEmptyImport.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ProjectionOnFunctionArgumentErrror.kt")
    public void testProjectionOnFunctionArgumentErrror() {
      runTest("compiler/testData/diagnostics/tests/ProjectionOnFunctionArgumentErrror.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ProjectionsInSupertypes.kt")
    public void testProjectionsInSupertypes() {
      runTest("compiler/testData/diagnostics/tests/ProjectionsInSupertypes.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("properDefaultInitializationInTailrec.kt")
    public void testProperDefaultInitializationInTailrec() {
      runTest("compiler/testData/diagnostics/tests/properDefaultInitializationInTailrec.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Properties.kt")
    public void testProperties() {
      runTest("compiler/testData/diagnostics/tests/Properties.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("PropertyInitializers.kt")
    public void testPropertyInitializers() {
      runTest("compiler/testData/diagnostics/tests/PropertyInitializers.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("protectedWithGenericsInDifferentPackage.kt")
    public void testProtectedWithGenericsInDifferentPackage() {
      runTest("compiler/testData/diagnostics/tests/protectedWithGenericsInDifferentPackage.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("publishedApi.kt")
    public void testPublishedApi() {
      runTest("compiler/testData/diagnostics/tests/publishedApi.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("publishedApiOverride.kt")
    public void testPublishedApiOverride() {
      runTest("compiler/testData/diagnostics/tests/publishedApiOverride.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("QualifiedExpressions.kt")
    public void testQualifiedExpressions() {
      runTest("compiler/testData/diagnostics/tests/QualifiedExpressions.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("rawCastToStarProjection_Fail.kt")
    public void testRawCastToStarProjection_Fail() {
      runTest("compiler/testData/diagnostics/tests/rawCastToStarProjection_Fail.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("rawCastToStarProjection_Ok.kt")
    public void testRawCastToStarProjection_Ok() {
      runTest("compiler/testData/diagnostics/tests/rawCastToStarProjection_Ok.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("receiverResolutionInDelegatedConstructor.kt")
    public void testReceiverResolutionInDelegatedConstructor() {
      runTest("compiler/testData/diagnostics/tests/receiverResolutionInDelegatedConstructor.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("RecursiveResolve.kt")
    public void testRecursiveResolve() {
      runTest("compiler/testData/diagnostics/tests/RecursiveResolve.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("RecursiveTypeInference.kt")
    public void testRecursiveTypeInference() {
      runTest("compiler/testData/diagnostics/tests/RecursiveTypeInference.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("RecursiveTypeParameterEqualityCheck.kt")
    public void testRecursiveTypeParameterEqualityCheck() {
      runTest("compiler/testData/diagnostics/tests/RecursiveTypeParameterEqualityCheck.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("referenceToParameterizedFun.kt")
    public void testReferenceToParameterizedFun() {
      runTest("compiler/testData/diagnostics/tests/referenceToParameterizedFun.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ReserveYield.kt")
    public void testReserveYield() {
      runTest("compiler/testData/diagnostics/tests/ReserveYield.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ReserveYield2.kt")
    public void testReserveYield2() {
      runTest("compiler/testData/diagnostics/tests/ReserveYield2.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ReserveYieldNoMore.kt")
    public void testReserveYieldNoMore() {
      runTest("compiler/testData/diagnostics/tests/ReserveYieldNoMore.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ReserveYieldNoMore2.kt")
    public void testReserveYieldNoMore2() {
      runTest("compiler/testData/diagnostics/tests/ReserveYieldNoMore2.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("resolutionToTypealiasInsteadOfProperty.kt")
    public void testResolutionToTypealiasInsteadOfProperty() {
      runTest("compiler/testData/diagnostics/tests/resolutionToTypealiasInsteadOfProperty.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ResolveOfJavaGenerics.kt")
    public void testResolveOfJavaGenerics() {
      runTest("compiler/testData/diagnostics/tests/ResolveOfJavaGenerics.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ResolveToJava.kt")
    public void testResolveToJava() {
      runTest("compiler/testData/diagnostics/tests/ResolveToJava.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Return.kt")
    public void testReturn() {
      runTest("compiler/testData/diagnostics/tests/Return.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ReturnInFunctionWithoutBody.kt")
    public void testReturnInFunctionWithoutBody() {
      runTest("compiler/testData/diagnostics/tests/ReturnInFunctionWithoutBody.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("safeCall.kt")
    public void testSafeCall() {
      runTest("compiler/testData/diagnostics/tests/safeCall.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("SafeCallInvoke.kt")
    public void testSafeCallInvoke() {
      runTest("compiler/testData/diagnostics/tests/SafeCallInvoke.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("SafeCallNonNullReceiver.kt")
    public void testSafeCallNonNullReceiver() {
      runTest("compiler/testData/diagnostics/tests/SafeCallNonNullReceiver.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("SafeCallNonNullReceiver2.kt")
    public void testSafeCallNonNullReceiver2() {
      runTest("compiler/testData/diagnostics/tests/SafeCallNonNullReceiver2.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("SafeCallNonNullReceiverReturnNull.kt")
    public void testSafeCallNonNullReceiverReturnNull() {
      runTest("compiler/testData/diagnostics/tests/SafeCallNonNullReceiverReturnNull.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("SafeCallOnFakePackage.kt")
    public void testSafeCallOnFakePackage() {
      runTest("compiler/testData/diagnostics/tests/SafeCallOnFakePackage.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("SafeCallOnSuperReceiver.kt")
    public void testSafeCallOnSuperReceiver() {
      runTest("compiler/testData/diagnostics/tests/SafeCallOnSuperReceiver.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("SafeCallUnknownType.kt")
    public void testSafeCallUnknownType() {
      runTest("compiler/testData/diagnostics/tests/SafeCallUnknownType.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Serializable.kt")
    public void testSerializable() {
      runTest("compiler/testData/diagnostics/tests/Serializable.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("SetterVisibility.kt")
    public void testSetterVisibility() {
      runTest("compiler/testData/diagnostics/tests/SetterVisibility.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ShiftFunctionTypes.kt")
    public void testShiftFunctionTypes() {
      runTest("compiler/testData/diagnostics/tests/ShiftFunctionTypes.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("StarsInFunctionCalls.kt")
    public void testStarsInFunctionCalls() {
      runTest("compiler/testData/diagnostics/tests/StarsInFunctionCalls.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("StringPrefixAndSuffix.kt")
    public void testStringPrefixAndSuffix() {
      runTest("compiler/testData/diagnostics/tests/StringPrefixAndSuffix.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("StringTemplates.kt")
    public void testStringTemplates() {
      runTest("compiler/testData/diagnostics/tests/StringTemplates.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("superQualifierTypeArgsInDelegatedConstructorCall.kt")
    public void testSuperQualifierTypeArgsInDelegatedConstructorCall() {
      runTest("compiler/testData/diagnostics/tests/superQualifierTypeArgsInDelegatedConstructorCall.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("SupertypeListChecks.kt")
    public void testSupertypeListChecks() {
      runTest("compiler/testData/diagnostics/tests/SupertypeListChecks.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("suppressExposedPropertyTypeInConstructor.kt")
    public void testSuppressExposedPropertyTypeInConstructor() {
      runTest("compiler/testData/diagnostics/tests/suppressExposedPropertyTypeInConstructor.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("suppressExposedPropertyTypeInPrivateConstructor.kt")
    public void testSuppressExposedPropertyTypeInPrivateConstructor() {
      runTest("compiler/testData/diagnostics/tests/suppressExposedPropertyTypeInPrivateConstructor.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("suppressInWhen.kt")
    public void testSuppressInWhen() {
      runTest("compiler/testData/diagnostics/tests/suppressInWhen.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("suppressNamedArg.kt")
    public void testSuppressNamedArg() {
      runTest("compiler/testData/diagnostics/tests/suppressNamedArg.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("suppressOnPlusAssign.kt")
    public void testSuppressOnPlusAssign() {
      runTest("compiler/testData/diagnostics/tests/suppressOnPlusAssign.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("suspendConflictingOverloads.kt")
    public void testSuspendConflictingOverloads() {
      runTest("compiler/testData/diagnostics/tests/suspendConflictingOverloads.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("suspendFunAndPrivateJava.kt")
    public void testSuspendFunAndPrivateJava() {
      runTest("compiler/testData/diagnostics/tests/suspendFunAndPrivateJava.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("SyntaxErrorInTestHighlighting.kt")
    public void testSyntaxErrorInTestHighlighting() {
      runTest("compiler/testData/diagnostics/tests/SyntaxErrorInTestHighlighting.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("SyntaxErrorInTestHighlightingEof.kt")
    public void testSyntaxErrorInTestHighlightingEof() {
      runTest("compiler/testData/diagnostics/tests/SyntaxErrorInTestHighlightingEof.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("syntheticSet.kt")
    public void testSyntheticSet() {
      runTest("compiler/testData/diagnostics/tests/syntheticSet.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("syntheticSetFalsePositive.kt")
    public void testSyntheticSetFalsePositive() {
      runTest("compiler/testData/diagnostics/tests/syntheticSetFalsePositive.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("tailRecBasic.kt")
    public void testTailRecBasic() {
      runTest("compiler/testData/diagnostics/tests/tailRecBasic.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("tailRecInNestedScopes.kt")
    public void testTailRecInNestedScopes() {
      runTest("compiler/testData/diagnostics/tests/tailRecInNestedScopes.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("tailRecInTry.kt")
    public void testTailRecInTry() {
      runTest("compiler/testData/diagnostics/tests/tailRecInTry.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("tailRecOnVirtualMember.kt")
    public void testTailRecOnVirtualMember() {
      runTest("compiler/testData/diagnostics/tests/tailRecOnVirtualMember.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("tailRecOnVirtualMemberError.kt")
    public void testTailRecOnVirtualMemberError() {
      runTest("compiler/testData/diagnostics/tests/tailRecOnVirtualMemberError.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("tailRecOverridden.kt")
    public void testTailRecOverridden() {
      runTest("compiler/testData/diagnostics/tests/tailRecOverridden.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("tailRecSingleton.kt")
    public void testTailRecSingleton() {
      runTest("compiler/testData/diagnostics/tests/tailRecSingleton.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("tailRecWithDispatchReceiver.kt")
    public void testTailRecWithDispatchReceiver() {
      runTest("compiler/testData/diagnostics/tests/tailRecWithDispatchReceiver.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("tailRecWithExtensionReceiver.kt")
    public void testTailRecWithExtensionReceiver() {
      runTest("compiler/testData/diagnostics/tests/tailRecWithExtensionReceiver.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("tailRecursionComplex.kt")
    public void testTailRecursionComplex() {
      runTest("compiler/testData/diagnostics/tests/tailRecursionComplex.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("tailrec.kt")
    public void testTailrec() {
      runTest("compiler/testData/diagnostics/tests/tailrec.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("TraitOverrideObjectMethods.kt")
    public void testTraitOverrideObjectMethods() {
      runTest("compiler/testData/diagnostics/tests/TraitOverrideObjectMethods.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("TraitWithConstructor.kt")
    public void testTraitWithConstructor() {
      runTest("compiler/testData/diagnostics/tests/TraitWithConstructor.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("TypeInference.kt")
    public void testTypeInference() {
      runTest("compiler/testData/diagnostics/tests/TypeInference.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("TypeMismatchOnOverrideWithSyntaxErrors.kt")
    public void testTypeMismatchOnOverrideWithSyntaxErrors() {
      runTest("compiler/testData/diagnostics/tests/TypeMismatchOnOverrideWithSyntaxErrors.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("typealiasInAnnotationPrimitiveVararg.kt")
    public void testTypealiasInAnnotationPrimitiveVararg() {
      runTest("compiler/testData/diagnostics/tests/typealiasInAnnotationPrimitiveVararg.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Underscore.kt")
    public void testUnderscore() {
      runTest("compiler/testData/diagnostics/tests/Underscore.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("UnderscoreUsageInAnnotation.kt")
    public void testUnderscoreUsageInAnnotation() {
      runTest("compiler/testData/diagnostics/tests/UnderscoreUsageInAnnotation.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("UnderscoreUsageInCall.kt")
    public void testUnderscoreUsageInCall() {
      runTest("compiler/testData/diagnostics/tests/UnderscoreUsageInCall.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("UnderscoreUsageInCallableRefTypeLHS.kt")
    public void testUnderscoreUsageInCallableRefTypeLHS() {
      runTest("compiler/testData/diagnostics/tests/UnderscoreUsageInCallableRefTypeLHS.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("UnderscoreUsageInType.kt")
    public void testUnderscoreUsageInType() {
      runTest("compiler/testData/diagnostics/tests/UnderscoreUsageInType.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("UnderscoreUsageInVariableAsFunctionCall.kt")
    public void testUnderscoreUsageInVariableAsFunctionCall() {
      runTest("compiler/testData/diagnostics/tests/UnderscoreUsageInVariableAsFunctionCall.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("unexpectedSafeCall.kt")
    public void testUnexpectedSafeCall() {
      runTest("compiler/testData/diagnostics/tests/unexpectedSafeCall.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("UnitByDefaultForFunctionTypes.kt")
    public void testUnitByDefaultForFunctionTypes() {
      runTest("compiler/testData/diagnostics/tests/UnitByDefaultForFunctionTypes.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("UnitValue.kt")
    public void testUnitValue() {
      runTest("compiler/testData/diagnostics/tests/UnitValue.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("unnamedArgsInJavaAnnotations.kt")
    public void testUnnamedArgsInJavaAnnotations() {
      runTest("compiler/testData/diagnostics/tests/unnamedArgsInJavaAnnotations.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("unproperDefaultInitializationInTailrec.kt")
    public void testUnproperDefaultInitializationInTailrec() {
      runTest("compiler/testData/diagnostics/tests/unproperDefaultInitializationInTailrec.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Unresolved.kt")
    public void testUnresolved() {
      runTest("compiler/testData/diagnostics/tests/Unresolved.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("unresolvedNameInBackticksInReceiver.kt")
    public void testUnresolvedNameInBackticksInReceiver() {
      runTest("compiler/testData/diagnostics/tests/unresolvedNameInBackticksInReceiver.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("UnusedInDestructuring.kt")
    public void testUnusedInDestructuring() {
      runTest("compiler/testData/diagnostics/tests/UnusedInDestructuring.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("UnusedParameters.kt")
    public void testUnusedParameters() {
      runTest("compiler/testData/diagnostics/tests/UnusedParameters.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("unusedVariableOnRegularDelegatedProperty.kt")
    public void testUnusedVariableOnRegularDelegatedProperty() {
      runTest("compiler/testData/diagnostics/tests/unusedVariableOnRegularDelegatedProperty.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("UnusedVariables.kt")
    public void testUnusedVariables() {
      runTest("compiler/testData/diagnostics/tests/UnusedVariables.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ValAndFunOverrideCompatibilityClash.kt")
    public void testValAndFunOverrideCompatibilityClash() {
      runTest("compiler/testData/diagnostics/tests/ValAndFunOverrideCompatibilityClash.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("VarargTypes.kt")
    public void testVarargTypes() {
      runTest("compiler/testData/diagnostics/tests/VarargTypes.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Varargs.kt")
    public void testVarargs() {
      runTest("compiler/testData/diagnostics/tests/Varargs.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("Variance.kt")
    public void testVariance() {
      runTest("compiler/testData/diagnostics/tests/Variance.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("whileConditionExpectedType.kt")
    public void testWhileConditionExpectedType() {
      runTest("compiler/testData/diagnostics/tests/whileConditionExpectedType.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/annotations")
    @TestDataPath("$PROJECT_ROOT")
    public class Annotations {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInAnnotations() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AmbigiousAnnotationConstructor.kt")
      public void testAmbigiousAnnotationConstructor() {
        runTest("compiler/testData/diagnostics/tests/annotations/AmbigiousAnnotationConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotatedBlock.kt")
      public void testAnnotatedBlock() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedBlock.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotatedCatchValueParameter.kt")
      public void testAnnotatedCatchValueParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedCatchValueParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotatedConstructor.kt")
      public void testAnnotatedConstructor() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotatedConstructorParams.kt")
      public void testAnnotatedConstructorParams() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedConstructorParams.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotatedErrorTypeRef.kt")
      public void testAnnotatedErrorTypeRef() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedErrorTypeRef.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotatedExpressionInsideAnnotation.kt")
      public void testAnnotatedExpressionInsideAnnotation() {
        runTest("compiler/testData/diagnostics/tests/annotations/annotatedExpressionInsideAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotatedLocalObjectFun.kt")
      public void testAnnotatedLocalObjectFun() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedLocalObjectFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotatedLocalObjectProperty.kt")
      public void testAnnotatedLocalObjectProperty() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedLocalObjectProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotatedLoop.kt")
      public void testAnnotatedLoop() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedLoop.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotatedNullableTypes.kt")
      public void testAnnotatedNullableTypes() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedNullableTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotatedResultType.kt")
      public void testAnnotatedResultType() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedResultType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotatedTryCatch.kt")
      public void testAnnotatedTryCatch() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedTryCatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotationAsDefaultParameter.kt")
      public void testAnnotationAsDefaultParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotationAsDefaultParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotationForClassTypeParameter_15.kt")
      public void testAnnotationForClassTypeParameter_15() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotationForClassTypeParameter_15.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotationForClassTypeParameter_16.kt")
      public void testAnnotationForClassTypeParameter_16() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotationForClassTypeParameter_16.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotationForClassTypeParameter_typeUseFlag.kt")
      public void testAnnotationForClassTypeParameter_typeUseFlag() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotationForClassTypeParameter_typeUseFlag.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotationForFunctionTypeParameter.kt")
      public void testAnnotationForFunctionTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotationForFunctionTypeParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotationForObject.kt")
      public void testAnnotationForObject() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotationForObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotationIdentifier.kt")
      public void testAnnotationIdentifier() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotationIdentifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationInheritance.kt")
      public void testAnnotationInheritance() {
        runTest("compiler/testData/diagnostics/tests/annotations/annotationInheritance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationModifier.kt")
      public void testAnnotationModifier() {
        runTest("compiler/testData/diagnostics/tests/annotations/annotationModifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotationOnObject.kt")
      public void testAnnotationOnObject() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotationOnObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationOnParameterInFunctionType.kt")
      public void testAnnotationOnParameterInFunctionType() {
        runTest("compiler/testData/diagnostics/tests/annotations/annotationOnParameterInFunctionType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationRenderingInTypes.kt")
      public void testAnnotationRenderingInTypes() {
        runTest("compiler/testData/diagnostics/tests/annotations/annotationRenderingInTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotationsForClasses.kt")
      public void testAnnotationsForClasses() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotationsForClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotationsForPropertyTypeParameter.kt")
      public void testAnnotationsForPropertyTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotationsForPropertyTypeParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationsOnDataClassCopy.kt")
      public void testAnnotationsOnDataClassCopy() {
        runTest("compiler/testData/diagnostics/tests/annotations/annotationsOnDataClassCopy.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationsOnLambdaAsCallArgument.kt")
      public void testAnnotationsOnLambdaAsCallArgument() {
        runTest("compiler/testData/diagnostics/tests/annotations/annotationsOnLambdaAsCallArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationsOnNullableTypes.kt")
      public void testAnnotationsOnNullableTypes() {
        runTest("compiler/testData/diagnostics/tests/annotations/annotationsOnNullableTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayLiteralInAnnotationCompanion_after.kt")
      public void testArrayLiteralInAnnotationCompanion_after() {
        runTest("compiler/testData/diagnostics/tests/annotations/arrayLiteralInAnnotationCompanion_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayLiteralInAnnotationCompanion_before.kt")
      public void testArrayLiteralInAnnotationCompanion_before() {
        runTest("compiler/testData/diagnostics/tests/annotations/arrayLiteralInAnnotationCompanion_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("atAnnotationResolve.kt")
      public void testAtAnnotationResolve() {
        runTest("compiler/testData/diagnostics/tests/annotations/atAnnotationResolve.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BasicAnnotations.kt")
      public void testBasicAnnotations() {
        runTest("compiler/testData/diagnostics/tests/annotations/BasicAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("blockLevelOnTheSameLineWarning.kt")
      public void testBlockLevelOnTheSameLineWarning() {
        runTest("compiler/testData/diagnostics/tests/annotations/blockLevelOnTheSameLineWarning.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classAnnotationsInLocalClass.kt")
      public void testClassAnnotationsInLocalClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/classAnnotationsInLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("companionAnnotations.kt")
      public void testCompanionAnnotations() {
        runTest("compiler/testData/diagnostics/tests/annotations/companionAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constantFromOuterScopeAsAnnotaionParameter.kt")
      public void testConstantFromOuterScopeAsAnnotaionParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/constantFromOuterScopeAsAnnotaionParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConstructorCall.kt")
      public void testConstructorCall() {
        runTest("compiler/testData/diagnostics/tests/annotations/ConstructorCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConstructorCallAllowed.kt")
      public void testConstructorCallAllowed() {
        runTest("compiler/testData/diagnostics/tests/annotations/ConstructorCallAllowed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnFunction.kt")
      public void testCycleAnnotationOnFunction() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnFunctionInsideLocalClass.kt")
      public void testCycleAnnotationOnFunctionInsideLocalClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnFunctionInsideLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnFunctionParameterType.kt")
      public void testCycleAnnotationOnFunctionParameterType() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnFunctionParameterType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnFunctionParameterTypeInsideLocalClass.kt")
      public void testCycleAnnotationOnFunctionParameterTypeInsideLocalClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnFunctionParameterTypeInsideLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnProperty.kt")
      public void testCycleAnnotationOnProperty() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnPropertyField.kt")
      public void testCycleAnnotationOnPropertyField() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnPropertyField.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnPropertyFieldInsideLocalClass.kt")
      public void testCycleAnnotationOnPropertyFieldInsideLocalClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnPropertyFieldInsideLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnPropertyInsideLocalClass.kt")
      public void testCycleAnnotationOnPropertyInsideLocalClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnPropertyInsideLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnReceiverParameterFunction.kt")
      public void testCycleAnnotationOnReceiverParameterFunction() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnReceiverParameterFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnReceiverParameterFunctionInsideLocalClass.kt")
      public void testCycleAnnotationOnReceiverParameterFunctionInsideLocalClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnReceiverParameterFunctionInsideLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnReceiverParameterProperty.kt")
      public void testCycleAnnotationOnReceiverParameterProperty() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnReceiverParameterProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnReceiverParameterPropertyInsideLocalClass.kt")
      public void testCycleAnnotationOnReceiverParameterPropertyInsideLocalClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnReceiverParameterPropertyInsideLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnTypeParameterFunction.kt")
      public void testCycleAnnotationOnTypeParameterFunction() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnTypeParameterFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnTypeParameterFunctionInsideLocalClass.kt")
      public void testCycleAnnotationOnTypeParameterFunctionInsideLocalClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnTypeParameterFunctionInsideLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnTypeParameterProperty.kt")
      public void testCycleAnnotationOnTypeParameterProperty() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnTypeParameterProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleAnnotationOnTypeParameterPropertyInsideLocalClass.kt")
      public void testCycleAnnotationOnTypeParameterPropertyInsideLocalClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnTypeParameterPropertyInsideLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleInParameters_after.kt")
      public void testCycleInParameters_after() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleInParameters_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleInParameters_array.kt")
      public void testCycleInParameters_array() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleInParameters_array.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cycleInParameters_before.kt")
      public void testCycleInParameters_before() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleInParameters_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("danglingAnnotation.kt")
      public void testDanglingAnnotation() {
        runTest("compiler/testData/diagnostics/tests/annotations/danglingAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("danglingAnnotationInLocalClass.kt")
      public void testDanglingAnnotationInLocalClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/danglingAnnotationInLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DanglingInScript.kts")
      public void testDanglingInScript() {
        runTest("compiler/testData/diagnostics/tests/annotations/DanglingInScript.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DanglingMixed.kt")
      public void testDanglingMixed() {
        runTest("compiler/testData/diagnostics/tests/annotations/DanglingMixed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DanglingNoBrackets.kt")
      public void testDanglingNoBrackets() {
        runTest("compiler/testData/diagnostics/tests/annotations/DanglingNoBrackets.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DanglingWithBrackets.kt")
      public void testDanglingWithBrackets() {
        runTest("compiler/testData/diagnostics/tests/annotations/DanglingWithBrackets.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Deprecated.kt")
      public void testDeprecated() {
        runTest("compiler/testData/diagnostics/tests/annotations/Deprecated.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DeprecatedInJavaDoc.kt")
      public void testDeprecatedInJavaDoc() {
        runTest("compiler/testData/diagnostics/tests/annotations/DeprecatedInJavaDoc.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DeprecationOnAny.kt")
      public void testDeprecationOnAny() {
        runTest("compiler/testData/diagnostics/tests/annotations/DeprecationOnAny.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dontReportWarningAboutChangingExecutionOrderForVararg.kt")
      public void testDontReportWarningAboutChangingExecutionOrderForVararg() {
        runTest("compiler/testData/diagnostics/tests/annotations/dontReportWarningAboutChangingExecutionOrderForVararg.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extensionFunctionType.kt")
      public void testExtensionFunctionType() {
        runTest("compiler/testData/diagnostics/tests/annotations/extensionFunctionType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("forParameterAnnotationResolve.kt")
      public void testForParameterAnnotationResolve() {
        runTest("compiler/testData/diagnostics/tests/annotations/forParameterAnnotationResolve.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionParameterAsImplicitReturnType.kt")
      public void testFunctionParameterAsImplicitReturnType() {
        runTest("compiler/testData/diagnostics/tests/annotations/functionParameterAsImplicitReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("illegalRequireKotlinValue.kt")
      public void testIllegalRequireKotlinValue() {
        runTest("compiler/testData/diagnostics/tests/annotations/illegalRequireKotlinValue.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("illegalSinceKotlinValue.kt")
      public void testIllegalSinceKotlinValue() {
        runTest("compiler/testData/diagnostics/tests/annotations/illegalSinceKotlinValue.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inheritFromAnnotationClass.kt")
      public void testInheritFromAnnotationClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/inheritFromAnnotationClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inheritFromAnnotationClass2.kt")
      public void testInheritFromAnnotationClass2() {
        runTest("compiler/testData/diagnostics/tests/annotations/inheritFromAnnotationClass2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InheritingAnnotationClass.kt")
      public void testInheritingAnnotationClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/InheritingAnnotationClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("initializerWithNestedAnnotation.kt")
      public void testInitializerWithNestedAnnotation() {
        runTest("compiler/testData/diagnostics/tests/annotations/initializerWithNestedAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("initializerWithNestedAnnotationInLocalClass.kt")
      public void testInitializerWithNestedAnnotationInLocalClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/initializerWithNestedAnnotationInLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invalidTypesInAnnotationConstructor.kt")
      public void testInvalidTypesInAnnotationConstructor() {
        runTest("compiler/testData/diagnostics/tests/annotations/invalidTypesInAnnotationConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaAnnotationAndJavaClassWithIt.kt")
      public void testJavaAnnotationAndJavaClassWithIt() {
        runTest("compiler/testData/diagnostics/tests/annotations/javaAnnotationAndJavaClassWithIt.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("JavaAnnotationConstructors.kt")
      public void testJavaAnnotationConstructors() {
        runTest("compiler/testData/diagnostics/tests/annotations/JavaAnnotationConstructors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaAnnotationWithClassArray.kt")
      public void testJavaAnnotationWithClassArray() {
        runTest("compiler/testData/diagnostics/tests/annotations/javaAnnotationWithClassArray.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaAnnotationWithParameter.kt")
      public void testJavaAnnotationWithParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/javaAnnotationWithParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("JvmSerializableLambdaAnnotation.kt")
      public void testJvmSerializableLambdaAnnotation() {
        runTest("compiler/testData/diagnostics/tests/annotations/JvmSerializableLambdaAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1860-negative.kt")
      public void testKt1860_negative() {
        runTest("compiler/testData/diagnostics/tests/annotations/kt1860-negative.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1860-positive.kt")
      public void testKt1860_positive() {
        runTest("compiler/testData/diagnostics/tests/annotations/kt1860-positive.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1886annotationBody_after.kt")
      public void testKt1886annotationBody_after() {
        runTest("compiler/testData/diagnostics/tests/annotations/kt1886annotationBody_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1886annotationBody_before.kt")
      public void testKt1886annotationBody_before() {
        runTest("compiler/testData/diagnostics/tests/annotations/kt1886annotationBody_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localImplicitTypeUnavailable.kt")
      public void testLocalImplicitTypeUnavailable() {
        runTest("compiler/testData/diagnostics/tests/annotations/localImplicitTypeUnavailable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("missingValOnParameter.kt")
      public void testMissingValOnParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/missingValOnParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MultiDeclaration.kt")
      public void testMultiDeclaration() {
        runTest("compiler/testData/diagnostics/tests/annotations/MultiDeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MutuallyRecursivelyAnnotatedGlobalFunction.kt")
      public void testMutuallyRecursivelyAnnotatedGlobalFunction() {
        runTest("compiler/testData/diagnostics/tests/annotations/MutuallyRecursivelyAnnotatedGlobalFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedAliasWithNestedAnnotation.kt")
      public void testNestedAliasWithNestedAnnotation() {
        runTest("compiler/testData/diagnostics/tests/annotations/nestedAliasWithNestedAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedAliasWithNestedAnnotationInLocalClass.kt")
      public void testNestedAliasWithNestedAnnotationInLocalClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/nestedAliasWithNestedAnnotationInLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedAnnotationOnOuterClassDeclaration.kt")
      public void testNestedAnnotationOnOuterClassDeclaration() {
        runTest("compiler/testData/diagnostics/tests/annotations/nestedAnnotationOnOuterClassDeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassAsAnnotationParameter.kt")
      public void testNestedClassAsAnnotationParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/nestedClassAsAnnotationParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassAsIsAsAnnotationParameter.kt")
      public void testNestedClassAsIsAsAnnotationParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/nestedClassAsIsAsAnnotationParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassesInAnnotations.kt")
      public void testNestedClassesInAnnotations() {
        runTest("compiler/testData/diagnostics/tests/annotations/nestedClassesInAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedObjectAsAnnotationParameter.kt")
      public void testNestedObjectAsAnnotationParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/nestedObjectAsAnnotationParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noNameProperty.kt")
      public void testNoNameProperty() {
        runTest("compiler/testData/diagnostics/tests/annotations/noNameProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonAnnotationClass.kt")
      public void testNonAnnotationClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/NonAnnotationClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("onExpression.kt")
      public void testOnExpression() {
        runTest("compiler/testData/diagnostics/tests/annotations/onExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("onFunctionParameter.kt")
      public void testOnFunctionParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/onFunctionParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("onInitializer.kt")
      public void testOnInitializer() {
        runTest("compiler/testData/diagnostics/tests/annotations/onInitializer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("onLoops.kt")
      public void testOnLoops() {
        runTest("compiler/testData/diagnostics/tests/annotations/onLoops.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("onLoopsUnreachable.kt")
      public void testOnLoopsUnreachable() {
        runTest("compiler/testData/diagnostics/tests/annotations/onLoopsUnreachable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("onMultiDeclaration.kt")
      public void testOnMultiDeclaration() {
        runTest("compiler/testData/diagnostics/tests/annotations/onMultiDeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OptInWithArrayArgument.kt")
      public void testOptInWithArrayArgument() {
        runTest("compiler/testData/diagnostics/tests/annotations/OptInWithArrayArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propagationAnnotationToLocalMemberFunction.kt")
      public void testPropagationAnnotationToLocalMemberFunction() {
        runTest("compiler/testData/diagnostics/tests/annotations/propagationAnnotationToLocalMemberFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propagationBetweenLocalMemberProperties.kt")
      public void testPropagationBetweenLocalMemberProperties() {
        runTest("compiler/testData/diagnostics/tests/annotations/propagationBetweenLocalMemberProperties.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propagationFromLocalMemberFunctionAnnotation.kt")
      public void testPropagationFromLocalMemberFunctionAnnotation() {
        runTest("compiler/testData/diagnostics/tests/annotations/propagationFromLocalMemberFunctionAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propagationToLocalMemberProperty.kt")
      public void testPropagationToLocalMemberProperty() {
        runTest("compiler/testData/diagnostics/tests/annotations/propagationToLocalMemberProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("qualifiedNestedClassAsAnnotationParameter.kt")
      public void testQualifiedNestedClassAsAnnotationParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/qualifiedNestedClassAsAnnotationParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("qualifiedNestedClassAsIsAsAnnotationParameter.kt")
      public void testQualifiedNestedClassAsIsAsAnnotationParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/qualifiedNestedClassAsIsAsAnnotationParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RecursivelyAnnotated.kt")
      public void testRecursivelyAnnotated() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotated.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RecursivelyAnnotatedFunctionParameter.kt")
      public void testRecursivelyAnnotatedFunctionParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedFunctionParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RecursivelyAnnotatedGlobalFunction.kt")
      public void testRecursivelyAnnotatedGlobalFunction() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedGlobalFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RecursivelyAnnotatedGlobalProperty.kt")
      public void testRecursivelyAnnotatedGlobalProperty() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedGlobalProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RecursivelyAnnotatedParameter.kt")
      public void testRecursivelyAnnotatedParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RecursivelyAnnotatedParameterType.kt")
      public void testRecursivelyAnnotatedParameterType() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedParameterType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RecursivelyAnnotatedParameterWithAt.kt")
      public void testRecursivelyAnnotatedParameterWithAt() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedParameterWithAt.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RecursivelyAnnotatedProperty.kt")
      public void testRecursivelyAnnotatedProperty() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RecursivelyIncorrectlyAnnotatedParameter.kt")
      public void testRecursivelyIncorrectlyAnnotatedParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyIncorrectlyAnnotatedParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("referenceOfAnnotatedFunctionInAnnotation.kt")
      public void testReferenceOfAnnotatedFunctionInAnnotation() {
        runTest("compiler/testData/diagnostics/tests/annotations/referenceOfAnnotatedFunctionInAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("requireKotlin.kt")
      public void testRequireKotlin() {
        runTest("compiler/testData/diagnostics/tests/annotations/requireKotlin.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RetentionsOfAnnotationWithExpressionTarget_after.kt")
      public void testRetentionsOfAnnotationWithExpressionTarget_after() {
        runTest("compiler/testData/diagnostics/tests/annotations/RetentionsOfAnnotationWithExpressionTarget_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RetentionsOfAnnotationWithExpressionTarget_before.kt")
      public void testRetentionsOfAnnotationWithExpressionTarget_before() {
        runTest("compiler/testData/diagnostics/tests/annotations/RetentionsOfAnnotationWithExpressionTarget_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAnnotations.kt")
      public void testTypeAnnotations() {
        runTest("compiler/testData/diagnostics/tests/annotations/typeAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeArgumentsInAnnotation.kt")
      public void testTypeArgumentsInAnnotation() {
        runTest("compiler/testData/diagnostics/tests/annotations/typeArgumentsInAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParameterAnnotations.kt")
      public void testTypeParameterAnnotations() {
        runTest("compiler/testData/diagnostics/tests/annotations/typeParameterAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParameterAnnotationsInLocalClass.kt")
      public void testTypeParameterAnnotationsInLocalClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/typeParameterAnnotationsInLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParameterAsAnnotation.kt")
      public void testTypeParameterAsAnnotation() {
        runTest("compiler/testData/diagnostics/tests/annotations/typeParameterAsAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealiasWithAnnotatedAbstractClass.kt")
      public void testTypealiasWithAnnotatedAbstractClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/typealiasWithAnnotatedAbstractClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unreachableNestedClassAsAnnotationParameter.kt")
      public void testUnreachableNestedClassAsAnnotationParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/unreachableNestedClassAsAnnotationParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("UnresolvedAnnotationOnObject.kt")
      public void testUnresolvedAnnotationOnObject() {
        runTest("compiler/testData/diagnostics/tests/annotations/UnresolvedAnnotationOnObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unresolvedReferenceRange.kt")
      public void testUnresolvedReferenceRange() {
        runTest("compiler/testData/diagnostics/tests/annotations/unresolvedReferenceRange.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WrongAnnotationArgsOnObject.kt")
      public void testWrongAnnotationArgsOnObject() {
        runTest("compiler/testData/diagnostics/tests/annotations/WrongAnnotationArgsOnObject.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationParameterMustBeConstant {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInAnnotationParameterMustBeConstant() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationConstructorDefaultParameter.kt")
        public void testAnnotationConstructorDefaultParameter() {
          runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/annotationConstructorDefaultParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("booleanLocalVal.kt")
        public void testBooleanLocalVal() {
          runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/booleanLocalVal.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("compareAndEquals.kt")
        public void testCompareAndEquals() {
          runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/compareAndEquals.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("enumConst_after.kt")
        public void testEnumConst_after() {
          runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/enumConst_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("enumConst_before.kt")
        public void testEnumConst_before() {
          runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/enumConst_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaProperties.kt")
        public void testJavaProperties() {
          runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/javaProperties.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinProperties.kt")
        public void testKotlinProperties() {
          runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/kotlinProperties.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaParameter.kt")
        public void testLambdaParameter() {
          runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/lambdaParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("standaloneInExpression.kt")
        public void testStandaloneInExpression() {
          runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/standaloneInExpression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("strings.kt")
        public void testStrings() {
          runTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/strings.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/functionalTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class FunctionalTypes {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInFunctionalTypes() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/functionalTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonParenthesizedAnnotationsWithError.kt")
        public void testNonParenthesizedAnnotationsWithError() {
          runTest("compiler/testData/diagnostics/tests/annotations/functionalTypes/nonParenthesizedAnnotationsWithError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonParenthesizedAnnotationsWithoutError.kt")
        public void testNonParenthesizedAnnotationsWithoutError() {
          runTest("compiler/testData/diagnostics/tests/annotations/functionalTypes/nonParenthesizedAnnotationsWithoutError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("parenthesizedAnnotations.kt")
        public void testParenthesizedAnnotations() {
          runTest("compiler/testData/diagnostics/tests/annotations/functionalTypes/parenthesizedAnnotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propagteAnyAnnotations.kt")
        public void testPropagteAnyAnnotations() {
          runTest("compiler/testData/diagnostics/tests/annotations/functionalTypes/propagteAnyAnnotations.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/options")
      @TestDataPath("$PROJECT_ROOT")
      public class Options {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInOptions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/options"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationAsArg.kt")
        public void testAnnotationAsArg() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/annotationAsArg.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationAsArgComplex.kt")
        public void testAnnotationAsArgComplex() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/annotationAsArgComplex.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("assignment.kt")
        public void testAssignment() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/assignment.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("documented.kt")
        public void testDocumented() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/documented.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("forParam.kt")
        public void testForParam() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/forParam.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionExpression.kt")
        public void testFunctionExpression() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/functionExpression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functions.kt")
        public void testFunctions() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/functions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaDocumented.kt")
        public void testJavaDocumented() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/javaDocumented.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaKotlinTargetRetention.kt")
        public void testJavaKotlinTargetRetention() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/javaKotlinTargetRetention.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaKotlinTargetRetentionWithExplicitImport.kt")
        public void testJavaKotlinTargetRetentionWithExplicitImport() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/javaKotlinTargetRetentionWithExplicitImport.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaretention.kt")
        public void testJavaretention() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/javaretention.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multiDeclaration.kt")
        public void testMultiDeclaration() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/multiDeclaration.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("objectLiteral.kt")
        public void testObjectLiteral() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/objectLiteral.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("prefix.kt")
        public void testPrefix() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/prefix.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("retention.kt")
        public void testRetention() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/retention.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("setterParam.kt")
        public void testSetterParam() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/setterParam.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("target.kt")
        public void testTarget() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/target.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unrepeatable.kt")
        public void testUnrepeatable() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/unrepeatable.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/annotations/options/targets")
        @TestDataPath("$PROJECT_ROOT")
        public class Targets {
          @RepeatedTest(value = 5)
          @TestMetadata("accessors.kt")
          public void testAccessors() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/accessors.kt");
          }

          @RepeatedTest(value = 5)
          public void testAllFilesPresentInTargets() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/options/targets"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("annotation.kt")
          public void testAnnotation() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/annotation.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("classifier.kt")
          public void testClassifier() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/classifier.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("constructor.kt")
          public void testConstructor() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/constructor.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("empty.kt")
          public void testEmpty() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/empty.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("expr.kt")
          public void testExpr() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/expr.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("field.kt")
          public void testField() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/field.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("file.kt")
          public void testFile() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/file.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("function.kt")
          public void testFunction() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/function.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("funtypeargs.kt")
          public void testFuntypeargs() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/funtypeargs.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("incorrect.kt")
          public void testIncorrect() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/incorrect.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("init.kt")
          public void testInit() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/init.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("java.kt")
          public void testJava() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/java.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("local.kt")
          public void testLocal() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/local.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("nested.kt")
          public void testNested() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/nested.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("property.kt")
          public void testProperty() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/property.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("returntype.kt")
          public void testReturntype() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/returntype.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("suppress.kt")
          public void testSuppress() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/suppress.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("type.kt")
          public void testType() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/type.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("typeParams.kt")
          public void testTypeParams() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/typeParams.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("typeargs.kt")
          public void testTypeargs() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/typeargs.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("valueparam.kt")
          public void testValueparam() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/valueparam.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/parameters")
      @TestDataPath("$PROJECT_ROOT")
      public class Parameters {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInParameters() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/parameters"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("byte.kt")
        public void testByte() {
          runTest("compiler/testData/diagnostics/tests/annotations/parameters/byte.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("char.kt")
        public void testChar() {
          runTest("compiler/testData/diagnostics/tests/annotations/parameters/char.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("double.kt")
        public void testDouble() {
          runTest("compiler/testData/diagnostics/tests/annotations/parameters/double.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("float.kt")
        public void testFloat() {
          runTest("compiler/testData/diagnostics/tests/annotations/parameters/float.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("int.kt")
        public void testInt() {
          runTest("compiler/testData/diagnostics/tests/annotations/parameters/int.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("long.kt")
        public void testLong() {
          runTest("compiler/testData/diagnostics/tests/annotations/parameters/long.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("short.kt")
        public void testShort() {
          runTest("compiler/testData/diagnostics/tests/annotations/parameters/short.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/annotations/parameters/expressions")
        @TestDataPath("$PROJECT_ROOT")
        public class Expressions {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInExpressions() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/parameters/expressions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("andAnd.kt")
          public void testAndAnd() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/andAnd.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("boolean.kt")
          public void testBoolean() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/boolean.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("char.kt")
          public void testChar() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/char.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("compositeCallBinary.kt")
          public void testCompositeCallBinary() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/compositeCallBinary.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("divide.kt")
          public void testDivide() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/divide.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("double.kt")
          public void testDouble() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/double.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("eqeq.kt")
          public void testEqeq() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/eqeq.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("escapedString.kt")
          public void testEscapedString() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/escapedString.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("float.kt")
          public void testFloat() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/float.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("gt.kt")
          public void testGt() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/gt.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("gteq.kt")
          public void testGteq() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/gteq.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("intrincics.kt")
          public void testIntrincics() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/intrincics.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("labeled.kt")
          public void testLabeled() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/labeled.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("long.kt")
          public void testLong() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/long.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("lt.kt")
          public void testLt() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/lt.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("lteq.kt")
          public void testLteq() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/lteq.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("maxValue.kt")
          public void testMaxValue() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/maxValue.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("maxValueByte.kt")
          public void testMaxValueByte() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/maxValueByte.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("maxValueInt.kt")
          public void testMaxValueInt() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/maxValueInt.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("miltiply.kt")
          public void testMiltiply() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/miltiply.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("minus.kt")
          public void testMinus() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/minus.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("mod.kt")
          public void testMod() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/mod.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("multilineString.kt")
          public void testMultilineString() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/multilineString.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("not.kt")
          public void testNot() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/not.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("noteq.kt")
          public void testNoteq() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/noteq.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("orOr.kt")
          public void testOrOr() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/orOr.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("paranthesized.kt")
          public void testParanthesized() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/paranthesized.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("plus.kt")
          public void testPlus() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/plus.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("simpleCallBinary.kt")
          public void testSimpleCallBinary() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/simpleCallBinary.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("stringPlusInt.kt")
          public void testStringPlusInt() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/stringPlusInt.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("stringTemplate.kt")
          public void testStringTemplate() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/stringTemplate.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("strings.kt")
          public void testStrings() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/strings.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("unaryMinus.kt")
          public void testUnaryMinus() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/unaryMinus.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("unaryPlus.kt")
          public void testUnaryPlus() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/unaryPlus.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/rendering")
      @TestDataPath("$PROJECT_ROOT")
      public class Rendering {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInRendering() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/rendering"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("cannotOverrideInvisibleMember.kt")
        public void testCannotOverrideInvisibleMember() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/cannotOverrideInvisibleMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conflictingOverloads.kt")
        public void testConflictingOverloads() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/conflictingOverloads.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentNamesForParameter.kt")
        public void testDifferentNamesForParameter() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/differentNamesForParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("memberProjectedOut.kt")
        public void testMemberProjectedOut() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/memberProjectedOut.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multipleInheritedDefaults.kt")
        public void testMultipleInheritedDefaults() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/multipleInheritedDefaults.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notImplementedMembers.kt")
        public void testNotImplementedMembers() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/notImplementedMembers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notImplementedMembersAroundJava.kt")
        public void testNotImplementedMembersAroundJava() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/notImplementedMembersAroundJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("tooManyArguments.kt")
        public void testTooManyArguments() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/tooManyArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeMismatchDueToTypeProjections.kt")
        public void testTypeMismatchDueToTypeProjections() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/typeMismatchDueToTypeProjections.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeMismatchOnOverride.kt")
        public void testTypeMismatchOnOverride() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/typeMismatchOnOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeMismatchOnOverrideJavaNullable.kt")
        public void testTypeMismatchOnOverrideJavaNullable() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/typeMismatchOnOverrideJavaNullable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unusedValue.kt")
        public void testUnusedValue() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/unusedValue.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/repeatable")
      @TestDataPath("$PROJECT_ROOT")
      public class Repeatable {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInRepeatable() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/repeatable"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("containerAndAnnotationAreBothApplied_1_5.kt")
        public void testContainerAndAnnotationAreBothApplied_1_5() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/containerAndAnnotationAreBothApplied_1_5.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("containerAndAnnotationAreBothApplied_1_6.kt")
        public void testContainerAndAnnotationAreBothApplied_1_6() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/containerAndAnnotationAreBothApplied_1_6.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("containerArguments_1_5.kt")
        public void testContainerArguments_1_5() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/containerArguments_1_5.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("containerArguments_1_6.kt")
        public void testContainerArguments_1_6() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/containerArguments_1_6.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("containerRetention_1_5.kt")
        public void testContainerRetention_1_5() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/containerRetention_1_5.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("containerRetention_1_6.kt")
        public void testContainerRetention_1_6() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/containerRetention_1_6.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("containerTarget_1_6.kt")
        public void testContainerTarget_1_6() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/containerTarget_1_6.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaRepeatableInKotlin.kt")
        public void testJavaRepeatableInKotlin() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/javaRepeatableInKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaRepeatable_1_5.kt")
        public void testJavaRepeatable_1_5() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/javaRepeatable_1_5.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaRepeatable_1_6.kt")
        public void testJavaRepeatable_1_6() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/javaRepeatable_1_6.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaUnrepeatable_1_5.kt")
        public void testJavaUnrepeatable_1_5() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/javaUnrepeatable_1_5.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaUnrepeatable_1_6.kt")
        public void testJavaUnrepeatable_1_6() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/javaUnrepeatable_1_6.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinRepeatable_1_5.kt")
        public void testKotlinRepeatable_1_5() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/kotlinRepeatable_1_5.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinRepeatable_1_6.kt")
        public void testKotlinRepeatable_1_6() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/kotlinRepeatable_1_6.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedClassContainer_1_5.kt")
        public void testNestedClassContainer_1_5() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/nestedClassContainer_1_5.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedClassContainer_1_6.kt")
        public void testNestedClassContainer_1_6() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/nestedClassContainer_1_6.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/typeUse")
      @TestDataPath("$PROJECT_ROOT")
      public class TypeUse {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInTypeUse() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/typeUse"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitTypeWithInaccessibleAnnotation.kt")
        public void testImplicitTypeWithInaccessibleAnnotation() {
          runTest("compiler/testData/diagnostics/tests/annotations/typeUse/implicitTypeWithInaccessibleAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt19455.kt")
        public void testKt19455() {
          runTest("compiler/testData/diagnostics/tests/annotations/typeUse/kt19455.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt25876.kt")
        public void testKt25876() {
          runTest("compiler/testData/diagnostics/tests/annotations/typeUse/kt25876.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45905.kt")
        public void testKt45905() {
          runTest("compiler/testData/diagnostics/tests/annotations/typeUse/kt45905.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt46173.kt")
        public void testKt46173() {
          runTest("compiler/testData/diagnostics/tests/annotations/typeUse/kt46173.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt47772.kt")
        public void testKt47772() {
          runTest("compiler/testData/diagnostics/tests/annotations/typeUse/kt47772.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt8325.kt")
        public void testKt8325() {
          runTest("compiler/testData/diagnostics/tests/annotations/typeUse/kt8325.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonTypeUseAnnotationOnType.kt")
        public void testNonTypeUseAnnotationOnType() {
          runTest("compiler/testData/diagnostics/tests/annotations/typeUse/nonTypeUseAnnotationOnType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget")
      @TestDataPath("$PROJECT_ROOT")
      public class WithUseSiteTarget {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInWithUseSiteTarget() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("DelegateAnnotations.kt")
        public void testDelegateAnnotations() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/DelegateAnnotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("diagnosticFileAnnotationInWrongPlace.kt")
        public void testDiagnosticFileAnnotationInWrongPlace() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/diagnosticFileAnnotationInWrongPlace.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("diagnosticWithoutPackage.kt")
        public void testDiagnosticWithoutPackage() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/diagnosticWithoutPackage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("diagnosticWithoutPackageWithSimpleAnnotation.kt")
        public void testDiagnosticWithoutPackageWithSimpleAnnotation() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/diagnosticWithoutPackageWithSimpleAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FieldAnnotations.kt")
        public void testFieldAnnotations() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/FieldAnnotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fileAnnotationWithoutColon_after.kt")
        public void testFileAnnotationWithoutColon_after() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/fileAnnotationWithoutColon_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fileAnnotationWithoutColon_before.kt")
        public void testFileAnnotationWithoutColon_before() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/fileAnnotationWithoutColon_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FileAnnotations.kt")
        public void testFileAnnotations() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/FileAnnotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("GetterAnnotations.kt")
        public void testGetterAnnotations() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/GetterAnnotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt23992.kt")
        public void testKt23992() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/kt23992.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt23992_after.kt")
        public void testKt23992_after() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/kt23992_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt26638.kt")
        public void testKt26638() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/kt26638.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt26638_after.kt")
        public void testKt26638_after() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/kt26638_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ParamAnnotations.kt")
        public void testParamAnnotations() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/ParamAnnotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("prohibitUseSiteGetTargetAnnotationsOff.kt")
        public void testProhibitUseSiteGetTargetAnnotationsOff() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/prohibitUseSiteGetTargetAnnotationsOff.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("prohibitUseSiteGetTargetAnnotationsOn.kt")
        public void testProhibitUseSiteGetTargetAnnotationsOn() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/prohibitUseSiteGetTargetAnnotationsOn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("PropertyAnnotations.kt")
        public void testPropertyAnnotations() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/PropertyAnnotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyTargetOnEnumEntry_error.kt")
        public void testPropertyTargetOnEnumEntry_error() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/propertyTargetOnEnumEntry_error.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyTargetOnEnumEntry_warning.kt")
        public void testPropertyTargetOnEnumEntry_warning() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/propertyTargetOnEnumEntry_warning.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ReceiverAnnotations.kt")
        public void testReceiverAnnotations() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/ReceiverAnnotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("receiverUseSiteTargetOnExtensionFunction_after.kt")
        public void testReceiverUseSiteTargetOnExtensionFunction_after() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/receiverUseSiteTargetOnExtensionFunction_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("receiverUseSiteTargetOnExtensionFunction_before.kt")
        public void testReceiverUseSiteTargetOnExtensionFunction_before() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/receiverUseSiteTargetOnExtensionFunction_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("repeatable.kt")
        public void testRepeatable() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/repeatable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SetterAnnotations.kt")
        public void testSetterAnnotations() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/SetterAnnotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SparamAnnotations.kt")
        public void testSparamAnnotations() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/SparamAnnotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("wrongParamAnnotationsOnTypesError.kt")
        public void testWrongParamAnnotationsOnTypesError() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/wrongParamAnnotationsOnTypesError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("wrongParamAnnotationsOnTypes_after.kt")
        public void testWrongParamAnnotationsOnTypes_after() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/wrongParamAnnotationsOnTypes_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("wrongParamAnnotationsOnTypes_before.kt")
        public void testWrongParamAnnotationsOnTypes_before() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/wrongParamAnnotationsOnTypes_before.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/backingField")
    @TestDataPath("$PROJECT_ROOT")
    public class BackingField {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInBackingField() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/backingField"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CustomGetSet.kt")
      public void testCustomGetSet() {
        runTest("compiler/testData/diagnostics/tests/backingField/CustomGetSet.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CustomGetVal.kt")
      public void testCustomGetVal() {
        runTest("compiler/testData/diagnostics/tests/backingField/CustomGetVal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CustomGetValGlobal.kt")
      public void testCustomGetValGlobal() {
        runTest("compiler/testData/diagnostics/tests/backingField/CustomGetValGlobal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CustomGetVar.kt")
      public void testCustomGetVar() {
        runTest("compiler/testData/diagnostics/tests/backingField/CustomGetVar.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CustomSet.kt")
      public void testCustomSet() {
        runTest("compiler/testData/diagnostics/tests/backingField/CustomSet.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExtensionProperty.kt")
      public void testExtensionProperty() {
        runTest("compiler/testData/diagnostics/tests/backingField/ExtensionProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FieldAsParam.kt")
      public void testFieldAsParam() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldAsParam.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FieldAsProperty.kt")
      public void testFieldAsProperty() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldAsProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FieldDerived.kt")
      public void testFieldDerived() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldDerived.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FieldInInterface.kt")
      public void testFieldInInterface() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldInInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FieldInLocal.kt")
      public void testFieldInLocal() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldInLocal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FieldOnVal.kt")
      public void testFieldOnVal() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldOnVal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FieldOnVar.kt")
      public void testFieldOnVar() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldOnVar.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FieldReassignment_after.kt")
      public void testFieldReassignment_after() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldReassignment_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FieldReassignment_before.kt")
      public void testFieldReassignment_before() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldReassignment_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FieldShadow.kt")
      public void testFieldShadow() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldShadow.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InitCustomSetter.kt")
      public void testInitCustomSetter() {
        runTest("compiler/testData/diagnostics/tests/backingField/InitCustomSetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InitOpenSetter.kt")
      public void testInitOpenSetter() {
        runTest("compiler/testData/diagnostics/tests/backingField/InitOpenSetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt782packageLevel.kt")
      public void testKt782packageLevel() {
        runTest("compiler/testData/diagnostics/tests/backingField/kt782packageLevel.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("LocalDeclarations.kt")
      public void testLocalDeclarations() {
        runTest("compiler/testData/diagnostics/tests/backingField/LocalDeclarations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MustBeInitializedEffectivelyFinalOff.kt")
      public void testMustBeInitializedEffectivelyFinalOff() {
        runTest("compiler/testData/diagnostics/tests/backingField/MustBeInitializedEffectivelyFinalOff.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MustBeInitializedEffectivelyFinalOn.kt")
      public void testMustBeInitializedEffectivelyFinalOn() {
        runTest("compiler/testData/diagnostics/tests/backingField/MustBeInitializedEffectivelyFinalOn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OpenPrivateValDeferredInit.kt")
      public void testOpenPrivateValDeferredInit() {
        runTest("compiler/testData/diagnostics/tests/backingField/OpenPrivateValDeferredInit.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OpenValDeferredInitError_InFinalClass_DisableEffectivelyFinal.kt")
      public void testOpenValDeferredInitError_InFinalClass_DisableEffectivelyFinal() {
        runTest("compiler/testData/diagnostics/tests/backingField/OpenValDeferredInitError_InFinalClass_DisableEffectivelyFinal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OpenValDeferredInitError_InFinalClass_EnableEffectivelyFinal.kt")
      public void testOpenValDeferredInitError_InFinalClass_EnableEffectivelyFinal() {
        runTest("compiler/testData/diagnostics/tests/backingField/OpenValDeferredInitError_InFinalClass_EnableEffectivelyFinal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OpenValDeferredInitWarning_InFinalClass_DisableEffectivelyFinal.kt")
      public void testOpenValDeferredInitWarning_InFinalClass_DisableEffectivelyFinal() {
        runTest("compiler/testData/diagnostics/tests/backingField/OpenValDeferredInitWarning_InFinalClass_DisableEffectivelyFinal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OpenValDeferredInitWarning_InFinalClass_EnableEffectivelyFinal.kt")
      public void testOpenValDeferredInitWarning_InFinalClass_EnableEffectivelyFinal() {
        runTest("compiler/testData/diagnostics/tests/backingField/OpenValDeferredInitWarning_InFinalClass_EnableEffectivelyFinal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OpenValPartialDeferredInitErrorAnyway.kt")
      public void testOpenValPartialDeferredInitErrorAnyway() {
        runTest("compiler/testData/diagnostics/tests/backingField/OpenValPartialDeferredInitErrorAnyway.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OpenValPartialDeferredInitSecondaryConstructorErrorAnyway.kt")
      public void testOpenValPartialDeferredInitSecondaryConstructorErrorAnyway() {
        runTest("compiler/testData/diagnostics/tests/backingField/OpenValPartialDeferredInitSecondaryConstructorErrorAnyway.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OpenValPartialDeferredInitTwoSecondaryConstructorsErrorAnyway.kt")
      public void testOpenValPartialDeferredInitTwoSecondaryConstructorsErrorAnyway() {
        runTest("compiler/testData/diagnostics/tests/backingField/OpenValPartialDeferredInitTwoSecondaryConstructorsErrorAnyway.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SetterWithExplicitType.kt")
      public void testSetterWithExplicitType() {
        runTest("compiler/testData/diagnostics/tests/backingField/SetterWithExplicitType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TopLevelPropertyInitialization.kt")
      public void testTopLevelPropertyInitialization() {
        runTest("compiler/testData/diagnostics/tests/backingField/TopLevelPropertyInitialization.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ValDeferredInitInFinalClass.kt")
      public void testValDeferredInitInFinalClass() {
        runTest("compiler/testData/diagnostics/tests/backingField/ValDeferredInitInFinalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ValDeferredInitInOpenClassOpenValError.kt")
      public void testValDeferredInitInOpenClassOpenValError() {
        runTest("compiler/testData/diagnostics/tests/backingField/ValDeferredInitInOpenClassOpenValError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ValDeferredInitInOpenClassOpenValWarning.kt")
      public void testValDeferredInitInOpenClassOpenValWarning() {
        runTest("compiler/testData/diagnostics/tests/backingField/ValDeferredInitInOpenClassOpenValWarning.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ValWithSetterDeferredInit.kt")
      public void testValWithSetterDeferredInit() {
        runTest("compiler/testData/diagnostics/tests/backingField/ValWithSetterDeferredInit.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("VarDeferredInitInFinalClass.kt")
      public void testVarDeferredInitInFinalClass() {
        runTest("compiler/testData/diagnostics/tests/backingField/VarDeferredInitInFinalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("VarDeferredInitInOpenClass.kt")
      public void testVarDeferredInitInOpenClass() {
        runTest("compiler/testData/diagnostics/tests/backingField/VarDeferredInitInOpenClass.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor")
      @TestDataPath("$PROJECT_ROOT")
      public class ProhibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInProhibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitPrimaryConstructor_errorAnyway.kt")
        public void testImplicitPrimaryConstructor_errorAnyway() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/implicitPrimaryConstructor_errorAnyway.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_oneInheritedSecondary_mustBeInitializedError.kt")
        public void testNoPrimary_oneInheritedSecondary_mustBeInitializedError() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneInheritedSecondary_mustBeInitializedError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_oneInheritedSecondary_mustBeInitializedWarning.kt")
        public void testNoPrimary_oneInheritedSecondary_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneInheritedSecondary_mustBeInitializedWarning.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_oneSecondary_deferredInitInSecondary_mustBeInitializedError.kt")
        public void testNoPrimary_oneSecondary_deferredInitInSecondary_mustBeInitializedError() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_deferredInitInSecondary_mustBeInitializedError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_oneSecondary_deferredInitInSecondary_mustBeInitializedWarning.kt")
        public void testNoPrimary_oneSecondary_deferredInitInSecondary_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_deferredInitInSecondary_mustBeInitializedWarning.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_oneSecondary_mustBeInitializedError.kt")
        public void testNoPrimary_oneSecondary_mustBeInitializedError() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_mustBeInitializedError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_oneSecondary_mustBeInitializedWarning.kt")
        public void testNoPrimary_oneSecondary_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_mustBeInitializedWarning.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_oneSecondary_openValError_mustBeInitializedError.kt")
        public void testNoPrimary_oneSecondary_openValError_mustBeInitializedError() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_openValError_mustBeInitializedError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_oneSecondary_openValError_mustBeInitializedWarning.kt")
        public void testNoPrimary_oneSecondary_openValError_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_openValError_mustBeInitializedWarning.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_oneSecondary_openValWarning_mustBeInitializedError.kt")
        public void testNoPrimary_oneSecondary_openValWarning_mustBeInitializedError() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_openValWarning_mustBeInitializedError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_oneSecondary_openValWarning_mustBeInitializedWarning.kt")
        public void testNoPrimary_oneSecondary_openValWarning_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_openValWarning_mustBeInitializedWarning.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_oneSecondary_openVar_mustBeInitializedError.kt")
        public void testNoPrimary_oneSecondary_openVar_mustBeInitializedError() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_openVar_mustBeInitializedError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_oneSecondary_openVar_mustBeInitializedWarning.kt")
        public void testNoPrimary_oneSecondary_openVar_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_openVar_mustBeInitializedWarning.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_partialDeferredInitInSecondary_errorAnyway.kt")
        public void testNoPrimary_partialDeferredInitInSecondary_errorAnyway() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_partialDeferredInitInSecondary_errorAnyway.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_partialDeferredInitInTwoSecondaries_errorAnyway.kt")
        public void testNoPrimary_partialDeferredInitInTwoSecondaries_errorAnyway() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_partialDeferredInitInTwoSecondaries_errorAnyway.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_twoSecondary_mustBeInitializedError.kt")
        public void testNoPrimary_twoSecondary_mustBeInitializedError() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_twoSecondary_mustBeInitializedError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noPrimary_twoSecondary_mustBeInitializedWarning.kt")
        public void testNoPrimary_twoSecondary_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_twoSecondary_mustBeInitializedWarning.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onePrimary_oneSecondary_errorAnyway.kt")
        public void testOnePrimary_oneSecondary_errorAnyway() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/onePrimary_oneSecondary_errorAnyway.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/builderInference")
    @TestDataPath("$PROJECT_ROOT")
    public class BuilderInference {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInBuilderInference() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/builderInference"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overloadResolutionByLambdaReturnType.kt")
      public void testOverloadResolutionByLambdaReturnType() {
        runTest("compiler/testData/diagnostics/tests/builderInference/overloadResolutionByLambdaReturnType.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/builderInference/additional")
      @TestDataPath("$PROJECT_ROOT")
      public class Additional {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInAdditional() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/builderInference/additional"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("BuildeeSupertypeAsTypeVariableSourceInClassifiers.kt")
        public void testBuildeeSupertypeAsTypeVariableSourceInClassifiers() {
          runTest("compiler/testData/diagnostics/tests/builderInference/additional/BuildeeSupertypeAsTypeVariableSourceInClassifiers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("BuildeeSupertypeAsTypeVariableSourceInFunctions.kt")
        public void testBuildeeSupertypeAsTypeVariableSourceInFunctions() {
          runTest("compiler/testData/diagnostics/tests/builderInference/additional/BuildeeSupertypeAsTypeVariableSourceInFunctions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("BuildeeSupertypeAsTypeVariableSourceInProperties.kt")
        public void testBuildeeSupertypeAsTypeVariableSourceInProperties() {
          runTest("compiler/testData/diagnostics/tests/builderInference/additional/BuildeeSupertypeAsTypeVariableSourceInProperties.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/builderInference/issues")
      @TestDataPath("$PROJECT_ROOT")
      public class Issues {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInIssues() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/builderInference/issues"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt43710.kt")
        public void testKt43710() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt43710.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt47989a.kt")
        public void testKt47989a() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt47989a.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt47989b.kt")
        public void testKt47989b() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt47989b.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt49160a.kt")
        public void testKt49160a() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt49160a.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt49160b.kt")
        public void testKt49160b() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt49160b.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt49160c.kt")
        public void testKt49160c() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt49160c.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt49160d.kt")
        public void testKt49160d() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt49160d.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt49160e.kt")
        public void testKt49160e() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt49160e.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt49263.kt")
        public void testKt49263() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt49263.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt50453.kt")
        public void testKt50453() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt50453.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt50827.kt")
        public void testKt50827() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt50827.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt52757.kt")
        public void testKt52757() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt52757.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt52838a.kt")
        public void testKt52838a() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt52838a.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt52838b.kt")
        public void testKt52838b() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt52838b.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt52838c.kt")
        public void testKt52838c() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt52838c.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt53109.kt")
        public void testKt53109() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt53109.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt53422a.kt")
        public void testKt53422a() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt53422a.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt53422b.kt")
        public void testKt53422b() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt53422b.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt53478.kt")
        public void testKt53478() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt53478.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt53553.kt")
        public void testKt53553() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt53553.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt53639.kt")
        public void testKt53639() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt53639.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt53740a.kt")
        public void testKt53740a() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt53740a.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt53740b.kt")
        public void testKt53740b() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt53740b.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt54400a.kt")
        public void testKt54400a() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt54400a.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt54400b.kt")
        public void testKt54400b() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt54400b.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt54400c.kt")
        public void testKt54400c() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt54400c.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt54664.kt")
        public void testKt54664() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt54664.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt54767a.kt")
        public void testKt54767a() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt54767a.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt54767b.kt")
        public void testKt54767b() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt54767b.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt55056.kt")
        public void testKt55056() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt55056.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt55057.kt")
        public void testKt55057() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt55057.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt55281.kt")
        public void testKt55281() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt55281.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt56949.kt")
        public void testKt56949() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt56949.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt57707.kt")
        public void testKt57707() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt57707.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt57709.kt")
        public void testKt57709() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt57709.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt57834.kt")
        public void testKt57834() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt57834.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt59426.kt")
        public void testKt59426() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt59426.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt59798.kt")
        public void testKt59798() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt59798.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt60291a.kt")
        public void testKt60291a() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt60291a.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt60291b.kt")
        public void testKt60291b() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt60291b.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt60291c.kt")
        public void testKt60291c() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt60291c.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt60447a.kt")
        public void testKt60447a() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt60447a.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt60447b.kt")
        public void testKt60447b() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt60447b.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt61310.kt")
        public void testKt61310() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt61310.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt63648.kt")
        public void testKt63648() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt63648.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt63733.kt")
        public void testKt63733() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt63733.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt63840a.kt")
        public void testKt63840a() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt63840a.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt63840b.kt")
        public void testKt63840b() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt63840b.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt63840c.kt")
        public void testKt63840c() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt63840c.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt63841.kt")
        public void testKt63841() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt63841.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt64066.kt")
        public void testKt64066() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt64066.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt64066disabled.kt")
        public void testKt64066disabled() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt64066disabled.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt64077.kt")
        public void testKt64077() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt64077.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt64222.kt")
        public void testKt64222() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt64222.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt66229.kt")
        public void testKt66229() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt66229.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt66243.kt")
        public void testKt66243() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt66243.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt66272.kt")
        public void testKt66272() {
          runTest("compiler/testData/diagnostics/tests/builderInference/issues/kt66272.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/builderInference/oneParameter")
      @TestDataPath("$PROJECT_ROOT")
      public class OneParameter {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInOneParameter() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/builderInference/oneParameter"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable")
        @TestDataPath("$PROJECT_ROOT")
        public class OneTypeVariable {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInOneTypeVariable() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin")
          @TestDataPath("$PROJECT_ROOT")
          public class OneTypeInfoOrigin {
            @RepeatedTest(value = 5)
            public void testAllFilesPresentInOneTypeInfoOrigin() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
            }

            @RepeatedTest(value = 5)
            @TestMetadata("AnonymousFunctionArgumentAndBuildeeReceiver.kt")
            public void testAnonymousFunctionArgumentAndBuildeeReceiver() {
              runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/AnonymousFunctionArgumentAndBuildeeReceiver.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts")
            @TestDataPath("$PROJECT_ROOT")
            public class SourceSinkFeedContexts {
              @RepeatedTest(value = 5)
              public void testAllFilesPresentInSourceSinkFeedContexts() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ByAssignmentToALocalVariableMaterializeCase.kt")
              public void testByAssignmentToALocalVariableMaterializeCase() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ByAssignmentToALocalVariableMaterializeCase.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ByAssignmentToALocalVariableYieldCase.kt")
              public void testByAssignmentToALocalVariableYieldCase() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ByAssignmentToALocalVariableYieldCase.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("InsideLocalClass.kt")
              public void testInsideLocalClass() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/InsideLocalClass.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("InsideNestedBuilderInferenceLambda.kt")
              public void testInsideNestedBuilderInferenceLambda() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/InsideNestedBuilderInferenceLambda.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ThroughDelegatedLocalVariableMaterializeCase.kt")
              public void testThroughDelegatedLocalVariableMaterializeCase() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ThroughDelegatedLocalVariableMaterializeCase.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ThroughGenericFunctionCall.kt")
              public void testThroughGenericFunctionCall() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ThroughGenericFunctionCall.kt");
              }
            }

            @Nested
            @TestMetadata("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes")
            @TestDataPath("$PROJECT_ROOT")
            public class TargetTypes {
              @RepeatedTest(value = 5)
              public void testAllFilesPresentInTargetTypes() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
              }

              @RepeatedTest(value = 5)
              @TestMetadata("FunctionWithParameterToUnitImplicitLiteralsCase.kt")
              public void testFunctionWithParameterToUnitImplicitLiteralsCase() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/FunctionWithParameterToUnitImplicitLiteralsCase.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("FunctionWithReceiverToUnitImplicitLiteralsCase.kt")
              public void testFunctionWithReceiverToUnitImplicitLiteralsCase() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/FunctionWithReceiverToUnitImplicitLiteralsCase.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("NothingMaterializeCase.kt")
              public void testNothingMaterializeCase() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NothingMaterializeCase.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("NullableNothingNullLiteralMaterializeCase.kt")
              public void testNullableNothingNullLiteralMaterializeCase() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullableNothingNullLiteralMaterializeCase.kt");
              }
            }

            @Nested
            @TestMetadata("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks")
            @TestDataPath("$PROJECT_ROOT")
            public class TypeInfoSinks {
              @RepeatedTest(value = 5)
              public void testAllFilesPresentInTypeInfoSinks() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ExtensionFunctions.kt")
              public void testExtensionFunctions() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ExtensionFunctions.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ImmutableExtensionProperties.kt")
              public void testImmutableExtensionProperties() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ImmutableExtensionProperties.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ImmutableProperties.kt")
              public void testImmutableProperties() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ImmutableProperties.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("MutableExtensionPropertiesMaterializeCase.kt")
              public void testMutableExtensionPropertiesMaterializeCase() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutableExtensionPropertiesMaterializeCase.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("MutableExtensionPropertiesYieldCase.kt")
              public void testMutableExtensionPropertiesYieldCase() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutableExtensionPropertiesYieldCase.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("MutablePropertiesMaterializeCase.kt")
              public void testMutablePropertiesMaterializeCase() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutablePropertiesMaterializeCase.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("MutablePropertiesYieldCase.kt")
              public void testMutablePropertiesYieldCase() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutablePropertiesYieldCase.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ParametersOfBuilderArguments.kt")
              public void testParametersOfBuilderArguments() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ParametersOfBuilderArguments.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ReceiversOfBuilderArguments.kt")
              public void testReceiversOfBuilderArguments() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ReceiversOfBuilderArguments.kt");
              }
            }

            @Nested
            @TestMetadata("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources")
            @TestDataPath("$PROJECT_ROOT")
            public class TypeInfoSources {
              @RepeatedTest(value = 5)
              public void testAllFilesPresentInTypeInfoSources() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ExtensionFunctions.kt")
              public void testExtensionFunctions() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ExtensionFunctions.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ExtensionProperties.kt")
              public void testExtensionProperties() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ExtensionProperties.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ParametersOfBuilderArguments.kt")
              public void testParametersOfBuilderArguments() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ParametersOfBuilderArguments.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ReceiversOfBuilderArguments.kt")
              public void testReceiversOfBuilderArguments() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ReceiversOfBuilderArguments.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("ReturnTypesOfBuilderParameters.kt")
              public void testReturnTypesOfBuilderParameters() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ReturnTypesOfBuilderParameters.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("UnitReturnTypeOfBuilderParametersExplicitReturnCase.kt")
              public void testUnitReturnTypeOfBuilderParametersExplicitReturnCase() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/UnitReturnTypeOfBuilderParametersExplicitReturnCase.kt");
              }

              @RepeatedTest(value = 5)
              @TestMetadata("UnitReturnTypeOfBuilderParametersLastStatementReturnCase.kt")
              public void testUnitReturnTypeOfBuilderParametersLastStatementReturnCase() {
                runTest("compiler/testData/diagnostics/tests/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/UnitReturnTypeOfBuilderParametersLastStatementReturnCase.kt");
              }
            }
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/callableReference")
    @TestDataPath("$PROJECT_ROOT")
    public class CallableReference {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInCallableReference() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("bareType.kt")
      public void testBareType() {
        runTest("compiler/testData/diagnostics/tests/callableReference/bareType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callableReferenceAsLastExpressionInBlock.kt")
      public void testCallableReferenceAsLastExpressionInBlock() {
        runTest("compiler/testData/diagnostics/tests/callableReference/callableReferenceAsLastExpressionInBlock.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callableReferenceAssignmentToVar.kt")
      public void testCallableReferenceAssignmentToVar() {
        runTest("compiler/testData/diagnostics/tests/callableReference/callableReferenceAssignmentToVar.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callableReferenceInWhenExpression.kt")
      public void testCallableReferenceInWhenExpression() {
        runTest("compiler/testData/diagnostics/tests/callableReference/callableReferenceInWhenExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callableReferenceWithMostSpecificGenericTypeParameter.kt")
      public void testCallableReferenceWithMostSpecificGenericTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/callableReference/callableReferenceWithMostSpecificGenericTypeParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callableReferencesToCompanionMembers.kt")
      public void testCallableReferencesToCompanionMembers() {
        runTest("compiler/testData/diagnostics/tests/callableReference/callableReferencesToCompanionMembers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classVsPackage.kt")
      public void testClassVsPackage() {
        runTest("compiler/testData/diagnostics/tests/callableReference/classVsPackage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("compatibilityResolveWithVarargAndOperatorCall.kt")
      public void testCompatibilityResolveWithVarargAndOperatorCall() {
        runTest("compiler/testData/diagnostics/tests/callableReference/compatibilityResolveWithVarargAndOperatorCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constraintFromLHSWithCorrectDirection.kt")
      public void testConstraintFromLHSWithCorrectDirection() {
        runTest("compiler/testData/diagnostics/tests/callableReference/constraintFromLHSWithCorrectDirection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constraintFromLHSWithCorrectDirectionError.kt")
      public void testConstraintFromLHSWithCorrectDirectionError() {
        runTest("compiler/testData/diagnostics/tests/callableReference/constraintFromLHSWithCorrectDirectionError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("correctCandidateWithCompatibilityForSeveralCandidates.kt")
      public void testCorrectCandidateWithCompatibilityForSeveralCandidates() {
        runTest("compiler/testData/diagnostics/tests/callableReference/correctCandidateWithCompatibilityForSeveralCandidates.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("correctInfoAfterArrayLikeCall.kt")
      public void testCorrectInfoAfterArrayLikeCall() {
        runTest("compiler/testData/diagnostics/tests/callableReference/correctInfoAfterArrayLikeCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecateTopLevelReferenceWithCompanionLHS.kt")
      public void testDeprecateTopLevelReferenceWithCompanionLHS() {
        runTest("compiler/testData/diagnostics/tests/callableReference/deprecateTopLevelReferenceWithCompanionLHS.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedCompanionReceiverInParentheses.kt")
      public void testDeprecatedCompanionReceiverInParentheses() {
        runTest("compiler/testData/diagnostics/tests/callableReference/deprecatedCompanionReceiverInParentheses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea81649_errorPropertyLHS.kt")
      public void testEa81649_errorPropertyLHS() {
        runTest("compiler/testData/diagnostics/tests/callableReference/ea81649_errorPropertyLHS.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("emptyLhs.kt")
      public void testEmptyLhs() {
        runTest("compiler/testData/diagnostics/tests/callableReference/emptyLhs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectedTypeAsSubtypeOfFunctionType.kt")
      public void testExpectedTypeAsSubtypeOfFunctionType() {
        runTest("compiler/testData/diagnostics/tests/callableReference/expectedTypeAsSubtypeOfFunctionType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionReferenceWithDefaultValueAsOtherFunctionType.kt")
      public void testFunctionReferenceWithDefaultValueAsOtherFunctionType() {
        runTest("compiler/testData/diagnostics/tests/callableReference/functionReferenceWithDefaultValueAsOtherFunctionType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionReferenceWithDefaultValueAsOtherFunctionType_enabled.kt")
      public void testFunctionReferenceWithDefaultValueAsOtherFunctionType_enabled() {
        runTest("compiler/testData/diagnostics/tests/callableReference/functionReferenceWithDefaultValueAsOtherFunctionType_enabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericCallWithReferenceAgainstVararg.kt")
      public void testGenericCallWithReferenceAgainstVararg() {
        runTest("compiler/testData/diagnostics/tests/callableReference/genericCallWithReferenceAgainstVararg.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericCallWithReferenceAgainstVarargAndKFunction.kt")
      public void testGenericCallWithReferenceAgainstVarargAndKFunction() {
        runTest("compiler/testData/diagnostics/tests/callableReference/genericCallWithReferenceAgainstVarargAndKFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericTypealiasInLhs.kt")
      public void testGenericTypealiasInLhs() {
        runTest("compiler/testData/diagnostics/tests/callableReference/genericTypealiasInLhs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt15439_completeCall.kt")
      public void testKt15439_completeCall() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt15439_completeCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt25433.kt")
      public void testKt25433() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt25433.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt31981.kt")
      public void testKt31981() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt31981.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32256.kt")
      public void testKt32256() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt32256.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32267.kt")
      public void testKt32267() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt32267.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt34314.kt")
      public void testKt34314() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt34314.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt34314_lambda.kt")
      public void testKt34314_lambda() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt34314_lambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt35105.kt")
      public void testKt35105() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt35105.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt35959.kt")
      public void testKt35959() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt35959.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt37530.kt")
      public void testKt37530() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt37530.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt46437.kt")
      public void testKt46437() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt46437.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt49038.kt")
      public void testKt49038() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt49038.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt52503.kt")
      public void testKt52503() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt52503.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt55373.kt")
      public void testKt55373() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt55373.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt7430_wrongClassOnLHS.kt")
      public void testKt7430_wrongClassOnLHS() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt7430_wrongClassOnLHS.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaResult.kt")
      public void testLambdaResult() {
        runTest("compiler/testData/diagnostics/tests/callableReference/lambdaResult.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("memberExtensionsImportedFromObjectsUnsupported.kt")
      public void testMemberExtensionsImportedFromObjectsUnsupported() {
        runTest("compiler/testData/diagnostics/tests/callableReference/memberExtensionsImportedFromObjectsUnsupported.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noAmbiguityWhenAllReferencesAreInapplicable.kt")
      public void testNoAmbiguityWhenAllReferencesAreInapplicable() {
        runTest("compiler/testData/diagnostics/tests/callableReference/noAmbiguityWhenAllReferencesAreInapplicable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noCompatibilityResolveWithProressiveModeForNI.kt")
      public void testNoCompatibilityResolveWithProressiveModeForNI() {
        runTest("compiler/testData/diagnostics/tests/callableReference/noCompatibilityResolveWithProressiveModeForNI.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noExceptionOnRedCodeWithArrayLikeCall.kt")
      public void testNoExceptionOnRedCodeWithArrayLikeCall() {
        runTest("compiler/testData/diagnostics/tests/callableReference/noExceptionOnRedCodeWithArrayLikeCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overloadResolutionWithDefaults.kt")
      public void testOverloadResolutionWithDefaults() {
        runTest("compiler/testData/diagnostics/tests/callableReference/overloadResolutionWithDefaults.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("packageInLhs.kt")
      public void testPackageInLhs() {
        runTest("compiler/testData/diagnostics/tests/callableReference/packageInLhs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("parsingPriorityOfGenericArgumentsVsLess.kt")
      public void testParsingPriorityOfGenericArgumentsVsLess() {
        runTest("compiler/testData/diagnostics/tests/callableReference/parsingPriorityOfGenericArgumentsVsLess.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyOfNestedGenericClass.kt")
      public void testPropertyOfNestedGenericClass() {
        runTest("compiler/testData/diagnostics/tests/callableReference/propertyOfNestedGenericClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("referenceAdaptationCompatibility.kt")
      public void testReferenceAdaptationCompatibility() {
        runTest("compiler/testData/diagnostics/tests/callableReference/referenceAdaptationCompatibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("referenceInCycleInProperties.kt")
      public void testReferenceInCycleInProperties() {
        runTest("compiler/testData/diagnostics/tests/callableReference/referenceInCycleInProperties.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("referenceToCompanionObjectMemberViaClassName.kt")
      public void testReferenceToCompanionObjectMemberViaClassName() {
        runTest("compiler/testData/diagnostics/tests/callableReference/referenceToCompanionObjectMemberViaClassName.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("referenceToCompanionObjectMemberViaClassNameCompatibility.kt")
      public void testReferenceToCompanionObjectMemberViaClassNameCompatibility() {
        runTest("compiler/testData/diagnostics/tests/callableReference/referenceToCompanionObjectMemberViaClassNameCompatibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("rewriteAtSliceOnGetOperator.kt")
      public void testRewriteAtSliceOnGetOperator() {
        runTest("compiler/testData/diagnostics/tests/callableReference/rewriteAtSliceOnGetOperator.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sam.kt")
      public void testSam() {
        runTest("compiler/testData/diagnostics/tests/callableReference/sam.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("subtypeArgumentFromRHSForReference.kt")
      public void testSubtypeArgumentFromRHSForReference() {
        runTest("compiler/testData/diagnostics/tests/callableReference/subtypeArgumentFromRHSForReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendCallableReference.kt")
      public void testSuspendCallableReference() {
        runTest("compiler/testData/diagnostics/tests/callableReference/suspendCallableReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealiases.kt")
      public void testTypealiases() {
        runTest("compiler/testData/diagnostics/tests/callableReference/typealiases.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unitAdaptationForReferenceCompatibility.kt")
      public void testUnitAdaptationForReferenceCompatibility() {
        runTest("compiler/testData/diagnostics/tests/callableReference/unitAdaptationForReferenceCompatibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unused.kt")
      public void testUnused() {
        runTest("compiler/testData/diagnostics/tests/callableReference/unused.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whitespacesInExpression.kt")
      public void testWhitespacesInExpression() {
        runTest("compiler/testData/diagnostics/tests/callableReference/whitespacesInExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("withQuestionMarks.kt")
      public void testWithQuestionMarks() {
        runTest("compiler/testData/diagnostics/tests/callableReference/withQuestionMarks.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/adapted")
      @TestDataPath("$PROJECT_ROOT")
      public class Adapted {
        @RepeatedTest(value = 5)
        @TestMetadata("adaptationByExpectTypeOutsideCall.kt")
        public void testAdaptationByExpectTypeOutsideCall() {
          runTest("compiler/testData/diagnostics/tests/callableReference/adapted/adaptationByExpectTypeOutsideCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("adaptationInWhenWithMapOf.kt")
        public void testAdaptationInWhenWithMapOf() {
          runTest("compiler/testData/diagnostics/tests/callableReference/adapted/adaptationInWhenWithMapOf.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("adaptationToOverridenWithoutDefault.kt")
        public void testAdaptationToOverridenWithoutDefault() {
          runTest("compiler/testData/diagnostics/tests/callableReference/adapted/adaptationToOverridenWithoutDefault.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInAdapted() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/adapted"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noKFunctionForAdaptation.kt")
        public void testNoKFunctionForAdaptation() {
          runTest("compiler/testData/diagnostics/tests/callableReference/adapted/noKFunctionForAdaptation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleAdaptationOutsideOfCall.kt")
        public void testSimpleAdaptationOutsideOfCall() {
          runTest("compiler/testData/diagnostics/tests/callableReference/adapted/simpleAdaptationOutsideOfCall.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/bound")
      @TestDataPath("$PROJECT_ROOT")
      public class Bound {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInBound() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/bound"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classVsStarImportedCompanion.kt")
        public void testClassVsStarImportedCompanion() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/classVsStarImportedCompanion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classVsStarImportedObject.kt")
        public void testClassVsStarImportedObject() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/classVsStarImportedObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("companionObject.kt")
        public void testCompanionObject() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/companionObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("controlFlow.kt")
        public void testControlFlow() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/controlFlow.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dataFlow.kt")
        public void testDataFlow() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/dataFlow.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectedType.kt")
        public void testExpectedType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/expectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expressionWithNullableType.kt")
        public void testExpressionWithNullableType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/expressionWithNullableType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionCallWithoutArguments.kt")
        public void testFunctionCallWithoutArguments() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/functionCallWithoutArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerNested.kt")
        public void testInnerNested() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/innerNested.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt12843.kt")
        public void testKt12843() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/kt12843.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noThisInSuperCall.kt")
        public void testNoThisInSuperCall() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/noThisInSuperCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("object.kt")
        public void testObject() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/object.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("privateToThis.kt")
        public void testPrivateToThis() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/privateToThis.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("referenceToStaticMethodOnInstance.kt")
        public void testReferenceToStaticMethodOnInstance() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/referenceToStaticMethodOnInstance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reservedExpressionSyntax.kt")
        public void testReservedExpressionSyntax() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/reservedExpressionSyntax.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reservedExpressionSyntax2.kt")
        public void testReservedExpressionSyntax2() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/reservedExpressionSyntax2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reservedExpressionSyntax3.kt")
        public void testReservedExpressionSyntax3() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/reservedExpressionSyntax3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reservedExpressionSyntax4.kt")
        public void testReservedExpressionSyntax4() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/reservedExpressionSyntax4.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticExtensionOnLHS.kt")
        public void testSyntheticExtensionOnLHS() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/syntheticExtensionOnLHS.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valueOfTypeParameterType.kt")
        public void testValueOfTypeParameterType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/valueOfTypeParameterType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/function")
      @TestDataPath("$PROJECT_ROOT")
      public class Function {
        @RepeatedTest(value = 5)
        @TestMetadata("abstractClassConstructors.kt")
        public void testAbstractClassConstructors() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/abstractClassConstructors.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInFunction() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/function"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ambiguityTopLevelVsTopLevel.kt")
        public void testAmbiguityTopLevelVsTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/ambiguityTopLevelVsTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ambiguityTopLevelVsTopLevelGeneric.kt")
        public void testAmbiguityTopLevelVsTopLevelGeneric() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/ambiguityTopLevelVsTopLevelGeneric.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationClassConstructor.kt")
        public void testAnnotationClassConstructor() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/annotationClassConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableRefrenceOnNestedObject.kt")
        public void testCallableRefrenceOnNestedObject() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/callableRefrenceOnNestedObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classMemberVsConstructorLikeFunction.kt")
        public void testClassMemberVsConstructorLikeFunction() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/classMemberVsConstructorLikeFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorFromClass.kt")
        public void testConstructorFromClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/constructorFromClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorFromCompanion.kt")
        public void testConstructorFromCompanion() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/constructorFromCompanion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorFromExtension.kt")
        public void testConstructorFromExtension() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/constructorFromExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorFromExtensionInClass.kt")
        public void testConstructorFromExtensionInClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/constructorFromExtensionInClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorFromTopLevel.kt")
        public void testConstructorFromTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/constructorFromTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorOfNestedClassInObject.kt")
        public void testConstructorOfNestedClassInObject() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/constructorOfNestedClassInObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentPackageClass.kt")
        public void testDifferentPackageClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/differentPackageClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentPackageExtension.kt")
        public void testDifferentPackageExtension() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/differentPackageExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentPackageTopLevel.kt")
        public void testDifferentPackageTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/differentPackageTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("empty.kt")
        public void testEmpty() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/empty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionFromTopLevel.kt")
        public void testExtensionFromTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/extensionFromTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionInClassDisallowed.kt")
        public void testExtensionInClassDisallowed() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/extensionInClassDisallowed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionOnNullable.kt")
        public void testExtensionOnNullable() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/extensionOnNullable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionToSupertype.kt")
        public void testExtensionToSupertype() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/extensionToSupertype.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fakeOverrideType.kt")
        public void testFakeOverrideType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/fakeOverrideType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericClassFromTopLevel.kt")
        public void testGenericClassFromTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/genericClassFromTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("importedInnerConstructor.kt")
        public void testImportedInnerConstructor() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/importedInnerConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerConstructorFromClass.kt")
        public void testInnerConstructorFromClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/innerConstructorFromClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerConstructorFromExtension.kt")
        public void testInnerConstructorFromExtension() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/innerConstructorFromExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerConstructorFromTopLevel.kt")
        public void testInnerConstructorFromTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/innerConstructorFromTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaStaticMethod.kt")
        public void testJavaStaticMethod() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/javaStaticMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lhsNotAClass.kt")
        public void testLhsNotAClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/lhsNotAClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localConstructor.kt")
        public void testLocalConstructor() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/localConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localConstructorFromExtensionInLocalClass.kt")
        public void testLocalConstructorFromExtensionInLocalClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/localConstructorFromExtensionInLocalClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localConstructorFromLocalClass.kt")
        public void testLocalConstructorFromLocalClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/localConstructorFromLocalClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localConstructorFromLocalExtension.kt")
        public void testLocalConstructorFromLocalExtension() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/localConstructorFromLocalExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localNamedFun.kt")
        public void testLocalNamedFun() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/localNamedFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localNamedFunFromExtensionInLocalClass.kt")
        public void testLocalNamedFunFromExtensionInLocalClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/localNamedFunFromExtensionInLocalClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localNamedFunFromLocalClass.kt")
        public void testLocalNamedFunFromLocalClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/localNamedFunFromLocalClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localNamedFunFromLocalExtension.kt")
        public void testLocalNamedFunFromLocalExtension() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/localNamedFunFromLocalExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("longQualifiedName.kt")
        public void testLongQualifiedName() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/longQualifiedName.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("longQualifiedNameGeneric.kt")
        public void testLongQualifiedNameGeneric() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/longQualifiedNameGeneric.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("memberFromTopLevel.kt")
        public void testMemberFromTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/memberFromTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedConstructorFromClass.kt")
        public void testNestedConstructorFromClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/nestedConstructorFromClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedConstructorFromExtension.kt")
        public void testNestedConstructorFromExtension() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/nestedConstructorFromExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedConstructorFromTopLevel.kt")
        public void testNestedConstructorFromTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/nestedConstructorFromTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noAmbiguityLocalVsTopLevel.kt")
        public void testNoAmbiguityLocalVsTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/noAmbiguityLocalVsTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noAmbiguityMemberVsExtension.kt")
        public void testNoAmbiguityMemberVsExtension() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/noAmbiguityMemberVsExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noAmbiguityMemberVsTopLevel.kt")
        public void testNoAmbiguityMemberVsTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/noAmbiguityMemberVsTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("privateStaticAndPublicMember.kt")
        public void testPrivateStaticAndPublicMember() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/privateStaticAndPublicMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("renameOnImport.kt")
        public void testRenameOnImport() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/renameOnImport.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("topLevelFromClass.kt")
        public void testTopLevelFromClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/topLevelFromClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("topLevelFromExtension.kt")
        public void testTopLevelFromExtension() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/topLevelFromExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("topLevelFromExtensionInClass.kt")
        public void testTopLevelFromExtensionInClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/topLevelFromExtensionInClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("topLevelFromTopLevel.kt")
        public void testTopLevelFromTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/topLevelFromTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unresolved.kt")
        public void testUnresolved() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/unresolved.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/generic")
      @TestDataPath("$PROJECT_ROOT")
      public class Generic {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInGeneric() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/generic"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("argumentAndReturnExpectedType.kt")
        public void testArgumentAndReturnExpectedType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/argumentAndReturnExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("argumentExpectedType.kt")
        public void testArgumentExpectedType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/argumentExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("boundViolated.kt")
        public void testBoundViolated() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/boundViolated.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dependOnArgumentType.kt")
        public void testDependOnArgumentType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/dependOnArgumentType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectedFunctionType.kt")
        public void testExpectedFunctionType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/expectedFunctionType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("explicitTypeArguments.kt")
        public void testExplicitTypeArguments() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/explicitTypeArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericExtensionFunction.kt")
        public void testGenericExtensionFunction() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/genericExtensionFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericFunctionsWithNullableTypes.kt")
        public void testGenericFunctionsWithNullableTypes() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/genericFunctionsWithNullableTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("incorrectNumberOfTypeArguments.kt")
        public void testIncorrectNumberOfTypeArguments() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/incorrectNumberOfTypeArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt10968.kt")
        public void testKt10968() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt10968.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt11075.kt")
        public void testKt11075() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt11075.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt12286.kt")
        public void testKt12286() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt12286.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt35896.kt")
        public void testKt35896() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt35896.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt7470.kt")
        public void testKt7470() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt7470.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedCallWithOverload.kt")
        public void testNestedCallWithOverload() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/nestedCallWithOverload.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("resolutionGenericCallableWithNullableTypes.kt")
        public void testResolutionGenericCallableWithNullableTypes() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/resolutionGenericCallableWithNullableTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("resolutionWithGenericCallable.kt")
        public void testResolutionWithGenericCallable() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/resolutionWithGenericCallable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("specialCalls.kt")
        public void testSpecialCalls() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/specialCalls.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/property")
      @TestDataPath("$PROJECT_ROOT")
      public class Property {
        @RepeatedTest(value = 5)
        @TestMetadata("abstractPropertyViaSubclasses.kt")
        public void testAbstractPropertyViaSubclasses() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/abstractPropertyViaSubclasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("accessViaSubclass.kt")
        public void testAccessViaSubclass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/accessViaSubclass.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInProperty() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/property"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("backingField.kt")
        public void testBackingField() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/backingField.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classFromClass.kt")
        public void testClassFromClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/classFromClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionFromTopLevel.kt")
        public void testExtensionFromTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/extensionFromTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionPropertyOnNullable.kt")
        public void testExtensionPropertyOnNullable() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/extensionPropertyOnNullable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionsSameName.kt")
        public void testExtensionsSameName() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/extensionsSameName.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericClass.kt")
        public void testGenericClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/genericClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaInstanceField.kt")
        public void testJavaInstanceField() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/javaInstanceField.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaStaticFieldViaImport.kt")
        public void testJavaStaticFieldViaImport() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/javaStaticFieldViaImport.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt7564.kt")
        public void testKt7564() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/kt7564.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt7945_unrelatedClass.kt")
        public void testKt7945_unrelatedClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/kt7945_unrelatedClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("memberFromTopLevel.kt")
        public void testMemberFromTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/memberFromTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("mutablePropertyViaDelegation.kt")
        public void testMutablePropertyViaDelegation() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/mutablePropertyViaDelegation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyFromAbstractSuperClass.kt")
        public void testPropertyFromAbstractSuperClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/propertyFromAbstractSuperClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("protectedVarFromClass.kt")
        public void testProtectedVarFromClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/protectedVarFromClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("returnTypeDependentOnGenericProperty.kt")
        public void testReturnTypeDependentOnGenericProperty() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/returnTypeDependentOnGenericProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("samePriorityForFunctionsAndProperties.kt")
        public void testSamePriorityForFunctionsAndProperties() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/samePriorityForFunctionsAndProperties.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("topLevelFromTopLevel.kt")
        public void testTopLevelFromTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/topLevelFromTopLevel.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/resolve")
      @TestDataPath("$PROJECT_ROOT")
      public class Resolve {
        @RepeatedTest(value = 5)
        @TestMetadata("adaptedReferenceAgainstKCallable.kt")
        public void testAdaptedReferenceAgainstKCallable() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/adaptedReferenceAgainstKCallable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("adaptedReferenceAgainstReflectionType.kt")
        public void testAdaptedReferenceAgainstReflectionType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/adaptedReferenceAgainstReflectionType.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInResolve() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/resolve"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ambiguityWhenNoApplicableCallableReferenceCandidate.kt")
        public void testAmbiguityWhenNoApplicableCallableReferenceCandidate() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/ambiguityWhenNoApplicableCallableReferenceCandidate.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ambiguityWithBoundExtensionReceiver.kt")
        public void testAmbiguityWithBoundExtensionReceiver() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/ambiguityWithBoundExtensionReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ambiguousWithVararg.kt")
        public void testAmbiguousWithVararg() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/ambiguousWithVararg.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("applicableCallableReferenceFromDistantScope.kt")
        public void testApplicableCallableReferenceFromDistantScope() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/applicableCallableReferenceFromDistantScope.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("byArgType.kt")
        public void testByArgType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/byArgType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("byGenericArgType.kt")
        public void testByGenericArgType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/byGenericArgType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("byValType.kt")
        public void testByValType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/byValType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferenceToVarargWithOverload.kt")
        public void testCallableReferenceToVarargWithOverload() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/callableReferenceToVarargWithOverload.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("chooseCallableReferenceDependingOnInferredReceiver.kt")
        public void testChooseCallableReferenceDependingOnInferredReceiver() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/chooseCallableReferenceDependingOnInferredReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("chooseMostSpecificCandidateUsingCandidateDescriptorNotReflectionType.kt")
        public void testChooseMostSpecificCandidateUsingCandidateDescriptorNotReflectionType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/chooseMostSpecificCandidateUsingCandidateDescriptorNotReflectionType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("chooseOuterCallBySingleCallableReference.kt")
        public void testChooseOuterCallBySingleCallableReference() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/chooseOuterCallBySingleCallableReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("commonSupertypeFromReturnTypesOfCallableReference.kt")
        public void testCommonSupertypeFromReturnTypesOfCallableReference() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/commonSupertypeFromReturnTypesOfCallableReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("compatibilityWarningOnReferenceAgainstReflectiveType.kt")
        public void testCompatibilityWarningOnReferenceAgainstReflectiveType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/compatibilityWarningOnReferenceAgainstReflectiveType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructor.kt")
        public void testConstructor() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/constructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("eagerAndPostponedCallableReferences.kt")
        public void testEagerAndPostponedCallableReferences() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/eagerAndPostponedCallableReferences.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("eagerResolveOfSingleCallableReference.kt")
        public void testEagerResolveOfSingleCallableReference() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/eagerResolveOfSingleCallableReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerClassConstructorOnOuterClassInstance.kt")
        public void testInnerClassConstructorOnOuterClassInstance() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/innerClassConstructorOnOuterClassInstance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intersectionTypeOverloadWithWrongParameter.kt")
        public void testIntersectionTypeOverloadWithWrongParameter() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/intersectionTypeOverloadWithWrongParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt10036.kt")
        public void testKt10036() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt10036.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt10036_bound.kt")
        public void testKt10036_bound() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt10036_bound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt12338.kt")
        public void testKt12338() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt12338.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt12751.kt")
        public void testKt12751() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt12751.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt35887.kt")
        public void testKt35887() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt35887.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt35887_simple.kt")
        public void testKt35887_simple() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt35887_simple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt35920.kt")
        public void testKt35920() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt35920.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt8596.kt")
        public void testKt8596() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt8596.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt9601.kt")
        public void testKt9601() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt9601.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("moreSpecificAmbiguousExtensions.kt")
        public void testMoreSpecificAmbiguousExtensions() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/moreSpecificAmbiguousExtensions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("moreSpecificSimple.kt")
        public void testMoreSpecificSimple() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/moreSpecificSimple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multipleOutersAndMultipleCallableReferences.kt")
        public void testMultipleOutersAndMultipleCallableReferences() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/multipleOutersAndMultipleCallableReferences.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedReferenceCallAgainstExpectedType.kt")
        public void testNestedReferenceCallAgainstExpectedType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/nestedReferenceCallAgainstExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noAmbiguityBetweenTopLevelAndMemberProperty.kt")
        public void testNoAmbiguityBetweenTopLevelAndMemberProperty() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/noAmbiguityBetweenTopLevelAndMemberProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noFakeDescriptorForObject.kt")
        public void testNoFakeDescriptorForObject() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/noFakeDescriptorForObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInputTypesOnCallableReference.kt")
        public void testOnlyInputTypesOnCallableReference() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/onlyInputTypesOnCallableReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloadAmbiguityForSimpleLastExpressionOfBlock.kt")
        public void testOverloadAmbiguityForSimpleLastExpressionOfBlock() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/overloadAmbiguityForSimpleLastExpressionOfBlock.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloads.kt")
        public void testOverloads() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/overloads.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloadsBound.kt")
        public void testOverloadsBound() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/overloadsBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloadsMember.kt")
        public void testOverloadsMember() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/overloadsMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("postponedResolveOfManyCallableReference.kt")
        public void testPostponedResolveOfManyCallableReference() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/postponedResolveOfManyCallableReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("resolveCallableReferencesAfterAllSimpleArguments.kt")
        public void testResolveCallableReferencesAfterAllSimpleArguments() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/resolveCallableReferencesAfterAllSimpleArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("resolveEqualsOperatorWithAnyExpectedType.kt")
        public void testResolveEqualsOperatorWithAnyExpectedType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/resolveEqualsOperatorWithAnyExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("resolveReferenceAgainstKFunctionAndKPrpoerty.kt")
        public void testResolveReferenceAgainstKFunctionAndKPrpoerty() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/resolveReferenceAgainstKFunctionAndKPrpoerty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("resolveTwoReferencesAgainstGenerics.kt")
        public void testResolveTwoReferencesAgainstGenerics() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/resolveTwoReferencesAgainstGenerics.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valVsFun.kt")
        public void testValVsFun() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/valVsFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withAs.kt")
        public void testWithAs() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/withAs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withExtFun.kt")
        public void testWithExtFun() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/withExtFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withGenericFun.kt")
        public void testWithGenericFun() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/withGenericFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withPlaceholderTypes.kt")
        public void testWithPlaceholderTypes() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/withPlaceholderTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withVararg.kt")
        public void testWithVararg() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/withVararg.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/unsupported")
      @TestDataPath("$PROJECT_ROOT")
      public class Unsupported {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInUnsupported() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/unsupported"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferenceToLocalVariable.kt")
        public void testCallableReferenceToLocalVariable() {
          runTest("compiler/testData/diagnostics/tests/callableReference/unsupported/callableReferenceToLocalVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classLiteralsWithEmptyLHS.kt")
        public void testClassLiteralsWithEmptyLHS() {
          runTest("compiler/testData/diagnostics/tests/callableReference/unsupported/classLiteralsWithEmptyLHS.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaOverridesKotlinProperty.kt")
        public void testJavaOverridesKotlinProperty() {
          runTest("compiler/testData/diagnostics/tests/callableReference/unsupported/javaOverridesKotlinProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localVariable.kt")
        public void testLocalVariable() {
          runTest("compiler/testData/diagnostics/tests/callableReference/unsupported/localVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localVariableWithSubstitution.kt")
        public void testLocalVariableWithSubstitution() {
          runTest("compiler/testData/diagnostics/tests/callableReference/unsupported/localVariableWithSubstitution.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("parameterWithSubstitution.kt")
        public void testParameterWithSubstitution() {
          runTest("compiler/testData/diagnostics/tests/callableReference/unsupported/parameterWithSubstitution.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("referenceToKotlinPropertyViaIntermediateJavaClass.kt")
        public void testReferenceToKotlinPropertyViaIntermediateJavaClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/unsupported/referenceToKotlinPropertyViaIntermediateJavaClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticProperties.kt")
        public void testSyntheticProperties() {
          runTest("compiler/testData/diagnostics/tests/callableReference/unsupported/syntheticProperties.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticPropertiesOnJavaAnnotation.kt")
        public void testSyntheticPropertiesOnJavaAnnotation() {
          runTest("compiler/testData/diagnostics/tests/callableReference/unsupported/syntheticPropertiesOnJavaAnnotation.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/cast")
    @TestDataPath("$PROJECT_ROOT")
    public class Cast {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInCast() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/cast"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsArray.kt")
      public void testAsArray() {
        runTest("compiler/testData/diagnostics/tests/cast/AsArray.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsErasedError.kt")
      public void testAsErasedError() {
        runTest("compiler/testData/diagnostics/tests/cast/AsErasedError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsErasedFine.kt")
      public void testAsErasedFine() {
        runTest("compiler/testData/diagnostics/tests/cast/AsErasedFine.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsErasedStar.kt")
      public void testAsErasedStar() {
        runTest("compiler/testData/diagnostics/tests/cast/AsErasedStar.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsErasedWarning.kt")
      public void testAsErasedWarning() {
        runTest("compiler/testData/diagnostics/tests/cast/AsErasedWarning.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsInBinaryUnary.kt")
      public void testAsInBinaryUnary() {
        runTest("compiler/testData/diagnostics/tests/cast/AsInBinaryUnary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsInBlockWithReturnType.kt")
      public void testAsInBlockWithReturnType() {
        runTest("compiler/testData/diagnostics/tests/cast/AsInBlockWithReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsInCompoundAssignment.kt")
      public void testAsInCompoundAssignment() {
        runTest("compiler/testData/diagnostics/tests/cast/AsInCompoundAssignment.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsInExpressionBody.kt")
      public void testAsInExpressionBody() {
        runTest("compiler/testData/diagnostics/tests/cast/AsInExpressionBody.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsInPropertyAndPropertyAccessor.kt")
      public void testAsInPropertyAndPropertyAccessor() {
        runTest("compiler/testData/diagnostics/tests/cast/AsInPropertyAndPropertyAccessor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsNothing.kt")
      public void testAsNothing() {
        runTest("compiler/testData/diagnostics/tests/cast/AsNothing.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsTypeAlias.kt")
      public void testAsTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/cast/AsTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsWithOtherParameter.kt")
      public void testAsWithOtherParameter() {
        runTest("compiler/testData/diagnostics/tests/cast/AsWithOtherParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("checkCastToNullableType.kt")
      public void testCheckCastToNullableType() {
        runTest("compiler/testData/diagnostics/tests/cast/checkCastToNullableType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constants.kt")
      public void testConstants() {
        runTest("compiler/testData/diagnostics/tests/cast/constants.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DowncastMap.kt")
      public void testDowncastMap() {
        runTest("compiler/testData/diagnostics/tests/cast/DowncastMap.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExtensionAsNonExtension.kt")
      public void testExtensionAsNonExtension() {
        runTest("compiler/testData/diagnostics/tests/cast/ExtensionAsNonExtension.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FlexibleTargetType.kt")
      public void testFlexibleTargetType() {
        runTest("compiler/testData/diagnostics/tests/cast/FlexibleTargetType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("isAlwaysFalse.kt")
      public void testIsAlwaysFalse() {
        runTest("compiler/testData/diagnostics/tests/cast/isAlwaysFalse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric.kt")
      public void testIsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowForExactSupertypeCheck.kt")
      public void testIsErasedAllowForExactSupertypeCheck() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForExactSupertypeCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowForOverridenVarianceWithProjection.kt")
      public void testIsErasedAllowForOverridenVarianceWithProjection() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForOverridenVarianceWithProjection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowForSupertypeCheckWithContrvariance.kt")
      public void testIsErasedAllowForSupertypeCheckWithContrvariance() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForSupertypeCheckWithContrvariance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowForSupertypeCheckWithCovariance.kt")
      public void testIsErasedAllowForSupertypeCheckWithCovariance() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForSupertypeCheckWithCovariance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowForTypeWithIrrelevantMixin.kt")
      public void testIsErasedAllowForTypeWithIrrelevantMixin() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithIrrelevantMixin.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowForTypeWithTwoSameTypeSubstitutions.kt")
      public void testIsErasedAllowForTypeWithTwoSameTypeSubstitutions() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithTwoSameTypeSubstitutions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowForTypeWithoutTypeArguments.kt")
      public void testIsErasedAllowForTypeWithoutTypeArguments() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithoutTypeArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowFromOut.kt")
      public void testIsErasedAllowFromOut() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOut.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowFromOut2.kt")
      public void testIsErasedAllowFromOut2() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOut2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowFromOut3.kt")
      public void testIsErasedAllowFromOut3() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOut3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowFromOutAtClass.kt")
      public void testIsErasedAllowFromOutAtClass() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOutAtClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowParameterSubtype.kt")
      public void testIsErasedAllowParameterSubtype() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowParameterSubtype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowSameClassParameter.kt")
      public void testIsErasedAllowSameClassParameter() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowSameClassParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedAllowSameParameterParameter.kt")
      public void testIsErasedAllowSameParameterParameter() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowSameParameterParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("isErasedAnyAndStarred.kt")
      public void testIsErasedAnyAndStarred() {
        runTest("compiler/testData/diagnostics/tests/cast/isErasedAnyAndStarred.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedDisallowDifferentArgInvariantPosition.kt")
      public void testIsErasedDisallowDifferentArgInvariantPosition() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowDifferentArgInvariantPosition.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedDisallowForOverridenVariance.kt")
      public void testIsErasedDisallowForOverridenVariance() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowForOverridenVariance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedDisallowForTypeWithConstraints.kt")
      public void testIsErasedDisallowForTypeWithConstraints() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowForTypeWithConstraints.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedDisallowFromAny.kt")
      public void testIsErasedDisallowFromAny() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromAny.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedDisallowFromIn.kt")
      public void testIsErasedDisallowFromIn() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromIn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedDisallowFromOut.kt")
      public void testIsErasedDisallowFromOut() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromOut.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedDisallowFromOutAtClass.kt")
      public void testIsErasedDisallowFromOutAtClass() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromOutAtClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid.kt")
      public void testIsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid.kt")
      public void testIsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedNonGeneric.kt")
      public void testIsErasedNonGeneric() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedNonGeneric.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedNullableTasT.kt")
      public void testIsErasedNullableTasT() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedNullableTasT.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedStar.kt")
      public void testIsErasedStar() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedStar.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("isErasedTAndStarred.kt")
      public void testIsErasedTAndStarred() {
        runTest("compiler/testData/diagnostics/tests/cast/isErasedTAndStarred.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedTasT.kt")
      public void testIsErasedTasT() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedTasT.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedToErrorType.kt")
      public void testIsErasedToErrorType() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedToErrorType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("isErasedUnrelatedAndStarred.kt")
      public void testIsErasedUnrelatedAndStarred() {
        runTest("compiler/testData/diagnostics/tests/cast/isErasedUnrelatedAndStarred.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsErasedUpcastToNonReified.kt")
      public void testIsErasedUpcastToNonReified() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedUpcastToNonReified.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsForTypeWithComplexUpperBound.kt")
      public void testIsForTypeWithComplexUpperBound() {
        runTest("compiler/testData/diagnostics/tests/cast/IsForTypeWithComplexUpperBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsRecursionSustainable.kt")
      public void testIsRecursionSustainable() {
        runTest("compiler/testData/diagnostics/tests/cast/IsRecursionSustainable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsTraits.kt")
      public void testIsTraits() {
        runTest("compiler/testData/diagnostics/tests/cast/IsTraits.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsWithCycleUpperBounds.kt")
      public void testIsWithCycleUpperBounds() {
        runTest("compiler/testData/diagnostics/tests/cast/IsWithCycleUpperBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt15161.kt")
      public void testKt15161() {
        runTest("compiler/testData/diagnostics/tests/cast/kt15161.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt47685.kt")
      public void testKt47685() {
        runTest("compiler/testData/diagnostics/tests/cast/kt47685.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt56629.kt")
      public void testKt56629() {
        runTest("compiler/testData/diagnostics/tests/cast/kt56629.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt614.kt")
      public void testKt614() {
        runTest("compiler/testData/diagnostics/tests/cast/kt614.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonUselessCastInLambda.kt")
      public void testNonUselessCastInLambda() {
        runTest("compiler/testData/diagnostics/tests/cast/nonUselessCastInLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nothingAs.kt")
      public void testNothingAs() {
        runTest("compiler/testData/diagnostics/tests/cast/nothingAs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NullableToNullable.kt")
      public void testNullableToNullable() {
        runTest("compiler/testData/diagnostics/tests/cast/NullableToNullable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("StableTypeForUselessCast.kt")
      public void testStableTypeForUselessCast() {
        runTest("compiler/testData/diagnostics/tests/cast/StableTypeForUselessCast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("usefulCastInGetOperator.kt")
      public void testUsefulCastInGetOperator() {
        runTest("compiler/testData/diagnostics/tests/cast/usefulCastInGetOperator.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("UselessSafeCast.kt")
      public void testUselessSafeCast() {
        runTest("compiler/testData/diagnostics/tests/cast/UselessSafeCast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WhenErasedDisallowFromAny.kt")
      public void testWhenErasedDisallowFromAny() {
        runTest("compiler/testData/diagnostics/tests/cast/WhenErasedDisallowFromAny.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WhenWithExpression.kt")
      public void testWhenWithExpression() {
        runTest("compiler/testData/diagnostics/tests/cast/WhenWithExpression.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/cast/bare")
      @TestDataPath("$PROJECT_ROOT")
      public class Bare {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInBare() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/cast/bare"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("AsNestedBare.kt")
        public void testAsNestedBare() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/AsNestedBare.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("AsNullable.kt")
        public void testAsNullable() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/AsNullable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("AsNullableNotEnough.kt")
        public void testAsNullableNotEnough() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/AsNullableNotEnough.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("EitherAs.kt")
        public void testEitherAs() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/EitherAs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("EitherIs.kt")
        public void testEitherIs() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/EitherIs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("EitherNotIs.kt")
        public void testEitherNotIs() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/EitherNotIs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("EitherSafeAs.kt")
        public void testEitherSafeAs() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/EitherSafeAs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("EitherWhen.kt")
        public void testEitherWhen() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/EitherWhen.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ErrorsInSubstitution.kt")
        public void testErrorsInSubstitution() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/ErrorsInSubstitution.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FromErrorType.kt")
        public void testFromErrorType() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/FromErrorType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NullableAs.kt")
        public void testNullableAs() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/NullableAs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NullableAsNotEnough.kt")
        public void testNullableAsNotEnough() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/NullableAsNotEnough.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NullableAsNullable.kt")
        public void testNullableAsNullable() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/NullableAsNullable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NullableAsNullableNotEnough.kt")
        public void testNullableAsNullableNotEnough() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/NullableAsNullableNotEnough.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("RedundantNullable.kt")
        public void testRedundantNullable() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/RedundantNullable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SupertypeChain.kt")
        public void testSupertypeChain() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/SupertypeChain.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ToErrorType.kt")
        public void testToErrorType() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/ToErrorType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("UnrelatedAs.kt")
        public void testUnrelatedAs() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/UnrelatedAs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("UnrelatedColon.kt")
        public void testUnrelatedColon() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/UnrelatedColon.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("UnrelatedIs.kt")
        public void testUnrelatedIs() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/UnrelatedIs.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/cast/neverSucceeds")
      @TestDataPath("$PROJECT_ROOT")
      public class NeverSucceeds {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNeverSucceeds() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/cast/neverSucceeds"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("CastToNotNullSuper.kt")
        public void testCastToNotNullSuper() {
          runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/CastToNotNullSuper.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("DefinitelyNotNullTypes.kt")
        public void testDefinitelyNotNullTypes() {
          runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/DefinitelyNotNullTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("MappedDirect.kt")
        public void testMappedDirect() {
          runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/MappedDirect.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("MappedSubtypes.kt")
        public void testMappedSubtypes() {
          runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/MappedSubtypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NoGenericsRelated.kt")
        public void testNoGenericsRelated() {
          runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/NoGenericsRelated.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NoGenericsUnrelated.kt")
        public void testNoGenericsUnrelated() {
          runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/NoGenericsUnrelated.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NullableExprToItsNonNullableGenericBaseClass.kt")
        public void testNullableExprToItsNonNullableGenericBaseClass() {
          runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/NullableExprToItsNonNullableGenericBaseClass.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/checkArguments")
    @TestDataPath("$PROJECT_ROOT")
    public class CheckArguments {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInCheckArguments() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/checkArguments"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayAccessSet.kt")
      public void testArrayAccessSet() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/arrayAccessSet.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayAccessSetNotEnoughArgs.kt")
      public void testArrayAccessSetNotEnoughArgs() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/arrayAccessSetNotEnoughArgs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayAccessSetTooManyArgs.kt")
      public void testArrayAccessSetTooManyArgs() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/arrayAccessSetTooManyArgs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("booleanExpressions.kt")
      public void testBooleanExpressions() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/booleanExpressions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt17691.kt")
      public void testKt17691() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt17691.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt17691WithEnabledFeature.kt")
      public void testKt17691WithEnabledFeature() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt17691WithEnabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1897_diagnostic_part.kt")
      public void testKt1897_diagnostic_part() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt1897_diagnostic_part.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1940.kt")
      public void testKt1940() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt1940.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt49276.kt")
      public void testKt49276() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt49276.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt49276Disabled.kt")
      public void testKt49276Disabled() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt49276Disabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt49276Error.kt")
      public void testKt49276Error() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt49276Error.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt51062.kt")
      public void testKt51062() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt51062.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt51062Error.kt")
      public void testKt51062Error() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt51062Error.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overloadedFunction.kt")
      public void testOverloadedFunction() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/overloadedFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SpreadVarargs.kt")
      public void testSpreadVarargs() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/SpreadVarargs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("twoLambdasFunction.kt")
      public void testTwoLambdasFunction() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/twoLambdasFunction.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/classLiteral")
    @TestDataPath("$PROJECT_ROOT")
    public class ClassLiteral {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInClassLiteral() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/classLiteral"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrays.kt")
      public void testArrays() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/arrays.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classAndObjectLiteralType.kt")
      public void testClassAndObjectLiteralType() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/classAndObjectLiteralType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classLiteralType.kt")
      public void testClassLiteralType() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/classLiteralType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expressionWithNullableType.kt")
      public void testExpressionWithNullableType() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/expressionWithNullableType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericArrays.kt")
      public void testGenericArrays() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/genericArrays.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericClasses.kt")
      public void testGenericClasses() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/genericClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inAnnotationArguments.kt")
      public void testInAnnotationArguments() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/inAnnotationArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inAnnotationArguments_noTypeParams.kt")
      public void testInAnnotationArguments_noTypeParams() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/inAnnotationArguments_noTypeParams.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("integerValueType.kt")
      public void testIntegerValueType() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/integerValueType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonClassesOnLHS.kt")
      public void testNonClassesOnLHS() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/nonClassesOnLHS.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("parameterizedTypeAlias.kt")
      public void testParameterizedTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/parameterizedTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("qualifiedClassLiteral.kt")
      public void testQualifiedClassLiteral() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/qualifiedClassLiteral.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("simpleClassLiteral.kt")
      public void testSimpleClassLiteral() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/simpleClassLiteral.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCast.kt")
      public void testSmartCast() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/smartCast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealiases.kt")
      public void testTypealiases() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/typealiases.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unresolvedClass.kt")
      public void testUnresolvedClass() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/unresolvedClass.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/classObjects")
    @TestDataPath("$PROJECT_ROOT")
    public class ClassObjects {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInClassObjects() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/classObjects"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("builtInClassObjects.kt")
      public void testBuiltInClassObjects() {
        runTest("compiler/testData/diagnostics/tests/classObjects/builtInClassObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ClassObjectCannotAccessClassFields.kt")
      public void testClassObjectCannotAccessClassFields() {
        runTest("compiler/testData/diagnostics/tests/classObjects/ClassObjectCannotAccessClassFields.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classObjectHeader.kt")
      public void testClassObjectHeader() {
        runTest("compiler/testData/diagnostics/tests/classObjects/classObjectHeader.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classObjectInLocalClass.kt")
      public void testClassObjectInLocalClass() {
        runTest("compiler/testData/diagnostics/tests/classObjects/classObjectInLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classObjectRedeclaration.kt")
      public void testClassObjectRedeclaration() {
        runTest("compiler/testData/diagnostics/tests/classObjects/classObjectRedeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ClassObjectVisibility.kt")
      public void testClassObjectVisibility() {
        runTest("compiler/testData/diagnostics/tests/classObjects/ClassObjectVisibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ClassObjects.kt")
      public void testClassObjects() {
        runTest("compiler/testData/diagnostics/tests/classObjects/ClassObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classWithFunctionSupertype_after.kt")
      public void testClassWithFunctionSupertype_after() {
        runTest("compiler/testData/diagnostics/tests/classObjects/classWithFunctionSupertype_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classWithFunctionSupertype_before.kt")
      public void testClassWithFunctionSupertype_before() {
        runTest("compiler/testData/diagnostics/tests/classObjects/classWithFunctionSupertype_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("companionObjectOfPrivateClassVisibility.kt")
      public void testCompanionObjectOfPrivateClassVisibility() {
        runTest("compiler/testData/diagnostics/tests/classObjects/companionObjectOfPrivateClassVisibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importClassInClassObject.kt")
      public void testImportClassInClassObject() {
        runTest("compiler/testData/diagnostics/tests/classObjects/importClassInClassObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InnerClassAccessThroughClassObject.kt")
      public void testInnerClassAccessThroughClassObject() {
        runTest("compiler/testData/diagnostics/tests/classObjects/InnerClassAccessThroughClassObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InnerClassAccessThroughEnum_after.kt")
      public void testInnerClassAccessThroughEnum_after() {
        runTest("compiler/testData/diagnostics/tests/classObjects/InnerClassAccessThroughEnum_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InnerClassAccessThroughEnum_before.kt")
      public void testInnerClassAccessThroughEnum_before() {
        runTest("compiler/testData/diagnostics/tests/classObjects/InnerClassAccessThroughEnum_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InnerClassClassObject.kt")
      public void testInnerClassClassObject() {
        runTest("compiler/testData/diagnostics/tests/classObjects/InnerClassClassObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invisibleClassObjects.kt")
      public void testInvisibleClassObjects() {
        runTest("compiler/testData/diagnostics/tests/classObjects/invisibleClassObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3866.kt")
      public void testKt3866() {
        runTest("compiler/testData/diagnostics/tests/classObjects/kt3866.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multipleDissallowedDefaultObjects.kt")
      public void testMultipleDissallowedDefaultObjects() {
        runTest("compiler/testData/diagnostics/tests/classObjects/multipleDissallowedDefaultObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassInPrivateClassObject.kt")
      public void testNestedClassInPrivateClassObject() {
        runTest("compiler/testData/diagnostics/tests/classObjects/nestedClassInPrivateClassObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveFunctionInsideClassObject.kt")
      public void testResolveFunctionInsideClassObject() {
        runTest("compiler/testData/diagnostics/tests/classObjects/resolveFunctionInsideClassObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("selfCallsInCompanionSuperConstructor_error.kt")
      public void testSelfCallsInCompanionSuperConstructor_error() {
        runTest("compiler/testData/diagnostics/tests/classObjects/selfCallsInCompanionSuperConstructor_error.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("selfCallsInCompanionSuperConstructor_warning.kt")
      public void testSelfCallsInCompanionSuperConstructor_warning() {
        runTest("compiler/testData/diagnostics/tests/classObjects/selfCallsInCompanionSuperConstructor_warning.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParametersInAnnonymousObject.kt")
      public void testTypeParametersInAnnonymousObject() {
        runTest("compiler/testData/diagnostics/tests/classObjects/typeParametersInAnnonymousObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParametersInAnnonymousObject_after.kt")
      public void testTypeParametersInAnnonymousObject_after() {
        runTest("compiler/testData/diagnostics/tests/classObjects/typeParametersInAnnonymousObject_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParametersInObject.kt")
      public void testTypeParametersInObject() {
        runTest("compiler/testData/diagnostics/tests/classObjects/typeParametersInObject.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/collectionLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class CollectionLiterals {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInCollectionLiterals() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/collectionLiterals"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("argumentsOfAnnotation.kt")
      public void testArgumentsOfAnnotation() {
        runTest("compiler/testData/diagnostics/tests/collectionLiterals/argumentsOfAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("argumentsOfAnnotationWithKClass.kt")
      public void testArgumentsOfAnnotationWithKClass() {
        runTest("compiler/testData/diagnostics/tests/collectionLiterals/argumentsOfAnnotationWithKClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basicCollectionLiterals.kt")
      public void testBasicCollectionLiterals() {
        runTest("compiler/testData/diagnostics/tests/collectionLiterals/basicCollectionLiterals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("collectionLiteralsAsPrimitiveArrays.kt")
      public void testCollectionLiteralsAsPrimitiveArrays() {
        runTest("compiler/testData/diagnostics/tests/collectionLiterals/collectionLiteralsAsPrimitiveArrays.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("collectionLiteralsOutsideOfAnnotations.kt")
      public void testCollectionLiteralsOutsideOfAnnotations() {
        runTest("compiler/testData/diagnostics/tests/collectionLiterals/collectionLiteralsOutsideOfAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("collectionLiteralsWithVarargs.kt")
      public void testCollectionLiteralsWithVarargs() {
        runTest("compiler/testData/diagnostics/tests/collectionLiterals/collectionLiteralsWithVarargs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("defaultValuesInAnnotation.kt")
      public void testDefaultValuesInAnnotation() {
        runTest("compiler/testData/diagnostics/tests/collectionLiterals/defaultValuesInAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("defaultValuesWithConstantsInAnnotation.kt")
      public void testDefaultValuesWithConstantsInAnnotation() {
        runTest("compiler/testData/diagnostics/tests/collectionLiterals/defaultValuesWithConstantsInAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt34515.kt")
      public void testKt34515() {
        runTest("compiler/testData/diagnostics/tests/collectionLiterals/kt34515.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noCollectionLiterals.kt")
      public void testNoCollectionLiterals() {
        runTest("compiler/testData/diagnostics/tests/collectionLiterals/noCollectionLiterals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveToFunctionFromBuiltIns.kt")
      public void testResolveToFunctionFromBuiltIns() {
        runTest("compiler/testData/diagnostics/tests/collectionLiterals/resolveToFunctionFromBuiltIns.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/constantEvaluator")
    @TestDataPath("$PROJECT_ROOT")
    public class ConstantEvaluator {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInConstantEvaluator() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/constantEvaluator"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/constantEvaluator/constant")
      @TestDataPath("$PROJECT_ROOT")
      public class Constant {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInConstant() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/constantEvaluator/constant"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classObjectProperty.kt")
        public void testClassObjectProperty() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/classObjectProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("compareTo.kt")
        public void testCompareTo() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/compareTo.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentTypes.kt")
        public void testDifferentTypes() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/differentTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("divideByZero.kt")
        public void testDivideByZero() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/divideByZero.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("duplicateLabelWithNonTrivialCondition_disabled.kt")
        public void testDuplicateLabelWithNonTrivialCondition_disabled() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/duplicateLabelWithNonTrivialCondition_disabled.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("duplicateLabelWithNonTrivialCondition_enabled.kt")
        public void testDuplicateLabelWithNonTrivialCondition_enabled() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/duplicateLabelWithNonTrivialCondition_enabled.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("equals.kt")
        public void testEquals() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/equals.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("exceptionWhenEvaluate.kt")
        public void testExceptionWhenEvaluate() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/exceptionWhenEvaluate.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("finalProperty.kt")
        public void testFinalProperty() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/finalProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("float.kt")
        public void testFloat() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/float.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("floatsAndDoubles.kt")
        public void testFloatsAndDoubles() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/floatsAndDoubles.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("identityCompare.kt")
        public void testIdentityCompare() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/identityCompare.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("integer.kt")
        public void testInteger() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/integer.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("integerOperations.kt")
        public void testIntegerOperations() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/integerOperations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("integers.kt")
        public void testIntegers() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/integers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invAsCompileTimeCall.kt")
        public void testInvAsCompileTimeCall() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/invAsCompileTimeCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localVal.kt")
        public void testLocalVal() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/localVal.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localVar.kt")
        public void testLocalVar() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/localVar.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonConstAnnotationConstructorParam.kt")
        public void testNonConstAnnotationConstructorParam() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/nonConstAnnotationConstructorParam.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonConstValuesInConstContext.kt")
        public void testNonConstValuesInConstContext() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/nonConstValuesInConstContext.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonFinalProperty.kt")
        public void testNonFinalProperty() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/nonFinalProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("objectProperty.kt")
        public void testObjectProperty() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/objectProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("strings.kt")
        public void testStrings() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/strings.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("topLevelVal.kt")
        public void testTopLevelVal() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/topLevelVal.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("topLevelVar.kt")
        public void testTopLevelVar() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/topLevelVar.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeAliasToUnsigned.kt")
        public void testTypeAliasToUnsigned() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/typeAliasToUnsigned.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unaryMinusIndepWoExpType.kt")
        public void testUnaryMinusIndepWoExpType() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/unaryMinusIndepWoExpType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unaryMinusIndependentExpType.kt")
        public void testUnaryMinusIndependentExpType() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/unaryMinusIndependentExpType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unresolvedReference.kt")
        public void testUnresolvedReference() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/unresolvedReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unsignedOperations.kt")
        public void testUnsignedOperations() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/unsignedOperations.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/constantEvaluator/isPure")
      @TestDataPath("$PROJECT_ROOT")
      public class IsPure {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInIsPure() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/constantEvaluator/isPure"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerToType.kt")
        public void testInnerToType() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/isPure/innerToType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("namedConstants.kt")
        public void testNamedConstants() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/isPure/namedConstants.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("toType.kt")
        public void testToType() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/isPure/toType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unaryMinusIndepWoExpType.kt")
        public void testUnaryMinusIndepWoExpType() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/isPure/unaryMinusIndepWoExpType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unaryMinusIndependentExpType.kt")
        public void testUnaryMinusIndependentExpType() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/isPure/unaryMinusIndependentExpType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/constantEvaluator/usesVariableAsConstant")
      @TestDataPath("$PROJECT_ROOT")
      public class UsesVariableAsConstant {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInUsesVariableAsConstant() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/constantEvaluator/usesVariableAsConstant"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("binaryTypes.kt")
        public void testBinaryTypes() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/usesVariableAsConstant/binaryTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NamedConstants.kt")
        public void testNamedConstants() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/usesVariableAsConstant/NamedConstants.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("OtherTypes.kt")
        public void testOtherTypes() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/usesVariableAsConstant/OtherTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleTypes.kt")
        public void testSimpleTypes() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/usesVariableAsConstant/simpleTypes.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/constructorConsistency")
    @TestDataPath("$PROJECT_ROOT")
    public class ConstructorConsistency {
      @RepeatedTest(value = 5)
      @TestMetadata("afterInitialization.kt")
      public void testAfterInitialization() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/afterInitialization.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("aliencall.kt")
      public void testAliencall() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/aliencall.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInConstructorConsistency() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/constructorConsistency"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignment.kt")
      public void testAssignment() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/assignment.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("backing.kt")
      public void testBacking() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/backing.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basic.kt")
      public void testBasic() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/basic.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("companion.kt")
      public void testCompanion() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/companion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("comparison.kt")
      public void testComparison() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/comparison.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegate.kt")
      public void testDelegate() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/delegate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("derived.kt")
      public void testDerived() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/derived.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("derivedProperty.kt")
      public void testDerivedProperty() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/derivedProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("errorInsideDelegationCallNoPrimary.kt")
      public void testErrorInsideDelegationCallNoPrimary() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/errorInsideDelegationCallNoPrimary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("getset.kt")
      public void testGetset() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/getset.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("init.kt")
      public void testInit() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/init.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("initializerWithSecondaryConstructor.kt")
      public void testInitializerWithSecondaryConstructor() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/initializerWithSecondaryConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("initwithgetter.kt")
      public void testInitwithgetter() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/initwithgetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inspection.kt")
      public void testInspection() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/inspection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaInObject.kt")
      public void testLambdaInObject() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/lambdaInObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lateInit.kt")
      public void testLateInit() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/lateInit.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localObject.kt")
      public void testLocalObject() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/localObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multipleAreNull.kt")
      public void testMultipleAreNull() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/multipleAreNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nobacking.kt")
      public void testNobacking() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/nobacking.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("open.kt")
      public void testOpen() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/open.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("openProperty.kt")
      public void testOpenProperty() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/openProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("outer.kt")
      public void testOuter() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/outer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("parametersVsPropertiesFromPrimaryConstructor.kt")
      public void testParametersVsPropertiesFromPrimaryConstructor() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/parametersVsPropertiesFromPrimaryConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("property.kt")
      public void testProperty() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/property.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyAccess.kt")
      public void testPropertyAccess() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/propertyAccess.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("twoSecondaryConstructors.kt")
      public void testTwoSecondaryConstructors() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/twoSecondaryConstructors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("twoSuperTypeCalls.kt")
      public void testTwoSuperTypeCalls() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/twoSuperTypeCalls.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/contracts")
    @TestDataPath("$PROJECT_ROOT")
    public class Contracts {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInContracts() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/contracts"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/contracts/neg")
      @TestDataPath("$PROJECT_ROOT")
      public class Neg {
        @RepeatedTest(value = 5)
        @TestMetadata("14.kt")
        public void test14() {
          runTest("compiler/testData/diagnostics/tests/contracts/neg/14.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNeg() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/contracts/neg"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/contracts/pos")
      @TestDataPath("$PROJECT_ROOT")
      public class Pos {
        @RepeatedTest(value = 5)
        @TestMetadata("1.kt")
        public void test1() {
          runTest("compiler/testData/diagnostics/tests/contracts/pos/1.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("14UserDefined.kt")
        public void test14UserDefined() {
          runTest("compiler/testData/diagnostics/tests/contracts/pos/14UserDefined.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInPos() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/contracts/pos"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis")
    @TestDataPath("$PROJECT_ROOT")
    public class ControlFlowAnalysis {
      @RepeatedTest(value = 5)
      @TestMetadata("accessToCompanionInBaseEnumInitSection_function.kt")
      public void testAccessToCompanionInBaseEnumInitSection_function() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/accessToCompanionInBaseEnumInitSection_function.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("accessToCompanionInBaseEnumInitSection_property.kt")
      public void testAccessToCompanionInBaseEnumInitSection_property() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/accessToCompanionInBaseEnumInitSection_property.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("accessValueParameterInDefaultValue_after.kt")
      public void testAccessValueParameterInDefaultValue_after() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/accessValueParameterInDefaultValue_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("accessValueParameterInDefaultValue_before.kt")
      public void testAccessValueParameterInDefaultValue_before() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/accessValueParameterInDefaultValue_before.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInControlFlowAnalysis() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/controlFlowAnalysis"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignedInFinally.kt")
      public void testAssignedInFinally() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/assignedInFinally.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignedInIfElse.kt")
      public void testAssignedInIfElse() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/assignedInIfElse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignedInTryWithCatch.kt")
      public void testAssignedInTryWithCatch() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/assignedInTryWithCatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignedInTryWithoutCatch.kt")
      public void testAssignedInTryWithoutCatch() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/assignedInTryWithoutCatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignmentInLocalsInConstructor.kt")
      public void testAssignmentInLocalsInConstructor() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/assignmentInLocalsInConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignmentOfSyntheticVarWithInconsistentNullability.kt")
      public void testAssignmentOfSyntheticVarWithInconsistentNullability() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/assignmentOfSyntheticVarWithInconsistentNullability.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("backingFieldInsideGetter_after.kt")
      public void testBackingFieldInsideGetter_after() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/backingFieldInsideGetter_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("backingFieldInsideGetter_before.kt")
      public void testBackingFieldInsideGetter_before() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/backingFieldInsideGetter_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("breakContinueInTryFinally.kt")
      public void testBreakContinueInTryFinally() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/breakContinueInTryFinally.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("breakContinueInTryFinallyInLoop.kt")
      public void testBreakContinueInTryFinallyInLoop() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/breakContinueInTryFinallyInLoop.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("breakContinueNoinline.kt")
      public void testBreakContinueNoinline() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/breakContinueNoinline.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("breakInLambdaPassedToDirectInvoke.kt")
      public void testBreakInLambdaPassedToDirectInvoke() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/breakInLambdaPassedToDirectInvoke.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("breakInsideLocal.kt")
      public void testBreakInsideLocal() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/breakInsideLocal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("breakOrContinueInLoopCondition.kt")
      public void testBreakOrContinueInLoopCondition() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/breakOrContinueInLoopCondition.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("capturingUninitializedVariableInNonInPlaceLambda.kt")
      public void testCapturingUninitializedVariableInNonInPlaceLambda() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/capturingUninitializedVariableInNonInPlaceLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cfgOfFullyIncorrectCode.kt")
      public void testCfgOfFullyIncorrectCode() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/cfgOfFullyIncorrectCode.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("checkInnerLocalDeclarations.kt")
      public void testCheckInnerLocalDeclarations() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/checkInnerLocalDeclarations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("checkPropertyAccessor.kt")
      public void testCheckPropertyAccessor() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/checkPropertyAccessor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constructorPropertyInterdependence.kt")
      public void testConstructorPropertyInterdependence() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/constructorPropertyInterdependence.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("definiteReturnInWhen.kt")
      public void testDefiniteReturnInWhen() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturnInWhen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegatedConstructorArguments.kt")
      public void testDelegatedConstructorArguments() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/delegatedConstructorArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegatedMemberProperyWriteInInit.kt")
      public void testDelegatedMemberProperyWriteInInit() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/delegatedMemberProperyWriteInInit.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegatedPropertyEarlyAccess.kt")
      public void testDelegatedPropertyEarlyAccess() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/delegatedPropertyEarlyAccess.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("doWhileAssignment.kt")
      public void testDoWhileAssignment() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/doWhileAssignment.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("doWhileNotDefined.kt")
      public void testDoWhileNotDefined() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/doWhileNotDefined.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("elvisNotProcessed.kt")
      public void testElvisNotProcessed() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/elvisNotProcessed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumCompanionInterdependence.kt")
      public void testEnumCompanionInterdependence() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/enumCompanionInterdependence.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumInterdependence.kt")
      public void testEnumInterdependence() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/enumInterdependence.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fieldAsClassDelegate.kt")
      public void testFieldAsClassDelegate() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/fieldAsClassDelegate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fieldInitialization.kt")
      public void testFieldInitialization() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/fieldInitialization.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("infiniteLoops.kt")
      public void testInfiniteLoops() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/infiniteLoops.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("initializationInLambda.kt")
      public void testInitializationInLambda() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("initializationInLocalClass.kt")
      public void testInitializationInLocalClass() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("initializationInLocalFun.kt")
      public void testInitializationInLocalFun() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLocalFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("initializationInLocalViaExplicitThis_after.kt")
      public void testInitializationInLocalViaExplicitThis_after() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLocalViaExplicitThis_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("initializationInLocalViaExplicitThis_before.kt")
      public void testInitializationInLocalViaExplicitThis_before() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLocalViaExplicitThis_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlinedBreakContinueFeatureDisabled.kt")
      public void testInlinedBreakContinueFeatureDisabled() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/inlinedBreakContinueFeatureDisabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1001.kt")
      public void testKt1001() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1001.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1027.kt")
      public void testKt1027() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1027.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1066.kt")
      public void testKt1066() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1066.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10805.kt")
      public void testKt10805() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt10805.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10823.kt")
      public void testKt10823() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt10823.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1156.kt")
      public void testKt1156() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1156.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1185enums.kt")
      public void testKt1185enums() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1185enums.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1189.kt")
      public void testKt1189() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1189.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1191.kt")
      public void testKt1191() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1191.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1219.1301.kt")
      public void testKt1219_1301() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1219.1301.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1571.kt")
      public void testKt1571() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1571.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1977.kt")
      public void testKt1977() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1977.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2166_kt2103.kt")
      public void testKt2166_kt2103() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2166_kt2103.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2226.kt")
      public void testKt2226() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2226.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2330.kt")
      public void testKt2330() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2330.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2334.kt")
      public void testKt2334() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2334.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2369.kt")
      public void testKt2369() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2369.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2845.kt")
      public void testKt2845() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2845.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2960.kt")
      public void testKt2960() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2960.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2972.kt")
      public void testKt2972() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2972.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3444.kt")
      public void testKt3444() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt3444.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3501.kt")
      public void testKt3501() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt3501.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4126.kt")
      public void testKt4126() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt4126.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4405.kt")
      public void testKt4405() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt4405.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt510.kt")
      public void testKt510() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt510.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt52131.kt")
      public void testKt52131() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt52131.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt607.kt")
      public void testKt607() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt607.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt609.kt")
      public void testKt609() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt609.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt610.kt")
      public void testKt610() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt610.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt6788.kt")
      public void testKt6788() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt6788.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt776.kt")
      public void testKt776() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt776.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt843.kt")
      public void testKt843() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt843.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt897.kt")
      public void testKt897() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt897.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localClasses.kt")
      public void testLocalClasses() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/localClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localObjectInConstructor.kt")
      public void testLocalObjectInConstructor() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/localObjectInConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("loopWithNonTrivialBooleanConst_error.kt")
      public void testLoopWithNonTrivialBooleanConst_error() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/loopWithNonTrivialBooleanConst_error.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("loopWithNonTrivialBooleanConst_warning.kt")
      public void testLoopWithNonTrivialBooleanConst_warning() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/loopWithNonTrivialBooleanConst_warning.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("mainWithWarningOnUnusedParam.kt")
      public void testMainWithWarningOnUnusedParam() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/mainWithWarningOnUnusedParam.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("mainWithoutWarningOnUnusedParam.kt")
      public void testMainWithoutWarningOnUnusedParam() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/mainWithoutWarningOnUnusedParam.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedTryFinally.kt")
      public void testNestedTryFinally() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/nestedTryFinally.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonLocalReturnUnreachable.kt")
      public void testNonLocalReturnUnreachable() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/nonLocalReturnUnreachable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonLocalReturnWithFinally.kt")
      public void testNonLocalReturnWithFinally() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/nonLocalReturnWithFinally.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateSetter.kt")
      public void testPrivateSetter() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/privateSetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertiesInitWithOtherInstance.kt")
      public void testPropertiesInitWithOtherInstance() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesInitWithOtherInstance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertiesInitWithOtherInstanceInner.kt")
      public void testPropertiesInitWithOtherInstanceInner() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesInitWithOtherInstanceInner.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertiesInitWithOtherInstanceThisLabel.kt")
      public void testPropertiesInitWithOtherInstanceThisLabel() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesInitWithOtherInstanceThisLabel.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertiesOrderInPackage.kt")
      public void testPropertiesOrderInPackage() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesOrderInPackage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reassignmentInCatch.kt")
      public void testReassignmentInCatch() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentInCatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reassignmentInConcurrentLambdas.kt")
      public void testReassignmentInConcurrentLambdas() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentInConcurrentLambdas.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reassignmentInLambda.kt")
      public void testReassignmentInLambda() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentInLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reassignmentInTryCatch.kt")
      public void testReassignmentInTryCatch() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentInTryCatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reassignmentInTryCatchWithJumps.kt")
      public void testReassignmentInTryCatchWithJumps() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentInTryCatchWithJumps.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reassignmentWithLambda.kt")
      public void testReassignmentWithLambda() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentWithLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("referenceToPropertyInitializer.kt")
      public void testReferenceToPropertyInitializer() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/referenceToPropertyInitializer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("repeatUnitializedErrorOnlyForLocalVars.kt")
      public void testRepeatUnitializedErrorOnlyForLocalVars() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/repeatUnitializedErrorOnlyForLocalVars.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("safeCallAfterVariableInitialization.kt")
      public void testSafeCallAfterVariableInitialization() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/safeCallAfterVariableInitialization.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("scopeOfAnonymousInitializer.kt")
      public void testScopeOfAnonymousInitializer() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/scopeOfAnonymousInitializer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastInCatch.kt")
      public void testSmartCastInCatch() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/smartCastInCatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("throwInLambda.kt")
      public void testThrowInLambda() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/throwInLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("tryCatchFinallyIfs.kt")
      public void testTryCatchFinallyIfs() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/tryCatchFinallyIfs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("tryWithAssignmentUsedInCatch.kt")
      public void testTryWithAssignmentUsedInCatch() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/tryWithAssignmentUsedInCatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("uninintializedProperyWithDirectAndDelayedInitialization.kt")
      public void testUninintializedProperyWithDirectAndDelayedInitialization() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/uninintializedProperyWithDirectAndDelayedInitialization.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("uninitializedCompanionOfEnum_after.kt")
      public void testUninitializedCompanionOfEnum_after() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/uninitializedCompanionOfEnum_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("uninitializedCompanionOfEnum_before.kt")
      public void testUninitializedCompanionOfEnum_before() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/uninitializedCompanionOfEnum_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("UninitializedEnumCompanionVals.kt")
      public void testUninitializedEnumCompanionVals() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/UninitializedEnumCompanionVals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("uninitializedInLocalDeclarations.kt")
      public void testUninitializedInLocalDeclarations() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/uninitializedInLocalDeclarations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("UninitializedOrReassignedVariables.kt")
      public void testUninitializedOrReassignedVariables() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/UninitializedOrReassignedVariables.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("uninitializedQualifiedEnumEntry.kt")
      public void testUninitializedQualifiedEnumEntry() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/uninitializedQualifiedEnumEntry.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unmappedArgs.kt")
      public void testUnmappedArgs() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unmappedArgs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unresolvedReference.kt")
      public void testUnresolvedReference() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unresolvedReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unusedPropertyWithCustomAccessors.kt")
      public void testUnusedPropertyWithCustomAccessors() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unusedPropertyWithCustomAccessors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useUninitializedInLambda.kt")
      public void testUseUninitializedInLambda() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/useUninitializedInLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varInitializationInIfInCycle.kt")
      public void testVarInitializationInIfInCycle() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/varInitializationInIfInCycle.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode")
      @TestDataPath("$PROJECT_ROOT")
      public class DeadCode {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDeadCode() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("commasAndWhitespaces.kt")
        public void testCommasAndWhitespaces() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/commasAndWhitespaces.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("commentsInDeadCode.kt")
        public void testCommentsInDeadCode() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/commentsInDeadCode.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCallInInvokeCall.kt")
        public void testDeadCallInInvokeCall() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCallInInvokeCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCallInReceiver.kt")
        public void testDeadCallInReceiver() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCallInReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeDifferentExamples.kt")
        public void testDeadCodeDifferentExamples() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeDifferentExamples.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeFromDifferentSources.kt")
        public void testDeadCodeFromDifferentSources() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeFromDifferentSources.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeInArrayAccess.kt")
        public void testDeadCodeInArrayAccess() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInArrayAccess.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeInAssignment.kt")
        public void testDeadCodeInAssignment() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInAssignment.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeInBinaryExpressions.kt")
        public void testDeadCodeInBinaryExpressions() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInBinaryExpressions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeInCalls.kt")
        public void testDeadCodeInCalls() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInCalls.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeInDeadCode.kt")
        public void testDeadCodeInDeadCode() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInDeadCode.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeInIf.kt")
        public void testDeadCodeInIf() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInIf.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeInInnerExpressions.kt")
        public void testDeadCodeInInnerExpressions() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInInnerExpressions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeInLocalDeclarations.kt")
        public void testDeadCodeInLocalDeclarations() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInLocalDeclarations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeInLoops.kt")
        public void testDeadCodeInLoops() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInLoops.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeInReturn.kt")
        public void testDeadCodeInReturn() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInReturn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeInUnaryExpr.kt")
        public void testDeadCodeInUnaryExpr() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInUnaryExpr.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deadCodeInWhileFromBreak.kt")
        public void testDeadCodeInWhileFromBreak() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInWhileFromBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expressionInUnitLiteral.kt")
        public void testExpressionInUnitLiteral() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/expressionInUnitLiteral.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("initializationInUnreachableCode.kt")
        public void testInitializationInUnreachableCode() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/initializationInUnreachableCode.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2585_1.kt")
        public void testKt2585_1() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt2585_1.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2585_2.kt")
        public void testKt2585_2() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt2585_2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2585_3.kt")
        public void testKt2585_3() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt2585_3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3162tryAsInitializer.kt")
        public void testKt3162tryAsInitializer() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt3162tryAsInitializer.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt5200DeadCodeInLambdas.kt")
        public void testKt5200DeadCodeInLambdas() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt5200DeadCodeInLambdas.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reassignementInUnreachableCode.kt")
        public void testReassignementInUnreachableCode() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/reassignementInUnreachableCode.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("returnInDeadLambda.kt")
        public void testReturnInDeadLambda() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/returnInDeadLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCastAfterDeadCode.kt")
        public void testSmartCastAfterDeadCode() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/smartCastAfterDeadCode.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn")
      @TestDataPath("$PROJECT_ROOT")
      public class DefiniteReturn {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDefiniteReturn() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3444_ReturnFromLocalFunctions.kt")
        public void testKt3444_ReturnFromLocalFunctions() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/kt3444_ReturnFromLocalFunctions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt4034.kt")
        public void testKt4034() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/kt4034.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaInTryFalsePositive.kt")
        public void testLambdaInTryFalsePositive() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/lambdaInTryFalsePositive.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("returnAliasedUnitNotRequired.kt")
        public void testReturnAliasedUnitNotRequired() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/returnAliasedUnitNotRequired.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ReturnFromFunctionInObject.kt")
        public void testReturnFromFunctionInObject() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/ReturnFromFunctionInObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleClass.kt")
        public void testSimpleClass() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/simpleClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("singleReturnFromTry.kt")
        public void testSingleReturnFromTry() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/singleReturnFromTry.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit")
      @TestDataPath("$PROJECT_ROOT")
      public class UnnecessaryLateinit {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInUnnecessaryLateinit() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lateinitRecursiveInLambda.kt")
        public void testLateinitRecursiveInLambda() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitRecursiveInLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lateinitWithConstructor.kt")
        public void testLateinitWithConstructor() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lateinitWithErroneousDelegation.kt")
        public void testLateinitWithErroneousDelegation() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithErroneousDelegation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lateinitWithInit.kt")
        public void testLateinitWithInit() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithInit.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lateinitWithMultipleConstructors.kt")
        public void testLateinitWithMultipleConstructors() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithMultipleConstructors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lateinitWithMultipleConstructorsAndDelegation.kt")
        public void testLateinitWithMultipleConstructorsAndDelegation() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithMultipleConstructorsAndDelegation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lateinitWithPlusAssign.kt")
        public void testLateinitWithPlusAssign() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithPlusAssign.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lateinitWithPrimaryConstructorAndConstructor.kt")
        public void testLateinitWithPrimaryConstructorAndConstructor() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithPrimaryConstructorAndConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("normalLateinit.kt")
        public void testNormalLateinit() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/normalLateinit.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("normalLateinitWithTwoConstructors.kt")
        public void testNormalLateinitWithTwoConstructors() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/normalLateinitWithTwoConstructors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("secondaryConstructorDelegateItself.kt")
        public void testSecondaryConstructorDelegateItself() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/secondaryConstructorDelegateItself.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("secondaryConstructorDelegateLoop.kt")
        public void testSecondaryConstructorDelegateLoop() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/secondaryConstructorDelegateLoop.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/controlStructures")
    @TestDataPath("$PROJECT_ROOT")
    public class ControlStructures {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInControlStructures() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/controlStructures"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("breakContinueInCrossInlineLambda.kt")
      public void testBreakContinueInCrossInlineLambda() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/breakContinueInCrossInlineLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("breakContinueInNoInlineLambda.kt")
      public void testBreakContinueInNoInlineLambda() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/breakContinueInNoInlineLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("breakToLabel.kt")
      public void testBreakToLabel() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/breakToLabel.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("catchGenerics.kt")
      public void testCatchGenerics() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/catchGenerics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("catchInnerClassesOfGenerics.kt")
      public void testCatchInnerClassesOfGenerics() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/catchInnerClassesOfGenerics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("catchInnerClassesOfGenerics_deprecation.kt")
      public void testCatchInnerClassesOfGenerics_deprecation() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/catchInnerClassesOfGenerics_deprecation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("catchWithDefault.kt")
      public void testCatchWithDefault() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/catchWithDefault.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("catchingLocalClassesCapturingTypeParameters.kt")
      public void testCatchingLocalClassesCapturingTypeParameters() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/catchingLocalClassesCapturingTypeParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("commonSupertypeOfT.kt")
      public void testCommonSupertypeOfT() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/commonSupertypeOfT.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("continueAndBreakLabelWithSameFunctionName.kt")
      public void testContinueAndBreakLabelWithSameFunctionName() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/continueAndBreakLabelWithSameFunctionName.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("continueInInitBlock.kt")
      public void testContinueInInitBlock() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/continueInInitBlock.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("emptyIf.kt")
      public void testEmptyIf() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/emptyIf.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ForLoopWithExtensionIteratorOnNullable.kt")
      public void testForLoopWithExtensionIteratorOnNullable() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/ForLoopWithExtensionIteratorOnNullable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("forLoopWithNullableRange.kt")
      public void testForLoopWithNullableRange() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/forLoopWithNullableRange.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("forWithIncorrectTypeSpecializer.kt")
      public void testForWithIncorrectTypeSpecializer() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/forWithIncorrectTypeSpecializer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("forWithNullableIterator.kt")
      public void testForWithNullableIterator() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/forWithNullableIterator.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ForWithoutBraces.kt")
      public void testForWithoutBraces() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/ForWithoutBraces.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ForbidStatementAsDirectFunctionBody.kt")
      public void testForbidStatementAsDirectFunctionBody() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/ForbidStatementAsDirectFunctionBody.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifElseIntersection.kt")
      public void testIfElseIntersection() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/ifElseIntersection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifInResultOfLambda.kt")
      public void testIfInResultOfLambda() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/ifInResultOfLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifToAnyDiscriminatingUsages.kt")
      public void testIfToAnyDiscriminatingUsages() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/ifToAnyDiscriminatingUsages.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifWhenToAnyComplexExpressions.kt")
      public void testIfWhenToAnyComplexExpressions() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/ifWhenToAnyComplexExpressions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifWhenWithoutElse.kt")
      public void testIfWhenWithoutElse() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/ifWhenWithoutElse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("improperElseInExpression.kt")
      public void testImproperElseInExpression() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/improperElseInExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incorrectElvis.kt")
      public void testIncorrectElvis() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/incorrectElvis.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("jumpAcrossFunctionBoundary.kt")
      public void testJumpAcrossFunctionBoundary() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/jumpAcrossFunctionBoundary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10322.kt")
      public void testKt10322() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt10322.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10706.kt")
      public void testKt10706() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt10706.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10717.kt")
      public void testKt10717() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt10717.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1075.kt")
      public void testKt1075() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt1075.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt30406.kt")
      public void testKt30406() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt30406.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4310.kt")
      public void testKt4310() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt4310.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt51711.kt")
      public void testKt51711() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt51711.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt657.kt")
      public void testKt657() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt657.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt770.kt351.kt735_StatementType.kt")
      public void testKt770_kt351_kt735_StatementType() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt770.kt351.kt735_StatementType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt786.kt")
      public void testKt786() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt786.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt799.kt")
      public void testKt799() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt799.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdasInExclExclAndElvis.kt")
      public void testLambdasInExclExclAndElvis() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/lambdasInExclExclAndElvis.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localReturnInsidePropertyAccessor.kt")
      public void testLocalReturnInsidePropertyAccessor() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/localReturnInsidePropertyAccessor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedLoopsWithMultipleLabels.kt")
      public void testNestedLoopsWithMultipleLabels() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/nestedLoopsWithMultipleLabels.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noTypeMismatchWithWhenWithoutElse.kt")
      public void testNoTypeMismatchWithWhenWithoutElse() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/noTypeMismatchWithWhenWithoutElse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonExhaustiveIfInElvis_after.kt")
      public void testNonExhaustiveIfInElvis_after() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/nonExhaustiveIfInElvis_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonExhaustiveIfInElvis_before.kt")
      public void testNonExhaustiveIfInElvis_before() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/nonExhaustiveIfInElvis_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notAFunctionLabel_after.kt")
      public void testNotAFunctionLabel_after() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/notAFunctionLabel_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notAFunctionLabel_before.kt")
      public void testNotAFunctionLabel_before() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/notAFunctionLabel_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("redundantLabel.kt")
      public void testRedundantLabel() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/redundantLabel.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("specialConstructsAndPlatformTypes.kt")
      public void testSpecialConstructsAndPlatformTypes() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/specialConstructsAndPlatformTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("specialConstructsWithNullableExpectedType.kt")
      public void testSpecialConstructsWithNullableExpectedType() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/specialConstructsWithNullableExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("tryReturnType.kt")
      public void testTryReturnType() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/tryReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeInferenceForExclExcl.kt")
      public void testTypeInferenceForExclExcl() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/typeInferenceForExclExcl.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valVarCatchParameter.kt")
      public void testValVarCatchParameter() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/valVarCatchParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valVarLoopParameter.kt")
      public void testValVarLoopParameter() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/valVarLoopParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenInResultOfLambda.kt")
      public void testWhenInResultOfLambda() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/whenInResultOfLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenToAnyDiscriminatingUsages.kt")
      public void testWhenToAnyDiscriminatingUsages() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/whenToAnyDiscriminatingUsages.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenWithNoSubjectAndCommas.kt")
      public void testWhenWithNoSubjectAndCommas() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/whenWithNoSubjectAndCommas.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenWithNothingTypedSubject.kt")
      public void testWhenWithNothingTypedSubject() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/whenWithNothingTypedSubject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("when.kt234.kt973.kt")
      public void testWhen_kt234_kt973() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/when.kt234.kt973.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/coroutines")
    @TestDataPath("$PROJECT_ROOT")
    public class Coroutines {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInCoroutines() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/coroutines"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineSuspendTypealias.kt")
      public void testInlineSuspendTypealias() {
        runTest("compiler/testData/diagnostics/tests/coroutines/inlineSuspendTypealias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("modifierFormBuiltinSuspendFun.kt")
      public void testModifierFormBuiltinSuspendFun() {
        runTest("compiler/testData/diagnostics/tests/coroutines/modifierFormBuiltinSuspendFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendInvokeInsideTry.kt")
      public void testSuspendInvokeInsideTry() {
        runTest("compiler/testData/diagnostics/tests/coroutines/suspendInvokeInsideTry.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendInvokeInsideWhen.kt")
      public void testSuspendInvokeInsideWhen() {
        runTest("compiler/testData/diagnostics/tests/coroutines/suspendInvokeInsideWhen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendInvokeWithReceiver.kt")
      public void testSuspendInvokeWithReceiver() {
        runTest("compiler/testData/diagnostics/tests/coroutines/suspendInvokeWithReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendLambdaFromExpectedType.kt")
      public void testSuspendLambdaFromExpectedType() {
        runTest("compiler/testData/diagnostics/tests/coroutines/suspendLambdaFromExpectedType.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/coroutines/callableReference")
      @TestDataPath("$PROJECT_ROOT")
      public class CallableReference {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCallableReference() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/coroutines/callableReference"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeOutideSuspend.kt")
        public void testInvokeOutideSuspend() {
          runTest("compiler/testData/diagnostics/tests/coroutines/callableReference/invokeOutideSuspend.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("outsideSuspend.kt")
        public void testOutsideSuspend() {
          runTest("compiler/testData/diagnostics/tests/coroutines/callableReference/outsideSuspend.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype")
      @TestDataPath("$PROJECT_ROOT")
      public class SuspendFunctionAsSupertype {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSuspendFunctionAsSupertype() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/kSuspendFunctionN")
        @TestDataPath("$PROJECT_ROOT")
        public class KSuspendFunctionN {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInKSuspendFunctionN() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/kSuspendFunctionN"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("mixingSuspendAndNonSuspendSupertypes.kt")
          public void testMixingSuspendAndNonSuspendSupertypes() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/kSuspendFunctionN/mixingSuspendAndNonSuspendSupertypes.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperClass.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperClass() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/kSuspendFunctionN/mixingSuspendAndNonSuspendSupertypesThruSuperClass.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperFunInterface.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperFunInterface() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/kSuspendFunctionN/mixingSuspendAndNonSuspendSupertypesThruSuperFunInterface.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperinterface.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperinterface() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/kSuspendFunctionN/mixingSuspendAndNonSuspendSupertypesThruSuperinterface.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("simple.kt")
          public void testSimple() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/kSuspendFunctionN/simple.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple")
        @TestDataPath("$PROJECT_ROOT")
        public class Simple {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInSimple() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("mixingSuspendAndNonSuspendSupertypes.kt")
          public void testMixingSuspendAndNonSuspendSupertypes() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple/mixingSuspendAndNonSuspendSupertypes.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperClass.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperClass() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple/mixingSuspendAndNonSuspendSupertypesThruSuperClass.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperFunInterface.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperFunInterface() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple/mixingSuspendAndNonSuspendSupertypesThruSuperFunInterface.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperinterface.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperinterface() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple/mixingSuspendAndNonSuspendSupertypesThruSuperinterface.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("simple.kt")
          public void testSimple() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple/simple.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN")
        @TestDataPath("$PROJECT_ROOT")
        public class SuspendFunctionN {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInSuspendFunctionN() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("mixingSuspendAndNonSuspendSupertypes.kt")
          public void testMixingSuspendAndNonSuspendSupertypes() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN/mixingSuspendAndNonSuspendSupertypes.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperClass.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperClass() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN/mixingSuspendAndNonSuspendSupertypesThruSuperClass.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperFunInterface.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperFunInterface() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN/mixingSuspendAndNonSuspendSupertypesThruSuperFunInterface.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperinterface.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperinterface() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN/mixingSuspendAndNonSuspendSupertypesThruSuperinterface.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("simple.kt")
          public void testSimple() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN/simple.kt");
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy")
    @TestDataPath("$PROJECT_ROOT")
    public class CyclicHierarchy {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInCyclicHierarchy() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/cyclicHierarchy"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classIndirectlyInheritsNested.kt")
      public void testClassIndirectlyInheritsNested() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/classIndirectlyInheritsNested.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classInheritsNested.kt")
      public void testClassInheritsNested() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/classInheritsNested.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("commonSupertypeForCyclicAndUsualTypes.kt")
      public void testCommonSupertypeForCyclicAndUsualTypes() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/commonSupertypeForCyclicAndUsualTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("commonSupertypeForCyclicTypes.kt")
      public void testCommonSupertypeForCyclicTypes() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/commonSupertypeForCyclicTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cyclicHierarchy.kt")
      public void testCyclicHierarchy() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/cyclicHierarchy.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaJavaCycle.kt")
      public void testJavaJavaCycle() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/javaJavaCycle.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaJavaNested.kt")
      public void testJavaJavaNested() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/javaJavaNested.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaKotlinJavaCycle.kt")
      public void testJavaKotlinJavaCycle() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/javaKotlinJavaCycle.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kotlinJavaCycle.kt")
      public void testKotlinJavaCycle() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/kotlinJavaCycle.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kotlinJavaKotlinCycle.kt")
      public void testKotlinJavaKotlinCycle() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/kotlinJavaKotlinCycle.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kotlinJavaNestedCycle.kt")
      public void testKotlinJavaNestedCycle() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/kotlinJavaNestedCycle.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt303.kt")
      public void testKt303() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/kt303.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassInSuperClassParameter.kt")
      public void testNestedClassInSuperClassParameter() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/nestedClassInSuperClassParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("objectInheritsNested.kt")
      public void testObjectInheritsNested() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/objectInheritsNested.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("twoClassesWithNestedCycle.kt")
      public void testTwoClassesWithNestedCycle() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/twoClassesWithNestedCycle.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion")
      @TestDataPath("$PROJECT_ROOT")
      public class WithCompanion {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInWithCompanion() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("everythingInOneScope_after.kt")
        public void testEverythingInOneScope_after() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/everythingInOneScope_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("everythingInOneScope_before.kt")
        public void testEverythingInOneScope_before() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/everythingInOneScope_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noMembers_after.kt")
        public void testNoMembers_after() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/noMembers_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noMembers_before.kt")
        public void testNoMembers_before() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/noMembers_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInterfaces_after.kt")
        public void testOnlyInterfaces_after() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/onlyInterfaces_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInterfaces_before.kt")
        public void testOnlyInterfaces_before() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/onlyInterfaces_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeIsLowEnough.kt")
        public void testTypeIsLowEnough() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/typeIsLowEnough.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withIrrelevantInterface_after.kt")
        public void testWithIrrelevantInterface_after() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/withIrrelevantInterface_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withIrrelevantInterface_before.kt")
        public void testWithIrrelevantInterface_before() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/withIrrelevantInterface_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withMembers_after.kt")
        public void testWithMembers_after() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/withMembers_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withMembers_before.kt")
        public void testWithMembers_before() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/withMembers_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withoutTypeReference.kt")
        public void testWithoutTypeReference() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/withoutTypeReference.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class DataClasses {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDataClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/dataClasses"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("companionDataObject.kt")
      public void testCompanionDataObject() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/companionDataObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("componentNamedComponent1.kt")
      public void testComponentNamedComponent1() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/componentNamedComponent1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("conflictingCopyOverloads.kt")
      public void testConflictingCopyOverloads() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/conflictingCopyOverloads.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("conflictingOverloads.kt")
      public void testConflictingOverloads() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/conflictingOverloads.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("copyInDataObject.kt")
      public void testCopyInDataObject() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/copyInDataObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("copyOfPrivateClass.kt")
      public void testCopyOfPrivateClass() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/copyOfPrivateClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataClassExplicitlyOverridingCopyNoDefaults.kt")
      public void testDataClassExplicitlyOverridingCopyNoDefaults() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassExplicitlyOverridingCopyNoDefaults.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataClassExplicitlyOverridingCopyWithDefaults.kt")
      public void testDataClassExplicitlyOverridingCopyWithDefaults() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassExplicitlyOverridingCopyWithDefaults.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataClassNoName.kt")
      public void testDataClassNoName() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassNoName.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataClassNotOverridingCopy.kt")
      public void testDataClassNotOverridingCopy() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassNotOverridingCopy.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataClassOverridingCopy_lv12.kt")
      public void testDataClassOverridingCopy_lv12() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassOverridingCopy_lv12.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataClassOverridingCopy_lv13.kt")
      public void testDataClassOverridingCopy_lv13() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassOverridingCopy_lv13.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataClassVarargParam.kt")
      public void testDataClassVarargParam() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassVarargParam.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataInheritance.kt")
      public void testDataInheritance() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/dataInheritance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataObjectDisabled.kt")
      public void testDataObjectDisabled() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/dataObjectDisabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataObjectEnabled.kt")
      public void testDataObjectEnabled() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/dataObjectEnabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataObjectLiteral.kt")
      public void testDataObjectLiteral() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/dataObjectLiteral.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("emptyConstructor.kt")
      public void testEmptyConstructor() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/emptyConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("errorTypesInDataClasses.kt")
      public void testErrorTypesInDataClasses() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/errorTypesInDataClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extensionComponentsOnNullable.kt")
      public void testExtensionComponentsOnNullable() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/extensionComponentsOnNullable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("finalMembersInBaseClass.kt")
      public void testFinalMembersInBaseClass() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/finalMembersInBaseClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implementMethodsFromInterface.kt")
      public void testImplementMethodsFromInterface() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/implementMethodsFromInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implementTraitWhichHasComponent1.kt")
      public void testImplementTraitWhichHasComponent1() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/implementTraitWhichHasComponent1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implementTraitWhichHasFinalComponent1.kt")
      public void testImplementTraitWhichHasFinalComponent1() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/implementTraitWhichHasFinalComponent1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerDataClass.kt")
      public void testInnerDataClass() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/innerDataClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerOuterDataClass.kt")
      public void testInnerOuterDataClass() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/innerOuterDataClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multiDeclaration.kt")
      public void testMultiDeclaration() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/multiDeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multiDeclarationFor.kt")
      public void testMultiDeclarationFor() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/multiDeclarationFor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noConstructor.kt")
      public void testNoConstructor() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/noConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notADataClass.kt")
      public void testNotADataClass() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/notADataClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("oneValParam.kt")
      public void testOneValParam() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/oneValParam.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyTypeCollision.kt")
      public void testPropertyTypeCollision() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/propertyTypeCollision.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyTypeCollisionAndAnnotations.kt")
      public void testPropertyTypeCollisionAndAnnotations() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/propertyTypeCollisionAndAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("repeatedProperties.kt")
      public void testRepeatedProperties() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/repeatedProperties.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sealedDataClass.kt")
      public void testSealedDataClass() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/sealedDataClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("strange.kt")
      public void testStrange() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/strange.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("twoValParams.kt")
      public void testTwoValParams() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/twoValParams.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("twoVarParams.kt")
      public void testTwoVarParams() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/twoVarParams.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataFlow")
    @TestDataPath("$PROJECT_ROOT")
    public class DataFlow {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDataFlow() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlow"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CalleeExpression.kt")
      public void testCalleeExpression() {
        runTest("compiler/testData/diagnostics/tests/dataFlow/CalleeExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("desugaredAssignment.kt")
      public void testDesugaredAssignment() {
        runTest("compiler/testData/diagnostics/tests/dataFlow/desugaredAssignment.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("EmptyIf.kt")
      public void testEmptyIf() {
        runTest("compiler/testData/diagnostics/tests/dataFlow/EmptyIf.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsExpression.kt")
      public void testIsExpression() {
        runTest("compiler/testData/diagnostics/tests/dataFlow/IsExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastWithLambdaAndCallableReference.kt")
      public void testSmartCastWithLambdaAndCallableReference() {
        runTest("compiler/testData/diagnostics/tests/dataFlow/smartCastWithLambdaAndCallableReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WhenSubject.kt")
      public void testWhenSubject() {
        runTest("compiler/testData/diagnostics/tests/dataFlow/WhenSubject.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/dataFlow/assignment")
      @TestDataPath("$PROJECT_ROOT")
      public class Assignment {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInAssignment() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlow/assignment"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("assignToNewVal.kt")
        public void testAssignToNewVal() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/assignment/assignToNewVal.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt6118.kt")
        public void testKt6118() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/assignment/kt6118.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("uninitializedValIsCheck.kt")
        public void testUninitializedValIsCheck() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/assignment/uninitializedValIsCheck.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("uninitializedValNullability.kt")
        public void testUninitializedValNullability() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/assignment/uninitializedValNullability.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("when.kt")
        public void testWhen() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/assignment/when.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/dataFlow/local")
      @TestDataPath("$PROJECT_ROOT")
      public class Local {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInLocal() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlow/local"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2835.kt")
        public void testKt2835() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/kt2835.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalClassBase.kt")
        public void testLocalClassBase() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassBase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalClassDefaultParameters.kt")
        public void testLocalClassDefaultParameters() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDefaultParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalClassDelegatedProperties.kt")
        public void testLocalClassDelegatedProperties() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDelegatedProperties.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalClassDelegation.kt")
        public void testLocalClassDelegation() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDelegation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalClassFunctions.kt")
        public void testLocalClassFunctions() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassFunctions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalClassInMemberOfLocalClass.kt")
        public void testLocalClassInMemberOfLocalClass() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassInMemberOfLocalClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalClassInitializer.kt")
        public void testLocalClassInitializer() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassInitializer.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalClassProperty.kt")
        public void testLocalClassProperty() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalObject.kt")
        public void testLocalObject() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalObjectDelegation.kt")
        public void testLocalObjectDelegation() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalObjectDelegation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NestedLocalClass.kt")
        public void testNestedLocalClass() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/NestedLocalClass.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal")
    @TestDataPath("$PROJECT_ROOT")
    public class DataFlowInfoTraversal {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDataFlowInfoTraversal() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlowInfoTraversal"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AndOr.kt")
      public void testAndOr() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AndOr.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ArrayAccess.kt")
      public void testArrayAccess() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayAccess.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ArrayExpression.kt")
      public void testArrayExpression() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ArrayGetSetConvention.kt")
      public void testArrayGetSetConvention() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayGetSetConvention.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ArrayIndices.kt")
      public void testArrayIndices() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayIndices.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Assignment.kt")
      public void testAssignment() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Assignment.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AssignmentInInitializer.kt")
      public void testAssignmentInInitializer() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentInInitializer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AssignmentOperation.kt")
      public void testAssignmentOperation() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentOperation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AssignmentToArrayElement.kt")
      public void testAssignmentToArrayElement() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentToArrayElement.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BinaryExpression.kt")
      public void testBinaryExpression() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BinaryExpressionBooleanOperations.kt")
      public void testBinaryExpressionBooleanOperations() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionBooleanOperations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BinaryExpressionCompareToConvention.kt")
      public void testBinaryExpressionCompareToConvention() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionCompareToConvention.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BinaryExpressionContainsConvention.kt")
      public void testBinaryExpressionContainsConvention() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionContainsConvention.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BinaryExpressionElvis.kt")
      public void testBinaryExpressionElvis() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionElvis.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BinaryExpressionEqualsConvention.kt")
      public void testBinaryExpressionEqualsConvention() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionEqualsConvention.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BinaryExpressionIdentifier.kt")
      public void testBinaryExpressionIdentifier() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionIdentifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BinaryExpressionPlusConvention.kt")
      public void testBinaryExpressionPlusConvention() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionPlusConvention.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Condition.kt")
      public void testCondition() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Condition.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ContinueOuterLoop.kt")
      public void testContinueOuterLoop() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ContinueOuterLoop.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DeepIf.kt")
      public void testDeepIf() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DeepIf.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DoWhile.kt")
      public void testDoWhile() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DoWhile.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DoWhileCondition.kt")
      public void testDoWhileCondition() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DoWhileCondition.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Elvis.kt")
      public void testElvis() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Elvis.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExclExcl.kt")
      public void testExclExcl() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ExclExcl.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("For.kt")
      public void testFor() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/For.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ForLoopRange.kt")
      public void testForLoopRange() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ForLoopRange.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FunctionLiteral.kt")
      public void testFunctionLiteral() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/FunctionLiteral.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IfStatement.kt")
      public void testIfStatement() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfStatement.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IfThenElse.kt")
      public void testIfThenElse() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfThenElse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IfThenElseBothInvalid.kt")
      public void testIfThenElseBothInvalid() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfThenElseBothInvalid.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsExpression.kt")
      public void testIsExpression() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IsExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4332WhenBranches.kt")
      public void testKt4332WhenBranches() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/kt4332WhenBranches.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt5155WhenBranches.kt")
      public void testKt5155WhenBranches() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/kt5155WhenBranches.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt5182WhenBranches.kt")
      public void testKt5182WhenBranches() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/kt5182WhenBranches.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ManyIfs.kt")
      public void testManyIfs() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ManyIfs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MultiDeclaration.kt")
      public void testMultiDeclaration() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/MultiDeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ObjectExpression.kt")
      public void testObjectExpression() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ObjectExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("QualifiedExpression.kt")
      public void testQualifiedExpression() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/QualifiedExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Return.kt")
      public void testReturn() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Return.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("StringTemplate.kt")
      public void testStringTemplate() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/StringTemplate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ThisSuper.kt")
      public void testThisSuper() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ThisSuper.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Throw.kt")
      public void testThrow() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Throw.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TryCatch.kt")
      public void testTryCatch() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/TryCatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TryFinally.kt")
      public void testTryFinally() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/TryFinally.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("UnaryExpression.kt")
      public void testUnaryExpression() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/UnaryExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("When.kt")
      public void testWhen() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/When.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WhenEntryAs.kt")
      public void testWhenEntryAs() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenEntryAs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WhenEntryIs.kt")
      public void testWhenEntryIs() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenEntryIs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WhenIn.kt")
      public void testWhenIn() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenIn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WhenSubject.kt")
      public void testWhenSubject() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenSubject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("While.kt")
      public void testWhile() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/While.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WhileCondition.kt")
      public void testWhileCondition() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhileCondition.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts")
      @TestDataPath("$PROJECT_ROOT")
      public class Smartcasts {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSmartcasts() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SmartcastAmbiguitites.kt")
        public void testSmartcastAmbiguitites() {
          runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts/SmartcastAmbiguitites.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SmartcastsForStableIdentifiers.kt")
        public void testSmartcastsForStableIdentifiers() {
          runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts/SmartcastsForStableIdentifiers.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataObjects")
    @TestDataPath("$PROJECT_ROOT")
    public class DataObjects {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDataObjects() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/dataObjects"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overrideEqualsAndHashCode.kt")
      public void testOverrideEqualsAndHashCode() {
        runTest("compiler/testData/diagnostics/tests/dataObjects/overrideEqualsAndHashCode.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks")
    @TestDataPath("$PROJECT_ROOT")
    public class DeclarationChecks {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDeclarationChecks() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/declarationChecks"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ambiguousObjectExpressionType.kt")
      public void testAmbiguousObjectExpressionType() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/ambiguousObjectExpressionType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("anonymousFunAsLastExpressionInBlock.kt")
      public void testAnonymousFunAsLastExpressionInBlock() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/anonymousFunAsLastExpressionInBlock.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("anonymousFunUnusedLastExpressionInBlock.kt")
      public void testAnonymousFunUnusedLastExpressionInBlock() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/anonymousFunUnusedLastExpressionInBlock.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ComponentFunctionReturnTypeMismatch.kt")
      public void testComponentFunctionReturnTypeMismatch() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/ComponentFunctionReturnTypeMismatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConflictingAndRedundantProjections.kt")
      public void testConflictingAndRedundantProjections() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/ConflictingAndRedundantProjections.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DataFlowInMultiDeclInFor.kt")
      public void testDataFlowInMultiDeclInFor() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/DataFlowInMultiDeclInFor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DataFlowInfoInMultiDecl.kt")
      public void testDataFlowInfoInMultiDecl() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/DataFlowInfoInMultiDecl.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FunctionWithMissingNames.kt")
      public void testFunctionWithMissingNames() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/FunctionWithMissingNames.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("illegalModifiersOnClass.kt")
      public void testIllegalModifiersOnClass() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/illegalModifiersOnClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kClassInSignature.kt")
      public void testKClassInSignature() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/kClassInSignature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1141.kt")
      public void testKt1141() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/kt1141.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1193.kt")
      public void testKt1193() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/kt1193.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2096.kt")
      public void testKt2096() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/kt2096.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2142.kt")
      public void testKt2142() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/kt2142.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2397.kt")
      public void testKt2397() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/kt2397.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2631_MultipleDeclaration.kt")
      public void testKt2631_MultipleDeclaration() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/kt2631_MultipleDeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2643MultiDeclInControlFlow.kt")
      public void testKt2643MultiDeclInControlFlow() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/kt2643MultiDeclInControlFlow.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt47245.kt")
      public void testKt47245() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/kt47245.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt559.kt")
      public void testKt559() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/kt559.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localDeclarationModifiers.kt")
      public void testLocalDeclarationModifiers() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/localDeclarationModifiers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localFunctionNoInheritVisibility.kt")
      public void testLocalFunctionNoInheritVisibility() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/localFunctionNoInheritVisibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localObjectInInnerClass.kt")
      public void testLocalObjectInInnerClass() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/localObjectInInnerClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("LocalVariableWithNoTypeInformation.kt")
      public void testLocalVariableWithNoTypeInformation() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/LocalVariableWithNoTypeInformation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localVariablesWithTypeParameters_1_3.kt")
      public void testLocalVariablesWithTypeParameters_1_3() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/localVariablesWithTypeParameters_1_3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localVariablesWithTypeParameters_1_4.kt")
      public void testLocalVariablesWithTypeParameters_1_4() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/localVariablesWithTypeParameters_1_4.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("mappedFunctionNotImplemented.kt")
      public void testMappedFunctionNotImplemented() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/mappedFunctionNotImplemented.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("mulitpleVarargParameters.kt")
      public void testMulitpleVarargParameters() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/mulitpleVarargParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MultiDeclarationErrors.kt")
      public void testMultiDeclarationErrors() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/MultiDeclarationErrors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nameWithDangerousCharacters.kt")
      public void testNameWithDangerousCharacters() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/nameWithDangerousCharacters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("namedFunAsLastExpressionInBlock.kt")
      public void testNamedFunAsLastExpressionInBlock() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/namedFunAsLastExpressionInBlock.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("packageDeclarationModifiers.kt")
      public void testPackageDeclarationModifiers() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/packageDeclarationModifiers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyInPackageHasNoInheritVisibility.kt")
      public void testPropertyInPackageHasNoInheritVisibility() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/propertyInPackageHasNoInheritVisibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedeclarationsInMultiDecl.kt")
      public void testRedeclarationsInMultiDecl() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/RedeclarationsInMultiDecl.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ScalaLikeNamedFun.kt")
      public void testScalaLikeNamedFun() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/ScalaLikeNamedFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sealedOnMembers.kt")
      public void testSealedOnMembers() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/sealedOnMembers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unambiguousObjectExpressionType.kt")
      public void testUnambiguousObjectExpressionType() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/unambiguousObjectExpressionType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valVarFunctionParameter.kt")
      public void testValVarFunctionParameter() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/valVarFunctionParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("VarianceOnFunctionAndPropertyTypeParameters.kt")
      public void testVarianceOnFunctionAndPropertyTypeParameters() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/VarianceOnFunctionAndPropertyTypeParameters.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations")
      @TestDataPath("$PROJECT_ROOT")
      public class DestructuringDeclarations {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDestructuringDeclarations() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("destructuringDeclarationAssignedUnresolved.kt")
        public void testDestructuringDeclarationAssignedUnresolved() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/destructuringDeclarationAssignedUnresolved.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("destructuringDeclarationMissingInitializer.kt")
        public void testDestructuringDeclarationMissingInitializer() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/destructuringDeclarationMissingInitializer.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("DoubleDeclForLoop.kt")
        public void testDoubleDeclForLoop() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/DoubleDeclForLoop.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FolLoopTypeComponentTypeMismatch.kt")
        public void testFolLoopTypeComponentTypeMismatch() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/FolLoopTypeComponentTypeMismatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ForLoopComponentFunctionAmbiguity.kt")
        public void testForLoopComponentFunctionAmbiguity() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForLoopComponentFunctionAmbiguity.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ForLoopComponentFunctionMissing.kt")
        public void testForLoopComponentFunctionMissing() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForLoopComponentFunctionMissing.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ForLoopMissingLoopParameter.kt")
        public void testForLoopMissingLoopParameter() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForLoopMissingLoopParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ForLoopWithExtensions.kt")
        public void testForLoopWithExtensions() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForLoopWithExtensions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ForWithExplicitTypes.kt")
        public void testForWithExplicitTypes() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForWithExplicitTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2829.kt")
        public void testKt2829() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/kt2829.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lastDestructuringDeclarationInBlock.kt")
        public void testLastDestructuringDeclarationInBlock() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/lastDestructuringDeclarationInBlock.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("missingComponentN.kt")
        public void testMissingComponentN() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/missingComponentN.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("RedeclarationInForLoop.kt")
        public void testRedeclarationInForLoop() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/RedeclarationInForLoop.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SingleDeclForLoop.kt")
        public void testSingleDeclForLoop() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/SingleDeclForLoop.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("underscore.kt")
        public void testUnderscore() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/underscore.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction")
      @TestDataPath("$PROJECT_ROOT")
      public class FiniteBoundRestriction {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInFiniteBoundRestriction() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("CasesWithOneTypeParameter.kt")
        public void testCasesWithOneTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction/CasesWithOneTypeParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("CasesWithTwoTypeParameters.kt")
        public void testCasesWithTwoTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction/CasesWithTwoTypeParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("JavaSuperType.kt")
        public void testJavaSuperType() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction/JavaSuperType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction")
      @TestDataPath("$PROJECT_ROOT")
      public class NonExpansiveInheritanceRestriction {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNonExpansiveInheritanceRestriction() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Comparable.kt")
        public void testComparable() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction/Comparable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("JavaWithKotlin.kt")
        public void testJavaWithKotlin() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction/JavaWithKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("JavaWithKotlin2.kt")
        public void testJavaWithKotlin2() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction/JavaWithKotlin2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("PureKotlin.kt")
        public void testPureKotlin() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction/PureKotlin.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/defaultArguments")
    @TestDataPath("$PROJECT_ROOT")
    public class DefaultArguments {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDefaultArguments() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/defaultArguments"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt5232.kt")
      public void testKt5232() {
        runTest("compiler/testData/diagnostics/tests/defaultArguments/kt5232.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superCall.kt")
      public void testSuperCall() {
        runTest("compiler/testData/diagnostics/tests/defaultArguments/superCall.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty")
    @TestDataPath("$PROJECT_ROOT")
    public class DelegatedProperty {
      @RepeatedTest(value = 5)
      @TestMetadata("absentErrorAboutInitializer.kt")
      public void testAbsentErrorAboutInitializer() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/absentErrorAboutInitializer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("absentErrorAboutType.kt")
      public void testAbsentErrorAboutType() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/absentErrorAboutType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("abstractDelegatedProperty.kt")
      public void testAbstractDelegatedProperty() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/abstractDelegatedProperty.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDelegatedProperty() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/delegatedProperty"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("backingField.kt")
      public void testBackingField() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/backingField.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("defaultGetter.kt")
      public void testDefaultGetter() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/defaultGetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("defaultSetter.kt")
      public void testDefaultSetter() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/defaultSetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegateWithAnnotationOnAccessorWithExplicitType.kt")
      public void testDelegateWithAnnotationOnAccessorWithExplicitType() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/delegateWithAnnotationOnAccessorWithExplicitType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegateWithAnnotationOnAccessorWithImplicitType.kt")
      public void testDelegateWithAnnotationOnAccessorWithImplicitType() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/delegateWithAnnotationOnAccessorWithImplicitType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegatedPropertyOverridedInTrait.kt")
      public void testDelegatedPropertyOverridedInTrait() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/delegatedPropertyOverridedInTrait.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegatedPropertyOverridedInTraitTypeMismatch.kt")
      public void testDelegatedPropertyOverridedInTraitTypeMismatch() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/delegatedPropertyOverridedInTraitTypeMismatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("disallowImplInTypeParameter.kt")
      public void testDisallowImplInTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/disallowImplInTypeParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericGetter.kt")
      public void testGenericGetter() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/genericGetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("getterWithSubtype.kt")
      public void testGetterWithSubtype() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/getterWithSubtype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inTrait.kt")
      public void testInTrait() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/inTrait.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incompleteTypeInference.kt")
      public void testIncompleteTypeInference() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/incompleteTypeInference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4640.kt")
      public void testKt4640() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/kt4640.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt48546.kt")
      public void testKt48546() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/kt48546.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt48546Strict.kt")
      public void testKt48546Strict() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/kt48546Strict.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localVariable.kt")
      public void testLocalVariable() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/localVariable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localWithSmartCast.kt")
      public void testLocalWithSmartCast() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/localWithSmartCast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("missedGetter.kt")
      public void testMissedGetter() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/missedGetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("missedSetter.kt")
      public void testMissedSetter() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/missedSetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noInferenceFromGetValueThroughSetValue.kt")
      public void testNoInferenceFromGetValueThroughSetValue() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/noInferenceFromGetValueThroughSetValue.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noInferenceFromWrappedDelegate.kt")
      public void testNoInferenceFromWrappedDelegate() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/noInferenceFromWrappedDelegate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noPreliminarySetterInferenceForImplicitlyTypedVar.kt")
      public void testNoPreliminarySetterInferenceForImplicitlyTypedVar() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/noPreliminarySetterInferenceForImplicitlyTypedVar.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonDefaultAccessors.kt")
      public void testNonDefaultAccessors() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/nonDefaultAccessors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyDefferedType.kt")
      public void testPropertyDefferedType() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/propertyDefferedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursiveType.kt")
      public void testRecursiveType() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/recursiveType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("redundantGetter.kt")
      public void testRedundantGetter() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/redundantGetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("redundantSetter.kt")
      public void testRedundantSetter() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/redundantSetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("setterThisTypeMismatch.kt")
      public void testSetterThisTypeMismatch() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/setterThisTypeMismatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("setterWithSupertype.kt")
      public void testSetterWithSupertype() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/setterWithSupertype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("severalReceivers.kt")
      public void testSeveralReceivers() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/severalReceivers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("thisInDelegate.kt")
      public void testThisInDelegate() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/thisInDelegate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("thisOfAnyType.kt")
      public void testThisOfAnyType() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/thisOfAnyType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("thisOfNothingNullableType.kt")
      public void testThisOfNothingNullableType() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/thisOfNothingNullableType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("thisOfNothingType.kt")
      public void testThisOfNothingType() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/thisOfNothingType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("twoGetMethods.kt")
      public void testTwoGetMethods() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/twoGetMethods.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeMismatchForGetReturnType.kt")
      public void testTypeMismatchForGetReturnType() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForGetReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeMismatchForGetWithGeneric.kt")
      public void testTypeMismatchForGetWithGeneric() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForGetWithGeneric.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeMismatchForSetParameter.kt")
      public void testTypeMismatchForSetParameter() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForSetParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeMismatchForThisGetParameter.kt")
      public void testTypeMismatchForThisGetParameter() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForThisGetParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useTypeParameterOfExtensionProperty.kt")
      public void testUseTypeParameterOfExtensionProperty() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/useTypeParameterOfExtensionProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useTypeParameterOfExtensionProperty2.kt")
      public void testUseTypeParameterOfExtensionProperty2() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/useTypeParameterOfExtensionProperty2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useTypeParameterOfExtensionProperty3.kt")
      public void testUseTypeParameterOfExtensionProperty3() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/useTypeParameterOfExtensionProperty3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useTypeParameterOfExtensionProperty_Disabled.kt")
      public void testUseTypeParameterOfExtensionProperty_Disabled() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/useTypeParameterOfExtensionProperty_Disabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("withInvokes.kt")
      public void testWithInvokes() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/withInvokes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongCountOfParametersInGet.kt")
      public void testWrongCountOfParametersInGet() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/wrongCountOfParametersInGet.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongCountOfParametersInSet.kt")
      public void testWrongCountOfParametersInSet() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/wrongCountOfParametersInSet.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongSetterReturnType.kt")
      public void testWrongSetterReturnType() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/wrongSetterReturnType.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference")
      @TestDataPath("$PROJECT_ROOT")
      public class Inference {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInference() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/delegatedProperty/inference"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotatedAccessor.kt")
        public void testAnnotatedAccessor() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/annotatedAccessor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferenceArgumentInDelegatedExpression.kt")
        public void testCallableReferenceArgumentInDelegatedExpression() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/callableReferenceArgumentInDelegatedExpression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("decoratedLambda.kt")
        public void testDecoratedLambda() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/decoratedLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("delegateExpressionAsLambda.kt")
        public void testDelegateExpressionAsLambda() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/delegateExpressionAsLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("delegatedExpressionWithLabeledReturnInsideLambda.kt")
        public void testDelegatedExpressionWithLabeledReturnInsideLambda() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/delegatedExpressionWithLabeledReturnInsideLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentDelegatedExpressions.kt")
        public void testDifferentDelegatedExpressions() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/differentDelegatedExpressions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("elvisInDelegated.kt")
        public void testElvisInDelegated() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/elvisInDelegated.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionGet.kt")
        public void testExtensionGet() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/extensionGet.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionProperty.kt")
        public void testExtensionProperty() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/extensionProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fullyCompleteDelegateWhenPossible.kt")
        public void testFullyCompleteDelegateWhenPossible() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/fullyCompleteDelegateWhenPossible.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericMethodInGenericClass.kt")
        public void testGenericMethodInGenericClass() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/genericMethodInGenericClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericMethods.kt")
        public void testGenericMethods() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/genericMethods.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifInDelegated.kt")
        public void testIfInDelegated() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/ifInDelegated.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt41952.kt")
        public void testKt41952() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/kt41952.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("labeledDelegatedExpression.kt")
        public void testLabeledDelegatedExpression() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/labeledDelegatedExpression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaDelegate.kt")
        public void testLambdaDelegate() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/lambdaDelegate.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaWithMultipleReturns.kt")
        public void testLambdaWithMultipleReturns() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/lambdaWithMultipleReturns.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("manyIncompleteCandidates.kt")
        public void testManyIncompleteCandidates() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/manyIncompleteCandidates.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedPartiallyResolvedCalls.kt")
        public void testNestedPartiallyResolvedCalls() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/nestedPartiallyResolvedCalls.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedPartiallyResolvedCallsSimple.kt")
        public void testNestedPartiallyResolvedCallsSimple() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/nestedPartiallyResolvedCallsSimple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noErrorsForImplicitConstraints.kt")
        public void testNoErrorsForImplicitConstraints() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/noErrorsForImplicitConstraints.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noExpectedTypeForSupertypeConstraint.kt")
        public void testNoExpectedTypeForSupertypeConstraint() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/noExpectedTypeForSupertypeConstraint.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullAssertionInLocalDelegated.kt")
        public void testNotNullAssertionInLocalDelegated() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/notNullAssertionInLocalDelegated.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nothingTypeThisRef.kt")
        public void testNothingTypeThisRef() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/nothingTypeThisRef.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("provideDelegateFixationResultContainsOtherInnerVariable.kt")
        public void testProvideDelegateFixationResultContainsOtherInnerVariable() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/provideDelegateFixationResultContainsOtherInnerVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("provideDelegateReturningOuterTypeVariable.kt")
        public void testProvideDelegateReturningOuterTypeVariable() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/provideDelegateReturningOuterTypeVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("provideDelegateUsesOuterCS.kt")
        public void testProvideDelegateUsesOuterCS() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/provideDelegateUsesOuterCS.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("resultTypeOfLambdaForConventionMethods.kt")
        public void testResultTypeOfLambdaForConventionMethods() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/resultTypeOfLambdaForConventionMethods.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("successfulProvideDelegateLeadsToRedGetValue.kt")
        public void testSuccessfulProvideDelegateLeadsToRedGetValue() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/successfulProvideDelegateLeadsToRedGetValue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("tryInGenerated.kt")
        public void testTryInGenerated() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/tryInGenerated.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeOfLazyDelegatedPropertyWithObject.kt")
        public void testTypeOfLazyDelegatedPropertyWithObject() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/typeOfLazyDelegatedPropertyWithObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeVariablesFlow.kt")
        public void testTypeVariablesFlow() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/typeVariablesFlow.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeVariablesFlowComplex.kt")
        public void testTypeVariablesFlowComplex() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/typeVariablesFlowComplex.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useCompleterWithoutExpectedType.kt")
        public void testUseCompleterWithoutExpectedType() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/useCompleterWithoutExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useExpectedType.kt")
        public void testUseExpectedType() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/useExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useExpectedTypeForVal.kt")
        public void testUseExpectedTypeForVal() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/useExpectedTypeForVal.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate")
      @TestDataPath("$PROJECT_ROOT")
      public class ProvideDelegate {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInProvideDelegate() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("commonCaseForInference.kt")
        public void testCommonCaseForInference() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/commonCaseForInference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericProvideDelegate.kt")
        public void testGenericProvideDelegate() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/genericProvideDelegate.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hostAndReceiver1.kt")
        public void testHostAndReceiver1() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/hostAndReceiver1.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hostAndReceiver2.kt")
        public void testHostAndReceiver2() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/hostAndReceiver2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hostAndReceiver3.kt")
        public void testHostAndReceiver3() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/hostAndReceiver3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferenceFromReceiver1.kt")
        public void testInferenceFromReceiver1() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/inferenceFromReceiver1.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferenceFromReceiver2.kt")
        public void testInferenceFromReceiver2() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/inferenceFromReceiver2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt38714.kt")
        public void testKt38714() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/kt38714.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localDelegatedProperty.kt")
        public void testLocalDelegatedProperty() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/localDelegatedProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noOperatorModifierOnProvideDelegate.kt")
        public void testNoOperatorModifierOnProvideDelegate() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/noOperatorModifierOnProvideDelegate.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullAssertionInLocalDelegated.kt")
        public void testNotNullAssertionInLocalDelegated() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/notNullAssertionInLocalDelegated.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onObject.kt")
        public void testOnObject() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/onObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloadResolutionForSeveralProvideDelegates.kt")
        public void testOverloadResolutionForSeveralProvideDelegates() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/overloadResolutionForSeveralProvideDelegates.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("provideDelegateOnFunctionalTypeWithThis.kt")
        public void testProvideDelegateOnFunctionalTypeWithThis() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/provideDelegateOnFunctionalTypeWithThis.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("provideDelegateOperatorDeclaration.kt")
        public void testProvideDelegateOperatorDeclaration() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/provideDelegateOperatorDeclaration.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("provideDelegateResolutionWithStubTypes.kt")
        public void testProvideDelegateResolutionWithStubTypes() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/provideDelegateResolutionWithStubTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("provideDelegateResolutionWithStubTypesAndExtensionGetValue.kt")
        public void testProvideDelegateResolutionWithStubTypesAndExtensionGetValue() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/provideDelegateResolutionWithStubTypesAndExtensionGetValue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("setValue.kt")
        public void testSetValue() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/setValue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleProvideDelegate.kt")
        public void testSimpleProvideDelegate() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/simpleProvideDelegate.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/delegation")
    @TestDataPath("$PROJECT_ROOT")
    public class Delegation {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDelegation() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/delegation"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DelegationAndOverriding.kt")
      public void testDelegationAndOverriding() {
        runTest("compiler/testData/diagnostics/tests/delegation/DelegationAndOverriding.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DelegationExpectedType.kt")
      public void testDelegationExpectedType() {
        runTest("compiler/testData/diagnostics/tests/delegation/DelegationExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DelegationNotTotrait.kt")
      public void testDelegationNotTotrait() {
        runTest("compiler/testData/diagnostics/tests/delegation/DelegationNotTotrait.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DelegationToJavaIface.kt")
      public void testDelegationToJavaIface() {
        runTest("compiler/testData/diagnostics/tests/delegation/DelegationToJavaIface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Delegation_ClashingFunctions.kt")
      public void testDelegation_ClashingFunctions() {
        runTest("compiler/testData/diagnostics/tests/delegation/Delegation_ClashingFunctions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Delegation_Hierarchy.kt")
      public void testDelegation_Hierarchy() {
        runTest("compiler/testData/diagnostics/tests/delegation/Delegation_Hierarchy.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Delegation_MultipleDelegates.kt")
      public void testDelegation_MultipleDelegates() {
        runTest("compiler/testData/diagnostics/tests/delegation/Delegation_MultipleDelegates.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Delegation_ScopeInitializationOrder.kt")
      public void testDelegation_ScopeInitializationOrder() {
        runTest("compiler/testData/diagnostics/tests/delegation/Delegation_ScopeInitializationOrder.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt40510.kt")
      public void testKt40510() {
        runTest("compiler/testData/diagnostics/tests/delegation/kt40510.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt44843.kt")
      public void testKt44843() {
        runTest("compiler/testData/diagnostics/tests/delegation/kt44843.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt48546.kt")
      public void testKt48546() {
        runTest("compiler/testData/diagnostics/tests/delegation/kt48546.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt49477.kt")
      public void testKt49477() {
        runTest("compiler/testData/diagnostics/tests/delegation/kt49477.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt49477Error.kt")
      public void testKt49477Error() {
        runTest("compiler/testData/diagnostics/tests/delegation/kt49477Error.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt8154.kt")
      public void testKt8154() {
        runTest("compiler/testData/diagnostics/tests/delegation/kt8154.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegation/clashes")
      @TestDataPath("$PROJECT_ROOT")
      public class Clashes {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInClashes() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/delegation/clashes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("delegateFieldWithAnnotationClash.kt")
        public void testDelegateFieldWithAnnotationClash() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/delegateFieldWithAnnotationClash.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("finalMemberOverridden.kt")
        public void testFinalMemberOverridden() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/finalMemberOverridden.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedNameClash.kt")
        public void testNestedNameClash() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/nestedNameClash.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedNameClash2.kt")
        public void testNestedNameClash2() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/nestedNameClash2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedNameClash3.kt")
        public void testNestedNameClash3() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/nestedNameClash3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedNameClashAndAnnotations.kt")
        public void testNestedNameClashAndAnnotations() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/nestedNameClashAndAnnotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyTypeMismatch.kt")
        public void testPropertyTypeMismatch() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/propertyTypeMismatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("returnTypeMismatch.kt")
        public void testReturnTypeMismatch() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/returnTypeMismatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varOverriddenByVal.kt")
        public void testVarOverriddenByVal() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/varOverriddenByVal.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegation/covariantOverrides")
      @TestDataPath("$PROJECT_ROOT")
      public class CovariantOverrides {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCovariantOverrides() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/delegation/covariantOverrides"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fromClass.kt")
        public void testFromClass() {
          runTest("compiler/testData/diagnostics/tests/delegation/covariantOverrides/fromClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("irrelevant.kt")
        public void testIrrelevant() {
          runTest("compiler/testData/diagnostics/tests/delegation/covariantOverrides/irrelevant.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt13952.kt")
        public void testKt13952() {
          runTest("compiler/testData/diagnostics/tests/delegation/covariantOverrides/kt13952.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/delegation/covariantOverrides/simple.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride")
      @TestDataPath("$PROJECT_ROOT")
      public class MemberHidesSupertypeOverride {
        @RepeatedTest(value = 5)
        @TestMetadata("abstractOverride.kt")
        public void testAbstractOverride() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/abstractOverride.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInMemberHidesSupertypeOverride() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("delegationToSubType.kt")
        public void testDelegationToSubType() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/delegationToSubType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("delegationToSubTypeProperty.kt")
        public void testDelegationToSubTypeProperty() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/delegationToSubTypeProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("delegationToSubTypeWithOverride.kt")
        public void testDelegationToSubTypeWithOverride() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/delegationToSubTypeWithOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("delegationToSubTypeWithOverrideProperty.kt")
        public void testDelegationToSubTypeWithOverrideProperty() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/delegationToSubTypeWithOverrideProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("diamond.kt")
        public void testDiamond() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/diamond.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("explicitOverride.kt")
        public void testExplicitOverride() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/explicitOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fakeOverrideInTheMiddle.kt")
        public void testFakeOverrideInTheMiddle() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/fakeOverrideInTheMiddle.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("generic.kt")
        public void testGeneric() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/generic.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sameDelegationInHierarchy.kt")
        public void testSameDelegationInHierarchy() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/sameDelegationInHierarchy.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sameDelegationInHierarchy2.kt")
        public void testSameDelegationInHierarchy2() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/sameDelegationInHierarchy2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("severalDelegates.kt")
        public void testSeveralDelegates() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/severalDelegates.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/simple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleNoOverride.kt")
        public void testSimpleNoOverride() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/simpleNoOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleProp.kt")
        public void testSimpleProp() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/simpleProp.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/deparenthesize")
    @TestDataPath("$PROJECT_ROOT")
    public class Deparenthesize {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDeparenthesize() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/deparenthesize"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotatedSafeCall.kt")
      public void testAnnotatedSafeCall() {
        runTest("compiler/testData/diagnostics/tests/deparenthesize/annotatedSafeCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("checkDeparenthesizedType.kt")
      public void testCheckDeparenthesizedType() {
        runTest("compiler/testData/diagnostics/tests/deparenthesize/checkDeparenthesizedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("labeledSafeCall.kt")
      public void testLabeledSafeCall() {
        runTest("compiler/testData/diagnostics/tests/deparenthesize/labeledSafeCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multiParenthesizedSafeCall.kt")
      public void testMultiParenthesizedSafeCall() {
        runTest("compiler/testData/diagnostics/tests/deparenthesize/multiParenthesizedSafeCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("parenthesizedSafeCall.kt")
      public void testParenthesizedSafeCall() {
        runTest("compiler/testData/diagnostics/tests/deparenthesize/parenthesizedSafeCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ParenthesizedVariable.kt")
      public void testParenthesizedVariable() {
        runTest("compiler/testData/diagnostics/tests/deparenthesize/ParenthesizedVariable.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/deprecated")
    @TestDataPath("$PROJECT_ROOT")
    public class Deprecated {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDeprecated() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/deprecated"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationUsage.kt")
      public void testAnnotationUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/annotationUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("candidateBehindHiddenPropertyAccessors.kt")
      public void testCandidateBehindHiddenPropertyAccessors() {
        runTest("compiler/testData/diagnostics/tests/deprecated/candidateBehindHiddenPropertyAccessors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classWithCompanionObject.kt")
      public void testClassWithCompanionObject() {
        runTest("compiler/testData/diagnostics/tests/deprecated/classWithCompanionObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("companionObjectUsage.kt")
      public void testCompanionObjectUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/companionObjectUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("componentUsage.kt")
      public void testComponentUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/componentUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedCompanionAndClassReference.kt")
      public void testDeprecatedCompanionAndClassReference() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedCompanionAndClassReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedConstructor.kt")
      public void testDeprecatedConstructor() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedConstructorProperty.kt")
      public void testDeprecatedConstructorProperty() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedConstructorProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedEnumEntry.kt")
      public void testDeprecatedEnumEntry() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedEnumEntry.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedError.kt")
      public void testDeprecatedError() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedErrorBuilder.kt")
      public void testDeprecatedErrorBuilder() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedErrorBuilder.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedField.kt")
      public void testDeprecatedField() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedField.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedHidden.kt")
      public void testDeprecatedHidden() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedHidden.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedHiddenOnCallableReferenceArgument.kt")
      public void testDeprecatedHiddenOnCallableReferenceArgument() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedHiddenOnCallableReferenceArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedInheritance_after.kt")
      public void testDeprecatedInheritance_after() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedInheritance_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedInheritance_before.kt")
      public void testDeprecatedInheritance_before() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedInheritance_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedPropertyInheritance_after.kt")
      public void testDeprecatedPropertyInheritance_after() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedPropertyInheritance_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedPropertyInheritance_before.kt")
      public void testDeprecatedPropertyInheritance_before() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedPropertyInheritance_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("duplicatedOverrideDeprecationOnProperty.kt")
      public void testDuplicatedOverrideDeprecationOnProperty() {
        runTest("compiler/testData/diagnostics/tests/deprecated/duplicatedOverrideDeprecationOnProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionUsage.kt")
      public void testFunctionUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/functionUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericConstructorUsage.kt")
      public void testGenericConstructorUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/genericConstructorUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("hiddenComponentInDestructuringDeclaration.kt")
      public void testHiddenComponentInDestructuringDeclaration() {
        runTest("compiler/testData/diagnostics/tests/deprecated/hiddenComponentInDestructuringDeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("hiddenPropertyAccessors.kt")
      public void testHiddenPropertyAccessors() {
        runTest("compiler/testData/diagnostics/tests/deprecated/hiddenPropertyAccessors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importJavaSamInterface.kt")
      public void testImportJavaSamInterface() {
        runTest("compiler/testData/diagnostics/tests/deprecated/importJavaSamInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("imports.kt")
      public void testImports() {
        runTest("compiler/testData/diagnostics/tests/deprecated/imports.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("iteratorUsage.kt")
      public void testIteratorUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/iteratorUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaDeprecated.kt")
      public void testJavaDeprecated() {
        runTest("compiler/testData/diagnostics/tests/deprecated/javaDeprecated.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaDeprecatedHidden.kt")
      public void testJavaDeprecatedHidden() {
        runTest("compiler/testData/diagnostics/tests/deprecated/javaDeprecatedHidden.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaDeprecatedInheritance.kt")
      public void testJavaDeprecatedInheritance() {
        runTest("compiler/testData/diagnostics/tests/deprecated/javaDeprecatedInheritance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaDeprecatedOnStaticMethod.kt")
      public void testJavaDeprecatedOnStaticMethod() {
        runTest("compiler/testData/diagnostics/tests/deprecated/javaDeprecatedOnStaticMethod.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaDocDeprecated.kt")
      public void testJavaDocDeprecated() {
        runTest("compiler/testData/diagnostics/tests/deprecated/javaDocDeprecated.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedTypesUsage.kt")
      public void testNestedTypesUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/nestedTypesUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("objectUsage.kt")
      public void testObjectUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/objectUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyUsage.kt")
      public void testPropertyUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/propertyUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyUseSiteTargetedAnnotations.kt")
      public void testPropertyUseSiteTargetedAnnotations() {
        runTest("compiler/testData/diagnostics/tests/deprecated/propertyUseSiteTargetedAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyWithInvoke.kt")
      public void testPropertyWithInvoke() {
        runTest("compiler/testData/diagnostics/tests/deprecated/propertyWithInvoke.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("thisUsage.kt")
      public void testThisUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/thisUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeUsage.kt")
      public void testTypeUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/typeUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealiasCompanionObject.kt")
      public void testTypealiasCompanionObject() {
        runTest("compiler/testData/diagnostics/tests/deprecated/typealiasCompanionObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealiasConstructor.kt")
      public void testTypealiasConstructor() {
        runTest("compiler/testData/diagnostics/tests/deprecated/typealiasConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealiasForDeprecatedClass.kt")
      public void testTypealiasForDeprecatedClass() {
        runTest("compiler/testData/diagnostics/tests/deprecated/typealiasForDeprecatedClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealiasUsage.kt")
      public void testTypealiasUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/typealiasUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unusedImport.kt")
      public void testUnusedImport() {
        runTest("compiler/testData/diagnostics/tests/deprecated/unusedImport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("usageOnEnum.kt")
      public void testUsageOnEnum() {
        runTest("compiler/testData/diagnostics/tests/deprecated/usageOnEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("warningOnConstructorErrorOnClass.kt")
      public void testWarningOnConstructorErrorOnClass() {
        runTest("compiler/testData/diagnostics/tests/deprecated/warningOnConstructorErrorOnClass.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin")
      @TestDataPath("$PROJECT_ROOT")
      public class DeprecatedSinceKotlin {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDeprecatedSinceKotlin() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("checkValuesAreParseableAsVersion.kt")
        public void testCheckValuesAreParseableAsVersion() {
          runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/checkValuesAreParseableAsVersion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deprecatedSinceKotlinDeclaration.kt")
        public void testDeprecatedSinceKotlinDeclaration() {
          runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/deprecatedSinceKotlinDeclaration.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deprecatedSinceKotlinHiddenOnReferenceArgument.kt")
        public void testDeprecatedSinceKotlinHiddenOnReferenceArgument() {
          runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/deprecatedSinceKotlinHiddenOnReferenceArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deprecatedSinceKotlinOutsideKotlinPackage.kt")
        public void testDeprecatedSinceKotlinOutsideKotlinPackage() {
          runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/deprecatedSinceKotlinOutsideKotlinPackage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deprecatedSinceKotlinWithoutArguments.kt")
        public void testDeprecatedSinceKotlinWithoutArguments() {
          runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/deprecatedSinceKotlinWithoutArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("error.kt")
        public void testError() {
          runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/error.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hidden.kt")
        public void testHidden() {
          runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/hidden.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("messageFromDeprecatedAnnotation.kt")
        public void testMessageFromDeprecatedAnnotation() {
          runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/messageFromDeprecatedAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("warning.kt")
        public void testWarning() {
          runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/warning.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/destructuring")
    @TestDataPath("$PROJECT_ROOT")
    public class Destructuring {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDestructuring() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/destructuring"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegationInDestructuring.kt")
      public void testDelegationInDestructuring() {
        runTest("compiler/testData/diagnostics/tests/destructuring/delegationInDestructuring.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("destructuringInInitializer.kt")
      public void testDestructuringInInitializer() {
        runTest("compiler/testData/diagnostics/tests/destructuring/destructuringInInitializer.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dynamicTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class DynamicTypes {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDynamicTypes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/dynamicTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegationBy.kt")
      public void testDelegationBy() {
        runTest("compiler/testData/diagnostics/tests/dynamicTypes/delegationBy.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unsupported.kt")
      public void testUnsupported() {
        runTest("compiler/testData/diagnostics/tests/dynamicTypes/unsupported.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("withInvisibleSynthesized.kt")
      public void testWithInvisibleSynthesized() {
        runTest("compiler/testData/diagnostics/tests/dynamicTypes/withInvisibleSynthesized.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/enum")
    @TestDataPath("$PROJECT_ROOT")
    public class Enum {
      @RepeatedTest(value = 5)
      @TestMetadata("AbstractEnum.kt")
      public void testAbstractEnum() {
        runTest("compiler/testData/diagnostics/tests/enum/AbstractEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AbstractInEnum.kt")
      public void testAbstractInEnum() {
        runTest("compiler/testData/diagnostics/tests/enum/AbstractInEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AbstractOverrideInEnum.kt")
      public void testAbstractOverrideInEnum() {
        runTest("compiler/testData/diagnostics/tests/enum/AbstractOverrideInEnum.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInEnum() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/enum"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classObjectInEnum.kt")
      public void testClassObjectInEnum() {
        runTest("compiler/testData/diagnostics/tests/enum/classObjectInEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classObjectInEnumPrivate.kt")
      public void testClassObjectInEnumPrivate() {
        runTest("compiler/testData/diagnostics/tests/enum/classObjectInEnumPrivate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("commonSupertype.kt")
      public void testCommonSupertype() {
        runTest("compiler/testData/diagnostics/tests/enum/commonSupertype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("compareTwoDifferentEnums.kt")
      public void testCompareTwoDifferentEnums() {
        runTest("compiler/testData/diagnostics/tests/enum/compareTwoDifferentEnums.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConstructorCallFromOutside.kt")
      public void testConstructorCallFromOutside() {
        runTest("compiler/testData/diagnostics/tests/enum/ConstructorCallFromOutside.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constructorWithDefaultParametersOnly.kt")
      public void testConstructorWithDefaultParametersOnly() {
        runTest("compiler/testData/diagnostics/tests/enum/constructorWithDefaultParametersOnly.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("declaringClass.kt")
      public void testDeclaringClass() {
        runTest("compiler/testData/diagnostics/tests/enum/declaringClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dontCreatePackageTypeForEnumEntry_after.kt")
      public void testDontCreatePackageTypeForEnumEntry_after() {
        runTest("compiler/testData/diagnostics/tests/enum/dontCreatePackageTypeForEnumEntry_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dontCreatePackageTypeForEnumEntry_before.kt")
      public void testDontCreatePackageTypeForEnumEntry_before() {
        runTest("compiler/testData/diagnostics/tests/enum/dontCreatePackageTypeForEnumEntry_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("emptyConstructor.kt")
      public void testEmptyConstructor() {
        runTest("compiler/testData/diagnostics/tests/enum/emptyConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("entryShouldBeOfEnumType.kt")
      public void testEntryShouldBeOfEnumType() {
        runTest("compiler/testData/diagnostics/tests/enum/entryShouldBeOfEnumType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumEntryCannotHaveClassObject.kt")
      public void testEnumEntryCannotHaveClassObject() {
        runTest("compiler/testData/diagnostics/tests/enum/enumEntryCannotHaveClassObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumEntryInAbstractEnum.kt")
      public void testEnumEntryInAbstractEnum() {
        runTest("compiler/testData/diagnostics/tests/enum/enumEntryInAbstractEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumImplementingTrait.kt")
      public void testEnumImplementingTrait() {
        runTest("compiler/testData/diagnostics/tests/enum/enumImplementingTrait.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumInheritance.kt")
      public void testEnumInheritance() {
        runTest("compiler/testData/diagnostics/tests/enum/enumInheritance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumIsAssignableToBuiltInEnum.kt")
      public void testEnumIsAssignableToBuiltInEnum() {
        runTest("compiler/testData/diagnostics/tests/enum/enumIsAssignableToBuiltInEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumMissingName.kt")
      public void testEnumMissingName() {
        runTest("compiler/testData/diagnostics/tests/enum/enumMissingName.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumModifier.kt")
      public void testEnumModifier() {
        runTest("compiler/testData/diagnostics/tests/enum/enumModifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumStarImport.kt")
      public void testEnumStarImport() {
        runTest("compiler/testData/diagnostics/tests/enum/enumStarImport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumSubjectTypeCheck.kt")
      public void testEnumSubjectTypeCheck() {
        runTest("compiler/testData/diagnostics/tests/enum/enumSubjectTypeCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("EnumWOParenthesesConsistencyNestedScope.kt")
      public void testEnumWOParenthesesConsistencyNestedScope() {
        runTest("compiler/testData/diagnostics/tests/enum/EnumWOParenthesesConsistencyNestedScope.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("EnumWOParenthesesConsistencyTopLevel.kt")
      public void testEnumWOParenthesesConsistencyTopLevel() {
        runTest("compiler/testData/diagnostics/tests/enum/EnumWOParenthesesConsistencyTopLevel.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumWithAnnotationKeyword.kt")
      public void testEnumWithAnnotationKeyword() {
        runTest("compiler/testData/diagnostics/tests/enum/enumWithAnnotationKeyword.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumWithEmptyName.kt")
      public void testEnumWithEmptyName() {
        runTest("compiler/testData/diagnostics/tests/enum/enumWithEmptyName.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("equalityOfEnumAndParameter.kt")
      public void testEqualityOfEnumAndParameter() {
        runTest("compiler/testData/diagnostics/tests/enum/equalityOfEnumAndParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("equalityOfFlexibleTypeParameters.kt")
      public void testEqualityOfFlexibleTypeParameters() {
        runTest("compiler/testData/diagnostics/tests/enum/equalityOfFlexibleTypeParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExplicitConstructorCall.kt")
      public void testExplicitConstructorCall() {
        runTest("compiler/testData/diagnostics/tests/enum/ExplicitConstructorCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extendingEnumDirectly.kt")
      public void testExtendingEnumDirectly() {
        runTest("compiler/testData/diagnostics/tests/enum/extendingEnumDirectly.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extensionNamedAsEnumEntry.kt")
      public void testExtensionNamedAsEnumEntry() {
        runTest("compiler/testData/diagnostics/tests/enum/extensionNamedAsEnumEntry.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifEnumEntry.kt")
      public void testIfEnumEntry() {
        runTest("compiler/testData/diagnostics/tests/enum/ifEnumEntry.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importEnumFromJava.kt")
      public void testImportEnumFromJava() {
        runTest("compiler/testData/diagnostics/tests/enum/importEnumFromJava.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incompatibleEnumEntryClasses.kt")
      public void testIncompatibleEnumEntryClasses() {
        runTest("compiler/testData/diagnostics/tests/enum/incompatibleEnumEntryClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incompatibleEnums.kt")
      public void testIncompatibleEnums() {
        runTest("compiler/testData/diagnostics/tests/enum/incompatibleEnums.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incompatibleEnums_1_4.kt")
      public void testIncompatibleEnums_1_4() {
        runTest("compiler/testData/diagnostics/tests/enum/incompatibleEnums_1_4.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inheritFromEnumEntry.kt")
      public void testInheritFromEnumEntry() {
        runTest("compiler/testData/diagnostics/tests/enum/inheritFromEnumEntry.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inheritanceFromEnum.kt")
      public void testInheritanceFromEnum() {
        runTest("compiler/testData/diagnostics/tests/enum/inheritanceFromEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inline.kt")
      public void testInline() {
        runTest("compiler/testData/diagnostics/tests/enum/inline.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InsideEntryConstructorCall.kt")
      public void testInsideEntryConstructorCall() {
        runTest("compiler/testData/diagnostics/tests/enum/InsideEntryConstructorCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InsideSecondaryConstructorCall.kt")
      public void testInsideSecondaryConstructorCall() {
        runTest("compiler/testData/diagnostics/tests/enum/InsideSecondaryConstructorCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("interfaceWithEnumKeyword.kt")
      public void testInterfaceWithEnumKeyword() {
        runTest("compiler/testData/diagnostics/tests/enum/interfaceWithEnumKeyword.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("isEnumEntry.kt")
      public void testIsEnumEntry() {
        runTest("compiler/testData/diagnostics/tests/enum/isEnumEntry.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaEnumValueOfMethod.kt")
      public void testJavaEnumValueOfMethod() {
        runTest("compiler/testData/diagnostics/tests/enum/javaEnumValueOfMethod.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaEnumValuesMethod.kt")
      public void testJavaEnumValuesMethod() {
        runTest("compiler/testData/diagnostics/tests/enum/javaEnumValuesMethod.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaEnumWithAbstractFun.kt")
      public void testJavaEnumWithAbstractFun() {
        runTest("compiler/testData/diagnostics/tests/enum/javaEnumWithAbstractFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaEnumWithFuns.kt")
      public void testJavaEnumWithFuns() {
        runTest("compiler/testData/diagnostics/tests/enum/javaEnumWithFuns.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaEnumWithNameClashing.kt")
      public void testJavaEnumWithNameClashing() {
        runTest("compiler/testData/diagnostics/tests/enum/javaEnumWithNameClashing.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaEnumWithProperty.kt")
      public void testJavaEnumWithProperty() {
        runTest("compiler/testData/diagnostics/tests/enum/javaEnumWithProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2834.kt")
      public void testKt2834() {
        runTest("compiler/testData/diagnostics/tests/enum/kt2834.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt8972_cloneNotAllowed.kt")
      public void testKt8972_cloneNotAllowed() {
        runTest("compiler/testData/diagnostics/tests/enum/kt8972_cloneNotAllowed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localEnums.kt")
      public void testLocalEnums() {
        runTest("compiler/testData/diagnostics/tests/enum/localEnums.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("modifiersOnEnumEntry.kt")
      public void testModifiersOnEnumEntry() {
        runTest("compiler/testData/diagnostics/tests/enum/modifiersOnEnumEntry.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multipleConstructors.kt")
      public void testMultipleConstructors() {
        runTest("compiler/testData/diagnostics/tests/enum/multipleConstructors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonPrivateConstructor.kt")
      public void testNonPrivateConstructor() {
        runTest("compiler/testData/diagnostics/tests/enum/NonPrivateConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("openMemberInEnum.kt")
      public void testOpenMemberInEnum() {
        runTest("compiler/testData/diagnostics/tests/enum/openMemberInEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overrideFinalEnumMethods.kt")
      public void testOverrideFinalEnumMethods() {
        runTest("compiler/testData/diagnostics/tests/enum/overrideFinalEnumMethods.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("referenceToEnumEntry.kt")
      public void testReferenceToEnumEntry() {
        runTest("compiler/testData/diagnostics/tests/enum/referenceToEnumEntry.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SecondaryConstructorCall.kt")
      public void testSecondaryConstructorCall() {
        runTest("compiler/testData/diagnostics/tests/enum/SecondaryConstructorCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("secondaryConstructorWithoutDelegatingToPrimaryOne.kt")
      public void testSecondaryConstructorWithoutDelegatingToPrimaryOne() {
        runTest("compiler/testData/diagnostics/tests/enum/secondaryConstructorWithoutDelegatingToPrimaryOne.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("secondaryConstructorWithoutDelegatingToPrimaryOneWithEnabledFeature.kt")
      public void testSecondaryConstructorWithoutDelegatingToPrimaryOneWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/tests/enum/secondaryConstructorWithoutDelegatingToPrimaryOneWithEnabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("starImportNestedClassAndEntries.kt")
      public void testStarImportNestedClassAndEntries() {
        runTest("compiler/testData/diagnostics/tests/enum/starImportNestedClassAndEntries.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeCompatibility.kt")
      public void testTypeCompatibility() {
        runTest("compiler/testData/diagnostics/tests/enum/typeCompatibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParametersInEnum.kt")
      public void testTypeParametersInEnum() {
        runTest("compiler/testData/diagnostics/tests/enum/typeParametersInEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valuesValueOfAndEntriesAccessibility.kt")
      public void testValuesValueOfAndEntriesAccessibility() {
        runTest("compiler/testData/diagnostics/tests/enum/valuesValueOfAndEntriesAccessibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongUnitializedEnumCompanion.kt")
      public void testWrongUnitializedEnumCompanion() {
        runTest("compiler/testData/diagnostics/tests/enum/wrongUnitializedEnumCompanion.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/enum/entries")
      @TestDataPath("$PROJECT_ROOT")
      public class Entries {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInEntries() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/enum/entries"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conflictingPropertyEntriesAndReference.kt")
        public void testConflictingPropertyEntriesAndReference() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/conflictingPropertyEntriesAndReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conflictingPropertyEntriesAndReferenceOn.kt")
        public void testConflictingPropertyEntriesAndReferenceOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/conflictingPropertyEntriesAndReferenceOn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conflictingPropertyEntriesAndReferencePrioritized.kt")
        public void testConflictingPropertyEntriesAndReferencePrioritized() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/conflictingPropertyEntriesAndReferencePrioritized.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entriesPropertyAsExtensionClash.kt")
        public void testEntriesPropertyAsExtensionClash() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyAsExtensionClash.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entriesPropertyAsExtensionClashOn.kt")
        public void testEntriesPropertyAsExtensionClashOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyAsExtensionClashOn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entriesPropertyAsExtensionClashPrioritized.kt")
        public void testEntriesPropertyAsExtensionClashPrioritized() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyAsExtensionClashPrioritized.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entriesPropertyImport.kt")
        public void testEntriesPropertyImport() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyImport.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entriesPropertyImportedClash.kt")
        public void testEntriesPropertyImportedClash() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyImportedClash.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entriesPropertyImportedClashOn.kt")
        public void testEntriesPropertyImportedClashOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyImportedClashOn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entriesPropertyImportedClashPrioritized.kt")
        public void testEntriesPropertyImportedClashPrioritized() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyImportedClashPrioritized.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entriesPropertyInCompanionClash.kt")
        public void testEntriesPropertyInCompanionClash() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyInCompanionClash.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entriesPropertyInCompanionClashOn.kt")
        public void testEntriesPropertyInCompanionClashOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyInCompanionClashOn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entriesPropertyWithJvmStaticClash.kt")
        public void testEntriesPropertyWithJvmStaticClash() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyWithJvmStaticClash.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entriesPropertyWithJvmStaticClashOn.kt")
        public void testEntriesPropertyWithJvmStaticClashOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyWithJvmStaticClashOn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entriesPropertyWithJvmStaticClashPrioritized.kt")
        public void testEntriesPropertyWithJvmStaticClashPrioritized() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyWithJvmStaticClashPrioritized.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entriesUnsupported.kt")
        public void testEntriesUnsupported() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesUnsupported.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("enumEntriesAmbiguity.kt")
        public void testEnumEntriesAmbiguity() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/enumEntriesAmbiguity.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericEntriesPropertyClash.kt")
        public void testGenericEntriesPropertyClash() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/genericEntriesPropertyClash.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericEntriesPropertyClashOn.kt")
        public void testGenericEntriesPropertyClashOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/genericEntriesPropertyClashOn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaEnumAdditionalCases.kt")
        public void testJavaEnumAdditionalCases() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/javaEnumAdditionalCases.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaEnumEntriesAmbiguity.kt")
        public void testJavaEnumEntriesAmbiguity() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/javaEnumEntriesAmbiguity.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaEnumEntriesAmbiguityOn.kt")
        public void testJavaEnumEntriesAmbiguityOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/javaEnumEntriesAmbiguityOn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaFakeEnumEntries.kt")
        public void testJavaFakeEnumEntries() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/javaFakeEnumEntries.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nameShadowingOfExternallyDefinedEntries.kt")
        public void testNameShadowingOfExternallyDefinedEntries() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/nameShadowingOfExternallyDefinedEntries.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nameShadowingOfExternallyDefinedEntriesOn.kt")
        public void testNameShadowingOfExternallyDefinedEntriesOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/nameShadowingOfExternallyDefinedEntriesOn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nameShadowingOfExternallyDefinedEntriesPrioritized.kt")
        public void testNameShadowingOfExternallyDefinedEntriesPrioritized() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/nameShadowingOfExternallyDefinedEntriesPrioritized.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("primitiveReference.kt")
        public void testPrimitiveReference() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/primitiveReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("redeclarationOfEnumEntriesNameWithIntrinsic.kt")
        public void testRedeclarationOfEnumEntriesNameWithIntrinsic() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/redeclarationOfEnumEntriesNameWithIntrinsic.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("redeclarationOfEnumEntriesNameWithIntrinsicOn.kt")
        public void testRedeclarationOfEnumEntriesNameWithIntrinsicOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/redeclarationOfEnumEntriesNameWithIntrinsicOn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("toBeShadowed.kt")
        public void testToBeShadowed() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/toBeShadowed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("toBeShadowedPrioritized.kt")
        public void testToBeShadowedPrioritized() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/toBeShadowedPrioritized.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/enum/inner")
      @TestDataPath("$PROJECT_ROOT")
      public class Inner {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInner() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/enum/inner"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("existingClassObject.kt")
        public void testExistingClassObject() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/existingClassObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideClass.kt")
        public void testInsideClass() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/insideClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideClassObject.kt")
        public void testInsideClassObject() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/insideClassObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideEnum.kt")
        public void testInsideEnum() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/insideEnum.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideEnumEntry_after.kt")
        public void testInsideEnumEntry_after() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/insideEnumEntry_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideEnumEntry_before.kt")
        public void testInsideEnumEntry_before() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/insideEnumEntry_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideInnerClassNotAllowed.kt")
        public void testInsideInnerClassNotAllowed() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/insideInnerClassNotAllowed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideObject.kt")
        public void testInsideObject() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/insideObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideTrait.kt")
        public void testInsideTrait() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/insideTrait.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("redeclarationInClassObject.kt")
        public void testRedeclarationInClassObject() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/redeclarationInClassObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("twoEnums.kt")
        public void testTwoEnums() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/twoEnums.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("twoEnumsInClassObjectAndInnerClass.kt")
        public void testTwoEnumsInClassObjectAndInnerClass() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/twoEnumsInClassObjectAndInnerClass.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/evaluate")
    @TestDataPath("$PROJECT_ROOT")
    public class Evaluate {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInEvaluate() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/evaluate"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("binaryMinusDepOnExpType.kt")
      public void testBinaryMinusDepOnExpType() {
        runTest("compiler/testData/diagnostics/tests/evaluate/binaryMinusDepOnExpType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("binaryMinusIndepWoExpType.kt")
      public void testBinaryMinusIndepWoExpType() {
        runTest("compiler/testData/diagnostics/tests/evaluate/binaryMinusIndepWoExpType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("binaryMinusIndependentExpType.kt")
      public void testBinaryMinusIndependentExpType() {
        runTest("compiler/testData/diagnostics/tests/evaluate/binaryMinusIndependentExpType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("customExtensionOverKotlinExtensionInConst.kt")
      public void testCustomExtensionOverKotlinExtensionInConst() {
        runTest("compiler/testData/diagnostics/tests/evaluate/customExtensionOverKotlinExtensionInConst.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("divisionByZero.kt")
      public void testDivisionByZero() {
        runTest("compiler/testData/diagnostics/tests/evaluate/divisionByZero.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("float.kt")
      public void testFloat() {
        runTest("compiler/testData/diagnostics/tests/evaluate/float.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("floatLiteralOutOfRange.kt")
      public void testFloatLiteralOutOfRange() {
        runTest("compiler/testData/diagnostics/tests/evaluate/floatLiteralOutOfRange.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("infixFunOverBuiltinMemberInConst.kt")
      public void testInfixFunOverBuiltinMemberInConst() {
        runTest("compiler/testData/diagnostics/tests/evaluate/infixFunOverBuiltinMemberInConst.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intOverflow.kt")
      public void testIntOverflow() {
        runTest("compiler/testData/diagnostics/tests/evaluate/intOverflow.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intOverflowWithJavaProperties.kt")
      public void testIntOverflowWithJavaProperties() {
        runTest("compiler/testData/diagnostics/tests/evaluate/intOverflowWithJavaProperties.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("integer.kt")
      public void testInteger() {
        runTest("compiler/testData/diagnostics/tests/evaluate/integer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("logicWithNumber.kt")
      public void testLogicWithNumber() {
        runTest("compiler/testData/diagnostics/tests/evaluate/logicWithNumber.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("longOverflow.kt")
      public void testLongOverflow() {
        runTest("compiler/testData/diagnostics/tests/evaluate/longOverflow.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noOverflowWithZero.kt")
      public void testNoOverflowWithZero() {
        runTest("compiler/testData/diagnostics/tests/evaluate/noOverflowWithZero.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("numberBinaryOperations.kt")
      public void testNumberBinaryOperations() {
        runTest("compiler/testData/diagnostics/tests/evaluate/numberBinaryOperations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("numberBinaryOperationsCall.kt")
      public void testNumberBinaryOperationsCall() {
        runTest("compiler/testData/diagnostics/tests/evaluate/numberBinaryOperationsCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("numberBinaryOperationsInfixCall.kt")
      public void testNumberBinaryOperationsInfixCall() {
        runTest("compiler/testData/diagnostics/tests/evaluate/numberBinaryOperationsInfixCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("otherOverflow.kt")
      public void testOtherOverflow() {
        runTest("compiler/testData/diagnostics/tests/evaluate/otherOverflow.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("parentesized.kt")
      public void testParentesized() {
        runTest("compiler/testData/diagnostics/tests/evaluate/parentesized.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("qualifiedExpressions.kt")
      public void testQualifiedExpressions() {
        runTest("compiler/testData/diagnostics/tests/evaluate/qualifiedExpressions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unaryMinusDepOnExpType.kt")
      public void testUnaryMinusDepOnExpType() {
        runTest("compiler/testData/diagnostics/tests/evaluate/unaryMinusDepOnExpType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unaryMinusIndepWoExpType.kt")
      public void testUnaryMinusIndepWoExpType() {
        runTest("compiler/testData/diagnostics/tests/evaluate/unaryMinusIndepWoExpType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unaryMinusIndependentExpType.kt")
      public void testUnaryMinusIndependentExpType() {
        runTest("compiler/testData/diagnostics/tests/evaluate/unaryMinusIndependentExpType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongLongSuffix.kt")
      public void testWrongLongSuffix() {
        runTest("compiler/testData/diagnostics/tests/evaluate/wrongLongSuffix.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/evaluate/inlineClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class InlineClasses {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInlineClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/evaluate/inlineClasses"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorOfUnsignedType.kt")
        public void testConstructorOfUnsignedType() {
          runTest("compiler/testData/diagnostics/tests/evaluate/inlineClasses/constructorOfUnsignedType.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/exceptions")
    @TestDataPath("$PROJECT_ROOT")
    public class Exceptions {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInExceptions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/exceptions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationWithWrongArgInDanglingModifierList.kt")
      public void testAnnotationWithWrongArgInDanglingModifierList() {
        runTest("compiler/testData/diagnostics/tests/exceptions/annotationWithWrongArgInDanglingModifierList.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignmentWithIncorrectLValue.kt")
      public void testAssignmentWithIncorrectLValue() {
        runTest("compiler/testData/diagnostics/tests/exceptions/assignmentWithIncorrectLValue.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectedSomeTypesOnBranchForWhenExpressionOfErroneousType.kt")
      public void testExpectedSomeTypesOnBranchForWhenExpressionOfErroneousType() {
        runTest("compiler/testData/diagnostics/tests/exceptions/expectedSomeTypesOnBranchForWhenExpressionOfErroneousType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incorrectCallOnILT.kt")
      public void testIncorrectCallOnILT() {
        runTest("compiler/testData/diagnostics/tests/exceptions/incorrectCallOnILT.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("keywordsInsteadOfIdentifiers.kt")
      public void testKeywordsInsteadOfIdentifiers() {
        runTest("compiler/testData/diagnostics/tests/exceptions/keywordsInsteadOfIdentifiers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt24158.kt")
      public void testKt24158() {
        runTest("compiler/testData/diagnostics/tests/exceptions/kt24158.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("stackOverflowOnDoUnify.kt")
      public void testStackOverflowOnDoUnify() {
        runTest("compiler/testData/diagnostics/tests/exceptions/stackOverflowOnDoUnify.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection")
    @TestDataPath("$PROJECT_ROOT")
    public class ExplicitDefinitelyNotNullableViaIntersection {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInExplicitDefinitelyNotNullableViaIntersection() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("approximation.kt")
      public void testApproximation() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/approximation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("bareTypes.kt")
      public void testBareTypes() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/bareTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("disabledFeature.kt")
      public void testDisabledFeature() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/disabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dnnTypeProjectionInParameter.kt")
      public void testDnnTypeProjectionInParameter() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/dnnTypeProjectionInParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dnnTypeProjectionInReceiver.kt")
      public void testDnnTypeProjectionInReceiver() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/dnnTypeProjectionInReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inference.kt")
      public void testInference() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/inference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("isAsOperators.kt")
      public void testIsAsOperators() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/isAsOperators.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("isAsOperatorsEnabled.kt")
      public void testIsAsOperatorsEnabled() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/isAsOperatorsEnabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt59493.kt")
      public void testKt59493() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/kt59493.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notApplicable.kt")
      public void testNotApplicable() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/notApplicable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overrides.kt")
      public void testOverrides() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/overrides.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overridesJavaAnnotated.kt")
      public void testOverridesJavaAnnotated() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/overridesJavaAnnotated.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursiveBounds.kt")
      public void testRecursiveBounds() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/recursiveBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reifiedArguments.kt")
      public void testReifiedArguments() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/reifiedArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/simple.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("starProjection.kt")
      public void testStarProjection() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/starProjection.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/exposed")
    @TestDataPath("$PROJECT_ROOT")
    public class Exposed {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInExposed() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/exposed"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ambiguousAnonymousExposed.kt")
      public void testAmbiguousAnonymousExposed() {
        runTest("compiler/testData/diagnostics/tests/exposed/ambiguousAnonymousExposed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegate.kt")
      public void testDelegate() {
        runTest("compiler/testData/diagnostics/tests/exposed/delegate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("exceptionOnFakeInvisible.kt")
      public void testExceptionOnFakeInvisible() {
        runTest("compiler/testData/diagnostics/tests/exposed/exceptionOnFakeInvisible.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functional.kt")
      public void testFunctional() {
        runTest("compiler/testData/diagnostics/tests/exposed/functional.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implements.kt")
      public void testImplements() {
        runTest("compiler/testData/diagnostics/tests/exposed/implements.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inaccessibleType.kt")
      public void testInaccessibleType() {
        runTest("compiler/testData/diagnostics/tests/exposed/inaccessibleType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("internal.kt")
      public void testInternal() {
        runTest("compiler/testData/diagnostics/tests/exposed/internal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("internalAndProtected.kt")
      public void testInternalAndProtected() {
        runTest("compiler/testData/diagnostics/tests/exposed/internalAndProtected.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("internalFromLocal.kt")
      public void testInternalFromLocal() {
        runTest("compiler/testData/diagnostics/tests/exposed/internalFromLocal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("local.kt")
      public void testLocal() {
        runTest("compiler/testData/diagnostics/tests/exposed/local.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localFromInternal.kt")
      public void testLocalFromInternal() {
        runTest("compiler/testData/diagnostics/tests/exposed/localFromInternal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localFromPrivate.kt")
      public void testLocalFromPrivate() {
        runTest("compiler/testData/diagnostics/tests/exposed/localFromPrivate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localInFunReturnType.kt")
      public void testLocalInFunReturnType() {
        runTest("compiler/testData/diagnostics/tests/exposed/localInFunReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localInMemberType.kt")
      public void testLocalInMemberType() {
        runTest("compiler/testData/diagnostics/tests/exposed/localInMemberType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localInPropertyType.kt")
      public void testLocalInPropertyType() {
        runTest("compiler/testData/diagnostics/tests/exposed/localInPropertyType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nested.kt")
      public void testNested() {
        runTest("compiler/testData/diagnostics/tests/exposed/nested.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("object.kt")
      public void testObject() {
        runTest("compiler/testData/diagnostics/tests/exposed/object.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("packagePrivate.kt")
      public void testPackagePrivate() {
        runTest("compiler/testData/diagnostics/tests/exposed/packagePrivate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateFromLocal.kt")
      public void testPrivateFromLocal() {
        runTest("compiler/testData/diagnostics/tests/exposed/privateFromLocal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateInFile.kt")
      public void testPrivateInFile() {
        runTest("compiler/testData/diagnostics/tests/exposed/privateInFile.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateInFileDisabled.kt")
      public void testPrivateInFileDisabled() {
        runTest("compiler/testData/diagnostics/tests/exposed/privateInFileDisabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privatePropertyInPrivateConstructor.kt")
      public void testPrivatePropertyInPrivateConstructor() {
        runTest("compiler/testData/diagnostics/tests/exposed/privatePropertyInPrivateConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyInConstructorOfPrivateClass.kt")
      public void testPropertyInConstructorOfPrivateClass() {
        runTest("compiler/testData/diagnostics/tests/exposed/propertyInConstructorOfPrivateClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyInPrivateConstructor.kt")
      public void testPropertyInPrivateConstructor() {
        runTest("compiler/testData/diagnostics/tests/exposed/propertyInPrivateConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyInPrivateConstructorError.kt")
      public void testPropertyInPrivateConstructorError() {
        runTest("compiler/testData/diagnostics/tests/exposed/propertyInPrivateConstructorError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyInSimpleConstructor.kt")
      public void testPropertyInSimpleConstructor() {
        runTest("compiler/testData/diagnostics/tests/exposed/propertyInSimpleConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protected.kt")
      public void testProtected() {
        runTest("compiler/testData/diagnostics/tests/exposed/protected.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedInProtected.kt")
      public void testProtectedInProtected() {
        runTest("compiler/testData/diagnostics/tests/exposed/protectedInProtected.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedJava.kt")
      public void testProtectedJava() {
        runTest("compiler/testData/diagnostics/tests/exposed/protectedJava.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedSameWay.kt")
      public void testProtectedSameWay() {
        runTest("compiler/testData/diagnostics/tests/exposed/protectedSameWay.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/diagnostics/tests/exposed/simple.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeArgs.kt")
      public void testTypeArgs() {
        runTest("compiler/testData/diagnostics/tests/exposed/typeArgs.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/extensions")
    @TestDataPath("$PROJECT_ROOT")
    public class Extensions {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInExtensions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/extensions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classObject.kt")
      public void testClassObject() {
        runTest("compiler/testData/diagnostics/tests/extensions/classObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExtensionFunctions.kt")
      public void testExtensionFunctions() {
        runTest("compiler/testData/diagnostics/tests/extensions/ExtensionFunctions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extensionMemberInClassObject.kt")
      public void testExtensionMemberInClassObject() {
        runTest("compiler/testData/diagnostics/tests/extensions/extensionMemberInClassObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extensionPropertyVsParameter.kt")
      public void testExtensionPropertyVsParameter() {
        runTest("compiler/testData/diagnostics/tests/extensions/extensionPropertyVsParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExtensionsCalledOnSuper.kt")
      public void testExtensionsCalledOnSuper() {
        runTest("compiler/testData/diagnostics/tests/extensions/ExtensionsCalledOnSuper.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("GenericIterator.kt")
      public void testGenericIterator() {
        runTest("compiler/testData/diagnostics/tests/extensions/GenericIterator.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("GenericIterator2.kt")
      public void testGenericIterator2() {
        runTest("compiler/testData/diagnostics/tests/extensions/GenericIterator2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1875.kt")
      public void testKt1875() {
        runTest("compiler/testData/diagnostics/tests/extensions/kt1875.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2317.kt")
      public void testKt2317() {
        runTest("compiler/testData/diagnostics/tests/extensions/kt2317.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3470.kt")
      public void testKt3470() {
        runTest("compiler/testData/diagnostics/tests/extensions/kt3470.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3563.kt")
      public void testKt3563() {
        runTest("compiler/testData/diagnostics/tests/extensions/kt3563.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt819ExtensionProperties.kt")
      public void testKt819ExtensionProperties() {
        runTest("compiler/testData/diagnostics/tests/extensions/kt819ExtensionProperties.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noClassObjectsInJava.kt")
      public void testNoClassObjectsInJava() {
        runTest("compiler/testData/diagnostics/tests/extensions/noClassObjectsInJava.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("object.kt")
      public void testObject() {
        runTest("compiler/testData/diagnostics/tests/extensions/object.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("throwOutCandidatesByReceiver.kt")
      public void testThrowOutCandidatesByReceiver() {
        runTest("compiler/testData/diagnostics/tests/extensions/throwOutCandidatesByReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("throwOutCandidatesByReceiver2.kt")
      public void testThrowOutCandidatesByReceiver2() {
        runTest("compiler/testData/diagnostics/tests/extensions/throwOutCandidatesByReceiver2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("variableInvoke.kt")
      public void testVariableInvoke() {
        runTest("compiler/testData/diagnostics/tests/extensions/variableInvoke.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/extensions/contextReceivers")
      @TestDataPath("$PROJECT_ROOT")
      public class ContextReceivers {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInContextReceivers() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/extensions/contextReceivers"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ambiguityInGroup.kt")
        public void testAmbiguityInGroup() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/ambiguityInGroup.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conflicting.kt")
        public void testConflicting() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/conflicting.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conflictingWithDifferentOrder.kt")
        public void testConflictingWithDifferentOrder() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/conflictingWithDifferentOrder.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("contextKeywordWithElvis.kt")
        public void testContextKeywordWithElvis() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/contextKeywordWithElvis.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("contextReceiverAmbiguity.kt")
        public void testContextReceiverAmbiguity() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/contextReceiverAmbiguity.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("contextReceiverTypeParamsUsage.kt")
        public void testContextReceiverTypeParamsUsage() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/contextReceiverTypeParamsUsage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("contextReceiverTypeParamsUsageError.kt")
        public void testContextReceiverTypeParamsUsageError() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/contextReceiverTypeParamsUsageError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("contextualFunctionalTypeConversion.kt")
        public void testContextualFunctionalTypeConversion() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/contextualFunctionalTypeConversion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionalType.kt")
        public void testFunctionalType() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/functionalType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericOuterClass.kt")
        public void testGenericOuterClass() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/genericOuterClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideDeclaration.kt")
        public void testInsideDeclaration() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/insideDeclaration.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("labelFromFunctionName.kt")
        public void testLabelFromFunctionName() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/labelFromFunctionName.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("labelsFromClassNameForbidden.kt")
        public void testLabelsFromClassNameForbidden() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/labelsFromClassNameForbidden.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaReceiverFromContext.kt")
        public void testLambdaReceiverFromContext() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/lambdaReceiverFromContext.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaReceiverFromContextWithSameFunctions.kt")
        public void testLambdaReceiverFromContextWithSameFunctions() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/lambdaReceiverFromContextWithSameFunctions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lazy.kt")
        public void testLazy() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/lazy.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("manyReceivers.kt")
        public void testManyReceivers() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/manyReceivers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noBackingField.kt")
        public void testNoBackingField() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/noBackingField.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noContextReceiversOnValueClasses.kt")
        public void testNoContextReceiversOnValueClasses() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/noContextReceiversOnValueClasses.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithUniversal());
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noExplicitReceiver.kt")
        public void testNoExplicitReceiver() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/noExplicitReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noLabelsByClassName.kt")
        public void testNoLabelsByClassName() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/noLabelsByClassName.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonConflicting.kt")
        public void testNonConflicting() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/nonConflicting.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("outerClass.kt")
        public void testOuterClass() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/outerClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloadPriority.kt")
        public void testOverloadPriority() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/overloadPriority.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloading.kt")
        public void testOverloading() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/overloading.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("parameterizedContextualLambda.kt")
        public void testParameterizedContextualLambda() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/parameterizedContextualLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("plusMatrix.kt")
        public void testPlusMatrix() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/plusMatrix.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("priorityInTower.kt")
        public void testPriorityInTower() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/priorityInTower.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("subtypingBetweenContextReceivers.kt")
        public void testSubtypingBetweenContextReceivers() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/subtypingBetweenContextReceivers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superWithContext.kt")
        public void testSuperWithContext() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/superWithContext.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntaxError.kt")
        public void testSyntaxError() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/syntaxError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("thisIdentifierInfo.kt")
        public void testThisIdentifierInfo() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/thisIdentifierInfo.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("thisWithCustomLabel.kt")
        public void testThisWithCustomLabel() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/thisWithCustomLabel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("thisWithReceiverLabelsClasses.kt")
        public void testThisWithReceiverLabelsClasses() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/thisWithReceiverLabelsClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("thisWithReceiverLabelsFunctions.kt")
        public void testThisWithReceiverLabelsFunctions() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/thisWithReceiverLabelsFunctions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("thisWithReceiverLabelsProperties.kt")
        public void testThisWithReceiverLabelsProperties() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/thisWithReceiverLabelsProperties.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("twoReceiverCandidatesError.kt")
        public void testTwoReceiverCandidatesError() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/twoReceiverCandidatesError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeParameterAsContextReceiver.kt")
        public void testTypeParameterAsContextReceiver() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/typeParameterAsContextReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeParameterized.kt")
        public void testTypeParameterized() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/typeParameterized.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeParameterizedList.kt")
        public void testTypeParameterizedList() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/typeParameterizedList.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unsupported.kt")
        public void testUnsupported() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/unsupported.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withExplicitReceiver.kt")
        public void testWithExplicitReceiver() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/withExplicitReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withExplicitReceiverError.kt")
        public void testWithExplicitReceiverError() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/withExplicitReceiverError.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP")
        @TestDataPath("$PROJECT_ROOT")
        public class FromKEEP {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInFromKEEP() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("autoCloseScope.kt")
          public void testAutoCloseScope() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/autoCloseScope.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("canvas.kt")
          public void testCanvas() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/canvas.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("clickHandler.kt")
          public void testClickHandler() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/clickHandler.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("compareTo.kt")
          public void testCompareTo() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/compareTo.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("decimateEveryEvenThird.kt")
          public void testDecimateEveryEvenThird() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/decimateEveryEvenThird.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("dp.kt")
          public void testDp() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/dp.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("functionalType.kt")
          public void testFunctionalType() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/functionalType.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("iterableClass.kt")
          public void testIterableClass() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/iterableClass.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("json.kt")
          public void testJson() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/json.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("loggingContext.kt")
          public void testLoggingContext() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/loggingContext.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("monoidSum.kt")
          public void testMonoidSum() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/monoidSum.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("transaction.kt")
          public void testTransaction() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/transaction.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("userStorage.kt")
          public void testUserStorage() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/userStorage.kt");
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/external")
    @TestDataPath("$PROJECT_ROOT")
    public class External {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInExternal() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/external"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noExternalModifierInheritance.kt")
      public void testNoExternalModifierInheritance() {
        runTest("compiler/testData/diagnostics/tests/external/noExternalModifierInheritance.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/fieldRename")
    @TestDataPath("$PROJECT_ROOT")
    public class FieldRename {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInFieldRename() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/fieldRename"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("derivedClassPropertyShadowsBaseClassField.kt")
      public void testDerivedClassPropertyShadowsBaseClassField() {
        runTest("compiler/testData/diagnostics/tests/fieldRename/derivedClassPropertyShadowsBaseClassField.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("derivedClassPropertyShadowsBaseClassField13.kt")
      public void testDerivedClassPropertyShadowsBaseClassField13() {
        runTest("compiler/testData/diagnostics/tests/fieldRename/derivedClassPropertyShadowsBaseClassField13.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaFieldKotlinPropertyDifferentType.kt")
      public void testJavaFieldKotlinPropertyDifferentType() {
        runTest("compiler/testData/diagnostics/tests/fieldRename/javaFieldKotlinPropertyDifferentType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaFieldKotlinPropertyDifferentType2.kt")
      public void testJavaFieldKotlinPropertyDifferentType2() {
        runTest("compiler/testData/diagnostics/tests/fieldRename/javaFieldKotlinPropertyDifferentType2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaFieldKotlinPropertyJavaFieldInPackagePrivate.kt")
      public void testJavaFieldKotlinPropertyJavaFieldInPackagePrivate() {
        runTest("compiler/testData/diagnostics/tests/fieldRename/javaFieldKotlinPropertyJavaFieldInPackagePrivate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaFieldKotlinPropertyJavaPackagePrivateField.kt")
      public void testJavaFieldKotlinPropertyJavaPackagePrivateField() {
        runTest("compiler/testData/diagnostics/tests/fieldRename/javaFieldKotlinPropertyJavaPackagePrivateField.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaProtectedFieldAndKotlinInvisiblePropertyReference.kt")
      public void testJavaProtectedFieldAndKotlinInvisiblePropertyReference() {
        runTest("compiler/testData/diagnostics/tests/fieldRename/javaProtectedFieldAndKotlinInvisiblePropertyReference.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/funInterface")
    @TestDataPath("$PROJECT_ROOT")
    public class FunInterface {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInFunInterface() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/funInterface"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basicFunInterface.kt")
      public void testBasicFunInterface() {
        runTest("compiler/testData/diagnostics/tests/funInterface/basicFunInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basicFunInterfaceConversion.kt")
      public void testBasicFunInterfaceConversion() {
        runTest("compiler/testData/diagnostics/tests/funInterface/basicFunInterfaceConversion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basicFunInterfaceDisabled.kt")
      public void testBasicFunInterfaceDisabled() {
        runTest("compiler/testData/diagnostics/tests/funInterface/basicFunInterfaceDisabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("funInterfaceConstructorReferences_after.kt")
      public void testFunInterfaceConstructorReferences_after() {
        runTest("compiler/testData/diagnostics/tests/funInterface/funInterfaceConstructorReferences_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("funInterfaceConstructorReferences_before.kt")
      public void testFunInterfaceConstructorReferences_before() {
        runTest("compiler/testData/diagnostics/tests/funInterface/funInterfaceConstructorReferences_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("funInterfaceConversionOnReceiver.kt")
      public void testFunInterfaceConversionOnReceiver() {
        runTest("compiler/testData/diagnostics/tests/funInterface/funInterfaceConversionOnReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("funInterfaceDeclarationCheck.kt")
      public void testFunInterfaceDeclarationCheck() {
        runTest("compiler/testData/diagnostics/tests/funInterface/funInterfaceDeclarationCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("funInterfaceSyntheticConstructors.kt")
      public void testFunInterfaceSyntheticConstructors() {
        runTest("compiler/testData/diagnostics/tests/funInterface/funInterfaceSyntheticConstructors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("funIsNotInheritedFromBaseInterface.kt")
      public void testFunIsNotInheritedFromBaseInterface() {
        runTest("compiler/testData/diagnostics/tests/funInterface/funIsNotInheritedFromBaseInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionDelegateClashOnJvm.kt")
      public void testFunctionDelegateClashOnJvm() {
        runTest("compiler/testData/diagnostics/tests/funInterface/functionDelegateClashOnJvm.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericSubstitutionForFunInterface.kt")
      public void testGenericSubstitutionForFunInterface() {
        runTest("compiler/testData/diagnostics/tests/funInterface/genericSubstitutionForFunInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noCompatibilityResolveForFunInterfaces.kt")
      public void testNoCompatibilityResolveForFunInterfaces() {
        runTest("compiler/testData/diagnostics/tests/funInterface/noCompatibilityResolveForFunInterfaces.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveFunInterfaceWithoutMainMethod.kt")
      public void testResolveFunInterfaceWithoutMainMethod() {
        runTest("compiler/testData/diagnostics/tests/funInterface/resolveFunInterfaceWithoutMainMethod.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("severalConversionsForFunInterface.kt")
      public void testSeveralConversionsForFunInterface() {
        runTest("compiler/testData/diagnostics/tests/funInterface/severalConversionsForFunInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendFunInterfaceConversion.kt")
      public void testSuspendFunInterfaceConversion() {
        runTest("compiler/testData/diagnostics/tests/funInterface/suspendFunInterfaceConversion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unitInContravariantPosition.kt")
      public void testUnitInContravariantPosition() {
        runTest("compiler/testData/diagnostics/tests/funInterface/unitInContravariantPosition.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unitInCovariantPosition.kt")
      public void testUnitInCovariantPosition() {
        runTest("compiler/testData/diagnostics/tests/funInterface/unitInCovariantPosition.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/functionAsExpression")
    @TestDataPath("$PROJECT_ROOT")
    public class FunctionAsExpression {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInFunctionAsExpression() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/functionAsExpression"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AutoLabels.kt")
      public void testAutoLabels() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/AutoLabels.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Common.kt")
      public void testCommon() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/Common.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DifficultInferenceForParameter.kt")
      public void testDifficultInferenceForParameter() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/DifficultInferenceForParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ForbiddenNonLocalReturn.kt")
      public void testForbiddenNonLocalReturn() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/ForbiddenNonLocalReturn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FunctionType.kt")
      public void testFunctionType() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/FunctionType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InferenceParametersTypes.kt")
      public void testInferenceParametersTypes() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/InferenceParametersTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MissingParameterTypes.kt")
      public void testMissingParameterTypes() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/MissingParameterTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NameDeprecation.kt")
      public void testNameDeprecation() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/NameDeprecation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoOverloadError.kt")
      public void testNoOverloadError() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/NoOverloadError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Parameters.kt")
      public void testParameters() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/Parameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ReceiverByExpectedType.kt")
      public void testReceiverByExpectedType() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/ReceiverByExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ReturnAndLabels.kt")
      public void testReturnAndLabels() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/ReturnAndLabels.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ReturnTypeCheck.kt")
      public void testReturnTypeCheck() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/ReturnTypeCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ScopeCheck.kt")
      public void testScopeCheck() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/ScopeCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WithGenericParameters.kt")
      public void testWithGenericParameters() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/WithGenericParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WithOuterGeneric.kt")
      public void testWithOuterGeneric() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/WithOuterGeneric.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WithoutBody.kt")
      public void testWithoutBody() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/WithoutBody.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class FunctionLiterals {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInFunctionLiterals() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/functionLiterals"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignmentOperationInLambda.kt")
      public void testAssignmentOperationInLambda() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/assignmentOperationInLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignmentOperationInLambdaWithExpectedType.kt")
      public void testAssignmentOperationInLambdaWithExpectedType() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/assignmentOperationInLambdaWithExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DeprecatedSyntax.kt")
      public void testDeprecatedSyntax() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/DeprecatedSyntax.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExpectedParameterTypeMismatchVariance.kt")
      public void testExpectedParameterTypeMismatchVariance() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/ExpectedParameterTypeMismatchVariance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExpectedParametersTypesMismatch.kt")
      public void testExpectedParametersTypesMismatch() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/ExpectedParametersTypesMismatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionExpressionAsLastExpressionInBlock.kt")
      public void testFunctionExpressionAsLastExpressionInBlock() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/functionExpressionAsLastExpressionInBlock.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionLIteralInBlockInIf.kt")
      public void testFunctionLIteralInBlockInIf() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/functionLIteralInBlockInIf.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionLiteralAsArgumentForFunction.kt")
      public void testFunctionLiteralAsArgumentForFunction() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/functionLiteralAsArgumentForFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionLiteralInIf.kt")
      public void testFunctionLiteralInIf() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/functionLiteralInIf.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionLiteralWithoutArgumentList.kt")
      public void testFunctionLiteralWithoutArgumentList() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/functionLiteralWithoutArgumentList.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericFunctionalTypeOnRHSOfPlusAssign.kt")
      public void testGenericFunctionalTypeOnRHSOfPlusAssign() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/genericFunctionalTypeOnRHSOfPlusAssign.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("higherOrderCallMissingParameters.kt")
      public void testHigherOrderCallMissingParameters() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/higherOrderCallMissingParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt11733.kt")
      public void testKt11733() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt11733.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt11733_1.kt")
      public void testKt11733_1() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt11733_1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt16016.kt")
      public void testKt16016() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt16016.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2906.kt")
      public void testKt2906() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt2906.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3343.kt")
      public void testKt3343() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt3343.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4529.kt")
      public void testKt4529() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt4529.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt47493.kt")
      public void testKt47493() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt47493.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt51317.kt")
      public void testKt51317() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt51317.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt56138.kt")
      public void testKt56138() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt56138.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt6541_extensionForExtensionFunction.kt")
      public void testKt6541_extensionForExtensionFunction() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt6541_extensionForExtensionFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt6869.kt")
      public void testKt6869() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt6869.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt7383_starProjectedFunction.kt")
      public void testKt7383_starProjectedFunction() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt7383_starProjectedFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("LabeledFunctionLiterals.kt")
      public void testLabeledFunctionLiterals() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/LabeledFunctionLiterals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaInLambda2.kt")
      public void testLambdaInLambda2() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/lambdaInLambda2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("missedTypeMismatch.kt")
      public void testMissedTypeMismatch() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/missedTypeMismatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("prematurelyAnalyzingLambdaWhileFixingTypeVariableForAnotherArgument.kt")
      public void testPrematurelyAnalyzingLambdaWhileFixingTypeVariableForAnotherArgument() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/prematurelyAnalyzingLambdaWhileFixingTypeVariableForAnotherArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("returnNull.kt")
      public void testReturnNull() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/returnNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("returnNullWithReturn.kt")
      public void testReturnNullWithReturn() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/returnNullWithReturn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("underscopeParameters.kt")
      public void testUnderscopeParameters() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/underscopeParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unusedLiteral.kt")
      public void testUnusedLiteral() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/unusedLiteral.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unusedLiteralInsideUnitLiteral.kt")
      public void testUnusedLiteralInsideUnitLiteral() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/unusedLiteralInsideUnitLiteral.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas")
      @TestDataPath("$PROJECT_ROOT")
      public class DestructuringInLambdas {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDestructuringInLambdas() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("complexInference.kt")
        public void testComplexInference() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/complexInference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionComponents.kt")
        public void testExtensionComponents() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/extensionComponents.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferredFunctionalType.kt")
        public void testInferredFunctionalType() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/inferredFunctionalType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("modifiers.kt")
        public void testModifiers() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/modifiers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noExpectedType.kt")
        public void testNoExpectedType() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/noExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("redeclaration.kt")
        public void testRedeclaration() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/redeclaration.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("shadowing.kt")
        public void testShadowing() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/shadowing.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/simple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("underscore.kt")
        public void testUnderscore() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/underscore.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unusedParameters.kt")
        public void testUnusedParameters() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/unusedParameters.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals/return")
      @TestDataPath("$PROJECT_ROOT")
      public class Return {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInReturn() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/functionLiterals/return"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("AutoLabels.kt")
        public void testAutoLabels() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/AutoLabels.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("AutoLabelsNonLocal.kt")
        public void testAutoLabelsNonLocal() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/AutoLabelsNonLocal.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ForbiddenNonLocalReturnNoType.kt")
        public void testForbiddenNonLocalReturnNoType() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/ForbiddenNonLocalReturnNoType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("IfInReturnedExpression.kt")
        public void testIfInReturnedExpression() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/IfInReturnedExpression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("IfWithoutElse.kt")
        public void testIfWithoutElse() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/IfWithoutElse.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("IfWithoutElseWithExplicitType.kt")
        public void testIfWithoutElseWithExplicitType() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/IfWithoutElseWithExplicitType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt66277.kt")
        public void testKt66277() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/kt66277.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt66279.kt")
        public void testKt66279() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/kt66279.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt66512.kt")
        public void testKt66512() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/kt66512.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt66534.kt")
        public void testKt66534() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/kt66534.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LambdaReturnTypeIsUnitIfImplicitReturnExists.kt")
        public void testLambdaReturnTypeIsUnitIfImplicitReturnExists() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LambdaReturnTypeIsUnitIfImplicitReturnExists.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LambdaWithParameter.kt")
        public void testLambdaWithParameter() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LambdaWithParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalAndNonLocalReturnInLambda.kt")
        public void testLocalAndNonLocalReturnInLambda() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalAndNonLocalReturnInLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnExplicitLabelNoParens.kt")
        public void testLocalReturnExplicitLabelNoParens() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnExplicitLabelNoParens.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnExplicitLabelParens.kt")
        public void testLocalReturnExplicitLabelParens() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnExplicitLabelParens.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnHasTypeNothing.kt")
        public void testLocalReturnHasTypeNothing() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnHasTypeNothing.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnInNestedFunction.kt")
        public void testLocalReturnInNestedFunction() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnInNestedFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnInNestedLambda.kt")
        public void testLocalReturnInNestedLambda() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnInNestedLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnNoCoercionToUnit.kt")
        public void testLocalReturnNoCoercionToUnit() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnNoCoercionToUnit.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnNull.kt")
        public void testLocalReturnNull() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnNull.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnSecondUnit.kt")
        public void testLocalReturnSecondUnit() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnSecondUnit.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnUnit.kt")
        public void testLocalReturnUnit() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnUnit.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnUnitAndDontCareType.kt")
        public void testLocalReturnUnitAndDontCareType() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnUnitAndDontCareType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnUnitWithBodyExpression.kt")
        public void testLocalReturnUnitWithBodyExpression() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnUnitWithBodyExpression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnWithExpectedType.kt")
        public void testLocalReturnWithExpectedType() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnWithExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnWithExplicitUnit.kt")
        public void testLocalReturnWithExplicitUnit() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnWithExplicitUnit.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnWithFlexibleUnitType.kt")
        public void testLocalReturnWithFlexibleUnitType() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnWithFlexibleUnitType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalReturnsWithExplicitReturnType.kt")
        public void testLocalReturnsWithExplicitReturnType() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnsWithExplicitReturnType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("MixedReturnsFromLambda.kt")
        public void testMixedReturnsFromLambda() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/MixedReturnsFromLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("MultipleLocalUnitReturns.kt")
        public void testMultipleLocalUnitReturns() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/MultipleLocalUnitReturns.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NoCommonSystem.kt")
        public void testNoCommonSystem() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/NoCommonSystem.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SmartCast.kt")
        public void testSmartCast() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/SmartCast.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SmartCastWithExplicitType.kt")
        public void testSmartCastWithExplicitType() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/SmartCastWithExplicitType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unresolvedReferenceInReturnBlock.kt")
        public void testUnresolvedReferenceInReturnBlock() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/unresolvedReferenceInReturnBlock.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/generics")
    @TestDataPath("$PROJECT_ROOT")
    public class Generics {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInGenerics() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/generics"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("anonymousObjectSupertypeWithTypeParameterFromFunction.kt")
      public void testAnonymousObjectSupertypeWithTypeParameterFromFunction() {
        runTest("compiler/testData/diagnostics/tests/generics/anonymousObjectSupertypeWithTypeParameterFromFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("approximationOfBoundedProjection.kt")
      public void testApproximationOfBoundedProjection() {
        runTest("compiler/testData/diagnostics/tests/generics/approximationOfBoundedProjection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("approximationOfInProjection.kt")
      public void testApproximationOfInProjection() {
        runTest("compiler/testData/diagnostics/tests/generics/approximationOfInProjection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("argumentsForT.kt")
      public void testArgumentsForT() {
        runTest("compiler/testData/diagnostics/tests/generics/argumentsForT.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("bareTypesWithStarProjections.kt")
      public void testBareTypesWithStarProjections() {
        runTest("compiler/testData/diagnostics/tests/generics/bareTypesWithStarProjections.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("commonSupertypeContravariant.kt")
      public void testCommonSupertypeContravariant() {
        runTest("compiler/testData/diagnostics/tests/generics/commonSupertypeContravariant.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("commonSupertypeContravariant2.kt")
      public void testCommonSupertypeContravariant2() {
        runTest("compiler/testData/diagnostics/tests/generics/commonSupertypeContravariant2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("doNotCaptureSupertype.kt")
      public void testDoNotCaptureSupertype() {
        runTest("compiler/testData/diagnostics/tests/generics/doNotCaptureSupertype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("finalUpperBoundWithOverride.kt")
      public void testFinalUpperBoundWithOverride() {
        runTest("compiler/testData/diagnostics/tests/generics/finalUpperBoundWithOverride.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("finalUpperBoundWithoutOverride.kt")
      public void testFinalUpperBoundWithoutOverride() {
        runTest("compiler/testData/diagnostics/tests/generics/finalUpperBoundWithoutOverride.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericsInType.kt")
      public void testGenericsInType() {
        runTest("compiler/testData/diagnostics/tests/generics/genericsInType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InconsistentTypeParameterBounds.kt")
      public void testInconsistentTypeParameterBounds() {
        runTest("compiler/testData/diagnostics/tests/generics/InconsistentTypeParameterBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invalidArgumentsNumberInWhere.kt")
      public void testInvalidArgumentsNumberInWhere() {
        runTest("compiler/testData/diagnostics/tests/generics/invalidArgumentsNumberInWhere.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1575-Class.kt")
      public void testKt1575_Class() {
        runTest("compiler/testData/diagnostics/tests/generics/kt1575-Class.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1575-Function.kt")
      public void testKt1575_Function() {
        runTest("compiler/testData/diagnostics/tests/generics/kt1575-Function.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt30590.kt")
      public void testKt30590() {
        runTest("compiler/testData/diagnostics/tests/generics/kt30590.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt34729.kt")
      public void testKt34729() {
        runTest("compiler/testData/diagnostics/tests/generics/kt34729.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt53656.kt")
      public void testKt53656() {
        runTest("compiler/testData/diagnostics/tests/generics/kt53656.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt5508.kt")
      public void testKt5508() {
        runTest("compiler/testData/diagnostics/tests/generics/kt5508.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt9203.kt")
      public void testKt9203() {
        runTest("compiler/testData/diagnostics/tests/generics/kt9203.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt9203_1.kt")
      public void testKt9203_1() {
        runTest("compiler/testData/diagnostics/tests/generics/kt9203_1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt9985.kt")
      public void testKt9985() {
        runTest("compiler/testData/diagnostics/tests/generics/kt9985.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localClassTypeRefWithTypeParameterFromFunction.kt")
      public void testLocalClassTypeRefWithTypeParameterFromFunction() {
        runTest("compiler/testData/diagnostics/tests/generics/localClassTypeRefWithTypeParameterFromFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableTypeParameterScope.kt")
      public void testNullableTypeParameterScope() {
        runTest("compiler/testData/diagnostics/tests/generics/nullableTypeParameterScope.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("outerTypeParametersInNestedClasses.kt")
      public void testOuterTypeParametersInNestedClasses() {
        runTest("compiler/testData/diagnostics/tests/generics/outerTypeParametersInNestedClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Projections.kt")
      public void testProjections() {
        runTest("compiler/testData/diagnostics/tests/generics/Projections.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedSuperCall.kt")
      public void testProtectedSuperCall() {
        runTest("compiler/testData/diagnostics/tests/generics/protectedSuperCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PseudoRawTypes.kt")
      public void testPseudoRawTypes() {
        runTest("compiler/testData/diagnostics/tests/generics/PseudoRawTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RawTypeInIsExpression.kt")
      public void testRawTypeInIsExpression() {
        runTest("compiler/testData/diagnostics/tests/generics/RawTypeInIsExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RawTypeInIsPattern.kt")
      public void testRawTypeInIsPattern() {
        runTest("compiler/testData/diagnostics/tests/generics/RawTypeInIsPattern.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursive.kt")
      public void testRecursive() {
        runTest("compiler/testData/diagnostics/tests/generics/recursive.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RecursiveUpperBoundCheck.kt")
      public void testRecursiveUpperBoundCheck() {
        runTest("compiler/testData/diagnostics/tests/generics/RecursiveUpperBoundCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RecursiveUpperBoundWithTwoArguments.kt")
      public void testRecursiveUpperBoundWithTwoArguments() {
        runTest("compiler/testData/diagnostics/tests/generics/RecursiveUpperBoundWithTwoArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveGenericBoundsBeforeSupertypes.kt")
      public void testResolveGenericBoundsBeforeSupertypes() {
        runTest("compiler/testData/diagnostics/tests/generics/resolveGenericBoundsBeforeSupertypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sameTypeParameterUse.kt")
      public void testSameTypeParameterUse() {
        runTest("compiler/testData/diagnostics/tests/generics/sameTypeParameterUse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suppressVarianceConflict.kt")
      public void testSuppressVarianceConflict() {
        runTest("compiler/testData/diagnostics/tests/generics/suppressVarianceConflict.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TypeParameterBounds.kt")
      public void testTypeParameterBounds() {
        runTest("compiler/testData/diagnostics/tests/generics/TypeParameterBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TypeParametersInTypeParameterBounds.kt")
      public void testTypeParametersInTypeParameterBounds() {
        runTest("compiler/testData/diagnostics/tests/generics/TypeParametersInTypeParameterBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unresolvedClassifierInWhere.kt")
      public void testUnresolvedClassifierInWhere() {
        runTest("compiler/testData/diagnostics/tests/generics/unresolvedClassifierInWhere.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whereClauseSyntax.kt")
      public void testWhereClauseSyntax() {
        runTest("compiler/testData/diagnostics/tests/generics/whereClauseSyntax.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wildcardInValueParameter.kt")
      public void testWildcardInValueParameter() {
        runTest("compiler/testData/diagnostics/tests/generics/wildcardInValueParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongNumberOfTypeArgumentsDiagnostic.kt")
      public void testWrongNumberOfTypeArgumentsDiagnostic() {
        runTest("compiler/testData/diagnostics/tests/generics/wrongNumberOfTypeArgumentsDiagnostic.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/capturedParameters")
      @TestDataPath("$PROJECT_ROOT")
      public class CapturedParameters {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCapturedParameters() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/capturedParameters"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("captured.kt")
        public void testCaptured() {
          runTest("compiler/testData/diagnostics/tests/generics/capturedParameters/captured.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerLocalClass.kt")
        public void testInnerLocalClass() {
          runTest("compiler/testData/diagnostics/tests/generics/capturedParameters/innerLocalClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localClass.kt")
        public void testLocalClass() {
          runTest("compiler/testData/diagnostics/tests/generics/capturedParameters/localClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localWithTypeParameter.kt")
        public void testLocalWithTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/generics/capturedParameters/localWithTypeParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("objectLiteral.kt")
        public void testObjectLiteral() {
          runTest("compiler/testData/diagnostics/tests/generics/capturedParameters/objectLiteral.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("uncheckedCast.kt")
        public void testUncheckedCast() {
          runTest("compiler/testData/diagnostics/tests/generics/capturedParameters/uncheckedCast.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/cyclicBounds")
      @TestDataPath("$PROJECT_ROOT")
      public class CyclicBounds {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCyclicBounds() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/cyclicBounds"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functions.kt")
        public void testFunctions() {
          runTest("compiler/testData/diagnostics/tests/generics/cyclicBounds/functions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inClass.kt")
        public void testInClass() {
          runTest("compiler/testData/diagnostics/tests/generics/cyclicBounds/inClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/innerClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class InnerClasses {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInnerClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/innerClasses"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("bareTypes.kt")
        public void testBareTypes() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/bareTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("bareTypesComplex.kt")
        public void testBareTypesComplex() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/bareTypesComplex.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("castAnElementToInnerClassWithTypeParameter.kt")
        public void testCastAnElementToInnerClassWithTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/castAnElementToInnerClassWithTypeParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("checkBoundsOuter.kt")
        public void testCheckBoundsOuter() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/checkBoundsOuter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("importedInner.kt")
        public void testImportedInner() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/importedInner.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerClassGenericBounds.kt")
        public void testInnerClassGenericBounds() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/innerClassGenericBounds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerSuperCall.kt")
        public void testInnerSuperCall() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/innerSuperCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerSuperCallSecondary.kt")
        public void testInnerSuperCallSecondary() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/innerSuperCallSecondary.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerTP.kt")
        public void testInnerTP() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/innerTP.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerUncheckedCast.kt")
        public void testInnerUncheckedCast() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/innerUncheckedCast.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerVariance.kt")
        public void testInnerVariance() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/innerVariance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("iterator.kt")
        public void testIterator() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/iterator.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("j+k.kt")
        public void testJ_k() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/j+k.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("j+k_complex.kt")
        public void testJ_k_complex() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/j+k_complex.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3357.kt")
        public void testKt3357() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/kt3357.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt408.kt")
        public void testKt408() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/kt408.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt6325.kt")
        public void testKt6325() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/kt6325.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noTypeVarianceConflictInNestedClass.kt")
        public void testNoTypeVarianceConflictInNestedClass() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/noTypeVarianceConflictInNestedClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("outerArgumentsRequired.kt")
        public void testOuterArgumentsRequired() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/outerArgumentsRequired.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("parameterShadowing.kt")
        public void testParameterShadowing() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/parameterShadowing.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("qualifiedOuter.kt")
        public void testQualifiedOuter() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/qualifiedOuter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("qualifiedTypesResolution.kt")
        public void testQualifiedTypesResolution() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/qualifiedTypesResolution.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/simple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleIn.kt")
        public void testSimpleIn() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/simpleIn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleOut.kt")
        public void testSimpleOut() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/simpleOut.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleOutUseSite.kt")
        public void testSimpleOutUseSite() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/simpleOutUseSite.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substitutedMemberScope.kt")
        public void testSubstitutedMemberScope() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/substitutedMemberScope.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments")
        @TestDataPath("$PROJECT_ROOT")
        public class ImplicitArguments {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInImplicitArguments() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("fromCompanionObject_after.kt")
          public void testFromCompanionObject_after() {
            runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromCompanionObject_after.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("fromCompanionObject_before.kt")
          public void testFromCompanionObject_before() {
            runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromCompanionObject_before.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("fromOuterClassInObjectLiteral.kt")
          public void testFromOuterClassInObjectLiteral() {
            runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromOuterClassInObjectLiteral.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("fromSuperClasses.kt")
          public void testFromSuperClasses() {
            runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromSuperClasses.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("fromSuperClassesLocal.kt")
          public void testFromSuperClassesLocal() {
            runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromSuperClassesLocal.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("fromSuperClassesLocalInsideInner.kt")
          public void testFromSuperClassesLocalInsideInner() {
            runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromSuperClassesLocalInsideInner.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("fromSuperClassesTransitive.kt")
          public void testFromSuperClassesTransitive() {
            runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromSuperClassesTransitive.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("inStaticScope.kt")
          public void testInStaticScope() {
            runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/inStaticScope.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("secondLevelDepth.kt")
          public void testSecondLevelDepth() {
            runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/secondLevelDepth.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope")
      @TestDataPath("$PROJECT_ROOT")
      public class MultipleBoundsMemberScope {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInMultipleBoundsMemberScope() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conflictingReturnType.kt")
        public void testConflictingReturnType() {
          runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/conflictingReturnType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibleTypes.kt")
        public void testFlexibleTypes() {
          runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/flexibleTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("mostSpecific.kt")
        public void testMostSpecific() {
          runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/mostSpecific.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("properties.kt")
        public void testProperties() {
          runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/properties.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertiesConflict.kt")
        public void testPropertiesConflict() {
          runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/propertiesConflict.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/simple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("validTypeParameters.kt")
        public void testValidTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/validTypeParameters.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/nullability")
      @TestDataPath("$PROJECT_ROOT")
      public class Nullability {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNullability() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/nullability"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedTypeWithPlatformSupertype.kt")
        public void testCapturedTypeWithPlatformSupertype() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/capturedTypeWithPlatformSupertype.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("considerTypeNotNullOnlyIfItHasNotNullBound.kt")
        public void testConsiderTypeNotNullOnlyIfItHasNotNullBound() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/considerTypeNotNullOnlyIfItHasNotNullBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("correctSubstitutionForIncorporationConstraint.kt")
        public void testCorrectSubstitutionForIncorporationConstraint() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/correctSubstitutionForIncorporationConstraint.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("declarationsBoundsViolation.kt")
        public void testDeclarationsBoundsViolation() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/declarationsBoundsViolation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expressionsBoundsViolation.kt")
        public void testExpressionsBoundsViolation() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/expressionsBoundsViolation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionalBound.kt")
        public void testFunctionalBound() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/functionalBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferNotNullTypeFromIntersectionOfNullableTypes.kt")
        public void testInferNotNullTypeFromIntersectionOfNullableTypes() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/inferNotNullTypeFromIntersectionOfNullableTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt25182.kt")
        public void testKt25182() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/kt25182.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullSmartcastOnIntersectionOfNullables.kt")
        public void testNotNullSmartcastOnIntersectionOfNullables() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/notNullSmartcastOnIntersectionOfNullables.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nullToGeneric.kt")
        public void testNullToGeneric() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/nullToGeneric.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCastRefinedClass.kt")
        public void testSmartCastRefinedClass() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/smartCastRefinedClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCasts.kt")
        public void testSmartCasts() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/smartCasts.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCastsOnThis.kt")
        public void testSmartCastsOnThis() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/smartCastsOnThis.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCastsValueArgument.kt")
        public void testSmartCastsValueArgument() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/smartCastsValueArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("tpBoundsViolation.kt")
        public void testTpBoundsViolation() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/tpBoundsViolation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("tpBoundsViolationVariance.kt")
        public void testTpBoundsViolationVariance() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/tpBoundsViolationVariance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("tpInBounds.kt")
        public void testTpInBounds() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/tpInBounds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useAsReceiver.kt")
        public void testUseAsReceiver() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/useAsReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useAsValueArgument.kt")
        public void testUseAsValueArgument() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/useAsValueArgument.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/projectionsScope")
      @TestDataPath("$PROJECT_ROOT")
      public class ProjectionsScope {
        @RepeatedTest(value = 5)
        @TestMetadata("addAll.kt")
        public void testAddAll() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/addAll.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInProjectionsScope() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/projectionsScope"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("approximateDispatchReceiver.kt")
        public void testApproximateDispatchReceiver() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/approximateDispatchReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionReceiverTypeMismatch.kt")
        public void testExtensionReceiverTypeMismatch() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/extensionReceiverTypeMismatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionResultSubstitution.kt")
        public void testExtensionResultSubstitution() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/extensionResultSubstitution.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibleProjectedScope.kt")
        public void testFlexibleProjectedScope() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/flexibleProjectedScope.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inValueParameter.kt")
        public void testInValueParameter() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/inValueParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("iterateOnExtension.kt")
        public void testIterateOnExtension() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/iterateOnExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt7296.kt")
        public void testKt7296() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/kt7296.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt8647.kt")
        public void testKt8647() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/kt8647.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaArgument.kt")
        public void testLambdaArgument() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/lambdaArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("leakedApproximatedType.kt")
        public void testLeakedApproximatedType() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/leakedApproximatedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("MLOut.kt")
        public void testMLOut() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/MLOut.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multipleArgumentProjectedOut.kt")
        public void testMultipleArgumentProjectedOut() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/multipleArgumentProjectedOut.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("platformSuperClass.kt")
        public void testPlatformSuperClass() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/platformSuperClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("projectedOutConventions.kt")
        public void testProjectedOutConventions() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/projectedOutConventions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("projectedOutSmartCast.kt")
        public void testProjectedOutSmartCast() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/projectedOutSmartCast.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveUpperBoundStar.kt")
        public void testRecursiveUpperBoundStar() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/recursiveUpperBoundStar.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveUpperBoundStarOut.kt")
        public void testRecursiveUpperBoundStarOut() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/recursiveUpperBoundStarOut.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("starNullability.kt")
        public void testStarNullability() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/starNullability.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("starNullabilityRecursive.kt")
        public void testStarNullabilityRecursive() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/starNullabilityRecursive.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superClass.kt")
        public void testSuperClass() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/superClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeMismatchConventions.kt")
        public void testTypeMismatchConventions() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/typeMismatchConventions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeMismatchInLambda.kt")
        public void testTypeMismatchInLambda() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/typeMismatchInLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeParameterBounds.kt")
        public void testTypeParameterBounds() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/typeParameterBounds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unsafeVarianceInAliasedFunctionalType.kt")
        public void testUnsafeVarianceInAliasedFunctionalType() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/unsafeVarianceInAliasedFunctionalType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unsafeVarianceOnInputTypeOfFunctionalType.kt")
        public void testUnsafeVarianceOnInputTypeOfFunctionalType() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/unsafeVarianceOnInputTypeOfFunctionalType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unsafeVarianceStar.kt")
        public void testUnsafeVarianceStar() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/unsafeVarianceStar.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unsafeVarianceWithRecursiveGenerics.kt")
        public void testUnsafeVarianceWithRecursiveGenerics() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/unsafeVarianceWithRecursiveGenerics.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varargs.kt")
        public void testVarargs() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/varargs.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/starProjections")
      @TestDataPath("$PROJECT_ROOT")
      public class StarProjections {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInStarProjections() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/starProjections"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("checkBounds.kt")
        public void testCheckBounds() {
          runTest("compiler/testData/diagnostics/tests/generics/starProjections/checkBounds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("collectionInheritedFromJava.kt")
        public void testCollectionInheritedFromJava() {
          runTest("compiler/testData/diagnostics/tests/generics/starProjections/collectionInheritedFromJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("foldRecursiveTypesToStarProjection.kt")
        public void testFoldRecursiveTypesToStarProjection() {
          runTest("compiler/testData/diagnostics/tests/generics/starProjections/foldRecursiveTypesToStarProjection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inheritedFromJava.kt")
        public void testInheritedFromJava() {
          runTest("compiler/testData/diagnostics/tests/generics/starProjections/inheritedFromJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inheritedFromKotlin.kt")
        public void testInheritedFromKotlin() {
          runTest("compiler/testData/diagnostics/tests/generics/starProjections/inheritedFromKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invalid.kt")
        public void testInvalid() {
          runTest("compiler/testData/diagnostics/tests/generics/starProjections/invalid.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified")
      @TestDataPath("$PROJECT_ROOT")
      public class TpAsReified {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInTpAsReified() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/tpAsReified"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("CapturedAsReified.kt")
        public void testCapturedAsReified() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/CapturedAsReified.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ClassDereference.kt")
        public void testClassDereference() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/ClassDereference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Conventions.kt")
        public void testConventions() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/Conventions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("GenericArrayAsReifiedArgument.kt")
        public void testGenericArrayAsReifiedArgument() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/GenericArrayAsReifiedArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("GenericArrayAsReifiedArgumentWarning.kt")
        public void testGenericArrayAsReifiedArgumentWarning() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/GenericArrayAsReifiedArgumentWarning.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("GenericAsReifiedArgument.kt")
        public void testGenericAsReifiedArgument() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/GenericAsReifiedArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InConstructor.kt")
        public void testInConstructor() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InFunction.kt")
        public void testInFunction() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InProperty.kt")
        public void testInProperty() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InType.kt")
        public void testInType() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InlineableReified.kt")
        public void testInlineableReified() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InlineableReified.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalFun.kt")
        public void testLocalFun() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/LocalFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NotInlineableReified.kt")
        public void testNotInlineableReified() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/NotInlineableReified.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ReifiedClass.kt")
        public void testReifiedClass() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/ReifiedClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/varProjection")
      @TestDataPath("$PROJECT_ROOT")
      public class VarProjection {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInVarProjection() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/varProjection"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("setterNotProjectedOutAssign.kt")
        public void testSetterNotProjectedOutAssign() {
          runTest("compiler/testData/diagnostics/tests/generics/varProjection/setterNotProjectedOutAssign.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("setterProjectedOutAssign.kt")
        public void testSetterProjectedOutAssign() {
          runTest("compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutAssign.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("setterProjectedOutNoPlusAssign.kt")
        public void testSetterProjectedOutNoPlusAssign() {
          runTest("compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutNoPlusAssign.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("setterProjectedOutPlusAssignDefined.kt")
        public void testSetterProjectedOutPlusAssignDefined() {
          runTest("compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutPlusAssignDefined.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/imports")
    @TestDataPath("$PROJECT_ROOT")
    public class Imports {
      @RepeatedTest(value = 5)
      @TestMetadata("aliasedImportOfEnumConstructor.kt")
      public void testAliasedImportOfEnumConstructor() {
        runTest("compiler/testData/diagnostics/tests/imports/aliasedImportOfEnumConstructor.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInImports() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/imports"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AllUnderImportsAmbiguity.kt")
      public void testAllUnderImportsAmbiguity() {
        runTest("compiler/testData/diagnostics/tests/imports/AllUnderImportsAmbiguity.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AllUnderImportsLessPriority.kt")
      public void testAllUnderImportsLessPriority() {
        runTest("compiler/testData/diagnostics/tests/imports/AllUnderImportsLessPriority.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AllUnderImportsSamePriorityForFunction.kt")
      public void testAllUnderImportsSamePriorityForFunction() {
        runTest("compiler/testData/diagnostics/tests/imports/AllUnderImportsSamePriorityForFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AllUnderImportsSamePriorityForProperty.kt")
      public void testAllUnderImportsSamePriorityForProperty() {
        runTest("compiler/testData/diagnostics/tests/imports/AllUnderImportsSamePriorityForProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("brokenImport.kt")
      public void testBrokenImport() {
        runTest("compiler/testData/diagnostics/tests/imports/brokenImport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CheckJavaVisibility.kt")
      public void testCheckJavaVisibility() {
        runTest("compiler/testData/diagnostics/tests/imports/CheckJavaVisibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CheckJavaVisibility2.kt")
      public void testCheckJavaVisibility2() {
        runTest("compiler/testData/diagnostics/tests/imports/CheckJavaVisibility2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CheckVisibility.kt")
      public void testCheckVisibility() {
        runTest("compiler/testData/diagnostics/tests/imports/CheckVisibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ClassClash.kt")
      public void testClassClash() {
        runTest("compiler/testData/diagnostics/tests/imports/ClassClash.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ClassClashStarImport.kt")
      public void testClassClashStarImport() {
        runTest("compiler/testData/diagnostics/tests/imports/ClassClashStarImport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ClassImportsConflicting.kt")
      public void testClassImportsConflicting() {
        runTest("compiler/testData/diagnostics/tests/imports/ClassImportsConflicting.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CurrentPackageAndAllUnderImport.kt")
      public void testCurrentPackageAndAllUnderImport() {
        runTest("compiler/testData/diagnostics/tests/imports/CurrentPackageAndAllUnderImport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CurrentPackageAndExplicitImport.kt")
      public void testCurrentPackageAndExplicitImport() {
        runTest("compiler/testData/diagnostics/tests/imports/CurrentPackageAndExplicitImport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DefaultImportsPriority.kt")
      public void testDefaultImportsPriority() {
        runTest("compiler/testData/diagnostics/tests/imports/DefaultImportsPriority.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DoubleImports.kt")
      public void testDoubleImports() {
        runTest("compiler/testData/diagnostics/tests/imports/DoubleImports.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("EnumEntryVsStaticAmbiguity.kt")
      public void testEnumEntryVsStaticAmbiguity() {
        runTest("compiler/testData/diagnostics/tests/imports/EnumEntryVsStaticAmbiguity.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("EnumEntryVsStaticAmbiguity2.kt")
      public void testEnumEntryVsStaticAmbiguity2() {
        runTest("compiler/testData/diagnostics/tests/imports/EnumEntryVsStaticAmbiguity2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("EnumEntryVsStaticAmbiguity3.kt")
      public void testEnumEntryVsStaticAmbiguity3() {
        runTest("compiler/testData/diagnostics/tests/imports/EnumEntryVsStaticAmbiguity3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("EnumEntryVsStaticAmbiguity4.kt")
      public void testEnumEntryVsStaticAmbiguity4() {
        runTest("compiler/testData/diagnostics/tests/imports/EnumEntryVsStaticAmbiguity4.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExplicitImportsAmbiguity.kt")
      public void testExplicitImportsAmbiguity() {
        runTest("compiler/testData/diagnostics/tests/imports/ExplicitImportsAmbiguity.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExplicitImportsUnambiguityForFunction.kt")
      public void testExplicitImportsUnambiguityForFunction() {
        runTest("compiler/testData/diagnostics/tests/imports/ExplicitImportsUnambiguityForFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExplicitPackageImportsAmbiguity.kt")
      public void testExplicitPackageImportsAmbiguity() {
        runTest("compiler/testData/diagnostics/tests/imports/ExplicitPackageImportsAmbiguity.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportClassClash.kt")
      public void testImportClassClash() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportClassClash.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportFromCompanionObject.kt")
      public void testImportFromCompanionObject() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportFromCompanionObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportFromCurrentWithDifferentName.kt")
      public void testImportFromCurrentWithDifferentName() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportFromCurrentWithDifferentName.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportFromCurrentWithDifferentNameComplex.kt")
      public void testImportFromCurrentWithDifferentNameComplex() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportFromCurrentWithDifferentNameComplex.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportFromObject.kt")
      public void testImportFromObject() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportFromObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportFromRootPackage.kt")
      public void testImportFromRootPackage() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportFromRootPackage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importFunctionWithAllUnderImport.kt")
      public void testImportFunctionWithAllUnderImport() {
        runTest("compiler/testData/diagnostics/tests/imports/importFunctionWithAllUnderImport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importFunctionWithAllUnderImportAfterNamedImport.kt")
      public void testImportFunctionWithAllUnderImportAfterNamedImport() {
        runTest("compiler/testData/diagnostics/tests/imports/importFunctionWithAllUnderImportAfterNamedImport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportFunctionWithPackageName.kt")
      public void testImportFunctionWithPackageName() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportFunctionWithPackageName.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportHidingDefinitionInTheSameFile.kt")
      public void testImportHidingDefinitionInTheSameFile() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportHidingDefinitionInTheSameFile.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportNestedWithDifferentName.kt")
      public void testImportNestedWithDifferentName() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportNestedWithDifferentName.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportObjectAndUseAsSupertype.kt")
      public void testImportObjectAndUseAsSupertype() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportObjectAndUseAsSupertype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportObjectHidesCurrentPackage.kt")
      public void testImportObjectHidesCurrentPackage() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportObjectHidesCurrentPackage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportOverloadFunctions.kt")
      public void testImportOverloadFunctions() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportOverloadFunctions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportPrivateMember.kt")
      public void testImportPrivateMember() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportPrivateMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportPrivateMemberFromOtherFile.kt")
      public void testImportPrivateMemberFromOtherFile() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportPrivateMemberFromOtherFile.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportPrivateMembersWithStar.kt")
      public void testImportPrivateMembersWithStar() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportPrivateMembersWithStar.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportProtectedClass.kt")
      public void testImportProtectedClass() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportProtectedClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportResolutionOrder.kt")
      public void testImportResolutionOrder() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportResolutionOrder.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportStaticFunctionWithNonStaticSibling.kt")
      public void testImportStaticFunctionWithNonStaticSibling() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportStaticFunctionWithNonStaticSibling.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportTwoTimes.kt")
      public void testImportTwoTimes() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportTwoTimes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportTwoTimesStar.kt")
      public void testImportTwoTimesStar() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportTwoTimesStar.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Imports.kt")
      public void testImports() {
        runTest("compiler/testData/diagnostics/tests/imports/Imports.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ImportsConflicting.kt")
      public void testImportsConflicting() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportsConflicting.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InaccessiblePrivateClass.kt")
      public void testInaccessiblePrivateClass() {
        runTest("compiler/testData/diagnostics/tests/imports/InaccessiblePrivateClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InaccessiblePrivateInFile.kt")
      public void testInaccessiblePrivateInFile() {
        runTest("compiler/testData/diagnostics/tests/imports/InaccessiblePrivateInFile.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invisibleFakeReferenceInImport.kt")
      public void testInvisibleFakeReferenceInImport() {
        runTest("compiler/testData/diagnostics/tests/imports/invisibleFakeReferenceInImport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("JavaPackageLocalClassNotImported.kt")
      public void testJavaPackageLocalClassNotImported() {
        runTest("compiler/testData/diagnostics/tests/imports/JavaPackageLocalClassNotImported.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt13112.kt")
      public void testKt13112() {
        runTest("compiler/testData/diagnostics/tests/imports/kt13112.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MalformedImports.kt")
      public void testMalformedImports() {
        runTest("compiler/testData/diagnostics/tests/imports/MalformedImports.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NestedClassClash.kt")
      public void testNestedClassClash() {
        runTest("compiler/testData/diagnostics/tests/imports/NestedClassClash.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OperatorRenameOnImport.kt")
      public void testOperatorRenameOnImport() {
        runTest("compiler/testData/diagnostics/tests/imports/OperatorRenameOnImport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OptionalAnnotationClasses.kt")
      public void testOptionalAnnotationClasses() {
        runTest("compiler/testData/diagnostics/tests/imports/OptionalAnnotationClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PackageLocalClassNotImported.kt")
      public void testPackageLocalClassNotImported() {
        runTest("compiler/testData/diagnostics/tests/imports/PackageLocalClassNotImported.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PackageLocalClassReferencedError.kt")
      public void testPackageLocalClassReferencedError() {
        runTest("compiler/testData/diagnostics/tests/imports/PackageLocalClassReferencedError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PackageVsClass.kt")
      public void testPackageVsClass() {
        runTest("compiler/testData/diagnostics/tests/imports/PackageVsClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PrivateClassNotImported.kt")
      public void testPrivateClassNotImported() {
        runTest("compiler/testData/diagnostics/tests/imports/PrivateClassNotImported.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PrivateClassReferencedError.kt")
      public void testPrivateClassReferencedError() {
        runTest("compiler/testData/diagnostics/tests/imports/PrivateClassReferencedError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyClassFileDependencyRecursion.kt")
      public void testPropertyClassFileDependencyRecursion() {
        runTest("compiler/testData/diagnostics/tests/imports/propertyClassFileDependencyRecursion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RenameOnImport.kt")
      public void testRenameOnImport() {
        runTest("compiler/testData/diagnostics/tests/imports/RenameOnImport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("renamedImportInDifferentFile.kt")
      public void testRenamedImportInDifferentFile() {
        runTest("compiler/testData/diagnostics/tests/imports/renamedImportInDifferentFile.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("StarImportFromObject.kt")
      public void testStarImportFromObject() {
        runTest("compiler/testData/diagnostics/tests/imports/StarImportFromObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SyntaxError.kt")
      public void testSyntaxError() {
        runTest("compiler/testData/diagnostics/tests/imports/SyntaxError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TopLevelClassVsPackage.kt")
      public void testTopLevelClassVsPackage() {
        runTest("compiler/testData/diagnostics/tests/imports/TopLevelClassVsPackage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("twoImportLists.kt")
      public void testTwoImportLists() {
        runTest("compiler/testData/diagnostics/tests/imports/twoImportLists.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WrongImport.kt")
      public void testWrongImport() {
        runTest("compiler/testData/diagnostics/tests/imports/WrongImport.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/incompleteCode")
    @TestDataPath("$PROJECT_ROOT")
    public class IncompleteCode {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInIncompleteCode() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/incompleteCode"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayBracketsRange.kt")
      public void testArrayBracketsRange() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/arrayBracketsRange.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("checkNothingIsSubtype.kt")
      public void testCheckNothingIsSubtype() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/checkNothingIsSubtype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("controlStructuresErrors.kt")
      public void testControlStructuresErrors() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/controlStructuresErrors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("illegalSelectorCallableReference.kt")
      public void testIllegalSelectorCallableReference() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/illegalSelectorCallableReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inExpr.kt")
      public void testInExpr() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/inExpr.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incompleteAssignment.kt")
      public void testIncompleteAssignment() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/incompleteAssignment.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incompleteConstructorCall.kt")
      public void testIncompleteConstructorCall() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/incompleteConstructorCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incompleteEquals.kt")
      public void testIncompleteEquals() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/incompleteEquals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incompleteTryCatchBlock.kt")
      public void testIncompleteTryCatchBlock() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/incompleteTryCatchBlock.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1955.kt")
      public void testKt1955() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/kt1955.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2014.kt")
      public void testKt2014() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/kt2014.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4866UnresolvedArrayAccess.kt")
      public void testKt4866UnresolvedArrayAccess() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/kt4866UnresolvedArrayAccess.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt59041.kt")
      public void testKt59041() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/kt59041.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("missingNames.kt")
      public void testMissingNames() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/missingNames.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoSenselessComparisonForErrorType.kt")
      public void testNoSenselessComparisonForErrorType() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/NoSenselessComparisonForErrorType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("plusOnTheRight.kt")
      public void testPlusOnTheRight() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/plusOnTheRight.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("pseudocodeTraverseNextInstructions.kt")
      public void testPseudocodeTraverseNextInstructions() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/pseudocodeTraverseNextInstructions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("senselessComparisonWithNull.kt")
      public void testSenselessComparisonWithNull() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/senselessComparisonWithNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SupertypeOfErrorType.kt")
      public void testSupertypeOfErrorType() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/SupertypeOfErrorType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParameterOnLhsOfDot.kt")
      public void testTypeParameterOnLhsOfDot() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/typeParameterOnLhsOfDot.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unresolvedArguments.kt")
      public void testUnresolvedArguments() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/unresolvedArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unresolvedOperation.kt")
      public void testUnresolvedOperation() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/unresolvedOperation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unresolvedTypeWithTypeArguments.kt")
      public void testUnresolvedTypeWithTypeArguments() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/unresolvedTypeWithTypeArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("variableDeclarationInSelector.kt")
      public void testVariableDeclarationInSelector() {
        runTest("compiler/testData/diagnostics/tests/incompleteCode/variableDeclarationInSelector.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError")
      @TestDataPath("$PROJECT_ROOT")
      public class DiagnosticWithSyntaxError {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDiagnosticWithSyntaxError() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("arrayExpression.kt")
        public void testArrayExpression() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/arrayExpression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("checkBackingFieldException.kt")
        public void testCheckBackingFieldException() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/checkBackingFieldException.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("completeFunctionArgumentsOfNestedCalls.kt")
        public void testCompleteFunctionArgumentsOfNestedCalls() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/completeFunctionArgumentsOfNestedCalls.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("declarationAfterDotSelectorExpected.kt")
        public void testDeclarationAfterDotSelectorExpected() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/declarationAfterDotSelectorExpected.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("declarationAfterIncompleteElvis.kt")
        public void testDeclarationAfterIncompleteElvis() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/declarationAfterIncompleteElvis.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("funEquals.kt")
        public void testFunEquals() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funEquals.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("funKeyword.kt")
        public void testFunKeyword() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funKeyword.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("funcitonTypes.kt")
        public void testFuncitonTypes() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funcitonTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("incompleteEnumReference.kt")
        public void testIncompleteEnumReference() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteEnumReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("incompleteVal.kt")
        public void testIncompleteVal() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteVal.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("incompleteValWithAccessor.kt")
        public void testIncompleteValWithAccessor() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteValWithAccessor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("incompleteWhen.kt")
        public void testIncompleteWhen() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteWhen.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("namedFun.kt")
        public void testNamedFun() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/namedFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noTypeParamsInReturnType.kt")
        public void testNoTypeParamsInReturnType() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/noTypeParamsInReturnType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeReferenceError.kt")
        public void testTypeReferenceError() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/typeReferenceError.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valNoName.kt")
        public void testValNoName() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/valNoName.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valWithNoNameBeforeNextDeclarationWithModifiers.kt")
        public void testValWithNoNameBeforeNextDeclarationWithModifiers() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/valWithNoNameBeforeNextDeclarationWithModifiers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valWithNoNameInBlock.kt")
        public void testValWithNoNameInBlock() {
          runTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/valWithNoNameInBlock.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/inference")
    @TestDataPath("$PROJECT_ROOT")
    public class Inference {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInInference() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotatedUnderscoredTypeArgument.kt")
      public void testAnnotatedUnderscoredTypeArgument() {
        runTest("compiler/testData/diagnostics/tests/inference/annotatedUnderscoredTypeArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assertThatInNumerousIf.kt")
      public void testAssertThatInNumerousIf() {
        runTest("compiler/testData/diagnostics/tests/inference/assertThatInNumerousIf.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cannotCompleteResolveAmbiguity.kt")
      public void testCannotCompleteResolveAmbiguity() {
        runTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveAmbiguity.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cannotCompleteResolveFunctionLiteralsNoUse.kt")
      public void testCannotCompleteResolveFunctionLiteralsNoUse() {
        runTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveFunctionLiteralsNoUse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cannotCompleteResolveNoInfoForParameter.kt")
      public void testCannotCompleteResolveNoInfoForParameter() {
        runTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveNoInfoForParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cannotCompleteResolveNoneApplicable.kt")
      public void testCannotCompleteResolveNoneApplicable() {
        runTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveNoneApplicable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cannotCompleteResolveWithFunctionLiterals.kt")
      public void testCannotCompleteResolveWithFunctionLiterals() {
        runTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveWithFunctionLiterals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("capturedInProjectedFlexibleType.kt")
      public void testCapturedInProjectedFlexibleType() {
        runTest("compiler/testData/diagnostics/tests/inference/capturedInProjectedFlexibleType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("capturedTypesInSelfType.kt")
      public void testCapturedTypesInSelfType() {
        runTest("compiler/testData/diagnostics/tests/inference/capturedTypesInSelfType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("checkNotNullWithNullableExpectedType.kt")
      public void testCheckNotNullWithNullableExpectedType() {
        runTest("compiler/testData/diagnostics/tests/inference/checkNotNullWithNullableExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("coerceFunctionLiteralToSuspend.kt")
      public void testCoerceFunctionLiteralToSuspend() {
        runTest("compiler/testData/diagnostics/tests/inference/coerceFunctionLiteralToSuspend.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("commonSuperTypeOfErrorTypes.kt")
      public void testCommonSuperTypeOfErrorTypes() {
        runTest("compiler/testData/diagnostics/tests/inference/commonSuperTypeOfErrorTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("commonSuperTypeOfTypesWithErrorSupertypes.kt")
      public void testCommonSuperTypeOfTypesWithErrorSupertypes() {
        runTest("compiler/testData/diagnostics/tests/inference/commonSuperTypeOfTypesWithErrorSupertypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("completeInferenceIfManyFailed.kt")
      public void testCompleteInferenceIfManyFailed() {
        runTest("compiler/testData/diagnostics/tests/inference/completeInferenceIfManyFailed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("completionOfMultipleLambdas.kt")
      public void testCompletionOfMultipleLambdas() {
        runTest("compiler/testData/diagnostics/tests/inference/completionOfMultipleLambdas.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("complexInferenceOnParentizedExpression.kt")
      public void testComplexInferenceOnParentizedExpression() {
        runTest("compiler/testData/diagnostics/tests/inference/complexInferenceOnParentizedExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("conflictingSubstitutions.kt")
      public void testConflictingSubstitutions() {
        runTest("compiler/testData/diagnostics/tests/inference/conflictingSubstitutions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cstFromErrorAndNonErrorTypes.kt")
      public void testCstFromErrorAndNonErrorTypes() {
        runTest("compiler/testData/diagnostics/tests/inference/cstFromErrorAndNonErrorTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dependOnExpectedType.kt")
      public void testDependOnExpectedType() {
        runTest("compiler/testData/diagnostics/tests/inference/dependOnExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dependantOnVariance.kt")
      public void testDependantOnVariance() {
        runTest("compiler/testData/diagnostics/tests/inference/dependantOnVariance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dependantOnVarianceNullable.kt")
      public void testDependantOnVarianceNullable() {
        runTest("compiler/testData/diagnostics/tests/inference/dependantOnVarianceNullable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("discardInapplicableCandidateWithNotSatisfyingSelfType.kt")
      public void testDiscardInapplicableCandidateWithNotSatisfyingSelfType() {
        runTest("compiler/testData/diagnostics/tests/inference/discardInapplicableCandidateWithNotSatisfyingSelfType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dontThrowEmptyIntersectionException.kt")
      public void testDontThrowEmptyIntersectionException() {
        runTest("compiler/testData/diagnostics/tests/inference/dontThrowEmptyIntersectionException.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("elvisInsideWhen.kt")
      public void testElvisInsideWhen() {
        runTest("compiler/testData/diagnostics/tests/inference/elvisInsideWhen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("equalitySubstitutionInsideNonInvariantType.kt")
      public void testEqualitySubstitutionInsideNonInvariantType() {
        runTest("compiler/testData/diagnostics/tests/inference/equalitySubstitutionInsideNonInvariantType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("errorsOnImplicitInvokeInSimpleCall.kt")
      public void testErrorsOnImplicitInvokeInSimpleCall() {
        runTest("compiler/testData/diagnostics/tests/inference/errorsOnImplicitInvokeInSimpleCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("exclExclInference.kt")
      public void testExclExclInference() {
        runTest("compiler/testData/diagnostics/tests/inference/exclExclInference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectedTypeAdditionalTest.kt")
      public void testExpectedTypeAdditionalTest() {
        runTest("compiler/testData/diagnostics/tests/inference/expectedTypeAdditionalTest.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectedTypeDoubleReceiver.kt")
      public void testExpectedTypeDoubleReceiver() {
        runTest("compiler/testData/diagnostics/tests/inference/expectedTypeDoubleReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectedTypeFromCast.kt")
      public void testExpectedTypeFromCast() {
        runTest("compiler/testData/diagnostics/tests/inference/expectedTypeFromCast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectedTypeFromCastComplexExpression.kt")
      public void testExpectedTypeFromCastComplexExpression() {
        runTest("compiler/testData/diagnostics/tests/inference/expectedTypeFromCastComplexExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectedTypeFromCastParenthesized.kt")
      public void testExpectedTypeFromCastParenthesized() {
        runTest("compiler/testData/diagnostics/tests/inference/expectedTypeFromCastParenthesized.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectedTypeWithGenerics.kt")
      public void testExpectedTypeWithGenerics() {
        runTest("compiler/testData/diagnostics/tests/inference/expectedTypeWithGenerics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectedTypeWithGenericsSafeCalls.kt")
      public void testExpectedTypeWithGenericsSafeCalls() {
        runTest("compiler/testData/diagnostics/tests/inference/expectedTypeWithGenericsSafeCalls.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extensionLambdasAndArrow.kt")
      public void testExtensionLambdasAndArrow() {
        runTest("compiler/testData/diagnostics/tests/inference/extensionLambdasAndArrow.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("findViewById.kt")
      public void testFindViewById() {
        runTest("compiler/testData/diagnostics/tests/inference/findViewById.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fixVariableToNothing.kt")
      public void testFixVariableToNothing() {
        runTest("compiler/testData/diagnostics/tests/inference/fixVariableToNothing.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fixationOrderForProperConstraints.kt")
      public void testFixationOrderForProperConstraints() {
        runTest("compiler/testData/diagnostics/tests/inference/fixationOrderForProperConstraints.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("flexibleTypesAsUpperBound.kt")
      public void testFlexibleTypesAsUpperBound() {
        runTest("compiler/testData/diagnostics/tests/inference/flexibleTypesAsUpperBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionPlaceholderError.kt")
      public void testFunctionPlaceholderError() {
        runTest("compiler/testData/diagnostics/tests/inference/functionPlaceholderError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericAssignmentOperator.kt")
      public void testGenericAssignmentOperator() {
        runTest("compiler/testData/diagnostics/tests/inference/genericAssignmentOperator.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericCallInThrow.kt")
      public void testGenericCallInThrow() {
        runTest("compiler/testData/diagnostics/tests/inference/genericCallInThrow.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericOnJavaWildcardBoundedByRaw.kt")
      public void testGenericOnJavaWildcardBoundedByRaw() {
        runTest("compiler/testData/diagnostics/tests/inference/genericOnJavaWildcardBoundedByRaw.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("hasErrorInConstrainingTypes.kt")
      public void testHasErrorInConstrainingTypes() {
        runTest("compiler/testData/diagnostics/tests/inference/hasErrorInConstrainingTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifWithDependentBranches.kt")
      public void testIfWithDependentBranches() {
        runTest("compiler/testData/diagnostics/tests/inference/ifWithDependentBranches.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("illegalUnderscoredTypeArgument.kt")
      public void testIllegalUnderscoredTypeArgument() {
        runTest("compiler/testData/diagnostics/tests/inference/illegalUnderscoredTypeArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("immutableArrayList.kt")
      public void testImmutableArrayList() {
        runTest("compiler/testData/diagnostics/tests/inference/immutableArrayList.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitInvokeExtensionWithFunctionalArgument.kt")
      public void testImplicitInvokeExtensionWithFunctionalArgument() {
        runTest("compiler/testData/diagnostics/tests/inference/implicitInvokeExtensionWithFunctionalArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitInvokeInCompanionObjectWithFunctionalArgument.kt")
      public void testImplicitInvokeInCompanionObjectWithFunctionalArgument() {
        runTest("compiler/testData/diagnostics/tests/inference/implicitInvokeInCompanionObjectWithFunctionalArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitInvokeInObjectWithFunctionalArgument.kt")
      public void testImplicitInvokeInObjectWithFunctionalArgument() {
        runTest("compiler/testData/diagnostics/tests/inference/implicitInvokeInObjectWithFunctionalArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitInvokeWithFunctionLiteralArgument.kt")
      public void testImplicitInvokeWithFunctionLiteralArgument() {
        runTest("compiler/testData/diagnostics/tests/inference/implicitInvokeWithFunctionLiteralArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inferInFunctionLiterals.kt")
      public void testInferInFunctionLiterals() {
        runTest("compiler/testData/diagnostics/tests/inference/inferInFunctionLiterals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inferInFunctionLiteralsWithReturn.kt")
      public void testInferInFunctionLiteralsWithReturn() {
        runTest("compiler/testData/diagnostics/tests/inference/inferInFunctionLiteralsWithReturn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inferenceForkRegression.kt")
      public void testInferenceForkRegression() {
        runTest("compiler/testData/diagnostics/tests/inference/inferenceForkRegression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inferenceForkRegressionSimple.kt")
      public void testInferenceForkRegressionSimple() {
        runTest("compiler/testData/diagnostics/tests/inference/inferenceForkRegressionSimple.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionTypeMultipleBoundsAsReceiver.kt")
      public void testIntersectionTypeMultipleBoundsAsReceiver() {
        runTest("compiler/testData/diagnostics/tests/inference/intersectionTypeMultipleBoundsAsReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionTypeOnWhenCall.kt")
      public void testIntersectionTypeOnWhenCall() {
        runTest("compiler/testData/diagnostics/tests/inference/intersectionTypeOnWhenCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionTypesWithContravariantTypes.kt")
      public void testIntersectionTypesWithContravariantTypes() {
        runTest("compiler/testData/diagnostics/tests/inference/intersectionTypesWithContravariantTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionWithEnum.kt")
      public void testIntersectionWithEnum() {
        runTest("compiler/testData/diagnostics/tests/inference/intersectionWithEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invokeLambdaAsFunction.kt")
      public void testInvokeLambdaAsFunction() {
        runTest("compiler/testData/diagnostics/tests/inference/invokeLambdaAsFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("knownTypeParameters.kt")
      public void testKnownTypeParameters() {
        runTest("compiler/testData/diagnostics/tests/inference/knownTypeParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt11963.kt")
      public void testKt11963() {
        runTest("compiler/testData/diagnostics/tests/inference/kt11963.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt12399.kt")
      public void testKt12399() {
        runTest("compiler/testData/diagnostics/tests/inference/kt12399.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1293.kt")
      public void testKt1293() {
        runTest("compiler/testData/diagnostics/tests/inference/kt1293.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt28598.kt")
      public void testKt28598() {
        runTest("compiler/testData/diagnostics/tests/inference/kt28598.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt28654.kt")
      public void testKt28654() {
        runTest("compiler/testData/diagnostics/tests/inference/kt28654.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt30405.kt")
      public void testKt30405() {
        runTest("compiler/testData/diagnostics/tests/inference/kt30405.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3184.kt")
      public void testKt3184() {
        runTest("compiler/testData/diagnostics/tests/inference/kt3184.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32196.kt")
      public void testKt32196() {
        runTest("compiler/testData/diagnostics/tests/inference/kt32196.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32415.kt")
      public void testKt32415() {
        runTest("compiler/testData/diagnostics/tests/inference/kt32415.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32434.kt")
      public void testKt32434() {
        runTest("compiler/testData/diagnostics/tests/inference/kt32434.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32462.kt")
      public void testKt32462() {
        runTest("compiler/testData/diagnostics/tests/inference/kt32462.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt33263.kt")
      public void testKt33263() {
        runTest("compiler/testData/diagnostics/tests/inference/kt33263.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt35702.kt")
      public void testKt35702() {
        runTest("compiler/testData/diagnostics/tests/inference/kt35702.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt36044.kt")
      public void testKt36044() {
        runTest("compiler/testData/diagnostics/tests/inference/kt36044.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt36819.kt")
      public void testKt36819() {
        runTest("compiler/testData/diagnostics/tests/inference/kt36819.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt37853.kt")
      public void testKt37853() {
        runTest("compiler/testData/diagnostics/tests/inference/kt37853.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt39220.kt")
      public void testKt39220() {
        runTest("compiler/testData/diagnostics/tests/inference/kt39220.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt40396.kt")
      public void testKt40396() {
        runTest("compiler/testData/diagnostics/tests/inference/kt40396.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt46515.kt")
      public void testKt46515() {
        runTest("compiler/testData/diagnostics/tests/inference/kt46515.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt47316.kt")
      public void testKt47316() {
        runTest("compiler/testData/diagnostics/tests/inference/kt47316.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt49658.kt")
      public void testKt49658() {
        runTest("compiler/testData/diagnostics/tests/inference/kt49658.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt49658Strict.kt")
      public void testKt49658Strict() {
        runTest("compiler/testData/diagnostics/tests/inference/kt49658Strict.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt49961.kt")
      public void testKt49961() {
        runTest("compiler/testData/diagnostics/tests/inference/kt49961.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt50232a.kt")
      public void testKt50232a() {
        runTest("compiler/testData/diagnostics/tests/inference/kt50232a.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt53124.kt")
      public void testKt53124() {
        runTest("compiler/testData/diagnostics/tests/inference/kt53124.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt6175.kt")
      public void testKt6175() {
        runTest("compiler/testData/diagnostics/tests/inference/kt6175.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt619.kt")
      public void testKt619() {
        runTest("compiler/testData/diagnostics/tests/inference/kt619.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt62609.kt")
      public void testKt62609() {
        runTest("compiler/testData/diagnostics/tests/inference/kt62609.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt63577.kt")
      public void testKt63577() {
        runTest("compiler/testData/diagnostics/tests/inference/kt63577.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt63982.kt")
      public void testKt63982() {
        runTest("compiler/testData/diagnostics/tests/inference/kt63982.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaArgumentWithLabel.kt")
      public void testLambdaArgumentWithLabel() {
        runTest("compiler/testData/diagnostics/tests/inference/lambdaArgumentWithLabel.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaInValInitializerWithAnonymousFunctions.kt")
      public void testLambdaInValInitializerWithAnonymousFunctions() {
        runTest("compiler/testData/diagnostics/tests/inference/lambdaInValInitializerWithAnonymousFunctions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaParameterTypeInElvis.kt")
      public void testLambdaParameterTypeInElvis() {
        runTest("compiler/testData/diagnostics/tests/inference/lambdaParameterTypeInElvis.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("listConstructor.kt")
      public void testListConstructor() {
        runTest("compiler/testData/diagnostics/tests/inference/listConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localFunctionInsideIfBlock.kt")
      public void testLocalFunctionInsideIfBlock() {
        runTest("compiler/testData/diagnostics/tests/inference/localFunctionInsideIfBlock.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("mapFunction.kt")
      public void testMapFunction() {
        runTest("compiler/testData/diagnostics/tests/inference/mapFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("mostSpecificAfterInference.kt")
      public void testMostSpecificAfterInference() {
        runTest("compiler/testData/diagnostics/tests/inference/mostSpecificAfterInference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedIfWithExpectedType.kt")
      public void testNestedIfWithExpectedType() {
        runTest("compiler/testData/diagnostics/tests/inference/nestedIfWithExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoInferenceFromDeclaredBounds.kt")
      public void testNoInferenceFromDeclaredBounds() {
        runTest("compiler/testData/diagnostics/tests/inference/NoInferenceFromDeclaredBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noInformationForParameter.kt")
      public void testNoInformationForParameter() {
        runTest("compiler/testData/diagnostics/tests/inference/noInformationForParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonFunctionalExpectedTypeForLambdaArgument.kt")
      public void testNonFunctionalExpectedTypeForLambdaArgument() {
        runTest("compiler/testData/diagnostics/tests/inference/nonFunctionalExpectedTypeForLambdaArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notFixedTopLevelLambdaParameter.kt")
      public void testNotFixedTopLevelLambdaParameter() {
        runTest("compiler/testData/diagnostics/tests/inference/notFixedTopLevelLambdaParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nothingVsParameterBound.kt")
      public void testNothingVsParameterBound() {
        runTest("compiler/testData/diagnostics/tests/inference/nothingVsParameterBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableArgumentForDnn.kt")
      public void testNullableArgumentForDnn() {
        runTest("compiler/testData/diagnostics/tests/inference/nullableArgumentForDnn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableTypeArgumentWithNotNullUpperBound.kt")
      public void testNullableTypeArgumentWithNotNullUpperBound() {
        runTest("compiler/testData/diagnostics/tests/inference/nullableTypeArgumentWithNotNullUpperBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableUpperBound.kt")
      public void testNullableUpperBound() {
        runTest("compiler/testData/diagnostics/tests/inference/nullableUpperBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("onlyInputTypesWithMultilevelIncorporation.kt")
      public void testOnlyInputTypesWithMultilevelIncorporation() {
        runTest("compiler/testData/diagnostics/tests/inference/onlyInputTypesWithMultilevelIncorporation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("opposite.kt")
      public void testOpposite() {
        runTest("compiler/testData/diagnostics/tests/inference/opposite.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("possibleCycleOnConstraints.kt")
      public void testPossibleCycleOnConstraints() {
        runTest("compiler/testData/diagnostics/tests/inference/possibleCycleOnConstraints.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("receiverTypeMismatch_withProper.kt")
      public void testReceiverTypeMismatch_withProper() {
        runTest("compiler/testData/diagnostics/tests/inference/receiverTypeMismatch_withProper.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("receiverTypeMismatch_withoutProper.kt")
      public void testReceiverTypeMismatch_withoutProper() {
        runTest("compiler/testData/diagnostics/tests/inference/receiverTypeMismatch_withoutProper.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursiveGenericExtensionReceiver.kt")
      public void testRecursiveGenericExtensionReceiver() {
        runTest("compiler/testData/diagnostics/tests/inference/recursiveGenericExtensionReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reportAboutUnresolvedReferenceAsUnresolved.kt")
      public void testReportAboutUnresolvedReferenceAsUnresolved() {
        runTest("compiler/testData/diagnostics/tests/inference/reportAboutUnresolvedReferenceAsUnresolved.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reportNotEnoughTypeInformationErrorsOnBlockExpressions.kt")
      public void testReportNotEnoughTypeInformationErrorsOnBlockExpressions() {
        runTest("compiler/testData/diagnostics/tests/inference/reportNotEnoughTypeInformationErrorsOnBlockExpressions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveWithUnknownLambdaParameterType.kt")
      public void testResolveWithUnknownLambdaParameterType() {
        runTest("compiler/testData/diagnostics/tests/inference/resolveWithUnknownLambdaParameterType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("returningLambdaInSuspendContext.kt")
      public void testReturningLambdaInSuspendContext() {
        runTest("compiler/testData/diagnostics/tests/inference/returningLambdaInSuspendContext.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("selectOfLambdaWithExtension.kt")
      public void testSelectOfLambdaWithExtension() {
        runTest("compiler/testData/diagnostics/tests/inference/selectOfLambdaWithExtension.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("selectOfLambdaWithExtensionDisabled.kt")
      public void testSelectOfLambdaWithExtensionDisabled() {
        runTest("compiler/testData/diagnostics/tests/inference/selectOfLambdaWithExtensionDisabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("selectOfLambdaWithExtensionEnabled.kt")
      public void testSelectOfLambdaWithExtensionEnabled() {
        runTest("compiler/testData/diagnostics/tests/inference/selectOfLambdaWithExtensionEnabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastFork.kt")
      public void testSmartCastFork() {
        runTest("compiler/testData/diagnostics/tests/inference/smartCastFork.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastForkForExpectType.kt")
      public void testSmartCastForkForExpectType() {
        runTest("compiler/testData/diagnostics/tests/inference/smartCastForkForExpectType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastForkForExpectedTypeNested.kt")
      public void testSmartCastForkForExpectedTypeNested() {
        runTest("compiler/testData/diagnostics/tests/inference/smartCastForkForExpectedTypeNested.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("specialCallsWithCallableReferences.kt")
      public void testSpecialCallsWithCallableReferences() {
        runTest("compiler/testData/diagnostics/tests/inference/specialCallsWithCallableReferences.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("specialCallsWithLambdas.kt")
      public void testSpecialCallsWithLambdas() {
        runTest("compiler/testData/diagnostics/tests/inference/specialCallsWithLambdas.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("starApproximation.kt")
      public void testStarApproximation() {
        runTest("compiler/testData/diagnostics/tests/inference/starApproximation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("starApproximationBangBang.kt")
      public void testStarApproximationBangBang() {
        runTest("compiler/testData/diagnostics/tests/inference/starApproximationBangBang.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("starApproximationFlexible.kt")
      public void testStarApproximationFlexible() {
        runTest("compiler/testData/diagnostics/tests/inference/starApproximationFlexible.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("starApproximationFromDifferentTypeParameter.kt")
      public void testStarApproximationFromDifferentTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/inference/starApproximationFromDifferentTypeParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("stubTypeForSubtyping.kt")
      public void testStubTypeForSubtyping() {
        runTest("compiler/testData/diagnostics/tests/inference/stubTypeForSubtyping.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("tooEagerSmartcast.kt")
      public void testTooEagerSmartcast() {
        runTest("compiler/testData/diagnostics/tests/inference/tooEagerSmartcast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("topLevelIntersection.kt")
      public void testTopLevelIntersection() {
        runTest("compiler/testData/diagnostics/tests/inference/topLevelIntersection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("tryNumberLowerBoundsBeforeUpperBounds.kt")
      public void testTryNumberLowerBoundsBeforeUpperBounds() {
        runTest("compiler/testData/diagnostics/tests/inference/tryNumberLowerBoundsBeforeUpperBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeConstructorMismatch.kt")
      public void testTypeConstructorMismatch() {
        runTest("compiler/testData/diagnostics/tests/inference/typeConstructorMismatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeInferenceExpectedTypeMismatch.kt")
      public void testTypeInferenceExpectedTypeMismatch() {
        runTest("compiler/testData/diagnostics/tests/inference/typeInferenceExpectedTypeMismatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParameterInConstructor.kt")
      public void testTypeParameterInConstructor() {
        runTest("compiler/testData/diagnostics/tests/inference/typeParameterInConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("underscoredTypeArgument.kt")
      public void testUnderscoredTypeArgument() {
        runTest("compiler/testData/diagnostics/tests/inference/underscoredTypeArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("underscoredTypeInForbiddenPositions.kt")
      public void testUnderscoredTypeInForbiddenPositions() {
        runTest("compiler/testData/diagnostics/tests/inference/underscoredTypeInForbiddenPositions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("UnitUpperboundLambdaReturnType.kt")
      public void testUnitUpperboundLambdaReturnType() {
        runTest("compiler/testData/diagnostics/tests/inference/UnitUpperboundLambdaReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unsoundness1.kt")
      public void testUnsoundness1() {
        runTest("compiler/testData/diagnostics/tests/inference/unsoundness1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unsoundness2.kt")
      public void testUnsoundness2() {
        runTest("compiler/testData/diagnostics/tests/inference/unsoundness2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useFunctionLiteralsToInferType.kt")
      public void testUseFunctionLiteralsToInferType() {
        runTest("compiler/testData/diagnostics/tests/inference/useFunctionLiteralsToInferType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("violatingUpperBoundForSelfType.kt")
      public void testViolatingUpperBoundForSelfType() {
        runTest("compiler/testData/diagnostics/tests/inference/violatingUpperBoundForSelfType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("violatingUpperBoundForSelfTypeError.kt")
      public void testViolatingUpperBoundForSelfTypeError() {
        runTest("compiler/testData/diagnostics/tests/inference/violatingUpperBoundForSelfTypeError.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/builderInference")
      @TestDataPath("$PROJECT_ROOT")
      public class BuilderInference {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInBuilderInference() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/builderInference"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("assignmentUsingIncompletePCLACall.kt")
        public void testAssignmentUsingIncompletePCLACall() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/assignmentUsingIncompletePCLACall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("bothOuterAndProperConstraints.kt")
        public void testBothOuterAndProperConstraints() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/bothOuterAndProperConstraints.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("bothReceiverAndValueParameterNotFixed.kt")
        public void testBothReceiverAndValueParameterNotFixed() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/bothReceiverAndValueParameterNotFixed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("builderInferenceAnnotationInLambdaWithTVExpectedType.kt")
        public void testBuilderInferenceAnnotationInLambdaWithTVExpectedType() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/builderInferenceAnnotationInLambdaWithTVExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("builderPassedAsNamedArgument.kt")
        public void testBuilderPassedAsNamedArgument() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/builderPassedAsNamedArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferenceAsArgumentForTransaction.kt")
        public void testCallableReferenceAsArgumentForTransaction() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/callableReferenceAsArgumentForTransaction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferenceInsideInvokeCall.kt")
        public void testCallableReferenceInsideInvokeCall() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/callableReferenceInsideInvokeCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changingResolveIfDontUseBuilderInference.kt")
        public void testChangingResolveIfDontUseBuilderInference() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/changingResolveIfDontUseBuilderInference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("considerContractsOfIncompleteCalls.kt")
        public void testConsiderContractsOfIncompleteCalls() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/considerContractsOfIncompleteCalls.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("elvisWithReturnInLastStatementOfLastLambda.kt")
        public void testElvisWithReturnInLastStatementOfLastLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/elvisWithReturnInLastStatementOfLastLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("equalityChecksOnIntegerTypes.kt")
        public void testEqualityChecksOnIntegerTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/equalityChecksOnIntegerTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("equalityChecksOnIntegerTypesProgressive.kt")
        public void testEqualityChecksOnIntegerTypesProgressive() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/equalityChecksOnIntegerTypesProgressive.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("errorOnStubReceiver.kt")
        public void testErrorOnStubReceiver() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/errorOnStubReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fixingDependentVariablesForReceivers.kt")
        public void testFixingDependentVariablesForReceivers() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/fixingDependentVariablesForReceivers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fixingDependentVariablesForReceiversInitial.kt")
        public void testFixingDependentVariablesForReceiversInitial() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/fixingDependentVariablesForReceiversInitial.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fixingTVForLambadaWithShallowDependencyToOuter.kt")
        public void testFixingTVForLambadaWithShallowDependencyToOuter() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/fixingTVForLambadaWithShallowDependencyToOuter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fixingTVForLambadaWithShallowDependencyToOuter2.kt")
        public void testFixingTVForLambadaWithShallowDependencyToOuter2() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/fixingTVForLambadaWithShallowDependencyToOuter2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fixingTVForLambadaWithShallowDependencyToOuter3.kt")
        public void testFixingTVForLambadaWithShallowDependencyToOuter3() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/fixingTVForLambadaWithShallowDependencyToOuter3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("incompleteCallInReturnArgumentsWithProperExpectType.kt")
        public void testIncompleteCallInReturnArgumentsWithProperExpectType() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/incompleteCallInReturnArgumentsWithProperExpectType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerTvFixationFromLowerConstraints.kt")
        public void testInnerTvFixationFromLowerConstraints() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/innerTvFixationFromLowerConstraints.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invalidateKeys.kt")
        public void testInvalidateKeys() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/invalidateKeys.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeExtensionReceiverWithNotFixedVariables.kt")
        public void testInvokeExtensionReceiverWithNotFixedVariables() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/invokeExtensionReceiverWithNotFixedVariables.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeExtensionReceiverWithNotFixedVariablesInitial.kt")
        public void testInvokeExtensionReceiverWithNotFixedVariablesInitial() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/invokeExtensionReceiverWithNotFixedVariablesInitial.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt47744.kt")
        public void testKt47744() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt47744.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt47986Default.kt")
        public void testKt47986Default() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt47986Default.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt47986Disabled.kt")
        public void testKt47986Disabled() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt47986Disabled.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt47986Enabled.kt")
        public void testKt47986Enabled() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt47986Enabled.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt47986_2.kt")
        public void testKt47986_2() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt47986_2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt47986_3.kt")
        public void testKt47986_3() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt47986_3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt47986_4.kt")
        public void testKt47986_4() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt47986_4.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt48031.kt")
        public void testKt48031() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt48031.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt49285.kt")
        public void testKt49285() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt49285.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt49828.kt")
        public void testKt49828() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt49828.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt49829.kt")
        public void testKt49829() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt49829.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt49829_noCast.kt")
        public void testKt49829_noCast() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt49829_noCast.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt50498.kt")
        public void testKt50498() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt50498.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt50989.kt")
        public void testKt50989() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt50989.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt51148.kt")
        public void testKt51148() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt51148.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt51464.kt")
        public void testKt51464() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt51464.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt53422.kt")
        public void testKt53422() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt53422.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt53639.kt")
        public void testKt53639() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/kt53639.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("labaledCall.kt")
        public void testLabaledCall() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/labaledCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaParameterForBareType.kt")
        public void testLambdaParameterForBareType() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/lambdaParameterForBareType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaParameterForBareTypeAs.kt")
        public void testLambdaParameterForBareTypeAs() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/lambdaParameterForBareTypeAs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaParameterForBareTypeEarlyFixationAffectsBehavior.kt")
        public void testLambdaParameterForBareTypeEarlyFixationAffectsBehavior() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/lambdaParameterForBareTypeEarlyFixationAffectsBehavior.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaParameterForBareTypeOnOuterTypeVariable.kt")
        public void testLambdaParameterForBareTypeOnOuterTypeVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/lambdaParameterForBareTypeOnOuterTypeVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaParameterForNonBareType.kt")
        public void testLambdaParameterForNonBareType() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/lambdaParameterForNonBareType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaParameterTypeFixation.kt")
        public void testLambdaParameterTypeFixation() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/lambdaParameterTypeFixation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lastLambdaStatementWithFixedVariables.kt")
        public void testLastLambdaStatementWithFixedVariables() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/lastLambdaStatementWithFixedVariables.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("manyArgsDifferentYields.kt")
        public void testManyArgsDifferentYields() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/manyArgsDifferentYields.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("memberScopeOfCapturedTypeForPostponedCall.kt")
        public void testMemberScopeOfCapturedTypeForPostponedCall() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/memberScopeOfCapturedTypeForPostponedCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multiLambdaRestriction.kt")
        public void testMultiLambdaRestriction() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/multiLambdaRestriction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multiLambdaRestrictionDisabled.kt")
        public void testMultiLambdaRestrictionDisabled() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/multiLambdaRestrictionDisabled.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedLambdaWithLastLambdaContainingCall.kt")
        public void testNestedLambdaWithLastLambdaContainingCall() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/nestedLambdaWithLastLambdaContainingCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedLambdaWithNonLastYieldStatement.kt")
        public void testNestedLambdaWithNonLastYieldStatement() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/nestedLambdaWithNonLastYieldStatement.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedLambdasWithOverloadResolutionByReturnType.kt")
        public void testNestedLambdasWithOverloadResolutionByReturnType() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/nestedLambdasWithOverloadResolutionByReturnType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("newTvFromLamdaAreNotCountedAsProper.kt")
        public void testNewTvFromLamdaAreNotCountedAsProper() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/newTvFromLamdaAreNotCountedAsProper.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noBuilderInferenceRestrictionReceiverInconsistency.kt")
        public void testNoBuilderInferenceRestrictionReceiverInconsistency() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/noBuilderInferenceRestrictionReceiverInconsistency.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloadResolutionByLambdaReturnTypeInsideBI.kt")
        public void testOverloadResolutionByLambdaReturnTypeInsideBI() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/overloadResolutionByLambdaReturnTypeInsideBI.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyInvokeInsidePCLALambda.kt")
        public void testPropertyInvokeInsidePCLALambda() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/propertyInvokeInsidePCLALambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertySubstitution.kt")
        public void testPropertySubstitution() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/propertySubstitution.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleLambdaInCallWithAnotherLambdaWithBuilderInference.kt")
        public void testSimpleLambdaInCallWithAnotherLambdaWithBuilderInference() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/simpleLambdaInCallWithAnotherLambdaWithBuilderInference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("singleBranchConditionLastStatementInLambda.kt")
        public void testSingleBranchConditionLastStatementInLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/singleBranchConditionLastStatementInLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("skipedUnresolvedInBuilderInferenceWithStubReceiverType.kt")
        public void testSkipedUnresolvedInBuilderInferenceWithStubReceiverType() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/skipedUnresolvedInBuilderInferenceWithStubReceiverType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCastOnBuilderController.kt")
        public void testSmartCastOnBuilderController() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/smartCastOnBuilderController.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("specialCallsWithCallableReferences.kt")
        public void testSpecialCallsWithCallableReferences() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/specialCallsWithCallableReferences.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("specialCallsWithCallableReferencesDontCareTypeInBlockExression.kt")
        public void testSpecialCallsWithCallableReferencesDontCareTypeInBlockExression() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/specialCallsWithCallableReferencesDontCareTypeInBlockExression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("specialCallsWithCallableReferencesDontRewriteAtSlice.kt")
        public void testSpecialCallsWithCallableReferencesDontRewriteAtSlice() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/specialCallsWithCallableReferencesDontRewriteAtSlice.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("specialCallsWithCallableReferencesErrorType.kt")
        public void testSpecialCallsWithCallableReferencesErrorType() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/specialCallsWithCallableReferencesErrorType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("specialCallsWithCallableReferencesErrorTypeUnrestricted.kt")
        public void testSpecialCallsWithCallableReferencesErrorTypeUnrestricted() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/specialCallsWithCallableReferencesErrorTypeUnrestricted.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("specialCallsWithCallableReferencesNonStrictOnlyInputTypes.kt")
        public void testSpecialCallsWithCallableReferencesNonStrictOnlyInputTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/specialCallsWithCallableReferencesNonStrictOnlyInputTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("specialCallsWithCallableReferencesUnrestricted.kt")
        public void testSpecialCallsWithCallableReferencesUnrestricted() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/specialCallsWithCallableReferencesUnrestricted.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("specialCallsWithLambdas.kt")
        public void testSpecialCallsWithLambdas() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/specialCallsWithLambdas.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substitutedSyntheticPropertyUsage.kt")
        public void testSubstitutedSyntheticPropertyUsage() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/substitutedSyntheticPropertyUsage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("theSimplestBuilder.kt")
        public void testTheSimplestBuilder() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/theSimplestBuilder.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whenWithPropertyHavingSomePCLACallsWithinInitializer.kt")
        public void testWhenWithPropertyHavingSomePCLACallsWithinInitializer() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/whenWithPropertyHavingSomePCLACallsWithinInitializer.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withoutAnnotationDisabledFeature.kt")
        public void testWithoutAnnotationDisabledFeature() {
          runTest("compiler/testData/diagnostics/tests/inference/builderInference/withoutAnnotationDisabledFeature.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/builderInference/constraints")
        @TestDataPath("$PROJECT_ROOT")
        public class Constraints {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInConstraints() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/builderInference/constraints"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("violating.kt")
          public void testViolating() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/constraints/violating.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes")
        @TestDataPath("$PROJECT_ROOT")
        public class StubTypes {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInStubTypes() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("capturedTypes.kt")
          public void testCapturedTypes() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/capturedTypes.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("capturedTypesId.kt")
          public void testCapturedTypesId() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/capturedTypesId.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("commonSuperType.kt")
          public void testCommonSuperType() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/commonSuperType.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("commonSuperTypeContravariant.kt")
          public void testCommonSuperTypeContravariant() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/commonSuperTypeContravariant.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("commonSuperTypeCovariant.kt")
          public void testCommonSuperTypeCovariant() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/commonSuperTypeCovariant.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("commonSuperTypeInvariant.kt")
          public void testCommonSuperTypeInvariant() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/commonSuperTypeInvariant.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("commonSuperTypeNullable.kt")
          public void testCommonSuperTypeNullable() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/commonSuperTypeNullable.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("intersect.kt")
          public void testIntersect() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/intersect.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("memberScope.kt")
          public void testMemberScope() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/memberScope.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("nullability.kt")
          public void testNullability() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/nullability.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("renderingStubTypes.kt")
          public void testRenderingStubTypes() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/renderingStubTypes.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("simpleIntersection.kt")
          public void testSimpleIntersection() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/simpleIntersection.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("stubTypeReceiverRestriction.kt")
          public void testStubTypeReceiverRestriction() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/stubTypeReceiverRestriction.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("stubTypeReceiverRestrictionDisabled.kt")
          public void testStubTypeReceiverRestrictionDisabled() {
            runTest("compiler/testData/diagnostics/tests/inference/builderInference/stubTypes/stubTypeReceiverRestrictionDisabled.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/callableReferences")
      @TestDataPath("$PROJECT_ROOT")
      public class CallableReferences {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCallableReferences() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/callableReferences"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conversionLastStatementInLambda.kt")
        public void testConversionLastStatementInLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/callableReferences/conversionLastStatementInLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conversionLastStatementInLambdaGeneric.kt")
        public void testConversionLastStatementInLambdaGeneric() {
          runTest("compiler/testData/diagnostics/tests/inference/callableReferences/conversionLastStatementInLambdaGeneric.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt55931.kt")
        public void testKt55931() {
          runTest("compiler/testData/diagnostics/tests/inference/callableReferences/kt55931.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt56227.kt")
        public void testKt56227() {
          runTest("compiler/testData/diagnostics/tests/inference/callableReferences/kt56227.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class CapturedTypes {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCapturedTypes() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/capturedTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("approximateBeforeFixation.kt")
        public void testApproximateBeforeFixation() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/approximateBeforeFixation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("approximateContravariantCapturedTypes.kt")
        public void testApproximateContravariantCapturedTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/approximateContravariantCapturedTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("approximationLeavesNonTrivialLowerBound.kt")
        public void testApproximationLeavesNonTrivialLowerBound() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/approximationLeavesNonTrivialLowerBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("avoidCreatingUselessCapturedTypes.kt")
        public void testAvoidCreatingUselessCapturedTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/avoidCreatingUselessCapturedTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("cannotCaptureInProjection.kt")
        public void testCannotCaptureInProjection() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/cannotCaptureInProjection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("captureForNullableTypes.kt")
        public void testCaptureForNullableTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureForNullableTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("captureForPlatformTypes.kt")
        public void testCaptureForPlatformTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureForPlatformTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("captureFromNullableTypeInScope.kt")
        public void testCaptureFromNullableTypeInScope() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromNullableTypeInScope.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("captureFromNullableTypeInScopeAny.kt")
        public void testCaptureFromNullableTypeInScopeAny() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromNullableTypeInScopeAny.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("captureFromNullableTypeVariable.kt")
        public void testCaptureFromNullableTypeVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromNullableTypeVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("captureFromSubtyping.kt")
        public void testCaptureFromSubtyping() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromSubtyping.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("captureFromTypeParameterUpperBound.kt")
        public void testCaptureFromTypeParameterUpperBound() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromTypeParameterUpperBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("captureTypeOnlyOnTopLevel.kt")
        public void testCaptureTypeOnlyOnTopLevel() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureTypeOnlyOnTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedFlexibleIntersectionTypesWithDifferentBounds.kt")
        public void testCapturedFlexibleIntersectionTypesWithDifferentBounds() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedFlexibleIntersectionTypesWithDifferentBounds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedFlexibleIntersectionTypesWithDifferentConstructors.kt")
        public void testCapturedFlexibleIntersectionTypesWithDifferentConstructors() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedFlexibleIntersectionTypesWithDifferentConstructors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedForIncorporationEscapes.kt")
        public void testCapturedForIncorporationEscapes() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedForIncorporationEscapes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedInTypeInference.kt")
        public void testCapturedInTypeInference() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedInTypeInference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedType.kt")
        public void testCapturedType() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedTypeAndApproximation.kt")
        public void testCapturedTypeAndApproximation() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypeAndApproximation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedTypeSubstitutedIntoOppositeProjection.kt")
        public void testCapturedTypeSubstitutedIntoOppositeProjection() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypeSubstitutedIntoOppositeProjection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedTypeWithInnerTypealias.kt")
        public void testCapturedTypeWithInnerTypealias() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypeWithInnerTypealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedTypeWithTypeVariableSubtyping.kt")
        public void testCapturedTypeWithTypeVariableSubtyping() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypeWithTypeVariableSubtyping.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedTypesSubstitutionIntoAbbreviation.kt")
        public void testCapturedTypesSubstitutionIntoAbbreviation() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypesSubstitutionIntoAbbreviation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedUpperBound.kt")
        public void testCapturedUpperBound() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedUpperBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturingFromArgumentOfFlexibleType.kt")
        public void testCapturingFromArgumentOfFlexibleType() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturingFromArgumentOfFlexibleType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturingOfDnn.kt")
        public void testCapturingOfDnn() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturingOfDnn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentCapturedTypes.kt")
        public void testDifferentCapturedTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/differentCapturedTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dontCheckNewCapturedTypeSpecificChecksForOldOnes.kt")
        public void testDontCheckNewCapturedTypeSpecificChecksForOldOnes() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/dontCheckNewCapturedTypeSpecificChecksForOldOnes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectedTypeHasCapturedStarArgument.kt")
        public void testExpectedTypeHasCapturedStarArgument() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/expectedTypeHasCapturedStarArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectedTypeMismatchWithInVariance.kt")
        public void testExpectedTypeMismatchWithInVariance() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/expectedTypeMismatchWithInVariance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeCallWithCapturedReceiver.kt")
        public void testInvokeCallWithCapturedReceiver() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/invokeCallWithCapturedReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt25302.kt")
        public void testKt25302() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/kt25302.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2570.kt")
        public void testKt2570() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/kt2570.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2872.kt")
        public void testKt2872() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/kt2872.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt46727.kt")
        public void testKt46727() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/kt46727.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt46727Warnings.kt")
        public void testKt46727Warnings() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/kt46727Warnings.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt49101.kt")
        public void testKt49101() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/kt49101.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt52782.kt")
        public void testKt52782() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/kt52782.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("memberScopeOfCaptured.kt")
        public void testMemberScopeOfCaptured() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/memberScopeOfCaptured.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noCaptureTypeErrorForNonTopLevel.kt")
        public void testNoCaptureTypeErrorForNonTopLevel() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/noCaptureTypeErrorForNonTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notApproximateWhenCopyDescriptors.kt")
        public void testNotApproximateWhenCopyDescriptors() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/notApproximateWhenCopyDescriptors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nullableCaptruredTypeAgainstNullableVariable.kt")
        public void testNullableCaptruredTypeAgainstNullableVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/nullableCaptruredTypeAgainstNullableVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nullableCaptruredTypeAgainstNullableVariableWithDisabledComplatibilityFlag.kt")
        public void testNullableCaptruredTypeAgainstNullableVariableWithDisabledComplatibilityFlag() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/nullableCaptruredTypeAgainstNullableVariableWithDisabledComplatibilityFlag.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overApproximationForInCaptured.kt")
        public void testOverApproximationForInCaptured() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/overApproximationForInCaptured.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overApproximationForOutCaptured.kt")
        public void testOverApproximationForOutCaptured() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/overApproximationForOutCaptured.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propagateNullailityOnSupertypesWhenCaptureTypes.kt")
        public void testPropagateNullailityOnSupertypesWhenCaptureTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/propagateNullailityOnSupertypesWhenCaptureTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("selfTypeTypeHole.kt")
        public void testSelfTypeTypeHole() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/selfTypeTypeHole.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("starProjectionRegression.kt")
        public void testStarProjectionRegression() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/starProjectionRegression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substituteCapturedTypesWithTypeVariables.kt")
        public void testSubstituteCapturedTypesWithTypeVariables() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/substituteCapturedTypesWithTypeVariables.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("topLevelCapturingInsideReturnType.kt")
        public void testTopLevelCapturingInsideReturnType() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/topLevelCapturingInsideReturnType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("upperBoundOfCapturedInProjectionInOutPosition.kt")
        public void testUpperBoundOfCapturedInProjectionInOutPosition() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/upperBoundOfCapturedInProjectionInOutPosition.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/coercionToUnit")
      @TestDataPath("$PROJECT_ROOT")
      public class CoercionToUnit {
        @RepeatedTest(value = 5)
        @TestMetadata("afterBareReturn.kt")
        public void testAfterBareReturn() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/afterBareReturn.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCoercionToUnit() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/coercionToUnit"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("coercionToUnitForIfAsLastExpressionInLambda.kt")
        public void testCoercionToUnitForIfAsLastExpressionInLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionToUnitForIfAsLastExpressionInLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("coercionToUnitForLastLambdaInLambda.kt")
        public void testCoercionToUnitForLastLambdaInLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionToUnitForLastLambdaInLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("coercionToUnitReference.kt")
        public void testCoercionToUnitReference() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionToUnitReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("coercionToUnitWithNothingType.kt")
        public void testCoercionToUnitWithNothingType() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionToUnitWithNothingType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("coercionWithExpectedType.kt")
        public void testCoercionWithExpectedType() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionWithExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("coercionWithExpectedTypeAndBound.kt")
        public void testCoercionWithExpectedTypeAndBound() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionWithExpectedTypeAndBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("coercionWithExplicitTypeArgument.kt")
        public void testCoercionWithExplicitTypeArgument() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionWithExplicitTypeArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("coercionWithoutExpectedType.kt")
        public void testCoercionWithoutExpectedType() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionWithoutExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("coerctionToUnitForATypeWithUpperBound.kt")
        public void testCoerctionToUnitForATypeWithUpperBound() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coerctionToUnitForATypeWithUpperBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("coersionWithAnonymousFunctionsAndUnresolved.kt")
        public void testCoersionWithAnonymousFunctionsAndUnresolved() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coersionWithAnonymousFunctionsAndUnresolved.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericInApply.kt")
        public void testGenericInApply() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/genericInApply.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("indirectCoercionWithExpectedType.kt")
        public void testIndirectCoercionWithExpectedType() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/indirectCoercionWithExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt30242.kt")
        public void testKt30242() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/kt30242.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaWithNullableUnitInElvis.kt")
        public void testLambdaWithNullableUnitInElvis() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/lambdaWithNullableUnitInElvis.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedLambda.kt")
        public void testNestedLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/nestedLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noCoercion.kt")
        public void testNoCoercion() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/noCoercion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonPropagationOfCoercionToUnitInsideNestedLambda.kt")
        public void testNonPropagationOfCoercionToUnitInsideNestedLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/nonPropagationOfCoercionToUnitInsideNestedLambda.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/commonSystem")
      @TestDataPath("$PROJECT_ROOT")
      public class CommonSystem {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCommonSystem() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/commonSystem"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("boundOnNullableVariable.kt")
        public void testBoundOnNullableVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/boundOnNullableVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("castToSubtype.kt")
        public void testCastToSubtype() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/castToSubtype.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("cstFromNullableChildAndNonParameterizedType.kt")
        public void testCstFromNullableChildAndNonParameterizedType() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/cstFromNullableChildAndNonParameterizedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("cstWithTypeContainingNonFixedVariable.kt")
        public void testCstWithTypeContainingNonFixedVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/cstWithTypeContainingNonFixedVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dontCaptureTypeVariable.kt")
        public void testDontCaptureTypeVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/dontCaptureTypeVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("exactOnElvis.kt")
        public void testExactOnElvis() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/exactOnElvis.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fixVariablesInRightOrder.kt")
        public void testFixVariablesInRightOrder() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/fixVariablesInRightOrder.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericCandidateInGenericClass.kt")
        public void testGenericCandidateInGenericClass() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/genericCandidateInGenericClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("iltInsideSeveralCalls.kt")
        public void testIltInsideSeveralCalls() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/iltInsideSeveralCalls.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferenceWithUpperBoundsInLambda.kt")
        public void testInferenceWithUpperBoundsInLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/inferenceWithUpperBoundsInLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt30300.kt")
        public void testKt30300() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/kt30300.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt31969.kt")
        public void testKt31969() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/kt31969.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32818.kt")
        public void testKt32818() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/kt32818.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt33197.kt")
        public void testKt33197() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/kt33197.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3372toCollection.kt")
        public void testKt3372toCollection() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/kt3372toCollection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lessSpecificTypeForArgumentCallWithExactAnnotation.kt")
        public void testLessSpecificTypeForArgumentCallWithExactAnnotation() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/lessSpecificTypeForArgumentCallWithExactAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lessSpecificTypeForArgumentCallWithExactAnnotation_ni.kt")
        public void testLessSpecificTypeForArgumentCallWithExactAnnotation_ni() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/lessSpecificTypeForArgumentCallWithExactAnnotation_ni.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("manyArgumentsForVararg.kt")
        public void testManyArgumentsForVararg() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/manyArgumentsForVararg.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedLambdas.kt")
        public void testNestedLambdas() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/nestedLambdas.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonFixedVariableFromBothBranches.kt")
        public void testNonFixedVariableFromBothBranches() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/nonFixedVariableFromBothBranches.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonFixedVariableInsideFlexibleType.kt")
        public void testNonFixedVariableInsideFlexibleType() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/nonFixedVariableInsideFlexibleType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("outProjectedTypeToOutProjected.kt")
        public void testOutProjectedTypeToOutProjected() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/outProjectedTypeToOutProjected.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("postponedCompletionWithExactAnnotation.kt")
        public void testPostponedCompletionWithExactAnnotation() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/postponedCompletionWithExactAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("postponedCompletionWithExactAnnotation_ni.kt")
        public void testPostponedCompletionWithExactAnnotation_ni() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/postponedCompletionWithExactAnnotation_ni.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("selectFromTwoIncompatibleTypes.kt")
        public void testSelectFromTwoIncompatibleTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/selectFromTwoIncompatibleTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("selectIntegerValueTypeFromIf.kt")
        public void testSelectIntegerValueTypeFromIf() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/selectIntegerValueTypeFromIf.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("theSameFunctionInArgs.kt")
        public void testTheSameFunctionInArgs() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/theSameFunctionInArgs.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/completion")
      @TestDataPath("$PROJECT_ROOT")
      public class Completion {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCompletion() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/completion"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("anonymousFunction.kt")
        public void testAnonymousFunction() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/anonymousFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("basic.kt")
        public void testBasic() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/basic.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("definitelyNotNullType.kt")
        public void testDefinitelyNotNullType() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/definitelyNotNullType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("equalityConstraintUpstairs.kt")
        public void testEqualityConstraintUpstairs() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/equalityConstraintUpstairs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("errorAfterCompletion.kt")
        public void testErrorAfterCompletion() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/errorAfterCompletion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibleType.kt")
        public void testFlexibleType() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/flexibleType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferLabeledElementTypeForLambdaInReturnInCatch.kt")
        public void testInferLabeledElementTypeForLambdaInReturnInCatch() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/inferLabeledElementTypeForLambdaInReturnInCatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intersectionType.kt")
        public void testIntersectionType() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/intersectionType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt33166.kt")
        public void testKt33166() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/kt33166.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt36233.kt")
        public void testKt36233() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/kt36233.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaWithVariableAndNothing.kt")
        public void testLambdaWithVariableAndNothing() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/lambdaWithVariableAndNothing.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedVariance.kt")
        public void testNestedVariance() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/nestedVariance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nothingFromNestedCall.kt")
        public void testNothingFromNestedCall() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/nothingFromNestedCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("partialForIlt.kt")
        public void testPartialForIlt() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/partialForIlt.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("partialForIltWithNothing.kt")
        public void testPartialForIltWithNothing() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/partialForIltWithNothing.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("transitiveConstraint.kt")
        public void testTransitiveConstraint() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/transitiveConstraint.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withExact.kt")
        public void testWithExact() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/withExact.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        public class PostponedArgumentsAnalysis {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInPostponedArgumentsAnalysis() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("basic.kt")
          public void testBasic() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/basic.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("callableReferenceLambdaCombinationInsideCall.kt")
          public void testCallableReferenceLambdaCombinationInsideCall() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/callableReferenceLambdaCombinationInsideCall.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("callableReferences.kt")
          public void testCallableReferences() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/callableReferences.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("fixingVariableDuringAddingConstraintForFirstPosponedArgument.kt")
          public void testFixingVariableDuringAddingConstraintForFirstPosponedArgument() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/fixingVariableDuringAddingConstraintForFirstPosponedArgument.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("lackOfDeepIncorporation.kt")
          public void testLackOfDeepIncorporation() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/lackOfDeepIncorporation.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("lambdasInTryCatch.kt")
          public void testLambdasInTryCatch() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/lambdasInTryCatch.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("notInferableParameterOfAnonymousFunction.kt")
          public void testNotInferableParameterOfAnonymousFunction() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/notInferableParameterOfAnonymousFunction.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("takingExtensibilityFromDeclarationOfAnonymousFunction.kt")
          public void testTakingExtensibilityFromDeclarationOfAnonymousFunction() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/takingExtensibilityFromDeclarationOfAnonymousFunction.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("wrongVariableFixationOrder.kt")
          public void testWrongVariableFixationOrder() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/wrongVariableFixationOrder.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("wrongVariableFixationOrder2.kt")
          public void testWrongVariableFixationOrder2() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/wrongVariableFixationOrder2.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/constraints")
      @TestDataPath("$PROJECT_ROOT")
      public class Constraints {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInConstraints() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/constraints"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("approximationWithDefNotNullInInvPositionDuringInference.kt")
        public void testApproximationWithDefNotNullInInvPositionDuringInference() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/approximationWithDefNotNullInInvPositionDuringInference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("complexDependencyWihtoutProperConstraints.kt")
        public void testComplexDependencyWihtoutProperConstraints() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/complexDependencyWihtoutProperConstraints.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constraintFromVariantTypeWithNestedProjection.kt")
        public void testConstraintFromVariantTypeWithNestedProjection() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/constraintFromVariantTypeWithNestedProjection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constraintOnFunctionLiteral.kt")
        public void testConstraintOnFunctionLiteral() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/constraintOnFunctionLiteral.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("definitelyNotNullTypeInArguments.kt")
        public void testDefinitelyNotNullTypeInArguments() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/definitelyNotNullTypeInArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("definitelyNotNullTypeInReturnPosition.kt")
        public void testDefinitelyNotNullTypeInReturnPosition() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/definitelyNotNullTypeInReturnPosition.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("definitelyNotNullTypeInvariantPosition.kt")
        public void testDefinitelyNotNullTypeInvariantPosition() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/definitelyNotNullTypeInvariantPosition.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("earlyCompletionForCalls.kt")
        public void testEarlyCompletionForCalls() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/earlyCompletionForCalls.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("equalityConstraintOnNullableType.kt")
        public void testEqualityConstraintOnNullableType() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/equalityConstraintOnNullableType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("errorUpperBoundConstraint.kt")
        public void testErrorUpperBoundConstraint() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/errorUpperBoundConstraint.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fixTypeVariableWithNothingConstraintEarlierThanComplexVariable.kt")
        public void testFixTypeVariableWithNothingConstraintEarlierThanComplexVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/fixTypeVariableWithNothingConstraintEarlierThanComplexVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ignoreConstraintFromImplicitInNothing.kt")
        public void testIgnoreConstraintFromImplicitInNothing() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/ignoreConstraintFromImplicitInNothing.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferTypeFromCapturedStarProjection.kt")
        public void testInferTypeFromCapturedStarProjection() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/inferTypeFromCapturedStarProjection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt6320.kt")
        public void testKt6320() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/kt6320.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt7351ConstraintFromUnitExpectedType.kt")
        public void testKt7351ConstraintFromUnitExpectedType() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/kt7351ConstraintFromUnitExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt7433.kt")
        public void testKt7433() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/kt7433.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt8879.kt")
        public void testKt8879() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/kt8879.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("manyConstraintsDueToFlexibleRawTypes.kt")
        public void testManyConstraintsDueToFlexibleRawTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/manyConstraintsDueToFlexibleRawTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("manyConstraintsDueToRecursiveFlexibleTypesWithWildcards.kt")
        public void testManyConstraintsDueToRecursiveFlexibleTypesWithWildcards() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/manyConstraintsDueToRecursiveFlexibleTypesWithWildcards.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullConstraintOnNullableType.kt")
        public void testNotNullConstraintOnNullableType() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/notNullConstraintOnNullableType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("operationsOnIntegerValueTypes.kt")
        public void testOperationsOnIntegerValueTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/operationsOnIntegerValueTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveJavaTypeWithStarProjection.kt")
        public void testRecursiveJavaTypeWithStarProjection() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/recursiveJavaTypeWithStarProjection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("remainConstraintContainingTypeWithoutProjection.kt")
        public void testRemainConstraintContainingTypeWithoutProjection() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/remainConstraintContainingTypeWithoutProjection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("returnLambdaFromLambda.kt")
        public void testReturnLambdaFromLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/returnLambdaFromLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("subtypeConstraintOnNullableType.kt")
        public void testSubtypeConstraintOnNullableType() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/subtypeConstraintOnNullableType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypeConstraintOnNullableType.kt")
        public void testSupertypeConstraintOnNullableType() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/supertypeConstraintOnNullableType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("wrongApproximationWithDefNotNullTypesAndDelegates.kt")
        public void testWrongApproximationWithDefNotNullTypesAndDelegates() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/wrongApproximationWithDefNotNullTypesAndDelegates.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("wrongExpectedTypeForWhen.kt")
        public void testWrongExpectedTypeForWhen() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/wrongExpectedTypeForWhen.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class EmptyIntersectionTypes {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInEmptyIntersectionTypes() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("compatibilityResolveWhenVariableHasComplexIntersectionType.kt")
        public void testCompatibilityResolveWhenVariableHasComplexIntersectionType() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/compatibilityResolveWhenVariableHasComplexIntersectionType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("contravariance.kt")
        public void testContravariance() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/contravariance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("covariance.kt")
        public void testCovariance() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/covariance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("emptyIntersectionOnIf.kt")
        public void testEmptyIntersectionOnIf() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/emptyIntersectionOnIf.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461.kt")
        public void testKt45461() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_10.kt")
        public void testKt45461_10() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_10.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_11.kt")
        public void testKt45461_11() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_11.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_12.kt")
        public void testKt45461_12() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_12.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_13.kt")
        public void testKt45461_13() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_13.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_14.kt")
        public void testKt45461_14() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_14.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_15.kt")
        public void testKt45461_15() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_15.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_16.kt")
        public void testKt45461_16() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_16.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_17.kt")
        public void testKt45461_17() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_17.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_18.kt")
        public void testKt45461_18() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_18.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_19.kt")
        public void testKt45461_19() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_19.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_2.kt")
        public void testKt45461_2() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_20.kt")
        public void testKt45461_20() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_20.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_21.kt")
        public void testKt45461_21() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_21.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_22.kt")
        public void testKt45461_22() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_22.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_23.kt")
        public void testKt45461_23() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_23.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_24.kt")
        public void testKt45461_24() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_24.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_25.kt")
        public void testKt45461_25() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_25.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_26.kt")
        public void testKt45461_26() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_26.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_27.kt")
        public void testKt45461_27() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_27.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_28.kt")
        public void testKt45461_28() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_28.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_29.kt")
        public void testKt45461_29() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_29.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_3.kt")
        public void testKt45461_3() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_30.kt")
        public void testKt45461_30() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_30.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_31.kt")
        public void testKt45461_31() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_31.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_32.kt")
        public void testKt45461_32() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_32.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_33.kt")
        public void testKt45461_33() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_33.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_34.kt")
        public void testKt45461_34() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_34.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_35.kt")
        public void testKt45461_35() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_35.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_35_Enabled.kt")
        public void testKt45461_35_Enabled() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_35_Enabled.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_4.kt")
        public void testKt45461_4() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_4.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_5.kt")
        public void testKt45461_5() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_5.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_6.kt")
        public void testKt45461_6() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_6.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_7.kt")
        public void testKt45461_7() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_7.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_8.kt")
        public void testKt45461_8() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_8.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45461_9.kt")
        public void testKt45461_9() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_9.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt48765.kt")
        public void testKt48765() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48765.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt48935.kt")
        public void testKt48935() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48935.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt48935_2.kt")
        public void testKt48935_2() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48935_2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt48935_3.kt")
        public void testKt48935_3() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48935_3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt48935_4.kt")
        public void testKt48935_4() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48935_4.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt48935_5.kt")
        public void testKt48935_5() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48935_5.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt48935_6.kt")
        public void testKt48935_6() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48935_6.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt48987.kt")
        public void testKt48987() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48987.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt49661.kt")
        public void testKt49661() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt49661.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt51016.kt")
        public void testKt51016() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt51016.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt52364.kt")
        public void testKt52364() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt52364.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt52393.kt")
        public void testKt52393() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt52393.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt52431.kt")
        public void testKt52431() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt52431.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt54411.kt")
        public void testKt54411() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt54411.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nullableEmptyIntersection.kt")
        public void testNullableEmptyIntersection() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/nullableEmptyIntersection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveTypeParameters.kt")
        public void testRecursiveTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/recursiveTypeParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("selectFromCovariantAndContravariantTypes.kt")
        public void testSelectFromCovariantAndContravariantTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/selectFromCovariantAndContravariantTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substitutingSuperTypes.kt")
        public void testSubstitutingSuperTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/substitutingSuperTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substitutingSuperTypes2.kt")
        public void testSubstitutingSuperTypes2() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/substitutingSuperTypes2.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/forks")
      @TestDataPath("$PROJECT_ROOT")
      public class Forks {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInForks() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/forks"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("forkInWhen.kt")
        public void testForkInWhen() {
          runTest("compiler/testData/diagnostics/tests/inference/forks/forkInWhen.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedCallVariableFixation.kt")
        public void testNestedCallVariableFixation() {
          runTest("compiler/testData/diagnostics/tests/inference/forks/nestedCallVariableFixation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedCallVariableFixationSimple.kt")
        public void testNestedCallVariableFixationSimple() {
          runTest("compiler/testData/diagnostics/tests/inference/forks/nestedCallVariableFixationSimple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloadResolutionByLambdaReturnTypeAndExpectedType.kt")
        public void testOverloadResolutionByLambdaReturnTypeAndExpectedType() {
          runTest("compiler/testData/diagnostics/tests/inference/forks/overloadResolutionByLambdaReturnTypeAndExpectedType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls")
      @TestDataPath("$PROJECT_ROOT")
      public class NestedCalls {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNestedCalls() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/nestedCalls"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("arrayAccess.kt")
        public void testArrayAccess() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/arrayAccess.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("binaryExpressions.kt")
        public void testBinaryExpressions() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/binaryExpressions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("checkTypesForQualifiedProperties.kt")
        public void testCheckTypesForQualifiedProperties() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/checkTypesForQualifiedProperties.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("completeNestedCallsForArraySetExpression.kt")
        public void testCompleteNestedCallsForArraySetExpression() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedCallsForArraySetExpression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("completeNestedCallsInference.kt")
        public void testCompleteNestedCallsInference() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedCallsInference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("completeNestedForVariableAsFunctionCall.kt")
        public void testCompleteNestedForVariableAsFunctionCall() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedForVariableAsFunctionCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("externalTypeParameter.kt")
        public void testExternalTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/externalTypeParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferenceForNestedBinaryCall.kt")
        public void testInferenceForNestedBinaryCall() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/inferenceForNestedBinaryCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3395.kt")
        public void testKt3395() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/kt3395.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3461checkTypes.kt")
        public void testKt3461checkTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/kt3461checkTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("makeNullableIfSafeCall.kt")
        public void testMakeNullableIfSafeCall() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/makeNullableIfSafeCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nontrivialCallExpression.kt")
        public void testNontrivialCallExpression() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/nontrivialCallExpression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("preferArgumentToNullability.kt")
        public void testPreferArgumentToNullability() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/preferArgumentToNullability.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("preferNothingToBound.kt")
        public void testPreferNothingToBound() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/preferNothingToBound.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/nothingType")
      @TestDataPath("$PROJECT_ROOT")
      public class NothingType {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNothingType() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/nothingType"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("complexDependancyOnVariableWithTrivialConstraint.kt")
        public void testComplexDependancyOnVariableWithTrivialConstraint() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/complexDependancyOnVariableWithTrivialConstraint.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("discriminateNothingForReifiedParameter.kt")
        public void testDiscriminateNothingForReifiedParameter() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/discriminateNothingForReifiedParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("discriminatedNothingAndSmartCast.kt")
        public void testDiscriminatedNothingAndSmartCast() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/discriminatedNothingAndSmartCast.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("discriminatedNothingInsideComplexNestedCall.kt")
        public void testDiscriminatedNothingInsideComplexNestedCall() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/discriminatedNothingInsideComplexNestedCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("generateConstraintWithInnerNothingType.kt")
        public void testGenerateConstraintWithInnerNothingType() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/generateConstraintWithInnerNothingType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericOverride.kt")
        public void testGenericOverride() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/genericOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitInferenceTToFlexibleNothing.kt")
        public void testImplicitInferenceTToFlexibleNothing() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/implicitInferenceTToFlexibleNothing.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitNothingConstraintFromReturn.kt")
        public void testImplicitNothingConstraintFromReturn() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/implicitNothingConstraintFromReturn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferArgumentToNothingFromNullConstant.kt")
        public void testInferArgumentToNothingFromNullConstant() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/inferArgumentToNothingFromNullConstant.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferenceWithRecursiveGenericsAndNothing.kt")
        public void testInferenceWithRecursiveGenericsAndNothing() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/inferenceWithRecursiveGenericsAndNothing.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt24490.kt")
        public void testKt24490() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/kt24490.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32051.kt")
        public void testKt32051() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/kt32051.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32081.kt")
        public void testKt32081() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/kt32081.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32207.kt")
        public void testKt32207() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/kt32207.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32388.kt")
        public void testKt32388() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/kt32388.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt34335.kt")
        public void testKt34335() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/kt34335.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt56448.kt")
        public void testKt56448() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/kt56448.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaNothingAndExpectedType.kt")
        public void testLambdaNothingAndExpectedType() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/lambdaNothingAndExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedLambdaInferenceWithIncorporationOfVariables.kt")
        public void testNestedLambdaInferenceWithIncorporationOfVariables() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/nestedLambdaInferenceWithIncorporationOfVariables.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notEnoughInformationAndNothing.kt")
        public void testNotEnoughInformationAndNothing() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/notEnoughInformationAndNothing.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notEnoughInformationFromNullabilityConstraint.kt")
        public void testNotEnoughInformationFromNullabilityConstraint() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/notEnoughInformationFromNullabilityConstraint.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nothingWithCallableReference.kt")
        public void testNothingWithCallableReference() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/nothingWithCallableReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nullableExpectedTypeFromVariable.kt")
        public void testNullableExpectedTypeFromVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/nullableExpectedTypeFromVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("platformNothingAsUsefulConstraint.kt")
        public void testPlatformNothingAsUsefulConstraint() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/platformNothingAsUsefulConstraint.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reifiedParameterWithRecursiveBound.kt")
        public void testReifiedParameterWithRecursiveBound() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/reifiedParameterWithRecursiveBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reportImplicitNothingOnlyForOwnTypeParameters.kt")
        public void testReportImplicitNothingOnlyForOwnTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/reportImplicitNothingOnlyForOwnTypeParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("returnAsLastStatementInLambda.kt")
        public void testReturnAsLastStatementInLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/returnAsLastStatementInLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("selectWithNull.kt")
        public void testSelectWithNull() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/selectWithNull.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("specialCallWithMaterializeAndExpectedType.kt")
        public void testSpecialCallWithMaterializeAndExpectedType() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/specialCallWithMaterializeAndExpectedType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/publicApproximation")
      @TestDataPath("$PROJECT_ROOT")
      public class PublicApproximation {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInPublicApproximation() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/publicApproximation"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("approximatedIntersectionMorePreciseThanBound.kt")
        public void testApproximatedIntersectionMorePreciseThanBound() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/approximatedIntersectionMorePreciseThanBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("chainedLambdas.kt")
        public void testChainedLambdas() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/chainedLambdas.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("declarationTypes.kt")
        public void testDeclarationTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/declarationTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intersectionAfterSmartCastInLambdaReturn.kt")
        public void testIntersectionAfterSmartCastInLambdaReturn() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/intersectionAfterSmartCastInLambdaReturn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intersectionAlternative.kt")
        public void testIntersectionAlternative() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/intersectionAlternative.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intersectionLocations.kt")
        public void testIntersectionLocations() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/intersectionLocations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaReturnArgumentCall.kt")
        public void testLambdaReturnArgumentCall() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/lambdaReturnArgumentCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaReturnTypeApproximation.kt")
        public void testLambdaReturnTypeApproximation() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/lambdaReturnTypeApproximation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonTrivialVariance.kt")
        public void testNonTrivialVariance() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/nonTrivialVariance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("parameterInBound.kt")
        public void testParameterInBound() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/parameterInBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("projections.kt")
        public void testProjections() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/projections.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCastInLambdaReturnAfterIntersection.kt")
        public void testSmartCastInLambdaReturnAfterIntersection() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/smartCastInLambdaReturnAfterIntersection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("twoIntersections.kt")
        public void testTwoIntersections() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/twoIntersections.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveCalls")
      @TestDataPath("$PROJECT_ROOT")
      public class RecursiveCalls {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInRecursiveCalls() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/recursiveCalls"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt23531.kt")
        public void testKt23531() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveCalls/kt23531.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveLocalFuns")
      @TestDataPath("$PROJECT_ROOT")
      public class RecursiveLocalFuns {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInRecursiveLocalFuns() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/recursiveLocalFuns"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localFactorial.kt")
        public void testLocalFactorial() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveLocalFuns/localFactorial.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveFun.kt")
        public void testRecursiveFun() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveLocalFuns/recursiveFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveLambda.kt")
        public void testRecursiveLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveLocalFuns/recursiveLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("selfCall.kt")
        public void testSelfCall() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveLocalFuns/selfCall.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class RecursiveTypes {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInRecursiveTypes() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/recursiveTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("complexTypeUnwrapping.kt")
        public void testComplexTypeUnwrapping() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/complexTypeUnwrapping.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("complexTypeUnwrapping2.kt")
        public void testComplexTypeUnwrapping2() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/complexTypeUnwrapping2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt61717.kt")
        public void testKt61717() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/kt61717.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multirecursion.kt")
        public void testMultirecursion() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/multirecursion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedClassesWithSelfTypes.kt")
        public void testNestedClassesWithSelfTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/nestedClassesWithSelfTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveInIn.kt")
        public void testRecursiveInIn() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveInIn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveInInv.kt")
        public void testRecursiveInInv() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveInInv.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveInOut.kt")
        public void testRecursiveInOut() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveInOut.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveInvIn.kt")
        public void testRecursiveInvIn() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveInvIn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveInvOut.kt")
        public void testRecursiveInvOut() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveInvOut.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveOutIn.kt")
        public void testRecursiveOutIn() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveOutIn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveOutInv.kt")
        public void testRecursiveOutInv() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveOutInv.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveOutOut.kt")
        public void testRecursiveOutOut() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveOutOut.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveTypeWithNonStarResult.kt")
        public void testRecursiveTypeWithNonStarResult() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveTypeWithNonStarResult.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveTypes.kt")
        public void testRecursiveTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("twoTypeConstructors.kt")
        public void testTwoTypeConstructors() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/twoTypeConstructors.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes")
        @TestDataPath("$PROJECT_ROOT")
        public class SelfTypes {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInSelfTypes() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/disabledInferenceOnSelfTypes")
          @TestDataPath("$PROJECT_ROOT")
          public class DisabledInferenceOnSelfTypes {
            @RepeatedTest(value = 5)
            public void testAllFilesPresentInDisabledInferenceOnSelfTypes() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/disabledInferenceOnSelfTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
            }

            @RepeatedTest(value = 5)
            @TestMetadata("basicInferenceForImplicitSelfType.kt")
            public void testBasicInferenceForImplicitSelfType() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/disabledInferenceOnSelfTypes/basicInferenceForImplicitSelfType.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("recursiveTypeWithTwoTypeParams.kt")
            public void testRecursiveTypeWithTwoTypeParams() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/disabledInferenceOnSelfTypes/recursiveTypeWithTwoTypeParams.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("writerAppenderExampleRecursive.kt")
            public void testWriterAppenderExampleRecursive() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/disabledInferenceOnSelfTypes/writerAppenderExampleRecursive.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes")
          @TestDataPath("$PROJECT_ROOT")
          public class EnabledInferenceOnSelfTypes {
            @RepeatedTest(value = 5)
            public void testAllFilesPresentInEnabledInferenceOnSelfTypes() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
            }

            @RepeatedTest(value = 5)
            @TestMetadata("basicInferenceForImplicitSelfType.kt")
            public void testBasicInferenceForImplicitSelfType() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes/basicInferenceForImplicitSelfType.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("enumExtensionFunction.kt")
            public void testEnumExtensionFunction() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes/enumExtensionFunction.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("overridingJKCases.kt")
            public void testOverridingJKCases() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes/overridingJKCases.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("recursiveTypeWithTwoTypeParams.kt")
            public void testRecursiveTypeWithTwoTypeParams() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes/recursiveTypeWithTwoTypeParams.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("whereAndWithCases.kt")
            public void testWhereAndWithCases() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes/whereAndWithCases.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("writerAppenderExampleRecursive.kt")
            public void testWriterAppenderExampleRecursive() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes/writerAppenderExampleRecursive.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/regressions")
      @TestDataPath("$PROJECT_ROOT")
      public class Regressions {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInRegressions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/regressions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("compareBy.kt")
        public void testCompareBy() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/compareBy.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt1029.kt")
        public void testKt1029() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1029.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt1031.kt")
        public void testKt1031() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1031.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt1127.kt")
        public void testKt1127() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1127.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt1145.kt")
        public void testKt1145() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1145.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt1358.kt")
        public void testKt1358() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1358.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt1410.kt")
        public void testKt1410() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1410.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt1718.kt")
        public void testKt1718() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1718.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt1944.kt")
        public void testKt1944() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1944.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2057.kt")
        public void testKt2057() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2057.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2179.kt")
        public void testKt2179() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2179.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2200.kt")
        public void testKt2200() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2200.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2283.kt")
        public void testKt2283() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2283.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2286.kt")
        public void testKt2286() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2286.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2294.kt")
        public void testKt2294() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2294.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2320.kt")
        public void testKt2320() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2320.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2324.kt")
        public void testKt2324() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2324.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2407.kt")
        public void testKt2407() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2407.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2445.kt")
        public void testKt2445() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2445.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2459.kt")
        public void testKt2459() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2459.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2484.kt")
        public void testKt2484() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2484.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2505.kt")
        public void testKt2505() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2505.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2514.kt")
        public void testKt2514() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2514.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2588.kt")
        public void testKt2588() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2588.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2741.kt")
        public void testKt2741() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2741.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2754.kt")
        public void testKt2754() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2754.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2838.kt")
        public void testKt2838() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2838.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2841.kt")
        public void testKt2841() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2841.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2841_it.kt")
        public void testKt2841_it() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2841_it.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2841_it_this.kt")
        public void testKt2841_it_this() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2841_it_this.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2841_this.kt")
        public void testKt2841_this() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2841_this.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2842.kt")
        public void testKt2842() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2842.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2883.kt")
        public void testKt2883() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2883.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3007.kt")
        public void testKt3007() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3007.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3038.kt")
        public void testKt3038() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3038.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3150.kt")
        public void testKt3150() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3150.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3174.kt")
        public void testKt3174() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3174.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32106.kt")
        public void testKt32106() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt32106.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32250.kt")
        public void testKt32250() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt32250.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32862_both.kt")
        public void testKt32862_both() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt32862_both.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32862_none.kt")
        public void testKt32862_none() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt32862_none.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3301.kt")
        public void testKt3301() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3301.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3344.kt")
        public void testKt3344() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3344.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt33629.kt")
        public void testKt33629() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt33629.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt34029.kt")
        public void testKt34029() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt34029.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt34282.kt")
        public void testKt34282() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt34282.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3496.kt")
        public void testKt3496() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3496.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3496_2.kt")
        public void testKt3496_2() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3496_2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3559.kt")
        public void testKt3559() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3559.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt35844.kt")
        public void testKt35844() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt35844.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt35943.kt")
        public void testKt35943() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt35943.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt36342.kt")
        public void testKt36342() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt36342.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt36342_2.kt")
        public void testKt36342_2() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt36342_2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt37043.kt")
        public void testKt37043() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt37043.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt37043_2.kt")
        public void testKt37043_2() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt37043_2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt37419.kt")
        public void testKt37419() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt37419.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt37650.kt")
        public void testKt37650() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt37650.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt38549.kt")
        public void testKt38549() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt38549.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt38691.kt")
        public void testKt38691() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt38691.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt41386.kt")
        public void testKt41386() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt41386.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt41394.kt")
        public void testKt41394() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt41394.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt4420.kt")
        public void testKt4420() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt4420.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt44440.kt")
        public void testKt44440() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt44440.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt47941.kt")
        public void testKt47941() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt47941.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt702.kt")
        public void testKt702() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt702.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt731.kt")
        public void testKt731() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt731.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt742.kt")
        public void testKt742() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt742.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt8132.kt")
        public void testKt8132() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt8132.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt832.kt")
        public void testKt832() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt832.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt943.kt")
        public void testKt943() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt943.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt9461.kt")
        public void testKt9461() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt9461.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt948.kt")
        public void testKt948() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt948.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noRecursionOnCallingPureKotlinFunctionAsSyntheticJavaAccessor.kt")
        public void testNoRecursionOnCallingPureKotlinFunctionAsSyntheticJavaAccessor() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/noRecursionOnCallingPureKotlinFunctionAsSyntheticJavaAccessor.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/reportingImprovements")
      @TestDataPath("$PROJECT_ROOT")
      public class ReportingImprovements {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInReportingImprovements() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/reportingImprovements"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("cannotInferParameterTypeWithInference.kt")
        public void testCannotInferParameterTypeWithInference() {
          runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/cannotInferParameterTypeWithInference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ErrorTypeAsGenericParameter.kt")
        public void testErrorTypeAsGenericParameter() {
          runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/ErrorTypeAsGenericParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FunctionPlaceholder.kt")
        public void testFunctionPlaceholder() {
          runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/FunctionPlaceholder.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferTypeFromUnresolvedArgument.kt")
        public void testInferTypeFromUnresolvedArgument() {
          runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/inferTypeFromUnresolvedArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt42620.kt")
        public void testKt42620() {
          runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/kt42620.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multipleDiagnosticsInOneCallChain.kt")
        public void testMultipleDiagnosticsInOneCallChain() {
          runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/multipleDiagnosticsInOneCallChain.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NoAmbiguityForDifferentFunctionTypes.kt")
        public void testNoAmbiguityForDifferentFunctionTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/NoAmbiguityForDifferentFunctionTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reportUnresolvedReferenceWrongReceiverForManyCandidates.kt")
        public void testReportUnresolvedReferenceWrongReceiverForManyCandidates() {
          runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/reportUnresolvedReferenceWrongReceiverForManyCandidates.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("subtypeForInvariantWithErrorGenerics.kt")
        public void testSubtypeForInvariantWithErrorGenerics() {
          runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/subtypeForInvariantWithErrorGenerics.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeInferenceFailedOnComponentN.kt")
        public void testTypeInferenceFailedOnComponentN() {
          runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/typeInferenceFailedOnComponentN.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeInferenceFailedOnIteratorCall.kt")
        public void testTypeInferenceFailedOnIteratorCall() {
          runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/typeInferenceFailedOnIteratorCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("wrongArgumentExtensionFunction.kt")
        public void testWrongArgumentExtensionFunction() {
          runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/wrongArgumentExtensionFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("wrongArgumentPassedToLocalExtensionFunction.kt")
        public void testWrongArgumentPassedToLocalExtensionFunction() {
          runTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/wrongArgumentPassedToLocalExtensionFunction.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/substitutions")
      @TestDataPath("$PROJECT_ROOT")
      public class Substitutions {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSubstitutions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/substitutions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("delegationAndInference.kt")
        public void testDelegationAndInference() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/delegationAndInference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hideFlexibleLocalTypeInPublicPosition.kt")
        public void testHideFlexibleLocalTypeInPublicPosition() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/hideFlexibleLocalTypeInPublicPosition.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hideFlexibleLocalTypeInPublicPosition_before.kt")
        public void testHideFlexibleLocalTypeInPublicPosition_before() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/hideFlexibleLocalTypeInPublicPosition_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hideLocalTypeForReturnTypeOfSingleExpressionFunction.kt")
        public void testHideLocalTypeForReturnTypeOfSingleExpressionFunction() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/hideLocalTypeForReturnTypeOfSingleExpressionFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hideNullableLocalTypeInPublicPosition.kt")
        public void testHideNullableLocalTypeInPublicPosition() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/hideNullableLocalTypeInPublicPosition.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hideNullableLocalTypeInPublicPosition_before.kt")
        public void testHideNullableLocalTypeInPublicPosition_before() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/hideNullableLocalTypeInPublicPosition_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32189returnTypeWithTypealiasSubtitution.kt")
        public void testKt32189returnTypeWithTypealiasSubtitution() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/kt32189returnTypeWithTypealiasSubtitution.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt6081SubstituteIntoClassCorrectly.kt")
        public void testKt6081SubstituteIntoClassCorrectly() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/kt6081SubstituteIntoClassCorrectly.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleSubstitutionCheckTypeArgumentsNotTypeParameters.kt")
        public void testSimpleSubstitutionCheckTypeArgumentsNotTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/simpleSubstitutionCheckTypeArgumentsNotTypeParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substitutionIntoAnonymousClass.kt")
        public void testSubstitutionIntoAnonymousClass() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/substitutionIntoAnonymousClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substitutionIntoInnerClass.kt")
        public void testSubstitutionIntoInnerClass() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/substitutionIntoInnerClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substitutionOfTypeEnhancement.kt")
        public void testSubstitutionOfTypeEnhancement() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/substitutionOfTypeEnhancement.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/upperBounds")
      @TestDataPath("$PROJECT_ROOT")
      public class UpperBounds {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInUpperBounds() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/upperBounds"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conflictingSubstitutionsFromUpperBound.kt")
        public void testConflictingSubstitutionsFromUpperBound() {
          runTest("compiler/testData/diagnostics/tests/inference/upperBounds/conflictingSubstitutionsFromUpperBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doNotInferFromBoundsOnly.kt")
        public void testDoNotInferFromBoundsOnly() {
          runTest("compiler/testData/diagnostics/tests/inference/upperBounds/doNotInferFromBoundsOnly.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibilityInCommonSuperTypeCalculation.kt")
        public void testFlexibilityInCommonSuperTypeCalculation() {
          runTest("compiler/testData/diagnostics/tests/inference/upperBounds/flexibilityInCommonSuperTypeCalculation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibilityInCommonSuperTypeCalculation.ni.kt")
        public void testFlexibilityInCommonSuperTypeCalculation_ni() {
          runTest("compiler/testData/diagnostics/tests/inference/upperBounds/flexibilityInCommonSuperTypeCalculation.ni.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferringVariableByMaterializeAndUpperBound.kt")
        public void testInferringVariableByMaterializeAndUpperBound() {
          runTest("compiler/testData/diagnostics/tests/inference/upperBounds/inferringVariableByMaterializeAndUpperBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intersectUpperBounds.kt")
        public void testIntersectUpperBounds() {
          runTest("compiler/testData/diagnostics/tests/inference/upperBounds/intersectUpperBounds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2856.kt")
        public void testKt2856() {
          runTest("compiler/testData/diagnostics/tests/inference/upperBounds/kt2856.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonNullUpperBound.kt")
        public void testNonNullUpperBound() {
          runTest("compiler/testData/diagnostics/tests/inference/upperBounds/nonNullUpperBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeParameterAsUpperBound.kt")
        public void testTypeParameterAsUpperBound() {
          runTest("compiler/testData/diagnostics/tests/inference/upperBounds/typeParameterAsUpperBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useBoundsIfUnknownParameters.kt")
        public void testUseBoundsIfUnknownParameters() {
          runTest("compiler/testData/diagnostics/tests/inference/upperBounds/useBoundsIfUnknownParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useBoundsToInferTypeParamsSimple.kt")
        public void testUseBoundsToInferTypeParamsSimple() {
          runTest("compiler/testData/diagnostics/tests/inference/upperBounds/useBoundsToInferTypeParamsSimple.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/infos")
    @TestDataPath("$PROJECT_ROOT")
    public class Infos {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInInfos() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/infos"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PropertiesWithBackingFields.kt")
      public void testPropertiesWithBackingFields() {
        runTest("compiler/testData/diagnostics/tests/infos/PropertiesWithBackingFields.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SmartCasts.kt")
      public void testSmartCasts() {
        runTest("compiler/testData/diagnostics/tests/infos/SmartCasts.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/inline")
    @TestDataPath("$PROJECT_ROOT")
    public class Inline {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInInline() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inline"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("anonymousObjects.kt")
      public void testAnonymousObjects() {
        runTest("compiler/testData/diagnostics/tests/inline/anonymousObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("approximateReturnedAnonymousObjects.kt")
      public void testApproximateReturnedAnonymousObjects() {
        runTest("compiler/testData/diagnostics/tests/inline/approximateReturnedAnonymousObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignment.kt")
      public void testAssignment() {
        runTest("compiler/testData/diagnostics/tests/inline/assignment.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("capture.kt")
      public void testCapture() {
        runTest("compiler/testData/diagnostics/tests/inline/capture.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constructor.kt")
      public void testConstructor() {
        runTest("compiler/testData/diagnostics/tests/inline/constructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("default.kt")
      public void testDefault() {
        runTest("compiler/testData/diagnostics/tests/inline/default.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("defaultLambdaInlineSuspend.kt")
      public void testDefaultLambdaInlineSuspend() {
        runTest("compiler/testData/diagnostics/tests/inline/defaultLambdaInlineSuspend.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("defaultLambdaInlining.kt")
      public void testDefaultLambdaInlining() {
        runTest("compiler/testData/diagnostics/tests/inline/defaultLambdaInlining.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extensionOnFunction.kt")
      public void testExtensionOnFunction() {
        runTest("compiler/testData/diagnostics/tests/inline/extensionOnFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("forbidExtensionCallsOnInlineFunctionalParameters_after.kt")
      public void testForbidExtensionCallsOnInlineFunctionalParameters_after() {
        runTest("compiler/testData/diagnostics/tests/inline/forbidExtensionCallsOnInlineFunctionalParameters_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("forbidExtensionCallsOnInlineFunctionalParameters_before.kt")
      public void testForbidExtensionCallsOnInlineFunctionalParameters_before() {
        runTest("compiler/testData/diagnostics/tests/inline/forbidExtensionCallsOnInlineFunctionalParameters_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fromInlineToNoInline.kt")
      public void testFromInlineToNoInline() {
        runTest("compiler/testData/diagnostics/tests/inline/fromInlineToNoInline.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functions.kt")
      public void testFunctions() {
        runTest("compiler/testData/diagnostics/tests/inline/functions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineLambdaInDefaultInlineParameter.kt")
      public void testInlineLambdaInDefaultInlineParameter() {
        runTest("compiler/testData/diagnostics/tests/inline/inlineLambdaInDefaultInlineParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineReified.kt")
      public void testInlineReified() {
        runTest("compiler/testData/diagnostics/tests/inline/inlineReified.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlinedReturnInBranch.kt")
      public void testInlinedReturnInBranch() {
        runTest("compiler/testData/diagnostics/tests/inline/inlinedReturnInBranch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invoke.kt")
      public void testInvoke() {
        runTest("compiler/testData/diagnostics/tests/inline/invoke.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("isCheck.kt")
      public void testIsCheck() {
        runTest("compiler/testData/diagnostics/tests/inline/isCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt15410.kt")
      public void testKt15410() {
        runTest("compiler/testData/diagnostics/tests/inline/kt15410.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt19679.kt")
      public void testKt19679() {
        runTest("compiler/testData/diagnostics/tests/inline/kt19679.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt21177.kt")
      public void testKt21177() {
        runTest("compiler/testData/diagnostics/tests/inline/kt21177.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt21177Warning.kt")
      public void testKt21177Warning() {
        runTest("compiler/testData/diagnostics/tests/inline/kt21177Warning.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4869.kt")
      public void testKt4869() {
        runTest("compiler/testData/diagnostics/tests/inline/kt4869.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("labeled.kt")
      public void testLabeled() {
        runTest("compiler/testData/diagnostics/tests/inline/labeled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("labelsAndNonInlineUsage.kt")
      public void testLabelsAndNonInlineUsage() {
        runTest("compiler/testData/diagnostics/tests/inline/labelsAndNonInlineUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaCast.kt")
      public void testLambdaCast() {
        runTest("compiler/testData/diagnostics/tests/inline/lambdaCast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localFun.kt")
      public void testLocalFun() {
        runTest("compiler/testData/diagnostics/tests/inline/localFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("messagesForUnsupportedInInline.kt")
      public void testMessagesForUnsupportedInInline() {
        runTest("compiler/testData/diagnostics/tests/inline/messagesForUnsupportedInInline.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonVirtualMembersWithInline.kt")
      public void testNonVirtualMembersWithInline() {
        runTest("compiler/testData/diagnostics/tests/inline/nonVirtualMembersWithInline.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nothingToInline.kt")
      public void testNothingToInline() {
        runTest("compiler/testData/diagnostics/tests/inline/nothingToInline.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullabilityOperations.kt")
      public void testNullabilityOperations() {
        runTest("compiler/testData/diagnostics/tests/inline/nullabilityOperations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableFunction.kt")
      public void testNullableFunction() {
        runTest("compiler/testData/diagnostics/tests/inline/nullableFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overrideWithInline.kt")
      public void testOverrideWithInline() {
        runTest("compiler/testData/diagnostics/tests/inline/overrideWithInline.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("parenthesized.kt")
      public void testParenthesized() {
        runTest("compiler/testData/diagnostics/tests/inline/parenthesized.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateClass.kt")
      public void testPrivateClass() {
        runTest("compiler/testData/diagnostics/tests/inline/privateClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateOperatorsInInlineAfter.kt")
      public void testPrivateOperatorsInInlineAfter() {
        runTest("compiler/testData/diagnostics/tests/inline/privateOperatorsInInlineAfter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateOperatorsInInlineBefore.kt")
      public void testPrivateOperatorsInInlineBefore() {
        runTest("compiler/testData/diagnostics/tests/inline/privateOperatorsInInlineBefore.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propagation.kt")
      public void testPropagation() {
        runTest("compiler/testData/diagnostics/tests/inline/propagation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedCallDepecation.kt")
      public void testProtectedCallDepecation() {
        runTest("compiler/testData/diagnostics/tests/inline/protectedCallDepecation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedCallError.kt")
      public void testProtectedCallError() {
        runTest("compiler/testData/diagnostics/tests/inline/protectedCallError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("publishedApi.kt")
      public void testPublishedApi() {
        runTest("compiler/testData/diagnostics/tests/inline/publishedApi.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursion.kt")
      public void testRecursion() {
        runTest("compiler/testData/diagnostics/tests/inline/recursion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursiveTypeInPrivateInlineFunction.kt")
      public void testRecursiveTypeInPrivateInlineFunction() {
        runTest("compiler/testData/diagnostics/tests/inline/recursiveTypeInPrivateInlineFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("returnedAnonymousObjects.kt")
      public void testReturnedAnonymousObjects() {
        runTest("compiler/testData/diagnostics/tests/inline/returnedAnonymousObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("returnedAnonymousObjects_2.kt")
      public void testReturnedAnonymousObjects_2() {
        runTest("compiler/testData/diagnostics/tests/inline/returnedAnonymousObjects_2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("returns.kt")
      public void testReturns() {
        runTest("compiler/testData/diagnostics/tests/inline/returns.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sam.kt")
      public void testSam() {
        runTest("compiler/testData/diagnostics/tests/inline/sam.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("stringTemplate.kt")
      public void testStringTemplate() {
        runTest("compiler/testData/diagnostics/tests/inline/stringTemplate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superCall.kt")
      public void testSuperCall() {
        runTest("compiler/testData/diagnostics/tests/inline/superCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superCallDepecation.kt")
      public void testSuperCallDepecation() {
        runTest("compiler/testData/diagnostics/tests/inline/superCallDepecation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superCallDepecationWarning.kt")
      public void testSuperCallDepecationWarning() {
        runTest("compiler/testData/diagnostics/tests/inline/superCallDepecationWarning.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superCallFromMultipleSubclasses.kt")
      public void testSuperCallFromMultipleSubclasses() {
        runTest("compiler/testData/diagnostics/tests/inline/superCallFromMultipleSubclasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superProperty.kt")
      public void testSuperProperty() {
        runTest("compiler/testData/diagnostics/tests/inline/superProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueClasses.kt")
      public void testValueClasses() {
        runTest("compiler/testData/diagnostics/tests/inline/valueClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueOfKFunctionTypeAsArgumentOfInlineFunction.kt")
      public void testValueOfKFunctionTypeAsArgumentOfInlineFunction() {
        runTest("compiler/testData/diagnostics/tests/inline/valueOfKFunctionTypeAsArgumentOfInlineFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("vararg.kt")
      public void testVararg() {
        runTest("compiler/testData/diagnostics/tests/inline/vararg.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("virtualMemberInEnum.kt")
      public void testVirtualMemberInEnum() {
        runTest("compiler/testData/diagnostics/tests/inline/virtualMemberInEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("virtualValInEnum.kt")
      public void testVirtualValInEnum() {
        runTest("compiler/testData/diagnostics/tests/inline/virtualValInEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("when.kt")
      public void testWhen() {
        runTest("compiler/testData/diagnostics/tests/inline/when.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongUsage.kt")
      public void testWrongUsage() {
        runTest("compiler/testData/diagnostics/tests/inline/wrongUsage.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/binaryExpressions")
      @TestDataPath("$PROJECT_ROOT")
      public class BinaryExpressions {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInBinaryExpressions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/binaryExpressions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("andOr.kt")
        public void testAndOr() {
          runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/andOr.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("arrayAccess.kt")
        public void testArrayAccess() {
          runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/arrayAccess.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("assignment.kt")
        public void testAssignment() {
          runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/assignment.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("comparison.kt")
        public void testComparison() {
          runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/comparison.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("componentAccess.kt")
        public void testComponentAccess() {
          runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/componentAccess.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("contains.kt")
        public void testContains() {
          runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/contains.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("mathOperations.kt")
        public void testMathOperations() {
          runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/mathOperations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("rangeTo.kt")
        public void testRangeTo() {
          runTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/rangeTo.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns")
      @TestDataPath("$PROJECT_ROOT")
      public class NonLocalReturns {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNonLocalReturns() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/nonLocalReturns"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("anonymousObjects.kt")
        public void testAnonymousObjects() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/anonymousObjects.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("anonymousObjectsNested.kt")
        public void testAnonymousObjectsNested() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/anonymousObjectsNested.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("explicitReturnType.kt")
        public void testExplicitReturnType() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/explicitReturnType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fromOnlyLocal.kt")
        public void testFromOnlyLocal() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/fromOnlyLocal.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineLambda.kt")
        public void testInlineLambda() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/inlineLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("labeledReturn.kt")
        public void testLabeledReturn() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/labeledReturn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaAsGeneric.kt")
        public void testLambdaAsGeneric() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/lambdaAsGeneric.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaAsNonFunction.kt")
        public void testLambdaAsNonFunction() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/lambdaAsNonFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaWithGlobalReturnsInsideOnlyLocalOne.kt")
        public void testLambdaWithGlobalReturnsInsideOnlyLocalOne() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/lambdaWithGlobalReturnsInsideOnlyLocalOne.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localFun.kt")
        public void testLocalFun() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/localFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedNonLocals.kt")
        public void testNestedNonLocals() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/nestedNonLocals.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noInlineAnnotation.kt")
        public void testNoInlineAnnotation() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/noInlineAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noInlineLambda.kt")
        public void testNoInlineLambda() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/noInlineLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonInlinedClass.kt")
        public void testNonInlinedClass() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/nonInlinedClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyLocalReturnLambda.kt")
        public void testOnlyLocalReturnLambda() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/onlyLocalReturnLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyLocalReturnLambdaBinaryExpr.kt")
        public void testOnlyLocalReturnLambdaBinaryExpr() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/onlyLocalReturnLambdaBinaryExpr.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyAccessorsAndConstructor.kt")
        public void testPropertyAccessorsAndConstructor() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/propertyAccessorsAndConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("toOnlyLocal.kt")
        public void testToOnlyLocal() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/toOnlyLocal.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/nonPublicMember")
      @TestDataPath("$PROJECT_ROOT")
      public class NonPublicMember {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNonPublicMember() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/nonPublicMember"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inAnnotation.kt")
        public void testInAnnotation() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inNonPublicClass.kt")
        public void testInNonPublicClass() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inNonPublicClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inNonPublicInnerClass.kt")
        public void testInNonPublicInnerClass() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inNonPublicInnerClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inPackage.kt")
        public void testInPackage() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inPackage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inPublicClass.kt")
        public void testInPublicClass() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inPublicClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt14887.kt")
        public void testKt14887() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/kt14887.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt55179.kt")
        public void testKt55179() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/kt55179.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localClass.kt")
        public void testLocalClass() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/localClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localClass2.kt")
        public void testLocalClass2() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/localClass2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localFun.kt")
        public void testLocalFun() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/localFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("protectedInlineInsideInternal.kt")
        public void testProtectedInlineInsideInternal() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/protectedInlineInsideInternal.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("publishedApi.kt")
        public void testPublishedApi() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/publishedApi.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/property")
      @TestDataPath("$PROJECT_ROOT")
      public class Property {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInProperty() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/property"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invoke.kt")
        public void testInvoke() {
          runTest("compiler/testData/diagnostics/tests/inline/property/invoke.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyWithBackingField.kt")
        public void testPropertyWithBackingField() {
          runTest("compiler/testData/diagnostics/tests/inline/property/propertyWithBackingField.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unsupportedConstruction.kt")
        public void testUnsupportedConstruction() {
          runTest("compiler/testData/diagnostics/tests/inline/property/unsupportedConstruction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("virtualProperty.kt")
        public void testVirtualProperty() {
          runTest("compiler/testData/diagnostics/tests/inline/property/virtualProperty.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/regressions")
      @TestDataPath("$PROJECT_ROOT")
      public class Regressions {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInRegressions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/regressions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt4341.kt")
        public void testKt4341() {
          runTest("compiler/testData/diagnostics/tests/inline/regressions/kt4341.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/unaryExpressions")
      @TestDataPath("$PROJECT_ROOT")
      public class UnaryExpressions {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInUnaryExpressions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/unaryExpressions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("mathOperation.kt")
        public void testMathOperation() {
          runTest("compiler/testData/diagnostics/tests/inline/unaryExpressions/mathOperation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notOnCall.kt")
        public void testNotOnCall() {
          runTest("compiler/testData/diagnostics/tests/inline/unaryExpressions/notOnCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notOperation.kt")
        public void testNotOperation() {
          runTest("compiler/testData/diagnostics/tests/inline/unaryExpressions/notOperation.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class InlineClasses {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInInlineClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inlineClasses"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basicInlineClassDeclaration.kt")
      public void testBasicInlineClassDeclaration() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/basicInlineClassDeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basicInlineClassDeclarationDisabled.kt")
      public void testBasicInlineClassDeclarationDisabled() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/basicInlineClassDeclarationDisabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegatedPropertyInInlineClass.kt")
      public void testDelegatedPropertyInInlineClass() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/delegatedPropertyInInlineClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionsJvmSignaturesConflictOnInheritance.kt")
      public void testFunctionsJvmSignaturesConflictOnInheritance() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/functionsJvmSignaturesConflictOnInheritance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericInlineClass.kt")
      public void testGenericInlineClass() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/genericInlineClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("identityComparisonWithInlineClasses.kt")
      public void testIdentityComparisonWithInlineClasses() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/identityComparisonWithInlineClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inefficientEqualsOverridingInInlineClass.kt")
      public void testInefficientEqualsOverridingInInlineClass() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/inefficientEqualsOverridingInInlineClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineClassCanImplementInterfaceByDelegation.kt")
      public void testInlineClassCanImplementInterfaceByDelegation() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/inlineClassCanImplementInterfaceByDelegation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineClassCanOnlyImplementInterfaces.kt")
      public void testInlineClassCanOnlyImplementInterfaces() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/inlineClassCanOnlyImplementInterfaces.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineClassCannotImplementInterfaceByDelegation.kt")
      public void testInlineClassCannotImplementInterfaceByDelegation() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/inlineClassCannotImplementInterfaceByDelegation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineClassConstructorParameterWithDefaultValue.kt")
      public void testInlineClassConstructorParameterWithDefaultValue() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/inlineClassConstructorParameterWithDefaultValue.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineClassDeclarationCheck.kt")
      public void testInlineClassDeclarationCheck() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/inlineClassDeclarationCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineClassDeprecated.kt")
      public void testInlineClassDeprecated() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/inlineClassDeprecated.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineClassImplementsCollection.kt")
      public void testInlineClassImplementsCollection() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/inlineClassImplementsCollection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineClassWithForbiddenUnderlyingType.kt")
      public void testInlineClassWithForbiddenUnderlyingType() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/inlineClassWithForbiddenUnderlyingType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineClassesInsideAnnotations.kt")
      public void testInlineClassesInsideAnnotations() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/inlineClassesInsideAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerClassInsideInlineClass.kt")
      public void testInnerClassInsideInlineClass() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/innerClassInsideInlineClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lateinitInlineClassesOff.kt")
      public void testLateinitInlineClassesOff() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/lateinitInlineClassesOff.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lateinitInlineClassesOn.kt")
      public void testLateinitInlineClassesOn() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/lateinitInlineClassesOn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("presenceOfInitializerBlockInsideInlineClass.kt")
      public void testPresenceOfInitializerBlockInsideInlineClass() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/presenceOfInitializerBlockInsideInlineClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("presenceOfPublicPrimaryConstructorForInlineClass.kt")
      public void testPresenceOfPublicPrimaryConstructorForInlineClass() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/presenceOfPublicPrimaryConstructorForInlineClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertiesWithBackingFieldsInsideInlineClass.kt")
      public void testPropertiesWithBackingFieldsInsideInlineClass() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/propertiesWithBackingFieldsInsideInlineClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursiveInlineClasses.kt")
      public void testRecursiveInlineClasses() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/recursiveInlineClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reifiedGenericUnderlyingType.kt")
      public void testReifiedGenericUnderlyingType() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/reifiedGenericUnderlyingType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reservedConstructorsBodyInKotlinPre19.kt")
      public void testReservedConstructorsBodyInKotlinPre19() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/reservedConstructorsBodyInKotlinPre19.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reservedMembersAndConstructsInsideInlineClass.kt")
      public void testReservedMembersAndConstructsInsideInlineClass() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/reservedMembersAndConstructsInsideInlineClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("synchronizedForbidden.kt")
      public void testSynchronizedForbidden() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/synchronizedForbidden.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typedEqualsOperatorDeclarationCheck.kt")
      public void testTypedEqualsOperatorDeclarationCheck() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/typedEqualsOperatorDeclarationCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typedEqualsOperatorModifierInInlineClass.kt")
      public void testTypedEqualsOperatorModifierInInlineClass() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/typedEqualsOperatorModifierInInlineClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unsignedLiteralsWithoutArtifactOnClasspath.kt")
      public void testUnsignedLiteralsWithoutArtifactOnClasspath() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/unsignedLiteralsWithoutArtifactOnClasspath.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargsOnParametersOfInlineClassType.kt")
      public void testVarargsOnParametersOfInlineClassType() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/varargsOnParametersOfInlineClassType.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/inner")
    @TestDataPath("$PROJECT_ROOT")
    public class Inner {
      @RepeatedTest(value = 5)
      @TestMetadata("accessingToJavaNestedClass.kt")
      public void testAccessingToJavaNestedClass() {
        runTest("compiler/testData/diagnostics/tests/inner/accessingToJavaNestedClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("accessingToKotlinNestedClass.kt")
      public void testAccessingToKotlinNestedClass() {
        runTest("compiler/testData/diagnostics/tests/inner/accessingToKotlinNestedClass.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInInner() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inner"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationInInnerClass.kt")
      public void testAnnotationInInnerClass() {
        runTest("compiler/testData/diagnostics/tests/inner/annotationInInnerClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callingOuterGenericClassConstructorWithSelfTypes.kt")
      public void testCallingOuterGenericClassConstructorWithSelfTypes() {
        runTest("compiler/testData/diagnostics/tests/inner/callingOuterGenericClassConstructorWithSelfTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callingOuterGenericClassConstructorWithSelfTypesInitial.kt")
      public void testCallingOuterGenericClassConstructorWithSelfTypesInitial() {
        runTest("compiler/testData/diagnostics/tests/inner/callingOuterGenericClassConstructorWithSelfTypesInitial.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classesInClassObjectHeader.kt")
      public void testClassesInClassObjectHeader() {
        runTest("compiler/testData/diagnostics/tests/inner/classesInClassObjectHeader.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constructorAccess.kt")
      public void testConstructorAccess() {
        runTest("compiler/testData/diagnostics/tests/inner/constructorAccess.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deepInnerClass.kt")
      public void testDeepInnerClass() {
        runTest("compiler/testData/diagnostics/tests/inner/deepInnerClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumEntries.kt")
      public void testEnumEntries() {
        runTest("compiler/testData/diagnostics/tests/inner/enumEntries.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumInInnerClass.kt")
      public void testEnumInInnerClass() {
        runTest("compiler/testData/diagnostics/tests/inner/enumInInnerClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extensionFun.kt")
      public void testExtensionFun() {
        runTest("compiler/testData/diagnostics/tests/inner/extensionFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extensionLambdaInsideNestedClass.kt")
      public void testExtensionLambdaInsideNestedClass() {
        runTest("compiler/testData/diagnostics/tests/inner/extensionLambdaInsideNestedClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("illegalModifier_lv12.kt")
      public void testIllegalModifier_lv12() {
        runTest("compiler/testData/diagnostics/tests/inner/illegalModifier_lv12.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inheritedInnerAndNested.kt")
      public void testInheritedInnerAndNested() {
        runTest("compiler/testData/diagnostics/tests/inner/inheritedInnerAndNested.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerClassInEnumEntryClassMemberResolve.kt")
      public void testInnerClassInEnumEntryClassMemberResolve() {
        runTest("compiler/testData/diagnostics/tests/inner/innerClassInEnumEntryClassMemberResolve.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerClassInEnumEntryClass_lv12.kt")
      public void testInnerClassInEnumEntryClass_lv12() {
        runTest("compiler/testData/diagnostics/tests/inner/innerClassInEnumEntryClass_lv12.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerClassInEnumEntryClass_lv13.kt")
      public void testInnerClassInEnumEntryClass_lv13() {
        runTest("compiler/testData/diagnostics/tests/inner/innerClassInEnumEntryClass_lv13.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InnerClassNameClash.kt")
      public void testInnerClassNameClash() {
        runTest("compiler/testData/diagnostics/tests/inner/InnerClassNameClash.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerClassesInStaticParameters.kt")
      public void testInnerClassesInStaticParameters() {
        runTest("compiler/testData/diagnostics/tests/inner/innerClassesInStaticParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerConstructorsFromQualifiers.kt")
      public void testInnerConstructorsFromQualifiers() {
        runTest("compiler/testData/diagnostics/tests/inner/innerConstructorsFromQualifiers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerConstructorsFromQualifiersWithIrrelevantCandidate.kt")
      public void testInnerConstructorsFromQualifiersWithIrrelevantCandidate() {
        runTest("compiler/testData/diagnostics/tests/inner/innerConstructorsFromQualifiersWithIrrelevantCandidate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerErrorForClassObjects.kt")
      public void testInnerErrorForClassObjects() {
        runTest("compiler/testData/diagnostics/tests/inner/innerErrorForClassObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerErrorForObjects.kt")
      public void testInnerErrorForObjects() {
        runTest("compiler/testData/diagnostics/tests/inner/innerErrorForObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerThisSuper.kt")
      public void testInnerThisSuper() {
        runTest("compiler/testData/diagnostics/tests/inner/innerThisSuper.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("interfaceInInnerClass.kt")
      public void testInterfaceInInnerClass() {
        runTest("compiler/testData/diagnostics/tests/inner/interfaceInInnerClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt5854.kt")
      public void testKt5854() {
        runTest("compiler/testData/diagnostics/tests/inner/kt5854.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt6026.kt")
      public void testKt6026() {
        runTest("compiler/testData/diagnostics/tests/inner/kt6026.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localClass.kt")
      public void testLocalClass() {
        runTest("compiler/testData/diagnostics/tests/inner/localClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localClassInsideNested.kt")
      public void testLocalClassInsideNested() {
        runTest("compiler/testData/diagnostics/tests/inner/localClassInsideNested.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localThisSuper.kt")
      public void testLocalThisSuper() {
        runTest("compiler/testData/diagnostics/tests/inner/localThisSuper.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("modality.kt")
      public void testModality() {
        runTest("compiler/testData/diagnostics/tests/inner/modality.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassAccessedViaInstanceReference.kt")
      public void testNestedClassAccessedViaInstanceReference() {
        runTest("compiler/testData/diagnostics/tests/inner/nestedClassAccessedViaInstanceReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassExtendsOuter.kt")
      public void testNestedClassExtendsOuter() {
        runTest("compiler/testData/diagnostics/tests/inner/nestedClassExtendsOuter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassExtendsOuterGeneric.kt")
      public void testNestedClassExtendsOuterGeneric() {
        runTest("compiler/testData/diagnostics/tests/inner/nestedClassExtendsOuterGeneric.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassInObject.kt")
      public void testNestedClassInObject() {
        runTest("compiler/testData/diagnostics/tests/inner/nestedClassInObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassNotAllowed_after.kt")
      public void testNestedClassNotAllowed_after() {
        runTest("compiler/testData/diagnostics/tests/inner/nestedClassNotAllowed_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassNotAllowed_before.kt")
      public void testNestedClassNotAllowed_before() {
        runTest("compiler/testData/diagnostics/tests/inner/nestedClassNotAllowed_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassTypeParameterNameCollision.kt")
      public void testNestedClassTypeParameterNameCollision() {
        runTest("compiler/testData/diagnostics/tests/inner/nestedClassTypeParameterNameCollision.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedObject.kt")
      public void testNestedObject() {
        runTest("compiler/testData/diagnostics/tests/inner/nestedObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedVsInnerAccessOuterMember.kt")
      public void testNestedVsInnerAccessOuterMember() {
        runTest("compiler/testData/diagnostics/tests/inner/nestedVsInnerAccessOuterMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("outerGenericParam.kt")
      public void testOuterGenericParam() {
        runTest("compiler/testData/diagnostics/tests/inner/outerGenericParam.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("outerProtectedMember.kt")
      public void testOuterProtectedMember() {
        runTest("compiler/testData/diagnostics/tests/inner/outerProtectedMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("outerSuperClassMember.kt")
      public void testOuterSuperClassMember() {
        runTest("compiler/testData/diagnostics/tests/inner/outerSuperClassMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("referenceToSelfInLocal.kt")
      public void testReferenceToSelfInLocal() {
        runTest("compiler/testData/diagnostics/tests/inner/referenceToSelfInLocal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolvePackageClassInObjects.kt")
      public void testResolvePackageClassInObjects() {
        runTest("compiler/testData/diagnostics/tests/inner/resolvePackageClassInObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("selfAnnotationForClassObject.kt")
      public void testSelfAnnotationForClassObject() {
        runTest("compiler/testData/diagnostics/tests/inner/selfAnnotationForClassObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("starProjectedInnerType.kt")
      public void testStarProjectedInnerType() {
        runTest("compiler/testData/diagnostics/tests/inner/starProjectedInnerType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("traits.kt")
      public void testTraits() {
        runTest("compiler/testData/diagnostics/tests/inner/traits.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeVarianceConflict.kt")
      public void testTypeVarianceConflict() {
        runTest("compiler/testData/diagnostics/tests/inner/typeVarianceConflict.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeVarianceConflictFeatureOn.kt")
      public void testTypeVarianceConflictFeatureOn() {
        runTest("compiler/testData/diagnostics/tests/inner/typeVarianceConflictFeatureOn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("visibility.kt")
      public void testVisibility() {
        runTest("compiler/testData/diagnostics/tests/inner/visibility.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression")
      @TestDataPath("$PROJECT_ROOT")
      public class QualifiedExpression {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInQualifiedExpression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/inner/qualifiedExpression"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classObjectOfNestedClass.kt")
        public void testClassObjectOfNestedClass() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/classObjectOfNestedClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructNestedClass.kt")
        public void testConstructNestedClass() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/constructNestedClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dataLocalVariable.kt")
        public void testDataLocalVariable() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/dataLocalVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("enumConstant.kt")
        public void testEnumConstant() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/enumConstant.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericNestedClass.kt")
        public void testGenericNestedClass() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/genericNestedClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("importNestedClass.kt")
        public void testImportNestedClass() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/importNestedClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedClassInPackage.kt")
        public void testNestedClassInPackage() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedClassInPackage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedEnumConstant.kt")
        public void testNestedEnumConstant() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedEnumConstant.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedObjects.kt")
        public void testNestedObjects() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedObjects.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typePosition.kt")
        public void testTypePosition() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/typePosition.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/integerLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class IntegerLiterals {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInIntegerLiterals() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/integerLiterals"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("complexMapping.kt")
      public void testComplexMapping() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/complexMapping.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constantUnaryOperators.kt")
      public void testConstantUnaryOperators() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/constantUnaryOperators.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intToLongConversion.kt")
      public void testIntToLongConversion() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/intToLongConversion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("literalInCompletedGeneric.kt")
      public void testLiteralInCompletedGeneric() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/literalInCompletedGeneric.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("literalsInInference.kt")
      public void testLiteralsInInference() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/literalsInInference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sortedBy.kt")
      public void testSortedBy() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/sortedBy.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealiasOnLong.kt")
      public void testTypealiasOnLong() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/typealiasOnLong.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("vararg.kt")
      public void testVararg() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/vararg.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/j+k")
    @TestDataPath("$PROJECT_ROOT")
    public class J_k {
      @RepeatedTest(value = 5)
      @TestMetadata("accessClassObjectFromJava.kt")
      public void testAccessClassObjectFromJava() {
        runTest("compiler/testData/diagnostics/tests/j+k/accessClassObjectFromJava.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInJ_k() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ambiguousSamAdapters.kt")
      public void testAmbiguousSamAdapters() {
        runTest("compiler/testData/diagnostics/tests/j+k/ambiguousSamAdapters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationWithArgumentsMissingDependencies.kt")
      public void testAnnotationWithArgumentsMissingDependencies() {
        runTest("compiler/testData/diagnostics/tests/j+k/annotationWithArgumentsMissingDependencies.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationsInheritance.kt")
      public void testAnnotationsInheritance() {
        runTest("compiler/testData/diagnostics/tests/j+k/annotationsInheritance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayAnnotationConstructorReference.kt")
      public void testArrayAnnotationConstructorReference() {
        runTest("compiler/testData/diagnostics/tests/j+k/arrayAnnotationConstructorReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayOfStarParametrized.kt")
      public void testArrayOfStarParametrized() {
        runTest("compiler/testData/diagnostics/tests/j+k/arrayOfStarParametrized.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callableReferencesStaticMemberClash.kt")
      public void testCallableReferencesStaticMemberClash() {
        runTest("compiler/testData/diagnostics/tests/j+k/callableReferencesStaticMemberClash.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("canDeclareIfSamAdapterIsInherited.kt")
      public void testCanDeclareIfSamAdapterIsInherited() {
        runTest("compiler/testData/diagnostics/tests/j+k/canDeclareIfSamAdapterIsInherited.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("collectorInference.kt")
      public void testCollectorInference() {
        runTest("compiler/testData/diagnostics/tests/j+k/collectorInference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("computeIfAbsentConcurrent.kt")
      public void testComputeIfAbsentConcurrent() {
        runTest("compiler/testData/diagnostics/tests/j+k/computeIfAbsentConcurrent.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("contravariantIterable.kt")
      public void testContravariantIterable() {
        runTest("compiler/testData/diagnostics/tests/j+k/contravariantIterable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("defaultMethods.kt")
      public void testDefaultMethods() {
        runTest("compiler/testData/diagnostics/tests/j+k/defaultMethods.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("defaultMethodsIndirectInheritance.kt")
      public void testDefaultMethodsIndirectInheritance() {
        runTest("compiler/testData/diagnostics/tests/j+k/defaultMethodsIndirectInheritance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("differentFilename.kt")
      public void testDifferentFilename() {
        runTest("compiler/testData/diagnostics/tests/j+k/differentFilename.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumGetOrdinal.kt")
      public void testEnumGetOrdinal() {
        runTest("compiler/testData/diagnostics/tests/j+k/enumGetOrdinal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("exceptionMessage.kt")
      public void testExceptionMessage() {
        runTest("compiler/testData/diagnostics/tests/j+k/exceptionMessage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fieldOverridesField.kt")
      public void testFieldOverridesField() {
        runTest("compiler/testData/diagnostics/tests/j+k/fieldOverridesField.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fieldOverridesFieldOfDifferentType.kt")
      public void testFieldOverridesFieldOfDifferentType() {
        runTest("compiler/testData/diagnostics/tests/j+k/fieldOverridesFieldOfDifferentType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fieldOverridesNothing.kt")
      public void testFieldOverridesNothing() {
        runTest("compiler/testData/diagnostics/tests/j+k/fieldOverridesNothing.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("finalCollectionSize.kt")
      public void testFinalCollectionSize() {
        runTest("compiler/testData/diagnostics/tests/j+k/finalCollectionSize.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("flexibleNothing.kt")
      public void testFlexibleNothing() {
        runTest("compiler/testData/diagnostics/tests/j+k/flexibleNothing.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("flexibleTypeVariablePosition.kt")
      public void testFlexibleTypeVariablePosition() {
        runTest("compiler/testData/diagnostics/tests/j+k/flexibleTypeVariablePosition.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("flexibleTypeVariablePositionDnnRepresentation.kt")
      public void testFlexibleTypeVariablePositionDnnRepresentation() {
        runTest("compiler/testData/diagnostics/tests/j+k/flexibleTypeVariablePositionDnnRepresentation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("futureGet.kt")
      public void testFutureGet() {
        runTest("compiler/testData/diagnostics/tests/j+k/futureGet.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("futureGetDnnRepresentation.kt")
      public void testFutureGetDnnRepresentation() {
        runTest("compiler/testData/diagnostics/tests/j+k/futureGetDnnRepresentation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericConstructorWithMultipleBounds.kt")
      public void testGenericConstructorWithMultipleBounds() {
        runTest("compiler/testData/diagnostics/tests/j+k/genericConstructorWithMultipleBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("GenericsInSupertypes.kt")
      public void testGenericsInSupertypes() {
        runTest("compiler/testData/diagnostics/tests/j+k/GenericsInSupertypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inheritAbstractSamAdapter.kt")
      public void testInheritAbstractSamAdapter() {
        runTest("compiler/testData/diagnostics/tests/j+k/inheritAbstractSamAdapter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inheritanceStaticMethodFromInterface.kt")
      public void testInheritanceStaticMethodFromInterface() {
        runTest("compiler/testData/diagnostics/tests/j+k/inheritanceStaticMethodFromInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InheritedGenericFunction.kt")
      public void testInheritedGenericFunction() {
        runTest("compiler/testData/diagnostics/tests/j+k/InheritedGenericFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InnerClassFromJava.kt")
      public void testInnerClassFromJava() {
        runTest("compiler/testData/diagnostics/tests/j+k/InnerClassFromJava.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerLightClass.kt")
      public void testInnerLightClass() {
        runTest("compiler/testData/diagnostics/tests/j+k/innerLightClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerNestedClassFromJava.kt")
      public void testInnerNestedClassFromJava() {
        runTest("compiler/testData/diagnostics/tests/j+k/innerNestedClassFromJava.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("integerNotNullable.kt")
      public void testIntegerNotNullable() {
        runTest("compiler/testData/diagnostics/tests/j+k/integerNotNullable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("internalClash.kt")
      public void testInternalClash() {
        runTest("compiler/testData/diagnostics/tests/j+k/internalClash.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("internalClash2.kt")
      public void testInternalClash2() {
        runTest("compiler/testData/diagnostics/tests/j+k/internalClash2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionWithJavaVoidNothing.kt")
      public void testIntersectionWithJavaVoidNothing() {
        runTest("compiler/testData/diagnostics/tests/j+k/intersectionWithJavaVoidNothing.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invisibleFake.kt")
      public void testInvisibleFake() {
        runTest("compiler/testData/diagnostics/tests/j+k/invisibleFake.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invisibleFake2.kt")
      public void testInvisibleFake2() {
        runTest("compiler/testData/diagnostics/tests/j+k/invisibleFake2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invisiblePackagePrivateInheritedMember.kt")
      public void testInvisiblePackagePrivateInheritedMember() {
        runTest("compiler/testData/diagnostics/tests/j+k/invisiblePackagePrivateInheritedMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaLangStringCtr.kt")
      public void testJavaLangStringCtr() {
        runTest("compiler/testData/diagnostics/tests/j+k/javaLangStringCtr.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaLikeCallOnTypeParameter.kt")
      public void testJavaLikeCallOnTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/j+k/javaLikeCallOnTypeParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaStaticImport.kt")
      public void testJavaStaticImport() {
        runTest("compiler/testData/diagnostics/tests/j+k/javaStaticImport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaSupertypeNameDisambiguation.kt")
      public void testJavaSupertypeNameDisambiguation() {
        runTest("compiler/testData/diagnostics/tests/j+k/javaSupertypeNameDisambiguation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("jkjPrivateProperty.kt")
      public void testJkjPrivateProperty() {
        runTest("compiler/testData/diagnostics/tests/j+k/jkjPrivateProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("KJKInheritance.kt")
      public void testKJKInheritance() {
        runTest("compiler/testData/diagnostics/tests/j+k/KJKInheritance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("KJKInheritanceGeneric.kt")
      public void testKJKInheritanceGeneric() {
        runTest("compiler/testData/diagnostics/tests/j+k/KJKInheritanceGeneric.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kjkImplicitReturnType.kt")
      public void testKjkImplicitReturnType() {
        runTest("compiler/testData/diagnostics/tests/j+k/kjkImplicitReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kjkRawTypeWithKotlinUpperBound.kt")
      public void testKjkRawTypeWithKotlinUpperBound() {
        runTest("compiler/testData/diagnostics/tests/j+k/kjkRawTypeWithKotlinUpperBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kjkimplicitTypesCrash.kt")
      public void testKjkimplicitTypesCrash() {
        runTest("compiler/testData/diagnostics/tests/j+k/kjkimplicitTypesCrash.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1402.kt")
      public void testKt1402() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt1402.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1431.kt")
      public void testKt1431() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt1431.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1730_implementCharSequence.kt")
      public void testKt1730_implementCharSequence() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt1730_implementCharSequence.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2152.kt")
      public void testKt2152() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt2152.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2394.kt")
      public void testKt2394() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt2394.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2606.kt")
      public void testKt2606() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt2606.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2619.kt")
      public void testKt2619() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt2619.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2641.kt")
      public void testKt2641() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt2641.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2890.kt")
      public void testKt2890() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt2890.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3307.kt")
      public void testKt3307() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt3307.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3311.kt")
      public void testKt3311() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt3311.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt36856.kt")
      public void testKt36856() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt36856.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt60580.kt")
      public void testKt60580() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt60580.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt62118.kt")
      public void testKt62118() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt62118.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt62197.kt")
      public void testKt62197() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt62197.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt6720_abstractProperty.kt")
      public void testKt6720_abstractProperty() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt6720_abstractProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt7523.kt")
      public void testKt7523() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt7523.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ktij24272.kt")
      public void testKtij24272() {
        runTest("compiler/testData/diagnostics/tests/j+k/ktij24272.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("matchers.kt")
      public void testMatchers() {
        runTest("compiler/testData/diagnostics/tests/j+k/matchers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("mutableIterator.kt")
      public void testMutableIterator() {
        runTest("compiler/testData/diagnostics/tests/j+k/mutableIterator.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullForOptionalOf.kt")
      public void testNullForOptionalOf() {
        runTest("compiler/testData/diagnostics/tests/j+k/nullForOptionalOf.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullForOptionalOrElse.kt")
      public void testNullForOptionalOrElse() {
        runTest("compiler/testData/diagnostics/tests/j+k/nullForOptionalOrElse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableLinkedListToQueue.kt")
      public void testNullableLinkedListToQueue() {
        runTest("compiler/testData/diagnostics/tests/j+k/nullableLinkedListToQueue.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableLinkedListToQueueDnnRepresentation.kt")
      public void testNullableLinkedListToQueueDnnRepresentation() {
        runTest("compiler/testData/diagnostics/tests/j+k/nullableLinkedListToQueueDnnRepresentation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableRawTypeWithFlexibleArguments.kt")
      public void testNullableRawTypeWithFlexibleArguments() {
        runTest("compiler/testData/diagnostics/tests/j+k/nullableRawTypeWithFlexibleArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("orderOfSupertypesAndFakeOverrides_1.kt")
      public void testOrderOfSupertypesAndFakeOverrides_1() {
        runTest("compiler/testData/diagnostics/tests/j+k/orderOfSupertypesAndFakeOverrides_1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("orderOfSupertypesAndFakeOverrides_2.kt")
      public void testOrderOfSupertypesAndFakeOverrides_2() {
        runTest("compiler/testData/diagnostics/tests/j+k/orderOfSupertypesAndFakeOverrides_2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overrideRawType.kt")
      public void testOverrideRawType() {
        runTest("compiler/testData/diagnostics/tests/j+k/overrideRawType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OverrideVararg.kt")
      public void testOverrideVararg() {
        runTest("compiler/testData/diagnostics/tests/j+k/OverrideVararg.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overrideWithErasure.kt")
      public void testOverrideWithErasure() {
        runTest("compiler/testData/diagnostics/tests/j+k/overrideWithErasure.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overrideWithSamAndTypeParameter.kt")
      public void testOverrideWithSamAndTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/j+k/overrideWithSamAndTypeParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("packagePrivateClassStaticMember.kt")
      public void testPackagePrivateClassStaticMember() {
        runTest("compiler/testData/diagnostics/tests/j+k/packagePrivateClassStaticMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("packageVisibility.kt")
      public void testPackageVisibility() {
        runTest("compiler/testData/diagnostics/tests/j+k/packageVisibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateFieldOverridesNothing.kt")
      public void testPrivateFieldOverridesNothing() {
        runTest("compiler/testData/diagnostics/tests/j+k/privateFieldOverridesNothing.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateNestedClassStaticMember.kt")
      public void testPrivateNestedClassStaticMember() {
        runTest("compiler/testData/diagnostics/tests/j+k/privateNestedClassStaticMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privatePropertyAndSetterMultiModule.kt")
      public void testPrivatePropertyAndSetterMultiModule() {
        runTest("compiler/testData/diagnostics/tests/j+k/privatePropertyAndSetterMultiModule.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propagateFlexibleTypeToAnonymousFunction.kt")
      public void testPropagateFlexibleTypeToAnonymousFunction() {
        runTest("compiler/testData/diagnostics/tests/j+k/propagateFlexibleTypeToAnonymousFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedStaticSamePackage.kt")
      public void testProtectedStaticSamePackage() {
        runTest("compiler/testData/diagnostics/tests/j+k/protectedStaticSamePackage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("purelyImplementedSupertype.kt")
      public void testPurelyImplementedSupertype() {
        runTest("compiler/testData/diagnostics/tests/j+k/purelyImplementedSupertype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("rawOverride.kt")
      public void testRawOverride() {
        runTest("compiler/testData/diagnostics/tests/j+k/rawOverride.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("rawTypeCrash.kt")
      public void testRawTypeCrash() {
        runTest("compiler/testData/diagnostics/tests/j+k/rawTypeCrash.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("rawTypeScope.kt")
      public void testRawTypeScope() {
        runTest("compiler/testData/diagnostics/tests/j+k/rawTypeScope.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("rawTypesFromCaptured.kt")
      public void testRawTypesFromCaptured() {
        runTest("compiler/testData/diagnostics/tests/j+k/rawTypesFromCaptured.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("rawTypesFromCapturedOriginal.kt")
      public void testRawTypesFromCapturedOriginal() {
        runTest("compiler/testData/diagnostics/tests/j+k/rawTypesFromCapturedOriginal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("rawUpperBounds.kt")
      public void testRawUpperBounds() {
        runTest("compiler/testData/diagnostics/tests/j+k/rawUpperBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("receiverEnhancement.kt")
      public void testReceiverEnhancement() {
        runTest("compiler/testData/diagnostics/tests/j+k/receiverEnhancement.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursionWithJavaSyntheticProperty.kt")
      public void testRecursionWithJavaSyntheticProperty() {
        runTest("compiler/testData/diagnostics/tests/j+k/recursionWithJavaSyntheticProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursiveRawUpperBound.kt")
      public void testRecursiveRawUpperBound() {
        runTest("compiler/testData/diagnostics/tests/j+k/recursiveRawUpperBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursiveRawUpperBound2.kt")
      public void testRecursiveRawUpperBound2() {
        runTest("compiler/testData/diagnostics/tests/j+k/recursiveRawUpperBound2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursiveRawUpperBound3.kt")
      public void testRecursiveRawUpperBound3() {
        runTest("compiler/testData/diagnostics/tests/j+k/recursiveRawUpperBound3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursiveSelfTypes.kt")
      public void testRecursiveSelfTypes() {
        runTest("compiler/testData/diagnostics/tests/j+k/recursiveSelfTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("runnableOrCallable.kt")
      public void testRunnableOrCallable() {
        runTest("compiler/testData/diagnostics/tests/j+k/runnableOrCallable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("safeCallDefinitelyNotNull.kt")
      public void testSafeCallDefinitelyNotNull() {
        runTest("compiler/testData/diagnostics/tests/j+k/safeCallDefinitelyNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samInConstructorWithGenerics.kt")
      public void testSamInConstructorWithGenerics() {
        runTest("compiler/testData/diagnostics/tests/j+k/samInConstructorWithGenerics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samWithConsumer.kt")
      public void testSamWithConsumer() {
        runTest("compiler/testData/diagnostics/tests/j+k/samWithConsumer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("selectMoreSpecific.kt")
      public void testSelectMoreSpecific() {
        runTest("compiler/testData/diagnostics/tests/j+k/selectMoreSpecific.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("serializable.kt")
      public void testSerializable() {
        runTest("compiler/testData/diagnostics/tests/j+k/serializable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("shadowingPrimitiveStaticField.kt")
      public void testShadowingPrimitiveStaticField() {
        runTest("compiler/testData/diagnostics/tests/j+k/shadowingPrimitiveStaticField.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Simple.kt")
      public void testSimple() {
        runTest("compiler/testData/diagnostics/tests/j+k/Simple.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("specialBridges.kt")
      public void testSpecialBridges() {
        runTest("compiler/testData/diagnostics/tests/j+k/specialBridges.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("staticImportViaInheritance.kt")
      public void testStaticImportViaInheritance() {
        runTest("compiler/testData/diagnostics/tests/j+k/staticImportViaInheritance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("StaticMembersFromSuperclasses.kt")
      public void testStaticMembersFromSuperclasses() {
        runTest("compiler/testData/diagnostics/tests/j+k/StaticMembersFromSuperclasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("staticMethodInClass.kt")
      public void testStaticMethodInClass() {
        runTest("compiler/testData/diagnostics/tests/j+k/staticMethodInClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SupertypeArgumentsNullability-NotNull-SpecialTypes.kt")
      public void testSupertypeArgumentsNullability_NotNull_SpecialTypes() {
        runTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-NotNull-SpecialTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SupertypeArgumentsNullability-NotNull-UserTypes.kt")
      public void testSupertypeArgumentsNullability_NotNull_UserTypes() {
        runTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-NotNull-UserTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SupertypeArgumentsNullability-SpecialTypes.kt")
      public void testSupertypeArgumentsNullability_SpecialTypes() {
        runTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-SpecialTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SupertypeArgumentsNullability-UserTypes.kt")
      public void testSupertypeArgumentsNullability_UserTypes() {
        runTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-UserTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("supertypeUsesNested.kt")
      public void testSupertypeUsesNested() {
        runTest("compiler/testData/diagnostics/tests/j+k/supertypeUsesNested.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("syntheticAssignmentInLambdaExpressionBody.kt")
      public void testSyntheticAssignmentInLambdaExpressionBody() {
        runTest("compiler/testData/diagnostics/tests/j+k/syntheticAssignmentInLambdaExpressionBody.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("syntheticPropertyOverridden.kt")
      public void testSyntheticPropertyOverridden() {
        runTest("compiler/testData/diagnostics/tests/j+k/syntheticPropertyOverridden.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("syntheticPropertyOverridden2.kt")
      public void testSyntheticPropertyOverridden2() {
        runTest("compiler/testData/diagnostics/tests/j+k/syntheticPropertyOverridden2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("throwableConstructor.kt")
      public void testThrowableConstructor() {
        runTest("compiler/testData/diagnostics/tests/j+k/throwableConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("traitDefaultCall.kt")
      public void testTraitDefaultCall() {
        runTest("compiler/testData/diagnostics/tests/j+k/traitDefaultCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasWithSamConstructor.kt")
      public void testTypeAliasWithSamConstructor() {
        runTest("compiler/testData/diagnostics/tests/j+k/typeAliasWithSamConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("UnboxingNulls.kt")
      public void testUnboxingNulls() {
        runTest("compiler/testData/diagnostics/tests/j+k/UnboxingNulls.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("withTestConnection.kt")
      public void testWithTestConnection() {
        runTest("compiler/testData/diagnostics/tests/j+k/withTestConnection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("withTestConnection2.kt")
      public void testWithTestConnection2() {
        runTest("compiler/testData/diagnostics/tests/j+k/withTestConnection2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("withTestConnection3.kt")
      public void testWithTestConnection3() {
        runTest("compiler/testData/diagnostics/tests/j+k/withTestConnection3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("withTestConnection4.kt")
      public void testWithTestConnection4() {
        runTest("compiler/testData/diagnostics/tests/j+k/withTestConnection4.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongVarianceInJava.kt")
      public void testWrongVarianceInJava() {
        runTest("compiler/testData/diagnostics/tests/j+k/wrongVarianceInJava.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/brokenCode")
      @TestDataPath("$PROJECT_ROOT")
      public class BrokenCode {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInBrokenCode() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/brokenCode"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classDuplicates.kt")
        public void testClassDuplicates() {
          runTest("compiler/testData/diagnostics/tests/j+k/brokenCode/classDuplicates.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fieldDuplicates.kt")
        public void testFieldDuplicates() {
          runTest("compiler/testData/diagnostics/tests/j+k/brokenCode/fieldDuplicates.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/collectionOverrides")
      @TestDataPath("$PROJECT_ROOT")
      public class CollectionOverrides {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCollectionOverrides() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/collectionOverrides"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("charAtAndOverloadWithoutExplicitOverride.kt")
        public void testCharAtAndOverloadWithoutExplicitOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/charAtAndOverloadWithoutExplicitOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("charBuffer.kt")
        public void testCharBuffer() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/charBuffer.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("collectionStringImpl.kt")
        public void testCollectionStringImpl() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/collectionStringImpl.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("commonCollections.kt")
        public void testCommonCollections() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/commonCollections.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("contains.kt")
        public void testContains() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/contains.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("containsAll.kt")
        public void testContainsAll() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/containsAll.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("containsAndOverload.kt")
        public void testContainsAndOverload() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/containsAndOverload.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("containsAndOverloadWithoutExplicitOverride.kt")
        public void testContainsAndOverloadWithoutExplicitOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/containsAndOverloadWithoutExplicitOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("getCharSequence.kt")
        public void testGetCharSequence() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/getCharSequence.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intersectionWithMappedSignature.kt")
        public void testIntersectionWithMappedSignature() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/intersectionWithMappedSignature.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("irrelevantCharAtAbstract.kt")
        public void testIrrelevantCharAtAbstract() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantCharAtAbstract.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("irrelevantImplCharSequence.kt")
        public void testIrrelevantImplCharSequence() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantImplCharSequence.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("irrelevantImplCharSequenceKotlin.kt")
        public void testIrrelevantImplCharSequenceKotlin() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantImplCharSequenceKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("irrelevantImplMutableList.kt")
        public void testIrrelevantImplMutableList() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantImplMutableList.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("irrelevantImplMutableListKotlin.kt")
        public void testIrrelevantImplMutableListKotlin() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantImplMutableListKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("irrelevantMapGetAbstract.kt")
        public void testIrrelevantMapGetAbstract() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantMapGetAbstract.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("mapGetOverride.kt")
        public void testMapGetOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/mapGetOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonDirectHiddenOverride.kt")
        public void testNonDirectHiddenOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/nonDirectHiddenOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("removeAt.kt")
        public void testRemoveAt() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/removeAt.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sizeFromKotlinOverriddenInJava.kt")
        public void testSizeFromKotlinOverriddenInJava() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/sizeFromKotlinOverriddenInJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("weirdCharBuffers.kt")
        public void testWeirdCharBuffers() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/weirdCharBuffers.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/deprecations")
      @TestDataPath("$PROJECT_ROOT")
      public class Deprecations {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDeprecations() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/deprecations"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doNotMarkWriteIfGetterDeprecated.kt")
        public void testDoNotMarkWriteIfGetterDeprecated() {
          runTest("compiler/testData/diagnostics/tests/j+k/deprecations/doNotMarkWriteIfGetterDeprecated.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("forFakeOverrides.kt")
        public void testForFakeOverrides() {
          runTest("compiler/testData/diagnostics/tests/j+k/deprecations/forFakeOverrides.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("forMixedOverride.kt")
        public void testForMixedOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/deprecations/forMixedOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("forOverrides.kt")
        public void testForOverrides() {
          runTest("compiler/testData/diagnostics/tests/j+k/deprecations/forOverrides.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("forSyntheticPropertyOverrides.kt")
        public void testForSyntheticPropertyOverrides() {
          runTest("compiler/testData/diagnostics/tests/j+k/deprecations/forSyntheticPropertyOverrides.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/genericConstructor")
      @TestDataPath("$PROJECT_ROOT")
      public class GenericConstructor {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInGenericConstructor() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/genericConstructor"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classTypeParameterInferredFromArgument.kt")
        public void testClassTypeParameterInferredFromArgument() {
          runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/classTypeParameterInferredFromArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerClass.kt")
        public void testInnerClass() {
          runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/innerClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noClassTypeParameters.kt")
        public void testNoClassTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/noClassTypeParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noClassTypeParametersInvParameter.kt")
        public void testNoClassTypeParametersInvParameter() {
          runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/noClassTypeParametersInvParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursive.kt")
        public void testRecursive() {
          runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/recursive.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("selfTypes.kt")
        public void testSelfTypes() {
          runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/selfTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superCall.kt")
        public void testSuperCall() {
          runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/superCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superCallImpossibleToInfer.kt")
        public void testSuperCallImpossibleToInfer() {
          runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/superCallImpossibleToInfer.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withClassTypeParameters.kt")
        public void testWithClassTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/withClassTypeParameters.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/polymorphicSignature")
      @TestDataPath("$PROJECT_ROOT")
      public class PolymorphicSignature {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInPolymorphicSignature() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/polymorphicSignature"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("spreadOperator_after.kt")
        public void testSpreadOperator_after() {
          runTest("compiler/testData/diagnostics/tests/j+k/polymorphicSignature/spreadOperator_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("spreadOperator_before.kt")
        public void testSpreadOperator_before() {
          runTest("compiler/testData/diagnostics/tests/j+k/polymorphicSignature/spreadOperator_before.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/primitiveOverrides")
      @TestDataPath("$PROJECT_ROOT")
      public class PrimitiveOverrides {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInPrimitiveOverrides() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/primitiveOverrides"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt11140.kt")
        public void testKt11140() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/kt11140.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullAnnotated.kt")
        public void testNotNullAnnotated() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/notNullAnnotated.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("removeAt.kt")
        public void testRemoveAt() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/removeAt.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("specializedMap.kt")
        public void testSpecializedMap() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/specializedMap.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("triangleWithFlexibleType.kt")
        public void testTriangleWithFlexibleType() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithFlexibleType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("triangleWithFlexibleTypeAndSubstitution.kt")
        public void testTriangleWithFlexibleTypeAndSubstitution() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithFlexibleTypeAndSubstitution.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("triangleWithFlexibleTypeAndSubstitution2.kt")
        public void testTriangleWithFlexibleTypeAndSubstitution2() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithFlexibleTypeAndSubstitution2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("triangleWithFlexibleTypeAndSubstitution3.kt")
        public void testTriangleWithFlexibleTypeAndSubstitution3() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithFlexibleTypeAndSubstitution3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("triangleWithFlexibleTypeAndSubstitution4.kt")
        public void testTriangleWithFlexibleTypeAndSubstitution4() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithFlexibleTypeAndSubstitution4.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("triangleWithFlexibleTypeAndSubstitution5.kt")
        public void testTriangleWithFlexibleTypeAndSubstitution5() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithFlexibleTypeAndSubstitution5.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("triangleWithNotNullType.kt")
        public void testTriangleWithNotNullType() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithNotNullType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("triangleWithNullableType.kt")
        public void testTriangleWithNullableType() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithNullableType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/primitiveOverridesWithInlineClass")
      @TestDataPath("$PROJECT_ROOT")
      public class PrimitiveOverridesWithInlineClass {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInPrimitiveOverridesWithInlineClass() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/primitiveOverridesWithInlineClass"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineClassErasedToPrimitiveInt.kt")
        public void testInlineClassErasedToPrimitiveInt() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverridesWithInlineClass/inlineClassErasedToPrimitiveInt.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/properties")
      @TestDataPath("$PROJECT_ROOT")
      public class Properties {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInProperties() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/properties"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fieldPropertyOverloads.kt")
        public void testFieldPropertyOverloads() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/fieldPropertyOverloads.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fieldPropertyOverloadsDisabled.kt")
        public void testFieldPropertyOverloadsDisabled() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/fieldPropertyOverloadsDisabled.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fieldPropertyOverloadsNI.kt")
        public void testFieldPropertyOverloadsNI() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/fieldPropertyOverloadsNI.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("interface.kt")
        public void testInterface() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/interface.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("isName.kt")
        public void testIsName() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/isName.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("staticFieldPropertyOverloads.kt")
        public void testStaticFieldPropertyOverloads() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/staticFieldPropertyOverloads.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticPropertyFromKotlinGetter_javaOrigin.kt")
        public void testSyntheticPropertyFromKotlinGetter_javaOrigin() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinGetter_javaOrigin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticPropertyFromKotlinGetter_kotlinOrigin.kt")
        public void testSyntheticPropertyFromKotlinGetter_kotlinOrigin() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinGetter_kotlinOrigin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticPropertyFromKotlinGetter_mixedOrigin_1.kt")
        public void testSyntheticPropertyFromKotlinGetter_mixedOrigin_1() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinGetter_mixedOrigin_1.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticPropertyFromKotlinGetter_mixedOrigin_2.kt")
        public void testSyntheticPropertyFromKotlinGetter_mixedOrigin_2() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinGetter_mixedOrigin_2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticPropertyFromKotlin_k1Like.kt")
        public void testSyntheticPropertyFromKotlin_k1Like() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlin_k1Like.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticPropertyFromKotlin_warning.kt")
        public void testSyntheticPropertyFromKotlin_warning() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlin_warning.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticPropertyThroughJava.kt")
        public void testSyntheticPropertyThroughJava() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyThroughJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unitVsVoid.kt")
        public void testUnitVsVoid() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/unitVsVoid.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("val.kt")
        public void testVal() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/val.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("var.kt")
        public void testVar() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/var.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/sam")
      @TestDataPath("$PROJECT_ROOT")
      public class Sam {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSam() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/sam"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("compatibilityResolveToOuterScopeForKotlinFunctions.kt")
        public void testCompatibilityResolveToOuterScopeForKotlinFunctions() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/compatibilityResolveToOuterScopeForKotlinFunctions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conversionForDerivedGenericClass.kt")
        public void testConversionForDerivedGenericClass() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/conversionForDerivedGenericClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conversionsWithNestedGenerics.kt")
        public void testConversionsWithNestedGenerics() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/conversionsWithNestedGenerics.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("enhancedSamConstructor.kt")
        public void testEnhancedSamConstructor() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/enhancedSamConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fakeOverrideFunctionForStaticSam.kt")
        public void testFakeOverrideFunctionForStaticSam() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/fakeOverrideFunctionForStaticSam.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inheritedStaticSam.kt")
        public void testInheritedStaticSam() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/inheritedStaticSam.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt37920.kt")
        public void testKt37920() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/kt37920.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt39630.kt")
        public void testKt39630() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/kt39630.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("privateCandidatesWithWrongArguments.kt")
        public void testPrivateCandidatesWithWrongArguments() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/privateCandidatesWithWrongArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveSamsAndInvoke.kt")
        public void testRecursiveSamsAndInvoke() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/recursiveSamsAndInvoke.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("referenceToSamFunctionAgainstExpectedType.kt")
        public void testReferenceToSamFunctionAgainstExpectedType() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/referenceToSamFunctionAgainstExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("samOnTypeParameter.kt")
        public void testSamOnTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/samOnTypeParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("staticSamFromImportWithStar.kt")
        public void testStaticSamFromImportWithStar() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/staticSamFromImportWithStar.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("staticSamWithExplicitImport.kt")
        public void testStaticSamWithExplicitImport() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/staticSamWithExplicitImport.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeInferenceOnSamAdapters.kt")
        public void testTypeInferenceOnSamAdapters() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/typeInferenceOnSamAdapters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withDefaultMethods.kt")
        public void testWithDefaultMethods() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/withDefaultMethods.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/samByProjectedType")
      @TestDataPath("$PROJECT_ROOT")
      public class SamByProjectedType {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSamByProjectedType() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/samByProjectedType"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericInReturnType.kt")
        public void testGenericInReturnType() {
          runTest("compiler/testData/diagnostics/tests/j+k/samByProjectedType/genericInReturnType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericInValueParameter.kt")
        public void testGenericInValueParameter() {
          runTest("compiler/testData/diagnostics/tests/j+k/samByProjectedType/genericInValueParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericSuperWildcard.kt")
        public void testGenericSuperWildcard() {
          runTest("compiler/testData/diagnostics/tests/j+k/samByProjectedType/genericSuperWildcard.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noAdapterBecuaseOfRecursiveUpperBound.kt")
        public void testNoAdapterBecuaseOfRecursiveUpperBound() {
          runTest("compiler/testData/diagnostics/tests/j+k/samByProjectedType/noAdapterBecuaseOfRecursiveUpperBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("starProjectionComplexUpperBound.kt")
        public void testStarProjectionComplexUpperBound() {
          runTest("compiler/testData/diagnostics/tests/j+k/samByProjectedType/starProjectionComplexUpperBound.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/signatureAnnotations")
      @TestDataPath("$PROJECT_ROOT")
      public class SignatureAnnotations {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSignatureAnnotations() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/signatureAnnotations"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullVarargOverride.kt")
        public void testNotNullVarargOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/notNullVarargOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nullableVarargOverride.kt")
        public void testNullableVarargOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/nullableVarargOverride.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/specialBuiltIns")
      @TestDataPath("$PROJECT_ROOT")
      public class SpecialBuiltIns {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSpecialBuiltIns() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/specialBuiltIns"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hashtableInheritance.kt")
        public void testHashtableInheritance() {
          runTest("compiler/testData/diagnostics/tests/j+k/specialBuiltIns/hashtableInheritance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inheritanceThroughEmptyClass.kt")
        public void testInheritanceThroughEmptyClass() {
          runTest("compiler/testData/diagnostics/tests/j+k/specialBuiltIns/inheritanceThroughEmptyClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("securityProvider.kt")
        public void testSecurityProvider() {
          runTest("compiler/testData/diagnostics/tests/j+k/specialBuiltIns/securityProvider.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/types")
      @TestDataPath("$PROJECT_ROOT")
      public class Types {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInTypes() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/types"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("arrayList.kt")
        public void testArrayList() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/arrayList.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constantStaticStringField.kt")
        public void testConstantStaticStringField() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/constantStaticStringField.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noOverrideKeyword.kt")
        public void testNoOverrideKeyword() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/noOverrideKeyword.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullTypeParameterWithKotlinNullable.kt")
        public void testNotNullTypeParameterWithKotlinNullable() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/notNullTypeParameterWithKotlinNullable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullTypeParameterWithKotlinNullableDnnRepresentation.kt")
        public void testNotNullTypeParameterWithKotlinNullableDnnRepresentation() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/notNullTypeParameterWithKotlinNullableDnnRepresentation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullTypeParameterWithKotlinNullableWarnings.kt")
        public void testNotNullTypeParameterWithKotlinNullableWarnings() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/notNullTypeParameterWithKotlinNullableWarnings.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullTypeParameterWithKotlinOverridesDefinitelyNonNullable.kt")
        public void testNotNullTypeParameterWithKotlinOverridesDefinitelyNonNullable() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/notNullTypeParameterWithKotlinOverridesDefinitelyNonNullable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullTypeParameterWithKotlinOverridesWarning.kt")
        public void testNotNullTypeParameterWithKotlinOverridesWarning() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/notNullTypeParameterWithKotlinOverridesWarning.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("returnCollection.kt")
        public void testReturnCollection() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/returnCollection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("shapeMismatchInCovariantPosition.kt")
        public void testShapeMismatchInCovariantPosition() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/shapeMismatchInCovariantPosition.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("shapeMismatchInCovariantPositionGeneric.kt")
        public void testShapeMismatchInCovariantPositionGeneric() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/shapeMismatchInCovariantPositionGeneric.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeParameter.kt")
        public void testTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/typeParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("upperBoundsCheckAgainstSelfTypeInJava.kt")
        public void testUpperBoundsCheckAgainstSelfTypeInJava() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/upperBoundsCheckAgainstSelfTypeInJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varargOverride.kt")
        public void testVarargOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/varargOverride.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/java8Overrides")
    @TestDataPath("$PROJECT_ROOT")
    public class Java8Overrides {
      @RepeatedTest(value = 5)
      @TestMetadata("abstractBaseClassMemberNotImplemented.kt")
      public void testAbstractBaseClassMemberNotImplemented() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/abstractBaseClassMemberNotImplemented.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("abstractBaseClassMemberNotImplemented_15.kt")
      public void testAbstractBaseClassMemberNotImplemented_15() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/abstractBaseClassMemberNotImplemented_15.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("abstractFakeOverrideSuperCall.kt")
      public void testAbstractFakeOverrideSuperCall() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/abstractFakeOverrideSuperCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("abstractFakeOverrideSuperCallForbidden.kt")
      public void testAbstractFakeOverrideSuperCallForbidden() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/abstractFakeOverrideSuperCallForbidden.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("abstractFakeOverrideSuperCallOneMoreLevel.kt")
      public void testAbstractFakeOverrideSuperCallOneMoreLevel() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/abstractFakeOverrideSuperCallOneMoreLevel.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("abstractVsAbstract.kt")
      public void testAbstractVsAbstract() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/abstractVsAbstract.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInJava8Overrides() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/java8Overrides"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("defaultVsAbstract.kt")
      public void testDefaultVsAbstract() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/defaultVsAbstract.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("falseManyImplementations.kt")
      public void testFalseManyImplementations() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/falseManyImplementations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("hidingMethodOfAny.kt")
      public void testHidingMethodOfAny() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/hidingMethodOfAny.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implementingMethodOfAny.kt")
      public void testImplementingMethodOfAny() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/implementingMethodOfAny.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt45508.kt")
      public void testKt45508() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/kt45508.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notAMethodOfAny.kt")
      public void testNotAMethodOfAny() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/notAMethodOfAny.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overridingMethodOfAnyChain.kt")
      public void testOverridingMethodOfAnyChain() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/overridingMethodOfAnyChain.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overridingMethodOfAnyDiamond.kt")
      public void testOverridingMethodOfAnyDiamond() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/overridingMethodOfAnyDiamond.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("singleRelevantDefault.kt")
      public void testSingleRelevantDefault() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/singleRelevantDefault.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/javac")
    @TestDataPath("$PROJECT_ROOT")
    public class Javac {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInJavac() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/javac"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Annotations.kt")
      public void testAnnotations() {
        runTest("compiler/testData/diagnostics/tests/javac/Annotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Lambda.kt")
      public void testLambda() {
        runTest("compiler/testData/diagnostics/tests/javac/Lambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("LambdaNonGeneric.kt")
      public void testLambdaNonGeneric() {
        runTest("compiler/testData/diagnostics/tests/javac/LambdaNonGeneric.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("LambdaNonGenericForbidden.kt")
      public void testLambdaNonGenericForbidden() {
        runTest("compiler/testData/diagnostics/tests/javac/LambdaNonGenericForbidden.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/fieldsResolution")
      @TestDataPath("$PROJECT_ROOT")
      public class FieldsResolution {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInFieldsResolution() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/javac/fieldsResolution"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("AsteriskStaticImportsAmbiguity.kt")
        public void testAsteriskStaticImportsAmbiguity() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/AsteriskStaticImportsAmbiguity.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("BinaryInitializers.kt")
        public void testBinaryInitializers() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/BinaryInitializers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ConstantByFqName.kt")
        public void testConstantByFqName() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/ConstantByFqName.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ConstantValues.kt")
        public void testConstantValues() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/ConstantValues.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ConstantValuesFromKtFile.kt")
        public void testConstantValuesFromKtFile() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/ConstantValuesFromKtFile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FieldFromOuterClass.kt")
        public void testFieldFromOuterClass() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/FieldFromOuterClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritedField.kt")
        public void testInheritedField() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/InheritedField.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("MultipleOuters.kt")
        public void testMultipleOuters() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/MultipleOuters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ResolutionPriority.kt")
        public void testResolutionPriority() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/ResolutionPriority.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SameFieldInSupertypes.kt")
        public void testSameFieldInSupertypes() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/SameFieldInSupertypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("StaticImport.kt")
        public void testStaticImport() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/StaticImport.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("StaticImportsAmbiguity.kt")
        public void testStaticImportsAmbiguity() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/StaticImportsAmbiguity.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/imports")
      @TestDataPath("$PROJECT_ROOT")
      public class Imports {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInImports() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/javac/imports"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("AllUnderImportsAmbiguity.kt")
        public void testAllUnderImportsAmbiguity() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/AllUnderImportsAmbiguity.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("AllUnderImportsLessPriority.kt")
        public void testAllUnderImportsLessPriority() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/AllUnderImportsLessPriority.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ClassImportsConflicting.kt")
        public void testClassImportsConflicting() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/ClassImportsConflicting.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("CurrentPackageAndAllUnderImport.kt")
        public void testCurrentPackageAndAllUnderImport() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/CurrentPackageAndAllUnderImport.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("CurrentPackageAndExplicitImport.kt")
        public void testCurrentPackageAndExplicitImport() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/CurrentPackageAndExplicitImport.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("CurrentPackageAndExplicitNestedImport.kt")
        public void testCurrentPackageAndExplicitNestedImport() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/CurrentPackageAndExplicitNestedImport.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("CurrentPackageAndNestedAsteriskImport.kt")
        public void testCurrentPackageAndNestedAsteriskImport() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/CurrentPackageAndNestedAsteriskImport.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ImportGenericVsPackage.kt")
        public void testImportGenericVsPackage() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/ImportGenericVsPackage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ImportProtectedClass.kt")
        public void testImportProtectedClass() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/ImportProtectedClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ImportTwoTimes.kt")
        public void testImportTwoTimes() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/ImportTwoTimes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ImportTwoTimesStar.kt")
        public void testImportTwoTimesStar() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/ImportTwoTimesStar.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NestedAndTopLevelClassClash.kt")
        public void testNestedAndTopLevelClassClash() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/NestedAndTopLevelClassClash.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NestedClassClash.kt")
        public void testNestedClassClash() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/NestedClassClash.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("PackageExplicitAndStartImport.kt")
        public void testPackageExplicitAndStartImport() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/PackageExplicitAndStartImport.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("PackagePrivateAndPublicNested.kt")
        public void testPackagePrivateAndPublicNested() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/PackagePrivateAndPublicNested.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("TopLevelClassVsPackage.kt")
        public void testTopLevelClassVsPackage() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/TopLevelClassVsPackage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("TopLevelClassVsPackage2.kt")
        public void testTopLevelClassVsPackage2() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/TopLevelClassVsPackage2.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/inheritance")
      @TestDataPath("$PROJECT_ROOT")
      public class Inheritance {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInheritance() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/javac/inheritance"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("IheritanceOfInner.kt")
        public void testIheritanceOfInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/IheritanceOfInner.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritanceAmbiguity.kt")
        public void testInheritanceAmbiguity() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritanceAmbiguity.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritanceAmbiguity2.kt")
        public void testInheritanceAmbiguity2() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritanceAmbiguity2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritanceAmbiguity3.kt")
        public void testInheritanceAmbiguity3() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritanceAmbiguity3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritanceAmbiguity4.kt")
        public void testInheritanceAmbiguity4() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritanceAmbiguity4.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritanceWithKotlin.kt")
        public void testInheritanceWithKotlin() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritanceWithKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritanceWithKotlinClasses.kt")
        public void testInheritanceWithKotlinClasses() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritanceWithKotlinClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritedInner.kt")
        public void testInheritedInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritedInner.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritedInner2.kt")
        public void testInheritedInner2() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritedInner2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritedInnerAndSupertypeWithSameName.kt")
        public void testInheritedInnerAndSupertypeWithSameName() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritedInnerAndSupertypeWithSameName.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritedInnerUsageInInner.kt")
        public void testInheritedInnerUsageInInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritedInnerUsageInInner.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritedKotlinInner.kt")
        public void testInheritedKotlinInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritedKotlinInner.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InnerAndInheritedInner.kt")
        public void testInnerAndInheritedInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InnerAndInheritedInner.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ManyInheritedClasses.kt")
        public void testManyInheritedClasses() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/ManyInheritedClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SameInnersInSupertypeAndSupertypesSupertype.kt")
        public void testSameInnersInSupertypeAndSupertypesSupertype() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/SameInnersInSupertypeAndSupertypesSupertype.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SuperTypeWithSameInner.kt")
        public void testSuperTypeWithSameInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/SuperTypeWithSameInner.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SupertypeInnerAndTypeParameterWithSameNames.kt")
        public void testSupertypeInnerAndTypeParameterWithSameNames() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/SupertypeInnerAndTypeParameterWithSameNames.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/inners")
      @TestDataPath("$PROJECT_ROOT")
      public class Inners {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInners() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/javac/inners"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ComplexCase.kt")
        public void testComplexCase() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/ComplexCase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ComplexCase2.kt")
        public void testComplexCase2() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/ComplexCase2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("CurrentPackageAndInner.kt")
        public void testCurrentPackageAndInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/CurrentPackageAndInner.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ImportThriceNestedClass.kt")
        public void testImportThriceNestedClass() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/ImportThriceNestedClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InnerInInner.kt")
        public void testInnerInInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/InnerInInner.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Nested.kt")
        public void testNested() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/Nested.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ThriceNestedClass.kt")
        public void testThriceNestedClass() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/ThriceNestedClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/qualifiedExpression")
      @TestDataPath("$PROJECT_ROOT")
      public class QualifiedExpression {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInQualifiedExpression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/javac/qualifiedExpression"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("GenericClassVsPackage.kt")
        public void testGenericClassVsPackage() {
          runTest("compiler/testData/diagnostics/tests/javac/qualifiedExpression/GenericClassVsPackage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("PackageVsClass.kt")
        public void testPackageVsClass() {
          runTest("compiler/testData/diagnostics/tests/javac/qualifiedExpression/PackageVsClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("PackageVsClass2.kt")
        public void testPackageVsClass2() {
          runTest("compiler/testData/diagnostics/tests/javac/qualifiedExpression/PackageVsClass2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("PackageVsRootClass.kt")
        public void testPackageVsRootClass() {
          runTest("compiler/testData/diagnostics/tests/javac/qualifiedExpression/PackageVsRootClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("visibleClassVsQualifiedClass.kt")
        public void testVisibleClassVsQualifiedClass() {
          runTest("compiler/testData/diagnostics/tests/javac/qualifiedExpression/visibleClassVsQualifiedClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/typeParameters")
      @TestDataPath("$PROJECT_ROOT")
      public class TypeParameters {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInTypeParameters() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/javac/typeParameters"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Clash.kt")
        public void testClash() {
          runTest("compiler/testData/diagnostics/tests/javac/typeParameters/Clash.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ComplexCase.kt")
        public void testComplexCase() {
          runTest("compiler/testData/diagnostics/tests/javac/typeParameters/ComplexCase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritedInnerAndTypeParameterWithSameNames.kt")
        public void testInheritedInnerAndTypeParameterWithSameNames() {
          runTest("compiler/testData/diagnostics/tests/javac/typeParameters/InheritedInnerAndTypeParameterWithSameNames.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InnerWithTypeParameter.kt")
        public void testInnerWithTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/javac/typeParameters/InnerWithTypeParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NestedWithInner.kt")
        public void testNestedWithInner() {
          runTest("compiler/testData/diagnostics/tests/javac/typeParameters/NestedWithInner.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SeveralInnersWithTypeParameters.kt")
        public void testSeveralInnersWithTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/javac/typeParameters/SeveralInnersWithTypeParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("TypeParametersInInnerAndOuterWithSameNames.kt")
        public void testTypeParametersInInnerAndOuterWithSameNames() {
          runTest("compiler/testData/diagnostics/tests/javac/typeParameters/TypeParametersInInnerAndOuterWithSameNames.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/labels")
    @TestDataPath("$PROJECT_ROOT")
    public class Labels {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInLabels() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/labels"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("automaticLabelFromInfixOperator.kt")
      public void testAutomaticLabelFromInfixOperator() {
        runTest("compiler/testData/diagnostics/tests/labels/automaticLabelFromInfixOperator.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1703.kt")
      public void testKt1703() {
        runTest("compiler/testData/diagnostics/tests/labels/kt1703.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt361.kt")
      public void testKt361() {
        runTest("compiler/testData/diagnostics/tests/labels/kt361.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3920.kt")
      public void testKt3920() {
        runTest("compiler/testData/diagnostics/tests/labels/kt3920.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3988.kt")
      public void testKt3988() {
        runTest("compiler/testData/diagnostics/tests/labels/kt3988.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4247.kt")
      public void testKt4247() {
        runTest("compiler/testData/diagnostics/tests/labels/kt4247.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4586.kt")
      public void testKt4586() {
        runTest("compiler/testData/diagnostics/tests/labels/kt4586.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4603.kt")
      public void testKt4603() {
        runTest("compiler/testData/diagnostics/tests/labels/kt4603.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt591.kt")
      public void testKt591() {
        runTest("compiler/testData/diagnostics/tests/labels/kt591.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("labelReferencesInsideObjectExpressions.kt")
      public void testLabelReferencesInsideObjectExpressions() {
        runTest("compiler/testData/diagnostics/tests/labels/labelReferencesInsideObjectExpressions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("labelToOuterLambda.kt")
      public void testLabelToOuterLambda() {
        runTest("compiler/testData/diagnostics/tests/labels/labelToOuterLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("labeledFunctionLiteral.kt")
      public void testLabeledFunctionLiteral() {
        runTest("compiler/testData/diagnostics/tests/labels/labeledFunctionLiteral.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("labelsMustBeNamed.kt")
      public void testLabelsMustBeNamed() {
        runTest("compiler/testData/diagnostics/tests/labels/labelsMustBeNamed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multipleLabels.kt")
      public void testMultipleLabels() {
        runTest("compiler/testData/diagnostics/tests/labels/multipleLabels.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("qualifiedThisInExtensionProperty.kt")
      public void testQualifiedThisInExtensionProperty() {
        runTest("compiler/testData/diagnostics/tests/labels/qualifiedThisInExtensionProperty.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/lateinit")
    @TestDataPath("$PROJECT_ROOT")
    public class Lateinit {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInLateinit() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/lateinit"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("modifierApplicability_lv12.kt")
      public void testModifierApplicability_lv12() {
        runTest("compiler/testData/diagnostics/tests/lateinit/modifierApplicability_lv12.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoInapplicableLateinitModifierForPropertyWithUnnresolvedType.kt")
      public void testNoInapplicableLateinitModifierForPropertyWithUnnresolvedType() {
        runTest("compiler/testData/diagnostics/tests/lateinit/NoInapplicableLateinitModifierForPropertyWithUnnresolvedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("setter.kt")
      public void testSetter() {
        runTest("compiler/testData/diagnostics/tests/lateinit/setter.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/lateinit/local")
      @TestDataPath("$PROJECT_ROOT")
      public class Local {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInLocal() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/lateinit/local"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inapplicableLateinitModifier.kt")
        public void testInapplicableLateinitModifier() {
          runTest("compiler/testData/diagnostics/tests/lateinit/local/inapplicableLateinitModifier.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localLateinit.kt")
        public void testLocalLateinit() {
          runTest("compiler/testData/diagnostics/tests/lateinit/local/localLateinit.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("uninitialized.kt")
        public void testUninitialized() {
          runTest("compiler/testData/diagnostics/tests/lateinit/local/uninitialized.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/library")
    @TestDataPath("$PROJECT_ROOT")
    public class Library {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInLibrary() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/library"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Collections.kt")
      public void testCollections() {
        runTest("compiler/testData/diagnostics/tests/library/Collections.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt828.kt")
      public void testKt828() {
        runTest("compiler/testData/diagnostics/tests/library/kt828.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/localClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class LocalClasses {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInLocalClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/localClasses"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localAnnotationClass.kt")
      public void testLocalAnnotationClass() {
        runTest("compiler/testData/diagnostics/tests/localClasses/localAnnotationClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localAnnotationClassError.kt")
      public void testLocalAnnotationClassError() {
        runTest("compiler/testData/diagnostics/tests/localClasses/localAnnotationClassError.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/modifiers")
    @TestDataPath("$PROJECT_ROOT")
    public class Modifiers {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInModifiers() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/modifiers"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotations.kt")
      public void testAnnotations() {
        runTest("compiler/testData/diagnostics/tests/modifiers/annotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("defaultModifier.kt")
      public void testDefaultModifier() {
        runTest("compiler/testData/diagnostics/tests/modifiers/defaultModifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IllegalModifiers.kt")
      public void testIllegalModifiers() {
        runTest("compiler/testData/diagnostics/tests/modifiers/IllegalModifiers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incompatibleVarianceModifiers.kt")
      public void testIncompatibleVarianceModifiers() {
        runTest("compiler/testData/diagnostics/tests/modifiers/incompatibleVarianceModifiers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineParameters.kt")
      public void testInlineParameters() {
        runTest("compiler/testData/diagnostics/tests/modifiers/inlineParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("internalInInterface.kt")
      public void testInternalInInterface() {
        runTest("compiler/testData/diagnostics/tests/modifiers/internalInInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("modifierOnParameterInFunctionType.kt")
      public void testModifierOnParameterInFunctionType() {
        runTest("compiler/testData/diagnostics/tests/modifiers/modifierOnParameterInFunctionType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoLocalVisibility.kt")
      public void testNoLocalVisibility() {
        runTest("compiler/testData/diagnostics/tests/modifiers/NoLocalVisibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("openInExpectInterface.kt")
      public void testOpenInExpectInterface() {
        runTest("compiler/testData/diagnostics/tests/modifiers/openInExpectInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("openInInterface.kt")
      public void testOpenInInterface() {
        runTest("compiler/testData/diagnostics/tests/modifiers/openInInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OpenInterface.kt")
      public void testOpenInterface() {
        runTest("compiler/testData/diagnostics/tests/modifiers/OpenInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("primaryConstructorMissingBrackets.kt")
      public void testPrimaryConstructorMissingBrackets() {
        runTest("compiler/testData/diagnostics/tests/modifiers/primaryConstructorMissingBrackets.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("primaryConstructorMissingKeyword.kt")
      public void testPrimaryConstructorMissingKeyword() {
        runTest("compiler/testData/diagnostics/tests/modifiers/primaryConstructorMissingKeyword.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateInInterface.kt")
      public void testPrivateInInterface() {
        runTest("compiler/testData/diagnostics/tests/modifiers/privateInInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protected.kt")
      public void testProtected() {
        runTest("compiler/testData/diagnostics/tests/modifiers/protected.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedInExpectActual.kt")
      public void testProtectedInExpectActual() {
        runTest("compiler/testData/diagnostics/tests/modifiers/protectedInExpectActual.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("redundantTargets.kt")
      public void testRedundantTargets() {
        runTest("compiler/testData/diagnostics/tests/modifiers/redundantTargets.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("repeatedModifiers.kt")
      public void testRepeatedModifiers() {
        runTest("compiler/testData/diagnostics/tests/modifiers/repeatedModifiers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendAnonymousFunction.kt")
      public void testSuspendAnonymousFunction() {
        runTest("compiler/testData/diagnostics/tests/modifiers/suspendAnonymousFunction.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/modifiers/const")
      @TestDataPath("$PROJECT_ROOT")
      public class Const {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInConst() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/modifiers/const"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("applicability.kt")
        public void testApplicability() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/applicability.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("arrayInAnnotationArgumentType.kt")
        public void testArrayInAnnotationArgumentType() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/arrayInAnnotationArgumentType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("binaryLogic.kt")
        public void testBinaryLogic() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/binaryLogic.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("compare.kt")
        public void testCompare() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/compare.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("compareArrayLiteralInAnnotation.kt")
        public void testCompareArrayLiteralInAnnotation() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/compareArrayLiteralInAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("compareEnums.kt")
        public void testCompareEnums() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/compareEnums.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("complexBooleanInStringConcat_after.kt")
        public void testComplexBooleanInStringConcat_after() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/complexBooleanInStringConcat_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("complexBooleanInStringConcat_before.kt")
        public void testComplexBooleanInStringConcat_before() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/complexBooleanInStringConcat_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constInteraction.kt")
        public void testConstInteraction() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/constInteraction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constValGetWrongConstVal.kt")
        public void testConstValGetWrongConstVal() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/constValGetWrongConstVal.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("enumConstName_after.kt")
        public void testEnumConstName_after() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/enumConstName_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("enumConstName_before.kt")
        public void testEnumConstName_before() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/enumConstName_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("enumJavaName_after.kt")
        public void testEnumJavaName_after() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/enumJavaName_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("equals_after.kt")
        public void testEquals_after() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/equals_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("equals_before.kt")
        public void testEquals_before() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/equals_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fromJava.kt")
        public void testFromJava() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/fromJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fromJavaSubclass.kt")
        public void testFromJavaSubclass() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/fromJavaSubclass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fromJavaWithNonConstInitializer.kt")
        public void testFromJavaWithNonConstInitializer() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/fromJavaWithNonConstInitializer.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifConstVal_after.kt")
        public void testIfConstVal_after() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/ifConstVal_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifConstVal_before.kt")
        public void testIfConstVal_before() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/ifConstVal_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kCallable_after.kt")
        public void testKCallable_after() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/kCallable_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kCallable_before.kt")
        public void testKCallable_before() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/kCallable_before.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kClassInEquals.kt")
        public void testKClassInEquals() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/kClassInEquals.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kClassInStringConcatenation.kt")
        public void testKClassInStringConcatenation() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/kClassInStringConcatenation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinJavaCycle.kt")
        public void testKotlinJavaCycle() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/kotlinJavaCycle.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt12248.kt")
        public void testKt12248() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/kt12248.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt15913.kt")
        public void testKt15913() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/kt15913.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt57802.kt")
        public void testKt57802() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/kt57802.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noConstKt12248.kt")
        public void testNoConstKt12248() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/noConstKt12248.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("stdlibConstFun.kt")
        public void testStdlibConstFun() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/stdlibConstFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("stringConcatenation.kt")
        public void testStringConcatenation() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/stringConcatenation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("stringConcatenationWithObject.kt")
        public void testStringConcatenationWithObject() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/stringConcatenationWithObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeOperator.kt")
        public void testTypeOperator() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/typeOperator.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("types.kt")
        public void testTypes() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/types.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unsigned.kt")
        public void testUnsigned() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/unsigned.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("wrongTypeInStringConcatenation.kt")
        public void testWrongTypeInStringConcatenation() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/wrongTypeInStringConcatenation.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/modifiers/operatorInfix")
      @TestDataPath("$PROJECT_ROOT")
      public class OperatorInfix {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInOperatorInfix() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/modifiers/operatorInfix"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalFunctions.kt")
        public void testLocalFunctions() {
          runTest("compiler/testData/diagnostics/tests/modifiers/operatorInfix/LocalFunctions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("MemberFunctions.kt")
        public void testMemberFunctions() {
          runTest("compiler/testData/diagnostics/tests/modifiers/operatorInfix/MemberFunctions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/modifiers/operatorInfix/Simple.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multimodule")
    @TestDataPath("$PROJECT_ROOT")
    public class Multimodule {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInMultimodule() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BoxedInaccessibleGenericTypeUsedByDependencies.kt")
      public void testBoxedInaccessibleGenericTypeUsedByDependencies() {
        runTest("compiler/testData/diagnostics/tests/multimodule/BoxedInaccessibleGenericTypeUsedByDependencies.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dependencyModule.kt")
      public void testDependencyModule() {
        runTest("compiler/testData/diagnostics/tests/multimodule/dependencyModule.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dependsOnModule.kt")
      public void testDependsOnModule() {
        runTest("compiler/testData/diagnostics/tests/multimodule/dependsOnModule.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FalsePositiveInaccessibleGenericType.kt")
      public void testFalsePositiveInaccessibleGenericType() {
        runTest("compiler/testData/diagnostics/tests/multimodule/FalsePositiveInaccessibleGenericType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FalsePositiveInaccessibleGenericTypeWithError.kt")
      public void testFalsePositiveInaccessibleGenericTypeWithError() {
        runTest("compiler/testData/diagnostics/tests/multimodule/FalsePositiveInaccessibleGenericTypeWithError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("friendModule.kt")
      public void testFriendModule() {
        runTest("compiler/testData/diagnostics/tests/multimodule/friendModule.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("friendModulePrivate.kt")
      public void testFriendModulePrivate() {
        runTest("compiler/testData/diagnostics/tests/multimodule/friendModulePrivate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InaccessibleGenericTypeVariousCases.kt")
      public void testInaccessibleGenericTypeVariousCases() {
        runTest("compiler/testData/diagnostics/tests/multimodule/InaccessibleGenericTypeVariousCases.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("internal.kt")
      public void testInternal() {
        runTest("compiler/testData/diagnostics/tests/multimodule/internal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt14249.kt")
      public void testKt14249() {
        runTest("compiler/testData/diagnostics/tests/multimodule/kt14249.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("packagePrivate.kt")
      public void testPackagePrivate() {
        runTest("compiler/testData/diagnostics/tests/multimodule/packagePrivate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("publishedApiInternal.kt")
      public void testPublishedApiInternal() {
        runTest("compiler/testData/diagnostics/tests/multimodule/publishedApiInternal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("redundantElseInWhen.kt")
      public void testRedundantElseInWhen() {
        runTest("compiler/testData/diagnostics/tests/multimodule/redundantElseInWhen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samWithSuspendFunctionFromAnotherModule.kt")
      public void testSamWithSuspendFunctionFromAnotherModule() {
        runTest("compiler/testData/diagnostics/tests/multimodule/samWithSuspendFunctionFromAnotherModule.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargConflict.kt")
      public void testVarargConflict() {
        runTest("compiler/testData/diagnostics/tests/multimodule/varargConflict.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass")
      @TestDataPath("$PROJECT_ROOT")
      public class DuplicateClass {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDuplicateClass() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule/duplicateClass"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("collectionMethodStub.kt")
        public void testCollectionMethodStub() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/collectionMethodStub.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentGenericArguments.kt")
        public void testDifferentGenericArguments() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/differentGenericArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentGenericArgumentsReversed.kt")
        public void testDifferentGenericArgumentsReversed() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/differentGenericArgumentsReversed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("duplicateClass.kt")
        public void testDuplicateClass() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/duplicateClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("duplicateNestedClasses.kt")
        public void testDuplicateNestedClasses() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/duplicateNestedClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("duplicateSuperClass.kt")
        public void testDuplicateSuperClass() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/duplicateSuperClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericArgumentNumberMismatch.kt")
        public void testGenericArgumentNumberMismatch() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/genericArgumentNumberMismatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericSuperClass.kt")
        public void testGenericSuperClass() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/genericSuperClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inTheSameModuleWithUsage.kt")
        public void testInTheSameModuleWithUsage() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/inTheSameModuleWithUsage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inTheSameModuleWithUsageNoTypeAnnotation.kt")
        public void testInTheSameModuleWithUsageNoTypeAnnotation() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/inTheSameModuleWithUsageNoTypeAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("members.kt")
        public void testMembers() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/members.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sameClassNameDifferentPackages.kt")
        public void testSameClassNameDifferentPackages() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/sameClassNameDifferentPackages.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sameGenericArguments.kt")
        public void testSameGenericArguments() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/sameGenericArguments.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod")
      @TestDataPath("$PROJECT_ROOT")
      public class DuplicateMethod {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDuplicateMethod() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule/duplicateMethod"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classGenericsInParams.kt")
        public void testClassGenericsInParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParams.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classGenericsInParamsBoundMismatch.kt")
        public void testClassGenericsInParamsBoundMismatch() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParamsBoundMismatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classGenericsInParamsIndexMismatch.kt")
        public void testClassGenericsInParamsIndexMismatch() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParamsIndexMismatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classGenericsInParamsNameMismatch.kt")
        public void testClassGenericsInParamsNameMismatch() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParamsNameMismatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classGenericsInReturnType.kt")
        public void testClassGenericsInReturnType() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInReturnType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classVsFunctionGenericsInParamsMismatch.kt")
        public void testClassVsFunctionGenericsInParamsMismatch() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classVsFunctionGenericsInParamsMismatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("covariantReturnTypes.kt")
        public void testCovariantReturnTypes() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/covariantReturnTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differenceInParamNames.kt")
        public void testDifferenceInParamNames() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differenceInParamNames.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentGenericsInParams.kt")
        public void testDifferentGenericsInParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differentGenericsInParams.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentNumberOfParams.kt")
        public void testDifferentNumberOfParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differentNumberOfParams.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentReturnTypes.kt")
        public void testDifferentReturnTypes() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differentReturnTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionMatch.kt")
        public void testExtensionMatch() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/extensionMatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionGenericsInParams.kt")
        public void testFunctionGenericsInParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParams.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionGenericsInParamsBoundsMismatch.kt")
        public void testFunctionGenericsInParamsBoundsMismatch() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsBoundsMismatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionGenericsInParamsEqNull.kt")
        public void testFunctionGenericsInParamsEqNull() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsEqNull.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionGenericsInParamsNotIs.kt")
        public void testFunctionGenericsInParamsNotIs() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsNotIs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionGenericsInParamsReturnFooT.kt")
        public void testFunctionGenericsInParamsReturnFooT() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsReturnFooT.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionGenericsInParamsReturnT.kt")
        public void testFunctionGenericsInParamsReturnT() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsReturnT.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("incompleteCodeNoNoneApplicable.kt")
        public void testIncompleteCodeNoNoneApplicable() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/incompleteCodeNoNoneApplicable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noGenericsInParams.kt")
        public void testNoGenericsInParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/noGenericsInParams.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noParams.kt")
        public void testNoParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/noParams.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sameGenericsInParams.kt")
        public void testSameGenericsInParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/sameGenericsInParams.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleWithInheritance.kt")
        public void testSimpleWithInheritance() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/simpleWithInheritance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sinceKotlin.kt")
        public void testSinceKotlin() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/sinceKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substitutedGenericInParams.kt")
        public void testSubstitutedGenericInParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/substitutedGenericInParams.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateSuper")
      @TestDataPath("$PROJECT_ROOT")
      public class DuplicateSuper {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDuplicateSuper() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule/duplicateSuper"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentSuperTraits.kt")
        public void testDifferentSuperTraits() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/differentSuperTraits.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sameSuperTrait.kt")
        public void testSameSuperTrait() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/sameSuperTrait.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sameSuperTraitDifferentBounds.kt")
        public void testSameSuperTraitDifferentBounds() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/sameSuperTraitDifferentBounds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sameSuperTraitGenerics.kt")
        public void testSameSuperTraitGenerics() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/sameSuperTraitGenerics.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multimodule/hiddenClass")
      @TestDataPath("$PROJECT_ROOT")
      public class HiddenClass {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInHiddenClass() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule/hiddenClass"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deprecatedHiddenImportPriority.kt")
        public void testDeprecatedHiddenImportPriority() {
          runTest("compiler/testData/diagnostics/tests/multimodule/hiddenClass/deprecatedHiddenImportPriority.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deprecatedHiddenMultipleClasses.kt")
        public void testDeprecatedHiddenMultipleClasses() {
          runTest("compiler/testData/diagnostics/tests/multimodule/hiddenClass/deprecatedHiddenMultipleClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sinceKotlinImportPriority.kt")
        public void testSinceKotlinImportPriority() {
          runTest("compiler/testData/diagnostics/tests/multimodule/hiddenClass/sinceKotlinImportPriority.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sinceKotlinMultipleClasses.kt")
        public void testSinceKotlinMultipleClasses() {
          runTest("compiler/testData/diagnostics/tests/multimodule/hiddenClass/sinceKotlinMultipleClasses.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform")
    @TestDataPath("$PROJECT_ROOT")
    public class Multiplatform {
      @RepeatedTest(value = 5)
      @TestMetadata("actualClassDelegationWithImplicitType.kt")
      public void testActualClassDelegationWithImplicitType() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassDelegationWithImplicitType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("actualMissingConstructor.kt")
      public void testActualMissingConstructor() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualMissingConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("actualTypealiasCycle.kt")
      public void testActualTypealiasCycle() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualTypealiasCycle.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("actualTypealiasForNotExpectClass.kt")
      public void testActualTypealiasForNotExpectClass() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualTypealiasForNotExpectClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("actualTypealiasToSpecialAnnotation.kt")
      public void testActualTypealiasToSpecialAnnotation() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualTypealiasToSpecialAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("actualTypealiasToSpecialAnnotation_oldLanguageVersion.kt")
      public void testActualTypealiasToSpecialAnnotation_oldLanguageVersion() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualTypealiasToSpecialAnnotation_oldLanguageVersion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("actualTypealiasWithoutExpect.kt")
      public void testActualTypealiasWithoutExpect() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualTypealiasWithoutExpect.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("actualTypealias_defaultParamsIncompatibility.kt")
      public void testActualTypealias_defaultParamsIncompatibility() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualTypealias_defaultParamsIncompatibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("actualWithoutExpectWhenExpectIsFakeOverride.kt")
      public void testActualWithoutExpectWhenExpectIsFakeOverride() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualWithoutExpectWhenExpectIsFakeOverride.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInMultiplatform() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationArgArrayVsOutArray.kt")
      public void testAnnotationArgArrayVsOutArray() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/annotationArgArrayVsOutArray.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationArgArrayVsVararg.kt")
      public void testAnnotationArgArrayVsVararg() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/annotationArgArrayVsVararg.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationArgTypeAliasWithArray.kt")
      public void testAnnotationArgTypeAliasWithArray() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/annotationArgTypeAliasWithArray.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arraySort.kt")
      public void testArraySort() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/arraySort.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arraySortFixed.kt")
      public void testArraySortFixed() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/arraySortFixed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callConflictsOnExpectAndActualWeaklyCompatible.kt")
      public void testCallConflictsOnExpectAndActualWeaklyCompatible() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/callConflictsOnExpectAndActualWeaklyCompatible.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("changeModalityFromOpenToFinalInOverride_finalExpectClass_finalActualClass.kt")
      public void testChangeModalityFromOpenToFinalInOverride_finalExpectClass_finalActualClass() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/changeModalityFromOpenToFinalInOverride_finalExpectClass_finalActualClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("changeModalityFromOpenToFinalInOverride_finalExpectClass_openActualClass.kt")
      public void testChangeModalityFromOpenToFinalInOverride_finalExpectClass_openActualClass() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/changeModalityFromOpenToFinalInOverride_finalExpectClass_openActualClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("checkNoActualForExpectInLastModule.kt")
      public void testCheckNoActualForExpectInLastModule() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/checkNoActualForExpectInLastModule.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectAbstractToString.kt")
      public void testExpectAbstractToString() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectAbstractToString.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectActualClassesAreInBetaWarning.kt")
      public void testExpectActualClassesAreInBetaWarning() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectActualClassesAreInBetaWarning.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectActualClassesAreInBeta_suppressWarningWithLv.kt")
      public void testExpectActualClassesAreInBeta_suppressWarningWithLv() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectActualClassesAreInBeta_suppressWarningWithLv.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectActualInTheSameModule.kt")
      public void testExpectActualInTheSameModule() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectActualInTheSameModule.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectActualInTheSameModuleDifferentFiles.kt")
      public void testExpectActualInTheSameModuleDifferentFiles() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectActualInTheSameModuleDifferentFiles.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectActualMainInTheSameModuleDifferentFiles.kt")
      public void testExpectActualMainInTheSameModuleDifferentFiles() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectActualMainInTheSameModuleDifferentFiles.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectDataObject.kt")
      public void testExpectDataObject() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectDataObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectExternal.kt")
      public void testExpectExternal() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectExternal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectExternal_oldLanguageVersion.kt")
      public void testExpectExternal_oldLanguageVersion() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectExternal_oldLanguageVersion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectInterfaceApplicability.kt")
      public void testExpectInterfaceApplicability() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectInterfaceApplicability.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectObjectWithAbstractMember.kt")
      public void testExpectObjectWithAbstractMember() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectObjectWithAbstractMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectOptInAnnotation.kt")
      public void testExpectOptInAnnotation() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectOptInAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectOptInAnnotation_oldLanguageVersion.kt")
      public void testExpectOptInAnnotation_oldLanguageVersion() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectOptInAnnotation_oldLanguageVersion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectTailrec.kt")
      public void testExpectTailrec() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectTailrec.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectTailrec_oldLanguageVersion.kt")
      public void testExpectTailrec_oldLanguageVersion() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectTailrec_oldLanguageVersion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extraNestedClassOnActualViaActualTypealias.kt")
      public void testExtraNestedClassOnActualViaActualTypealias() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/extraNestedClassOnActualViaActualTypealias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("headerFunInNonHeaderClass.kt")
      public void testHeaderFunInNonHeaderClass() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/headerFunInNonHeaderClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implDelegatedMember.kt")
      public void testImplDelegatedMember() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/implDelegatedMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implDynamic.kt")
      public void testImplDynamic() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/implDynamic.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implFakeOverride.kt")
      public void testImplFakeOverride() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/implFakeOverride.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incDecOperatorsInExpectClass.kt")
      public void testIncDecOperatorsInExpectClass() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/incDecOperatorsInExpectClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incompatibles.kt")
      public void testIncompatibles() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/incompatibles.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("JsExternalTypeExtendsActualExternalType.kt")
      public void testJsExternalTypeExtendsActualExternalType() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/JsExternalTypeExtendsActualExternalType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt54827.kt")
      public void testKt54827() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt54827.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt58153.kt")
      public void testKt58153() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt58153.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt60902.kt")
      public void testKt60902() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt60902.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt63860.kt")
      public void testKt63860() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt63860.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt63860_2.kt")
      public void testKt63860_2() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt63860_2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt64045.kt")
      public void testKt64045() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt64045.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt64045_2.kt")
      public void testKt64045_2() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt64045_2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt64166.kt")
      public void testKt64166() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt64166.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("modifierApplicability.kt")
      public void testModifierApplicability() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/modifierApplicability.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("namedArguments.kt")
      public void testNamedArguments() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/namedArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassViaActualTypealias.kt")
      public void testNestedClassViaActualTypealias() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/nestedClassViaActualTypealias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassViaActualTypealiasExpandInTypeParam.kt")
      public void testNestedClassViaActualTypealiasExpandInTypeParam() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/nestedClassViaActualTypealiasExpandInTypeParam.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassViaActualTypealiasIncompatibilities.kt")
      public void testNestedClassViaActualTypealiasIncompatibilities() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/nestedClassViaActualTypealiasIncompatibilities.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassViaActualTypealiasWithTypeParam.kt")
      public void testNestedClassViaActualTypealiasWithTypeParam() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/nestedClassViaActualTypealiasWithTypeParam.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("optionalExpectationDiagnostics.kt")
      public void testOptionalExpectationDiagnostics() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/optionalExpectationDiagnostics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("platformRedeclarationOfExpect.kt")
      public void testPlatformRedeclarationOfExpect() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/platformRedeclarationOfExpect.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateTopLevelDeclarations.kt")
      public void testPrivateTopLevelDeclarations() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/privateTopLevelDeclarations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("returnTypeVsGenericsUpperBoundIncompatibility.kt")
      public void testReturnTypeVsGenericsUpperBoundIncompatibility() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/returnTypeVsGenericsUpperBoundIncompatibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sealedClassWithPrivateConstructor.kt")
      public void testSealedClassWithPrivateConstructor() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/sealedClassWithPrivateConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sealedTypeAlias.kt")
      public void testSealedTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/sealedTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sealedTypeAliasTopLevel.kt")
      public void testSealedTypeAliasTopLevel() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/sealedTypeAliasTopLevel.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartcastOnMemberPropertyFromCommonClass.kt")
      public void testSmartcastOnMemberPropertyFromCommonClass() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/smartcastOnMemberPropertyFromCommonClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superCallDefaultArguments.kt")
      public void testSuperCallDefaultArguments() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/superCallDefaultArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("supertypeActualizationWithAny.kt")
      public void testSupertypeActualizationWithAny() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/supertypeActualizationWithAny.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeResolutionOfNestedClassActualizedViaTypealias.kt")
      public void testTypeResolutionOfNestedClassActualizedViaTypealias() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/typeResolutionOfNestedClassActualizedViaTypealias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varSetterVisibility.kt")
      public void testVarSetterVisibility() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/varSetterVisibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("widerVisibilityInActualClassifier.kt")
      public void testWiderVisibilityInActualClassifier() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/widerVisibilityInActualClassifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("widerVisibility_expectIsEffectivelyFinal.kt")
      public void testWiderVisibility_expectIsEffectivelyFinal() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectIsEffectivelyFinal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("widerVisibility_expectIsEffectivelyFinal_fakeOverride.kt")
      public void testWiderVisibility_expectIsEffectivelyFinal_fakeOverride() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectIsEffectivelyFinal_fakeOverride.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("widerVisibility_expectIsEffectivelyFinal_oldLanguageVersion.kt")
      public void testWiderVisibility_expectIsEffectivelyFinal_oldLanguageVersion() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectIsEffectivelyFinal_oldLanguageVersion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("widerVisibility_expectSetterIsEffectivelyFinal.kt")
      public void testWiderVisibility_expectSetterIsEffectivelyFinal() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectSetterIsEffectivelyFinal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("widerVisibility_expectSetterIsEffectivelyFinal_fakeOverride.kt")
      public void testWiderVisibility_expectSetterIsEffectivelyFinal_fakeOverride() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectSetterIsEffectivelyFinal_fakeOverride.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect")
      @TestDataPath("$PROJECT_ROOT")
      public class ActualAnnotationsNotMatchExpect {
        @RepeatedTest(value = 5)
        @TestMetadata("actualInnerClassMissingMember.kt")
        public void testActualInnerClassMissingMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/actualInnerClassMissingMember.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInActualAnnotationsNotMatchExpect() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationArgRendering.kt")
        public void testAnnotationArgRendering() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationArgRendering.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationArgumentsConstExpressions.kt")
        public void testAnnotationArgumentsConstExpressions() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationArgumentsConstExpressions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationArgumentsDefaults.kt")
        public void testAnnotationArgumentsDefaults() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationArgumentsDefaults.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationArgumentsWithLazyResolve.kt")
        public void testAnnotationArgumentsWithLazyResolve() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationArgumentsWithLazyResolve.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationMatching_oldLanguageVersion.kt")
        public void testAnnotationMatching_oldLanguageVersion() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationMatching_oldLanguageVersion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationTarget.kt")
        public void testAnnotationTarget() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationTarget.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationTypeParameters.kt")
        public void testAnnotationTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationTypeParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("basicOnDeclaration.kt")
        public void testBasicOnDeclaration() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/basicOnDeclaration.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("checkDiagnosticFullText.kt")
        public void testCheckDiagnosticFullText() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/checkDiagnosticFullText.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classScopeInnerClasses.kt")
        public void testClassScopeInnerClasses() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/classScopeInnerClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classScopeViaTypealiasIncompatible.kt")
        public void testClassScopeViaTypealiasIncompatible() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/classScopeViaTypealiasIncompatible.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("compatibleOverrides.kt")
        public void testCompatibleOverrides() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/compatibleOverrides.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("defaultValueParametersRendering.kt")
        public void testDefaultValueParametersRendering() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/defaultValueParametersRendering.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deprecatedAnnotationOnlyOnActual_useInPlatform.kt")
        public void testDeprecatedAnnotationOnlyOnActual_useInPlatform() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/deprecatedAnnotationOnlyOnActual_useInPlatform.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentOrder.kt")
        public void testDifferentOrder() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/differentOrder.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("enumEntries.kt")
        public void testEnumEntries() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/enumEntries.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fakeOverrides.kt")
        public void testFakeOverrides() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/fakeOverrides.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("floatNumbersComparison.kt")
        public void testFloatNumbersComparison() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/floatNumbersComparison.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("gettersAndSetters.kt")
        public void testGettersAndSetters() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/gettersAndSetters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intrinsicConstEvaluation.kt")
        public void testIntrinsicConstEvaluation() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/intrinsicConstEvaluation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kclassArgWithExpectClass.kt")
        public void testKclassArgWithExpectClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/kclassArgWithExpectClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinAnaloguesForJavaAnnotations.kt")
        public void testKotlinAnaloguesForJavaAnnotations() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/kotlinAnaloguesForJavaAnnotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedAnnotationClassViaActualTypeAlias.kt")
        public void testNestedAnnotationClassViaActualTypeAlias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/nestedAnnotationClassViaActualTypeAlias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("repeatableNoArg.kt")
        public void testRepeatableNoArg() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/repeatableNoArg.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("repeatableWithArg.kt")
        public void testRepeatableWithArg() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/repeatableWithArg.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("skippedAnnotations.kt")
        public void testSkippedAnnotations() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/skippedAnnotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sourceRetentionAnnotationsWhenTypealias.kt")
        public void testSourceRetentionAnnotationsWhenTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/sourceRetentionAnnotationsWhenTypealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substitutionOverrideInTwoClasses.kt")
        public void testSubstitutionOverrideInTwoClasses() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/substitutionOverrideInTwoClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("twoActualTypealiasesToSameClass.kt")
        public void testTwoActualTypealiasesToSameClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/twoActualTypealiasesToSameClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeParameters.kt")
        public void testTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeUsage.kt")
        public void testTypeUsage() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeUsage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeUsageTypealiasInSuper.kt")
        public void testTypeUsageTypealiasInSuper() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeUsageTypealiasInSuper.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeUsageWithImplicitType.kt")
        public void testTypeUsageWithImplicitType() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeUsageWithImplicitType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeUsageWithUnresolvedReference.kt")
        public void testTypeUsageWithUnresolvedReference() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeUsageWithUnresolvedReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typealias.kt")
        public void testTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typealiasToJavaLibrary.kt")
        public void testTypealiasToJavaLibrary() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typealiasToJavaLibrary.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typealiasToJavaWithAnnotationArgument.kt")
        public void testTypealiasToJavaWithAnnotationArgument() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typealiasToJavaWithAnnotationArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typealiasToKtLibrary.kt")
        public void testTypealiasToKtLibrary() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typealiasToKtLibrary.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unresolvedReference.kt")
        public void testUnresolvedReference() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/unresolvedReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valueParameters.kt")
        public void testValueParameters() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/valueParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withAnnotationActualTypealias.kt")
        public void testWithAnnotationActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/withAnnotationActualTypealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withOtherIncomatibilities.kt")
        public void testWithOtherIncomatibilities() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/withOtherIncomatibilities.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker")
      @TestDataPath("$PROJECT_ROOT")
      public class ActualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker {
        @RepeatedTest(value = 5)
        @TestMetadata("actualTypealias.kt")
        public void testActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualTypealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualizeFakeOverridePropertyToJavaMethod.kt")
        public void testActualizeFakeOverridePropertyToJavaMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualizeFakeOverridePropertyToJavaMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualizePrimaryConstructorWithSecondaryConstructor.kt")
        public void testActualizePrimaryConstructorWithSecondaryConstructor() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualizePrimaryConstructorWithSecondaryConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualizeSecondaryConstructorWithPrimaryConstructor.kt")
        public void testActualizeSecondaryConstructorWithPrimaryConstructor() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualizeSecondaryConstructorWithPrimaryConstructor.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInActualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeClassTypeParameterNames.kt")
        public void testChangeClassTypeParameterNames() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeClassTypeParameterNames.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeFunctionTypeParameterNamesInOverride.kt")
        public void testChangeFunctionTypeParameterNamesInOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeFunctionTypeParameterNamesInOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeLateinitInOverride.kt")
        public void testChangeLateinitInOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeLateinitInOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeModalityFromAbstractToFinalInOverride.kt")
        public void testChangeModalityFromAbstractToFinalInOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityFromAbstractToFinalInOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeModalityFromAbstractToOpenInOverride.kt")
        public void testChangeModalityFromAbstractToOpenInOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityFromAbstractToOpenInOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeModalityFromOpenToAbstractInOverride.kt")
        public void testChangeModalityFromOpenToAbstractInOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityFromOpenToAbstractInOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeModalityFromOpenToFinalInOverride.kt")
        public void testChangeModalityFromOpenToFinalInOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityFromOpenToFinalInOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeModalityOfSubstitutedFakeOverride.kt")
        public void testChangeModalityOfSubstitutedFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityOfSubstitutedFakeOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeModalityOfToStringInOverride.kt")
        public void testChangeModalityOfToStringInOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityOfToStringInOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeParameterNameInOverride.kt")
        public void testChangeParameterNameInOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeParameterNameInOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeSetterVisibilityInOverride.kt")
        public void testChangeSetterVisibilityInOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeSetterVisibilityInOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeVarargModifierInOverride.kt")
        public void testChangeVarargModifierInOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeVarargModifierInOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeVisibilityInOverride.kt")
        public void testChangeVisibilityInOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeVisibilityInOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("covariantFunctionOverride.kt")
        public void testCovariantFunctionOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantFunctionOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("covariantOverrideGenericUpperBound.kt")
        public void testCovariantOverrideGenericUpperBound() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantOverrideGenericUpperBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("covariantOverrideGenerics.kt")
        public void testCovariantOverrideGenerics() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantOverrideGenerics.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("covariantPropertyOverride.kt")
        public void testCovariantPropertyOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantPropertyOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fakeOverrideChangedToRealOverride.kt")
        public void testFakeOverrideChangedToRealOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/fakeOverrideChangedToRealOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("finalClassIsActualizedByOpenClass.kt")
        public void testFinalClassIsActualizedByOpenClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/finalClassIsActualizedByOpenClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("finalMethodIsActualizedByOpenMethod.kt")
        public void testFinalMethodIsActualizedByOpenMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/finalMethodIsActualizedByOpenMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibleTypesMatching.kt")
        public void testFlexibleTypesMatching() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/flexibleTypesMatching.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectClass.kt")
        public void testInjectClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectContextReceiverOverload.kt")
        public void testInjectContextReceiverOverload() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectContextReceiverOverload.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectEmptySuperClass.kt")
        public void testInjectEmptySuperClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectEmptySuperClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectExtensionReceiverOverload.kt")
        public void testInjectExtensionReceiverOverload() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectExtensionReceiverOverload.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectGenericUpperBoundOverload.kt")
        public void testInjectGenericUpperBoundOverload() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectGenericUpperBoundOverload.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectMethod_internalMethod.kt")
        public void testInjectMethod_internalMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_internalMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectMethod_privateMethod.kt")
        public void testInjectMethod_privateMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_privateMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectMethod_protectedMethod.kt")
        public void testInjectMethod_protectedMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_protectedMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectMethod_publicMethod.kt")
        public void testInjectMethod_publicMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_publicMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectMethod_publicMethodInJava.kt")
        public void testInjectMethod_publicMethodInJava() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_publicMethodInJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectParameterOverload.kt")
        public void testInjectParameterOverload() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectParameterOverload.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectParameterOverloadWithGenerics.kt")
        public void testInjectParameterOverloadWithGenerics() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectParameterOverloadWithGenerics.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectPrimaryConstructor.kt")
        public void testInjectPrimaryConstructor() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPrimaryConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectPrivateProperty.kt")
        public void testInjectPrivateProperty() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPrivateProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectProperty.kt")
        public void testInjectProperty() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectPropertyWithTheSameSignatureAsExistingFunction.kt")
        public void testInjectPropertyWithTheSameSignatureAsExistingFunction() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPropertyWithTheSameSignatureAsExistingFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectPublicFakeOverrideMethod.kt")
        public void testInjectPublicFakeOverrideMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPublicFakeOverrideMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectSecondaryConstructor.kt")
        public void testInjectSecondaryConstructor() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectSecondaryConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectSupertype_SupertypeIsExpectActualPair.kt")
        public void testInjectSupertype_SupertypeIsExpectActualPair() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectSupertype_SupertypeIsExpectActualPair.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectSupertype_SupertypeIsExpectActualPair_transitiveFakeOverride.kt")
        public void testInjectSupertype_SupertypeIsExpectActualPair_transitiveFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectSupertype_SupertypeIsExpectActualPair_transitiveFakeOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("injectVarargParameterOverload.kt")
        public void testInjectVarargParameterOverload() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectVarargParameterOverload.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt62027.kt")
        public void testKt62027() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/kt62027.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("memberScopeMismatch_oldLanguageVersion.kt")
        public void testMemberScopeMismatch_oldLanguageVersion() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/memberScopeMismatch_oldLanguageVersion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedExpectOpenClass.kt")
        public void testNestedExpectOpenClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/nestedExpectOpenClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloadMethodInjectedInSuper.kt")
        public void testOverloadMethodInjectedInSuper() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/overloadMethodInjectedInSuper.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyKindOverride.kt")
        public void testPropertyKindOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/propertyKindOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("severalMismatches.kt")
        public void testSeveralMismatches() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/severalMismatches.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substitutedFakeOverrideChangedToRealOverride.kt")
        public void testSubstitutedFakeOverrideChangedToRealOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/substitutedFakeOverrideChangedToRealOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superTypesAreTheSameModuloActualTypealias.kt")
        public void testSuperTypesAreTheSameModuloActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/superTypesAreTheSameModuloActualTypealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superTypesAreTheSameModuloTypealias1.kt")
        public void testSuperTypesAreTheSameModuloTypealias1() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/superTypesAreTheSameModuloTypealias1.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superTypesAreTheSameModuloTypealias2.kt")
        public void testSuperTypesAreTheSameModuloTypealias2() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/superTypesAreTheSameModuloTypealias2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper.kt")
        public void testSupertypeIsExpectActual_covariantOverrideOfInjectedFromSuper() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_covariantOverrideOfInjectedFromSuper_transitiveSubstitutionFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper_transitiveSubstitutionFakeOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypeIsExpectActual_injectMethod.kt")
        public void testSupertypeIsExpectActual_injectMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypeIsExpectActual_injectMethod_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_injectMethod_transitiveSubstitutionFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectMethod_transitiveSubstitutionFakeOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypeIsExpectActual_injectSupertype.kt")
        public void testSupertypeIsExpectActual_injectSupertype() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectSupertype.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypeIsExpectActual_injectSupertype_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_injectSupertype_transitiveSubstitutionFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectSupertype_transitiveSubstitutionFakeOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypeIsExpectActual_simpleOverride.kt")
        public void testSupertypeIsExpectActual_simpleOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_simpleOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypeIsExpectActual_simpleOverride_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_simpleOverride_transitiveSubstitutionFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_simpleOverride_transitiveSubstitutionFakeOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod.kt")
        public void testSupertypeIsExpectActual_supertypeIsActualTypealias_injectMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_supertypeIsActualTypealias_injectMethod_transitiveSubstitutionFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod_transitiveSubstitutionFakeOverride.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/complexMatchings")
      @TestDataPath("$PROJECT_ROOT")
      public class ComplexMatchings {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInComplexMatchings() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/complexMatchings"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectCtorlessFinalToActualObject.kt")
        public void testExpectCtorlessFinalToActualObject() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/complexMatchings/expectCtorlessFinalToActualObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectCtorlessFinalToActualObjectViaTypealias.kt")
        public void testExpectCtorlessFinalToActualObjectViaTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/complexMatchings/expectCtorlessFinalToActualObjectViaTypealias.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/defaultArguments")
      @TestDataPath("$PROJECT_ROOT")
      public class DefaultArguments {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDefaultArguments() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/defaultArguments"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationArgumentEquality.kt")
        public void testAnnotationArgumentEquality() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationArgumentEquality.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationDefaultArgKclassWithNestedClassViaActualTypeAlias.kt")
        public void testAnnotationDefaultArgKclassWithNestedClassViaActualTypeAlias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationDefaultArgKclassWithNestedClassViaActualTypeAlias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotations.kt")
        public void testAnnotations() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationsViaActualTypeAlias.kt")
        public void testAnnotationsViaActualTypeAlias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationsViaActualTypeAlias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationsViaActualTypeAlias2.kt")
        public void testAnnotationsViaActualTypeAlias2() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationsViaActualTypeAlias2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationsViaActualTypeAliasExpectEnumArg.kt")
        public void testAnnotationsViaActualTypeAliasExpectEnumArg() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationsViaActualTypeAliasExpectEnumArg.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("companionMethodViaActualTypealias.kt")
        public void testCompanionMethodViaActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/companionMethodViaActualTypealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructor.kt")
        public void testConstructor() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/constructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorDefaultArgsViaActualTypealias.kt")
        public void testConstructorDefaultArgsViaActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/constructorDefaultArgsViaActualTypealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectAnnotationAndInlineClassWithDefaultValue.kt")
        public void testExpectAnnotationAndInlineClassWithDefaultValue() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectAnnotationAndInlineClassWithDefaultValue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectedDeclaresDefaultArguments.kt")
        public void testExpectedDeclaresDefaultArguments() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedDeclaresDefaultArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectedInheritsDefaultArguments.kt")
        public void testExpectedInheritsDefaultArguments() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedInheritsDefaultArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectedVsNonExpectedWithDefaults.kt")
        public void testExpectedVsNonExpectedWithDefaults() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedVsNonExpectedWithDefaults.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("methodDefaultArgsViaActualTypealias.kt")
        public void testMethodDefaultArgsViaActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualTypealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("methodDefaultArgsViaActualTypealias_oldLanguageVersion.kt")
        public void testMethodDefaultArgsViaActualTypealias_oldLanguageVersion() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualTypealias_oldLanguageVersion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedAnnotationClassViaActualTypealias.kt")
        public void testNestedAnnotationClassViaActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/nestedAnnotationClassViaActualTypealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedClassMethodsViaActualTypealias.kt")
        public void testNestedClassMethodsViaActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/nestedClassMethodsViaActualTypealias.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride")
        @TestDataPath("$PROJECT_ROOT")
        public class MethodDefaultArgsViaActualFakeOverride {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInMethodDefaultArgsViaActualFakeOverride() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("constructor.kt")
          public void testConstructor() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/constructor.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("delegation.kt")
          public void testDelegation() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/delegation.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("delegation2.kt")
          public void testDelegation2() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/delegation2.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("disabledFeature.kt")
          public void testDisabledFeature() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/disabledFeature.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("intersectionOverride.kt")
          public void testIntersectionOverride() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/intersectionOverride.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("nestedClass.kt")
          public void testNestedClass() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/nestedClass.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("realOverride.kt")
          public void testRealOverride() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/realOverride.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("simple.kt")
          public void testSimple() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/simple.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("simpleIncompatible.kt")
          public void testSimpleIncompatible() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/simpleIncompatible.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("substitutionOverride.kt")
          public void testSubstitutionOverride() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/substitutionOverride.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/deprecated")
      @TestDataPath("$PROJECT_ROOT")
      public class Deprecated {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDeprecated() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/deprecated"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("header.kt")
        public void testHeader() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/deprecated/header.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/deprecatedAnnotation")
      @TestDataPath("$PROJECT_ROOT")
      public class DeprecatedAnnotation {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDeprecatedAnnotation() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/deprecatedAnnotation"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hidden.kt")
        public void testHidden() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/deprecatedAnnotation/hidden.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/enum")
      @TestDataPath("$PROJECT_ROOT")
      public class Enum {
        @RepeatedTest(value = 5)
        @TestMetadata("additionalEntriesInImpl.kt")
        public void testAdditionalEntriesInImpl() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/enum/additionalEntriesInImpl.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInEnum() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/enum"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorInHeaderEnum.kt")
        public void testConstructorInHeaderEnum() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/enum/constructorInHeaderEnum.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentEntryOrder.kt")
        public void testDifferentEntryOrder() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/enum/differentEntryOrder.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("enumEntryWithBody.kt")
        public void testEnumEntryWithBody() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/enum/enumEntryWithBody.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaEnum.kt")
        public void testJavaEnum() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/enum/javaEnum.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleEnum.kt")
        public void testSimpleEnum() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/enum/simpleEnum.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness")
      @TestDataPath("$PROJECT_ROOT")
      public class Exhaustiveness {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInExhaustiveness() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("commonSealedWithPlatformInheritor.kt")
        public void testCommonSealedWithPlatformInheritor() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/commonSealedWithPlatformInheritor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectEnum.kt")
        public void testExpectEnum() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectEnum.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectSealedClass.kt")
        public void testExpectSealedClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectSealedClassWithActualTypealias.kt")
        public void testExpectSealedClassWithActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClassWithActualTypealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectSealedInterface.kt")
        public void testExpectSealedInterface() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedInterface.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45796.kt")
        public void testKt45796() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/kt45796.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sealedHierarchyInBambooMppStructure.kt")
        public void testSealedHierarchyInBambooMppStructure() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/sealedHierarchyInBambooMppStructure.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/generic")
      @TestDataPath("$PROJECT_ROOT")
      public class Generic {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInGeneric() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/generic"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionTypeParameterBounds.kt")
        public void testFunctionTypeParameterBounds() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/generic/functionTypeParameterBounds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericMemberBounds.kt")
        public void testGenericMemberBounds() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/generic/genericMemberBounds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("membersInGenericClass.kt")
        public void testMembersInGenericClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/generic/membersInGenericClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeParameterBoundsDifferentOrderActualMissing.kt")
        public void testTypeParameterBoundsDifferentOrderActualMissing() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/generic/typeParameterBoundsDifferentOrderActualMissing.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/headerClass")
      @TestDataPath("$PROJECT_ROOT")
      public class HeaderClass {
        @RepeatedTest(value = 5)
        @TestMetadata("actualClassWithDefaultValuesInAnnotationViaTypealias.kt")
        public void testActualClassWithDefaultValuesInAnnotationViaTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/actualClassWithDefaultValuesInAnnotationViaTypealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualClassWithDifferentConstructors.kt")
        public void testActualClassWithDifferentConstructors() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/actualClassWithDifferentConstructors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualMethodInExpectClass.kt")
        public void testActualMethodInExpectClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/actualMethodInExpectClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualMissing.kt")
        public void testActualMissing() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/actualMissing.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInHeaderClass() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/headerClass"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("baseExpectClassWithoutConstructor.kt")
        public void testBaseExpectClassWithoutConstructor() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/baseExpectClassWithoutConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classKinds.kt")
        public void testClassKinds() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/classKinds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dontOverrideMethodsFromInterfaceInCommonCode.kt")
        public void testDontOverrideMethodsFromInterfaceInCommonCode() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/dontOverrideMethodsFromInterfaceInCommonCode.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("equalsOverrideInActualInterface.kt")
        public void testEqualsOverrideInActualInterface() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/equalsOverrideInActualInterface.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectClassWithExplicitAbstractMember.kt")
        public void testExpectClassWithExplicitAbstractMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectClassWithExplicitAbstractMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectClassWithoutConstructor.kt")
        public void testExpectClassWithoutConstructor() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectClassWithoutConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectDeclarationWithStrongIncompatibilities.kt")
        public void testExpectDeclarationWithStrongIncompatibilities() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectDeclarationWithStrongIncompatibilities.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectDeclarationWithWeakIncompatibilities.kt")
        public void testExpectDeclarationWithWeakIncompatibilities() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectDeclarationWithWeakIncompatibilities.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectFinalActualOpen.kt")
        public void testExpectFinalActualOpen() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectFinalActualOpen.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectFunInterface.kt")
        public void testExpectFunInterface() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectFunInterface.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectedClassConstructorPropertyParameters.kt")
        public void testExpectedClassConstructorPropertyParameters() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectedClassConstructorPropertyParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("explicitConstructorDelegation.kt")
        public void testExplicitConstructorDelegation() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/explicitConstructorDelegation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extendExpectedClassWithAbstractMember.kt")
        public void testExtendExpectedClassWithAbstractMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/extendExpectedClassWithAbstractMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extendExpectedClassWithoutExplicitOverrideOfMethod.kt")
        public void testExtendExpectedClassWithoutExplicitOverrideOfMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/extendExpectedClassWithoutExplicitOverrideOfMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extraHeaderOnMembers.kt")
        public void testExtraHeaderOnMembers() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/extraHeaderOnMembers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionAndPropertyWithSameName.kt")
        public void testFunctionAndPropertyWithSameName() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/functionAndPropertyWithSameName.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericClassImplTypeAlias.kt")
        public void testGenericClassImplTypeAlias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/genericClassImplTypeAlias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("headerClassMember.kt")
        public void testHeaderClassMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/headerClassMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("headerClassWithFunctionBody.kt")
        public void testHeaderClassWithFunctionBody() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/headerClassWithFunctionBody.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implDataClass.kt")
        public void testImplDataClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/implDataClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implOpenClass.kt")
        public void testImplOpenClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/implOpenClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inheritanceByDelegationInExpectClass.kt")
        public void testInheritanceByDelegationInExpectClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/inheritanceByDelegationInExpectClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("memberPropertyKinds.kt")
        public void testMemberPropertyKinds() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/memberPropertyKinds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("modalityCheckForExplicitAndImplicitOverride.kt")
        public void testModalityCheckForExplicitAndImplicitOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/modalityCheckForExplicitAndImplicitOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("morePermissiveVisibilityOnActual.kt")
        public void testMorePermissiveVisibilityOnActual() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/morePermissiveVisibilityOnActual.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("morePermissiveVisibilityOnActualViaTypeAlias_finalMember.kt")
        public void testMorePermissiveVisibilityOnActualViaTypeAlias_finalMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/morePermissiveVisibilityOnActualViaTypeAlias_finalMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("morePermissiveVisibilityOnActualViaTypeAlias_openMember.kt")
        public void testMorePermissiveVisibilityOnActualViaTypeAlias_openMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/morePermissiveVisibilityOnActualViaTypeAlias_openMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedClasses.kt")
        public void testNestedClasses() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/nestedClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedClassesWithErrors.kt")
        public void testNestedClassesWithErrors() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/nestedClassesWithErrors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noImplKeywordOnMember.kt")
        public void testNoImplKeywordOnMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/noImplKeywordOnMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("privateMembers.kt")
        public void testPrivateMembers() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/privateMembers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleHeaderClass.kt")
        public void testSimpleHeaderClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/simpleHeaderClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCastOnExpectClass.kt")
        public void testSmartCastOnExpectClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/smartCastOnExpectClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superClass.kt")
        public void testSuperClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/superClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp")
      @TestDataPath("$PROJECT_ROOT")
      public class Hmpp {
        @RepeatedTest(value = 5)
        @TestMetadata("actualizeSubtypeBeforeSupertype.kt")
        public void testActualizeSubtypeBeforeSupertype() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/actualizeSubtypeBeforeSupertype.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualizedInPlatformSession.kt")
        public void testActualizedInPlatformSession() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/actualizedInPlatformSession.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInHmpp() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/hmpp"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ambiguousActuals.kt")
        public void testAmbiguousActuals() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/ambiguousActuals.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hmppModalityClash.kt")
        public void testHmppModalityClash() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/hmppModalityClash.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hmppRedeclaration.kt")
        public void testHmppRedeclaration() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/hmppRedeclaration.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hmppRedeclarationWithExpectActualPair.kt")
        public void testHmppRedeclarationWithExpectActualPair() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/hmppRedeclarationWithExpectActualPair.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hmppSignatureClash.kt")
        public void testHmppSignatureClash() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/hmppSignatureClash.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intermediateActualHasAdditionalSupertypes.kt")
        public void testIntermediateActualHasAdditionalSupertypes() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/intermediateActualHasAdditionalSupertypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt57320.kt")
        public void testKt57320() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/kt57320.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt-55570.kt")
        public void testKt_55570() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/kt-55570.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/simple.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        public class MultiplatformCompositeAnalysis {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInMultiplatformCompositeAnalysis() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("expectAndActualInTheSameModule.kt")
          public void testExpectAndActualInTheSameModule() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/expectAndActualInTheSameModule.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("expectAndActualInTheSameModuleIncompatibilities.kt")
          public void testExpectAndActualInTheSameModuleIncompatibilities() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/expectAndActualInTheSameModuleIncompatibilities.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("intermediateWithActualAndExpect.kt")
          public void testIntermediateWithActualAndExpect() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/intermediateWithActualAndExpect.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("sealedInheritorsCorrectExpect.kt")
          public void testSealedInheritorsCorrectExpect() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/sealedInheritorsCorrectExpect.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("sealedInheritorsInComplexModuleStructure.kt")
          public void testSealedInheritorsInComplexModuleStructure() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/sealedInheritorsInComplexModuleStructure.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("sealedInheritorsIncorrectExpect.kt")
          public void testSealedInheritorsIncorrectExpect() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/sealedInheritorsIncorrectExpect.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("sealedInheritorsIncorrectNonExpect.kt")
          public void testSealedInheritorsIncorrectNonExpect() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/sealedInheritorsIncorrectNonExpect.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching")
          @TestDataPath("$PROJECT_ROOT")
          public class AnnotationMatching {
            @RepeatedTest(value = 5)
            public void testAllFilesPresentInAnnotationMatching() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
            }

            @RepeatedTest(value = 5)
            @TestMetadata("sourceRetentionAnnotationsWhenTypealias.kt")
            public void testSourceRetentionAnnotationsWhenTypealias() {
              runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/sourceRetentionAnnotationsWhenTypealias.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("typealiasedAnnotation.kt")
            public void testTypealiasedAnnotation() {
              runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/typealiasedAnnotation.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("typealiasedAnnotationAsArgument.kt")
            public void testTypealiasedAnnotationAsArgument() {
              runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/typealiasedAnnotationAsArgument.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("typealiasedAsKClassArg.kt")
            public void testTypealiasedAsKClassArg() {
              runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/typealiasedAsKClassArg.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/inlineClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class InlineClasses {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInlineClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/inlineClasses"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectActualInlineClass.kt")
        public void testExpectActualInlineClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/inlineClasses/expectActualInlineClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jvmInlineExpectValueClass.kt")
        public void testJvmInlineExpectValueClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/inlineClasses/jvmInlineExpectValueClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/java")
      @TestDataPath("$PROJECT_ROOT")
      public class Java {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInJava() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/java"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibleTypes.kt")
        public void testFlexibleTypes() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/flexibleTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitJavaActualizationAllowed.kt")
        public void testImplicitJavaActualizationAllowed() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualizationAllowed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitJavaActualizationDisallowed.kt")
        public void testImplicitJavaActualizationDisallowed() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualizationDisallowed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitJavaActualization_multipleActuals.kt")
        public void testImplicitJavaActualization_multipleActuals() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualization_multipleActuals.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitJavaActualization_oldLanguageVersion.kt")
        public void testImplicitJavaActualization_oldLanguageVersion() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualization_oldLanguageVersion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inheritedJavaMembers.kt")
        public void testInheritedJavaMembers() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/inheritedJavaMembers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("parameterNames.kt")
        public void testParameterNames() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/parameterNames.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyAgainstFakeOverrideInJava.kt")
        public void testPropertyAgainstFakeOverrideInJava() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstFakeOverrideInJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyAgainstFakeOverrideOfJavaField.kt")
        public void testPropertyAgainstFakeOverrideOfJavaField() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstFakeOverrideOfJavaField.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyAgainstJavaMethod.kt")
        public void testPropertyAgainstJavaMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstJavaMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyAgainstJavaPrivateFieldAndPublicMethod.kt")
        public void testPropertyAgainstJavaPrivateFieldAndPublicMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstJavaPrivateFieldAndPublicMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyAgainstJavaPublicFieldAndPublicGetter.kt")
        public void testPropertyAgainstJavaPublicFieldAndPublicGetter() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstJavaPublicFieldAndPublicGetter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyAgainstValInJavaWithExtraSetter.kt")
        public void testPropertyAgainstValInJavaWithExtraSetter() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstValInJavaWithExtraSetter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varPropertyAgainstJavaField.kt")
        public void testVarPropertyAgainstJavaField() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/varPropertyAgainstJavaField.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varPropertyAgainstJavaGetterAndNonFinalField.kt")
        public void testVarPropertyAgainstJavaGetterAndNonFinalField() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/varPropertyAgainstJavaGetterAndNonFinalField.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/scopes")
      @TestDataPath("$PROJECT_ROOT")
      public class Scopes {
        @RepeatedTest(value = 5)
        @TestMetadata("actualAbstractClassWithAdditionalMembers.kt")
        public void testActualAbstractClassWithAdditionalMembers() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualAbstractClassWithAdditionalMembers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualFakeOverride.kt")
        public void testActualFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualFakeOverrideVirtual.kt")
        public void testActualFakeOverrideVirtual() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverrideVirtual.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualFakeOverride_defaultParamsIncompatibility.kt")
        public void testActualFakeOverride_defaultParamsIncompatibility() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_defaultParamsIncompatibility.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualFakeOverride_paramsAreCompatibleViaSharedMethodWithDefaultParams.kt")
        public void testActualFakeOverride_paramsAreCompatibleViaSharedMethodWithDefaultParams() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_paramsAreCompatibleViaSharedMethodWithDefaultParams.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualFakeOverride_paramsAreCompatibleViaTransitiveSharedMethodWithDefaultParams.kt")
        public void testActualFakeOverride_paramsAreCompatibleViaTransitiveSharedMethodWithDefaultParams() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_paramsAreCompatibleViaTransitiveSharedMethodWithDefaultParams.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualFakeOverride_substitutionFakeOverride.kt")
        public void testActualFakeOverride_substitutionFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_substitutionFakeOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualFakeOverride_transitiveFakeOverrides_compatible.kt")
        public void testActualFakeOverride_transitiveFakeOverrides_compatible() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_transitiveFakeOverrides_compatible.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualFakeOverride_transitiveFakeOverrides_incompatible.kt")
        public void testActualFakeOverride_transitiveFakeOverrides_incompatible() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_transitiveFakeOverrides_incompatible.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInScopes() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/scopes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("defaultParams_inheritanceByDelegation_negative.kt")
        public void testDefaultParams_inheritanceByDelegation_negative() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/defaultParams_inheritanceByDelegation_negative.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("defaultParams_inheritanceByDelegation_positive.kt")
        public void testDefaultParams_inheritanceByDelegation_positive() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/defaultParams_inheritanceByDelegation_positive.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitActualFakeOverride_AbstractMap.kt")
        public void testImplicitActualFakeOverride_AbstractMap() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/implicitActualFakeOverride_AbstractMap.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitActualFakeOverride_simple.kt")
        public void testImplicitActualFakeOverride_simple() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/implicitActualFakeOverride_simple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("manyImplMemberNotImplemented.kt")
        public void testManyImplMemberNotImplemented() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/manyImplMemberNotImplemented.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("manyInterfacesMemberNotImplemented.kt")
        public void testManyInterfacesMemberNotImplemented() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/manyInterfacesMemberNotImplemented.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("mixedFunctionalTypesInSupertypes.kt")
        public void testMixedFunctionalTypesInSupertypes() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/mixedFunctionalTypesInSupertypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multipleDefaultsInhereted.kt")
        public void testMultipleDefaultsInhereted() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/multipleDefaultsInhereted.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multipleExpectInterfacesImplementation.kt")
        public void testMultipleExpectInterfacesImplementation() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/multipleExpectInterfacesImplementation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("scopeOfFunInterface.kt")
        public void testScopeOfFunInterface() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/scopeOfFunInterface.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/smartCasts")
      @TestDataPath("$PROJECT_ROOT")
      public class SmartCasts {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSmartCasts() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/smartCasts"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt61340_commonCode.kt")
        public void testKt61340_commonCode() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/smartCasts/kt61340_commonCode.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt61340_platformCode.kt")
        public void testKt61340_platformCode() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/smartCasts/kt61340_platformCode.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/topLevelFun")
      @TestDataPath("$PROJECT_ROOT")
      public class TopLevelFun {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInTopLevelFun() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/topLevelFun"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callHeaderFun.kt")
        public void testCallHeaderFun() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/callHeaderFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferenceOnExpectFun.kt")
        public void testCallableReferenceOnExpectFun() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/callableReferenceOnExpectFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conflictingHeaderDeclarations.kt")
        public void testConflictingHeaderDeclarations() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/conflictingHeaderDeclarations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conflictingImplDeclarations.kt")
        public void testConflictingImplDeclarations() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/conflictingImplDeclarations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionModifiers.kt")
        public void testFunctionModifiers() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/functionModifiers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("headerAndImplInDIfferentPackages.kt")
        public void testHeaderAndImplInDIfferentPackages() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerAndImplInDIfferentPackages.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("headerDeclarationWithBody.kt")
        public void testHeaderDeclarationWithBody() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerDeclarationWithBody.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("headerWithoutImpl.kt")
        public void testHeaderWithoutImpl() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerWithoutImpl.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implDeclarationWithoutBody.kt")
        public void testImplDeclarationWithoutBody() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/implDeclarationWithoutBody.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implWithoutHeader.kt")
        public void testImplWithoutHeader() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/implWithoutHeader.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineFun.kt")
        public void testInlineFun() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/inlineFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleHeaderFun.kt")
        public void testSimpleHeaderFun() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/simpleHeaderFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valueParameterModifiers.kt")
        public void testValueParameterModifiers() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/valueParameterModifiers.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty")
      @TestDataPath("$PROJECT_ROOT")
      public class TopLevelProperty {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInTopLevelProperty() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentKindsOfProperties.kt")
        public void testDifferentKindsOfProperties() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/differentKindsOfProperties.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleHeaderVar.kt")
        public void testSimpleHeaderVar() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/simpleHeaderVar.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/typealias")
      @TestDataPath("$PROJECT_ROOT")
      public class Typealias {
        @RepeatedTest(value = 5)
        @TestMetadata("actualTypealiasToNothing.kt")
        public void testActualTypealiasToNothing() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNothing.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualTypealiasToNothing_oldLanguageVersion.kt")
        public void testActualTypealiasToNothing_oldLanguageVersion() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNothing_oldLanguageVersion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualTypealiasToNullableType.kt")
        public void testActualTypealiasToNullableType() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNullableType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("actualTypealiasToNullableType_oldLanguageVersion.kt")
        public void testActualTypealiasToNullableType_oldLanguageVersion() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNullableType_oldLanguageVersion.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInTypealias() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/typealias"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/namedArguments")
    @TestDataPath("$PROJECT_ROOT")
    public class NamedArguments {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInNamedArguments() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/namedArguments"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("allowForJavaAnnotation.kt")
      public void testAllowForJavaAnnotation() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/allowForJavaAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ambiguousNamedArguments1.kt")
      public void testAmbiguousNamedArguments1() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArguments1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ambiguousNamedArguments2.kt")
      public void testAmbiguousNamedArguments2() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArguments2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ambiguousNamedArgumentsWithGenerics1.kt")
      public void testAmbiguousNamedArgumentsWithGenerics1() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArgumentsWithGenerics1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ambiguousNamedArgumentsWithGenerics2.kt")
      public void testAmbiguousNamedArgumentsWithGenerics2() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArgumentsWithGenerics2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ambiguousNamedArgumentsWithGenerics3.kt")
      public void testAmbiguousNamedArgumentsWithGenerics3() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArgumentsWithGenerics3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("disallowForDelegationToJavaMethods.kt")
      public void testDisallowForDelegationToJavaMethods() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/disallowForDelegationToJavaMethods.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("disallowForFunctionTypes.kt")
      public void testDisallowForFunctionTypes() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/disallowForFunctionTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("disallowForJavaConstructor.kt")
      public void testDisallowForJavaConstructor() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/disallowForJavaConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("disallowForJavaMethods.kt")
      public void testDisallowForJavaMethods() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/disallowForJavaMethods.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("disallowForSamAdapterConstructor.kt")
      public void testDisallowForSamAdapterConstructor() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/disallowForSamAdapterConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("disallowForSamAdapterFunction.kt")
      public void testDisallowForSamAdapterFunction() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/disallowForSamAdapterFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("namedArgumentsAndDefaultValues.kt")
      public void testNamedArgumentsAndDefaultValues() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/namedArgumentsAndDefaultValues.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("namedArgumentsInOverloads.kt")
      public void testNamedArgumentsInOverloads() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/namedArgumentsInOverloads.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("namedArgumentsInOverrides.kt")
      public void testNamedArgumentsInOverrides() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/namedArgumentsInOverrides.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition")
      @TestDataPath("$PROJECT_ROOT")
      public class MixedNamedPosition {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInMixedNamedPosition() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("defaults.kt")
        public void testDefaults() {
          runTest("compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition/defaults.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("disabledFeature.kt")
        public void testDisabledFeature() {
          runTest("compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition/disabledFeature.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("oldInference.kt")
        public void testOldInference() {
          runTest("compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition/oldInference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("secondNamed.kt")
        public void testSecondNamed() {
          runTest("compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition/secondNamed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition/simple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varargs.kt")
        public void testVarargs() {
          runTest("compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition/varargs.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts")
    @TestDataPath("$PROJECT_ROOT")
    public class NullabilityAndSmartCasts {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInNullabilityAndSmartCasts() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AssertNotNull.kt")
      public void testAssertNotNull() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/AssertNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("augmentedAssignment.kt")
      public void testAugmentedAssignment() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/augmentedAssignment.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataFlowInfoAfterExclExcl.kt")
      public void testDataFlowInfoAfterExclExcl() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/dataFlowInfoAfterExclExcl.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("equalityUnderNotNullCheck.kt")
      public void testEqualityUnderNotNullCheck() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/equalityUnderNotNullCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("funcLiteralArgsInsideAmbiguity.kt")
      public void testFuncLiteralArgsInsideAmbiguity() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/funcLiteralArgsInsideAmbiguity.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("funcLiteralArgsInsideUnresolvedFunction.kt")
      public void testFuncLiteralArgsInsideUnresolvedFunction() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/funcLiteralArgsInsideUnresolvedFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InfixCallNullability.kt")
      public void testInfixCallNullability() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/InfixCallNullability.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1270.kt")
      public void testKt1270() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1270.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1680.kt")
      public void testKt1680() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1680.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1778.kt")
      public void testKt1778() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1778.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2109.kt")
      public void testKt2109() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2109.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2125.kt")
      public void testKt2125() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2125.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2146.kt")
      public void testKt2146() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2146.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2164.kt")
      public void testKt2164() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2164.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2176.kt")
      public void testKt2176() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2176.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2195.kt")
      public void testKt2195() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2195.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2212.kt")
      public void testKt2212() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2212.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2216.kt")
      public void testKt2216() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2216.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2223.kt")
      public void testKt2223() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2223.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2234.kt")
      public void testKt2234() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2234.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2336.kt")
      public void testKt2336() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2336.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt244.kt")
      public void testKt244() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt244.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt30734.kt")
      public void testKt30734() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt30734.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt362.kt")
      public void testKt362() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt362.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noSenselessNullOnNullableType.kt")
      public void testNoSenselessNullOnNullableType() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/noSenselessNullOnNullableType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noUnnecessaryNotNullAssertionOnErrorType.kt")
      public void testNoUnnecessaryNotNullAssertionOnErrorType() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/noUnnecessaryNotNullAssertionOnErrorType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notnullTypesFromJavaWithSmartcast.kt")
      public void testNotnullTypesFromJavaWithSmartcast() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/notnullTypesFromJavaWithSmartcast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NullableNothingIsExactlyNull.kt")
      public void testNullableNothingIsExactlyNull() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/NullableNothingIsExactlyNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableReceiverWithOverloadedMethod.kt")
      public void testNullableReceiverWithOverloadedMethod() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/nullableReceiverWithOverloadedMethod.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PreferExtensionsOnNullableReceiver.kt")
      public void testPreferExtensionsOnNullableReceiver() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/PreferExtensionsOnNullableReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("QualifiedExpressionNullability.kt")
      public void testQualifiedExpressionNullability() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/QualifiedExpressionNullability.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ReceiverNullability.kt")
      public void testReceiverNullability() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/ReceiverNullability.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SenselessNullInWhen.kt")
      public void testSenselessNullInWhen() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/SenselessNullInWhen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("senslessComparisonWithNullOnTypeParameters.kt")
      public void testSenslessComparisonWithNullOnTypeParameters() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/senslessComparisonWithNullOnTypeParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastReceiverWithGenerics.kt")
      public void testSmartCastReceiverWithGenerics() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/smartCastReceiverWithGenerics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastsAndBooleanExpressions.kt")
      public void testSmartCastsAndBooleanExpressions() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/smartCastsAndBooleanExpressions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unnecessaryNotNullAssertion.kt")
      public void testUnnecessaryNotNullAssertion() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/unnecessaryNotNullAssertion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unstableSmartcastWhenOpenGetterWithOverloading.kt")
      public void testUnstableSmartcastWhenOpenGetterWithOverloading() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/unstableSmartcastWhenOpenGetterWithOverloading.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unstableSmartcastWithOverloadedExtensions.kt")
      public void testUnstableSmartcastWithOverloadedExtensions() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/unstableSmartcastWithOverloadedExtensions.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/nullableTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class NullableTypes {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInNullableTypes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/nullableTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("baseWithNullableUpperBound.kt")
      public void testBaseWithNullableUpperBound() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/baseWithNullableUpperBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("definitelyNotNullWithNullableBound.kt")
      public void testDefinitelyNotNullWithNullableBound() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/definitelyNotNullWithNullableBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("elvisOnUnit.kt")
      public void testElvisOnUnit() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/elvisOnUnit.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inferenceFlexibleTToNullable.kt")
      public void testInferenceFlexibleTToNullable() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/inferenceFlexibleTToNullable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt58844.kt")
      public void testKt58844() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/kt58844.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notUselessComparasionAfterSmartcast.kt")
      public void testNotUselessComparasionAfterSmartcast() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/notUselessComparasionAfterSmartcast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullAssertOnTypeWithNullableUpperBound.kt")
      public void testNullAssertOnTypeWithNullableUpperBound() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/nullAssertOnTypeWithNullableUpperBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableArgumentForIn.kt")
      public void testNullableArgumentForIn() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/nullableArgumentForIn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableArgumentToNonNullParameterPlatform.kt")
      public void testNullableArgumentToNonNullParameterPlatform() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/nullableArgumentToNonNullParameterPlatform.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableArgumentToNonNullParameterSimple.kt")
      public void testNullableArgumentToNonNullParameterSimple() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/nullableArgumentToNonNullParameterSimple.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("redundantNullable.kt")
      public void testRedundantNullable() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/redundantNullable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("redundantNullableInSupertype.kt")
      public void testRedundantNullableInSupertype() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/redundantNullableInSupertype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("safeAccessOnUnit.kt")
      public void testSafeAccessOnUnit() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/safeAccessOnUnit.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("safeCallOnNotNullableType.kt")
      public void testSafeCallOnNotNullableType() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/safeCallOnNotNullableType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("safeCallOnTypeWithNullableUpperBound.kt")
      public void testSafeCallOnTypeWithNullableUpperBound() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/safeCallOnTypeWithNullableUpperBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("safeCallOperators.kt")
      public void testSafeCallOperators() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/safeCallOperators.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("safeCallWithInvoke.kt")
      public void testSafeCallWithInvoke() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/safeCallWithInvoke.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("takingNullabilityFromExplicitTypeArgmentsInsteadOfUsingFlexibleTypes.kt")
      public void testTakingNullabilityFromExplicitTypeArgmentsInsteadOfUsingFlexibleTypes() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/takingNullabilityFromExplicitTypeArgmentsInsteadOfUsingFlexibleTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unsafeCallOnOperatorRedCode.kt")
      public void testUnsafeCallOnOperatorRedCode() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/unsafeCallOnOperatorRedCode.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("uselessElvis.kt")
      public void testUselessElvis() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/uselessElvis.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/numbers")
    @TestDataPath("$PROJECT_ROOT")
    public class Numbers {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInNumbers() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/numbers"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("characterIsNotANumber.kt")
      public void testCharacterIsNotANumber() {
        runTest("compiler/testData/diagnostics/tests/numbers/characterIsNotANumber.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("doublesInSimpleConstraints.kt")
      public void testDoublesInSimpleConstraints() {
        runTest("compiler/testData/diagnostics/tests/numbers/doublesInSimpleConstraints.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intValuesOutOfRange.kt")
      public void testIntValuesOutOfRange() {
        runTest("compiler/testData/diagnostics/tests/numbers/intValuesOutOfRange.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("integerLiteralWillChangeResolveInFunctionReturnPosition.kt")
      public void testIntegerLiteralWillChangeResolveInFunctionReturnPosition() {
        runTest("compiler/testData/diagnostics/tests/numbers/integerLiteralWillChangeResolveInFunctionReturnPosition.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt41679.kt")
      public void testKt41679() {
        runTest("compiler/testData/diagnostics/tests/numbers/kt41679.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt45970.kt")
      public void testKt45970() {
        runTest("compiler/testData/diagnostics/tests/numbers/kt45970.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt47447.kt")
      public void testKt47447() {
        runTest("compiler/testData/diagnostics/tests/numbers/kt47447.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt47729.kt")
      public void testKt47729() {
        runTest("compiler/testData/diagnostics/tests/numbers/kt47729.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt47729_parenthesis.kt")
      public void testKt47729_parenthesis() {
        runTest("compiler/testData/diagnostics/tests/numbers/kt47729_parenthesis.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt48361.kt")
      public void testKt48361() {
        runTest("compiler/testData/diagnostics/tests/numbers/kt48361.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("literalReceiverWithIntegerValueType.kt")
      public void testLiteralReceiverWithIntegerValueType() {
        runTest("compiler/testData/diagnostics/tests/numbers/literalReceiverWithIntegerValueType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("newLiteralOperatorsResolution_warning.kt")
      public void testNewLiteralOperatorsResolution_warning() {
        runTest("compiler/testData/diagnostics/tests/numbers/newLiteralOperatorsResolution_warning.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("numberAsUnionAndIntersection.kt")
      public void testNumberAsUnionAndIntersection() {
        runTest("compiler/testData/diagnostics/tests/numbers/numberAsUnionAndIntersection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("numbersInSimpleConstraints.kt")
      public void testNumbersInSimpleConstraints() {
        runTest("compiler/testData/diagnostics/tests/numbers/numbersInSimpleConstraints.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/objects")
    @TestDataPath("$PROJECT_ROOT")
    public class Objects {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInObjects() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/objects"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invokeOnInnerObject.kt")
      public void testInvokeOnInnerObject() {
        runTest("compiler/testData/diagnostics/tests/objects/invokeOnInnerObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2240.kt")
      public void testKt2240() {
        runTest("compiler/testData/diagnostics/tests/objects/kt2240.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt5527.kt")
      public void testKt5527() {
        runTest("compiler/testData/diagnostics/tests/objects/kt5527.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localObjectInsideObject.kt")
      public void testLocalObjectInsideObject() {
        runTest("compiler/testData/diagnostics/tests/objects/localObjectInsideObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localObjects.kt")
      public void testLocalObjects() {
        runTest("compiler/testData/diagnostics/tests/objects/localObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassInAnonymousObject.kt")
      public void testNestedClassInAnonymousObject() {
        runTest("compiler/testData/diagnostics/tests/objects/nestedClassInAnonymousObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("objectInsideFun.kt")
      public void testObjectInsideFun() {
        runTest("compiler/testData/diagnostics/tests/objects/objectInsideFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("objectLiteralExpressionTypeMismatch.kt")
      public void testObjectLiteralExpressionTypeMismatch() {
        runTest("compiler/testData/diagnostics/tests/objects/objectLiteralExpressionTypeMismatch.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Objects.kt")
      public void testObjects() {
        runTest("compiler/testData/diagnostics/tests/objects/Objects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ObjectsInheritance.kt")
      public void testObjectsInheritance() {
        runTest("compiler/testData/diagnostics/tests/objects/ObjectsInheritance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ObjectsLocal.kt")
      public void testObjectsLocal() {
        runTest("compiler/testData/diagnostics/tests/objects/ObjectsLocal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ObjectsNested.kt")
      public void testObjectsNested() {
        runTest("compiler/testData/diagnostics/tests/objects/ObjectsNested.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OpenInObject.kt")
      public void testOpenInObject() {
        runTest("compiler/testData/diagnostics/tests/objects/OpenInObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("upperBoundViolated.kt")
      public void testUpperBoundViolated() {
        runTest("compiler/testData/diagnostics/tests/objects/upperBoundViolated.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/objects/kt21515")
      @TestDataPath("$PROJECT_ROOT")
      public class Kt21515 {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInKt21515() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/objects/kt21515"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationConstructor.kt")
        public void testAnnotationConstructor() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/annotationConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferenceComplexCasesWithImportsOld.kt")
        public void testCallableReferenceComplexCasesWithImportsOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferenceComplexCasesWithImportsOld.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferencesComplexCasesWithQualificationOld.kt")
        public void testCallableReferencesComplexCasesWithQualificationOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesComplexCasesWithQualificationOld.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferencesNew.kt")
        public void testCallableReferencesNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesNew.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferencesOld.kt")
        public void testCallableReferencesOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesOld.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferencesOldComplexCases.kt")
        public void testCallableReferencesOldComplexCases() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesOldComplexCases.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferencesWithQualificationNew.kt")
        public void testCallableReferencesWithQualificationNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesWithQualificationNew.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferencesWithQualificationOld.kt")
        public void testCallableReferencesWithQualificationOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesWithQualificationOld.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classifierFromCompanionObjectNew.kt")
        public void testClassifierFromCompanionObjectNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/classifierFromCompanionObjectNew.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classifierFromCompanionObjectOld.kt")
        public void testClassifierFromCompanionObjectOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/classifierFromCompanionObjectOld.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classifierFromCompanionObjectWithQualificationNew.kt")
        public void testClassifierFromCompanionObjectWithQualificationNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/classifierFromCompanionObjectWithQualificationNew.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classifierFromCompanionObjectWithQualificationOld.kt")
        public void testClassifierFromCompanionObjectWithQualificationOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/classifierFromCompanionObjectWithQualificationOld.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classifierIsVisibleByTwoPaths.kt")
        public void testClassifierIsVisibleByTwoPaths() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/classifierIsVisibleByTwoPaths.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inheritedFromDeprecatedNew.kt")
        public void testInheritedFromDeprecatedNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/inheritedFromDeprecatedNew.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inheritedFromDeprecatedOld.kt")
        public void testInheritedFromDeprecatedOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/inheritedFromDeprecatedOld.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inheritedFromDeprecatedWithQualificationNew.kt")
        public void testInheritedFromDeprecatedWithQualificationNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/inheritedFromDeprecatedWithQualificationNew.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inheritedFromDeprecatedWithQualificationOld.kt")
        public void testInheritedFromDeprecatedWithQualificationOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/inheritedFromDeprecatedWithQualificationOld.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("staticsFromJavaNew.kt")
        public void testStaticsFromJavaNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/staticsFromJavaNew.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("staticsFromJavaOld.kt")
        public void testStaticsFromJavaOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/staticsFromJavaOld.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("staticsFromJavaWithQualificationNew.kt")
        public void testStaticsFromJavaWithQualificationNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/staticsFromJavaWithQualificationNew.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("staticsFromJavaWithQualificationOld.kt")
        public void testStaticsFromJavaWithQualificationOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/staticsFromJavaWithQualificationOld.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useDeprecatedConstructorNew.kt")
        public void testUseDeprecatedConstructorNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/useDeprecatedConstructorNew.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useDeprecatedConstructorOld.kt")
        public void testUseDeprecatedConstructorOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/useDeprecatedConstructorOld.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useDeprecatedConstructorWithQualificationNew.kt")
        public void testUseDeprecatedConstructorWithQualificationNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/useDeprecatedConstructorWithQualificationNew.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useDeprecatedConstructorWithQualificationOld.kt")
        public void testUseDeprecatedConstructorWithQualificationOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/useDeprecatedConstructorWithQualificationOld.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/operatorRem")
    @TestDataPath("$PROJECT_ROOT")
    public class OperatorRem {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInOperatorRem() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/operatorRem"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DeprecatedModAssignOperatorConventions.kt")
      public void testDeprecatedModAssignOperatorConventions() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/DeprecatedModAssignOperatorConventions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedModConvention.kt")
      public void testDeprecatedModConvention() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/deprecatedModConvention.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DeprecatedModOperatorConventions.kt")
      public void testDeprecatedModOperatorConventions() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/DeprecatedModOperatorConventions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("doNotResolveToInapplicableRem.kt")
      public void testDoNotResolveToInapplicableRem() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/doNotResolveToInapplicableRem.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("forbiddenModOperatorConvention.kt")
      public void testForbiddenModOperatorConvention() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/forbiddenModOperatorConvention.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("modWithRemAssign.kt")
      public void testModWithRemAssign() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/modWithRemAssign.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("numberRemConversions.kt")
      public void testNumberRemConversions() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/numberRemConversions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("operatorRem.kt")
      public void testOperatorRem() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/operatorRem.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("preferRemAsExtentionOverMod.kt")
      public void testPreferRemAsExtentionOverMod() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/preferRemAsExtentionOverMod.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("preferRemAsMemberOverMod.kt")
      public void testPreferRemAsMemberOverMod() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/preferRemAsMemberOverMod.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("preferRemFromCompanionObjectOverRem.kt")
      public void testPreferRemFromCompanionObjectOverRem() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/preferRemFromCompanionObjectOverRem.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("preferRemOverModInLocalFunctions.kt")
      public void testPreferRemOverModInLocalFunctions() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/preferRemOverModInLocalFunctions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("preferRemWithImplicitReceivers.kt")
      public void testPreferRemWithImplicitReceivers() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/preferRemWithImplicitReceivers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("prefereRemAsExtensionOverMemberMod.kt")
      public void testPrefereRemAsExtensionOverMemberMod() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/prefereRemAsExtensionOverMemberMod.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("remAndRemAssignAmbiguity.kt")
      public void testRemAndRemAssignAmbiguity() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/remAndRemAssignAmbiguity.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("remWithModAndModAssign.kt")
      public void testRemWithModAndModAssign() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/remWithModAndModAssign.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("remWithModAssign.kt")
      public void testRemWithModAssign() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/remWithModAssign.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveModIfRemIsHidden.kt")
      public void testResolveModIfRemIsHidden() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/resolveModIfRemIsHidden.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/operatorsOverloading")
    @TestDataPath("$PROJECT_ROOT")
    public class OperatorsOverloading {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInOperatorsOverloading() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/operatorsOverloading"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AssignOperatorAmbiguity.kt")
      public void testAssignOperatorAmbiguity() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/AssignOperatorAmbiguity.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AssignOperatorAmbiguityExtension.kt")
      public void testAssignOperatorAmbiguityExtension() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/AssignOperatorAmbiguityExtension.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AssignOperatorWithExtensionForAny.kt")
      public void testAssignOperatorWithExtensionForAny() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/AssignOperatorWithExtensionForAny.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AssignmentOperations.kt")
      public void testAssignmentOperations() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/AssignmentOperations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignmentOperationsCheckReturnType.kt")
      public void testAssignmentOperationsCheckReturnType() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/assignmentOperationsCheckReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("augmentedAssignForJavaSyntheticProperty.kt")
      public void testAugmentedAssignForJavaSyntheticProperty() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/augmentedAssignForJavaSyntheticProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("compareToNullable.kt")
      public void testCompareToNullable() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/compareToNullable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("destructuringDeclarationWithInvoke.kt")
      public void testDestructuringDeclarationWithInvoke() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/destructuringDeclarationWithInvoke.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("EqualsOperatorOverrideHierarchies.kt")
      public void testEqualsOperatorOverrideHierarchies() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/EqualsOperatorOverrideHierarchies.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitInvokeOnPropertyInItsInitializer.kt")
      public void testImplicitInvokeOnPropertyInItsInitializer() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/implicitInvokeOnPropertyInItsInitializer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitInvokeOnPropertyInItsInitializer2.kt")
      public void testImplicitInvokeOnPropertyInItsInitializer2() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/implicitInvokeOnPropertyInItsInitializer2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incForAssignmentSmartCast.kt")
      public void testIncForAssignmentSmartCast() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/incForAssignmentSmartCast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InconsistentGetSet.kt")
      public void testInconsistentGetSet() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/InconsistentGetSet.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IteratorAmbiguity.kt")
      public void testIteratorAmbiguity() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/IteratorAmbiguity.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1028.kt")
      public void testKt1028() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt1028.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt11300.kt")
      public void testKt11300() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt11300.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt13330.kt")
      public void testKt13330() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt13330.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt13349.kt")
      public void testKt13349() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt13349.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3450.kt")
      public void testKt3450() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt3450.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt45503_1.kt")
      public void testKt45503_1() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt45503_1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt45503_2.kt")
      public void testKt45503_2() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt45503_2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt45503_3.kt")
      public void testKt45503_3() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt45503_3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("plusAssignOnArray.kt")
      public void testPlusAssignOnArray() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnArray.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("plusAssignOnLocal.kt")
      public void testPlusAssignOnLocal() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnLocal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("plusAssignOnProperty.kt")
      public void testPlusAssignOnProperty() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("plusAssignOnVarAndCollections.kt")
      public void testPlusAssignOnVarAndCollections() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnVarAndCollections.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PropertyInvoke.kt")
      public void testPropertyInvoke() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/PropertyInvoke.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unresolvedOperator.kt")
      public void testUnresolvedOperator() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/unresolvedOperator.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/operatorsOverloading/until")
      @TestDataPath("$PROJECT_ROOT")
      public class Until {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInUntil() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/operatorsOverloading/until"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("custom.kt")
        public void testCustom() {
          runTest("compiler/testData/diagnostics/tests/operatorsOverloading/until/custom.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("customDefault.kt")
        public void testCustomDefault() {
          runTest("compiler/testData/diagnostics/tests/operatorsOverloading/until/customDefault.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("customDisabled.kt")
        public void testCustomDisabled() {
          runTest("compiler/testData/diagnostics/tests/operatorsOverloading/until/customDisabled.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/operatorsOverloading/until/simple.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/overload")
    @TestDataPath("$PROJECT_ROOT")
    public class Overload {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInOverload() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/overload"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConflictingOlverloadsGenericFunctions.kt")
      public void testConflictingOlverloadsGenericFunctions() {
        runTest("compiler/testData/diagnostics/tests/overload/ConflictingOlverloadsGenericFunctions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConflictingOverloadsFunsDifferentReturnInClass.kt")
      public void testConflictingOverloadsFunsDifferentReturnInClass() {
        runTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsFunsDifferentReturnInClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConflictingOverloadsFunsDifferentReturnInPackage.kt")
      public void testConflictingOverloadsFunsDifferentReturnInPackage() {
        runTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsFunsDifferentReturnInPackage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConflictingOverloadsIdenticalExtFunsInPackage.kt")
      public void testConflictingOverloadsIdenticalExtFunsInPackage() {
        runTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalExtFunsInPackage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConflictingOverloadsIdenticalFunsInClass.kt")
      public void testConflictingOverloadsIdenticalFunsInClass() {
        runTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalFunsInClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConflictingOverloadsIdenticalValsInClass.kt")
      public void testConflictingOverloadsIdenticalValsInClass() {
        runTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalValsInClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConflictingOverloadsValsDifferentTypeInClass.kt")
      public void testConflictingOverloadsValsDifferentTypeInClass() {
        runTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsValsDifferentTypeInClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConstructorVsFunOverload.kt")
      public void testConstructorVsFunOverload() {
        runTest("compiler/testData/diagnostics/tests/overload/ConstructorVsFunOverload.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("defaultParameters.kt")
      public void testDefaultParameters() {
        runTest("compiler/testData/diagnostics/tests/overload/defaultParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("disambiguateByFailedAbstractClassCheck.kt")
      public void testDisambiguateByFailedAbstractClassCheck() {
        runTest("compiler/testData/diagnostics/tests/overload/disambiguateByFailedAbstractClassCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("disambiguateByNumberOfLambdaArgument.kt")
      public void testDisambiguateByNumberOfLambdaArgument() {
        runTest("compiler/testData/diagnostics/tests/overload/disambiguateByNumberOfLambdaArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("doubleWinsOverFloat.kt")
      public void testDoubleWinsOverFloat() {
        runTest("compiler/testData/diagnostics/tests/overload/doubleWinsOverFloat.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("EmptyArgumentListInLambda.kt")
      public void testEmptyArgumentListInLambda() {
        runTest("compiler/testData/diagnostics/tests/overload/EmptyArgumentListInLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExtFunDifferentReceiver.kt")
      public void testExtFunDifferentReceiver() {
        runTest("compiler/testData/diagnostics/tests/overload/ExtFunDifferentReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FunNoConflictInDifferentPackages.kt")
      public void testFunNoConflictInDifferentPackages() {
        runTest("compiler/testData/diagnostics/tests/overload/FunNoConflictInDifferentPackages.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10939.kt")
      public void testKt10939() {
        runTest("compiler/testData/diagnostics/tests/overload/kt10939.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1998.kt")
      public void testKt1998() {
        runTest("compiler/testData/diagnostics/tests/overload/kt1998.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt22004.kt")
      public void testKt22004() {
        runTest("compiler/testData/diagnostics/tests/overload/kt22004.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2493.kt")
      public void testKt2493() {
        runTest("compiler/testData/diagnostics/tests/overload/kt2493.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt61168WithFix.kt")
      public void testKt61168WithFix() {
        runTest("compiler/testData/diagnostics/tests/overload/kt61168WithFix.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt7068.kt")
      public void testKt7068() {
        runTest("compiler/testData/diagnostics/tests/overload/kt7068.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt7068_2.kt")
      public void testKt7068_2() {
        runTest("compiler/testData/diagnostics/tests/overload/kt7068_2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt7440.kt")
      public void testKt7440() {
        runTest("compiler/testData/diagnostics/tests/overload/kt7440.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdasWithDifferentParameterNumber.kt")
      public void testLambdasWithDifferentParameterNumber() {
        runTest("compiler/testData/diagnostics/tests/overload/lambdasWithDifferentParameterNumber.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("LocalFunctions.kt")
      public void testLocalFunctions() {
        runTest("compiler/testData/diagnostics/tests/overload/LocalFunctions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("onlyPrivateOverloadsDiagnostic.kt")
      public void testOnlyPrivateOverloadsDiagnostic() {
        runTest("compiler/testData/diagnostics/tests/overload/onlyPrivateOverloadsDiagnostic.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OverloadFunRegularAndExt.kt")
      public void testOverloadFunRegularAndExt() {
        runTest("compiler/testData/diagnostics/tests/overload/OverloadFunRegularAndExt.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OverloadVarAndFunInClass.kt")
      public void testOverloadVarAndFunInClass() {
        runTest("compiler/testData/diagnostics/tests/overload/OverloadVarAndFunInClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overloadsFromCurrentAndSuperClass.kt")
      public void testOverloadsFromCurrentAndSuperClass() {
        runTest("compiler/testData/diagnostics/tests/overload/overloadsFromCurrentAndSuperClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overloadsFromCurrentAndSuperClassWithReturnType.kt")
      public void testOverloadsFromCurrentAndSuperClassWithReturnType() {
        runTest("compiler/testData/diagnostics/tests/overload/overloadsFromCurrentAndSuperClassWithReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedeclarationThroughDestructuring.kt")
      public void testRedeclarationThroughDestructuring() {
        runTest("compiler/testData/diagnostics/tests/overload/RedeclarationThroughDestructuring.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SyntheticAndNotSynthetic.kt")
      public void testSyntheticAndNotSynthetic() {
        runTest("compiler/testData/diagnostics/tests/overload/SyntheticAndNotSynthetic.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TypeParameterMultipleBounds.kt")
      public void testTypeParameterMultipleBounds() {
        runTest("compiler/testData/diagnostics/tests/overload/TypeParameterMultipleBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("UnsubstitutedJavaGenetics.kt")
      public void testUnsubstitutedJavaGenetics() {
        runTest("compiler/testData/diagnostics/tests/overload/UnsubstitutedJavaGenetics.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden")
      @TestDataPath("$PROJECT_ROOT")
      public class NoConflictingOverloadsWithDeprecatedHidden {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNoConflictingOverloadsWithDeprecatedHidden() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ConflictingOverloadsFunsDifferentReturnInClass.kt")
        public void testConflictingOverloadsFunsDifferentReturnInClass() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConflictingOverloadsFunsDifferentReturnInClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ConflictingOverloadsIdenticalFunsInClass.kt")
        public void testConflictingOverloadsIdenticalFunsInClass() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConflictingOverloadsIdenticalFunsInClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ConflictingOverloadsIdenticalValsInClass.kt")
        public void testConflictingOverloadsIdenticalValsInClass() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConflictingOverloadsIdenticalValsInClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ConflictingOverloadsValsDifferentTypeInClass.kt")
        public void testConflictingOverloadsValsDifferentTypeInClass() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConflictingOverloadsValsDifferentTypeInClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ConstructorVsFunOverload.kt")
        public void testConstructorVsFunOverload() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConstructorVsFunOverload.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ConstructorsInMemberScope.kt")
        public void testConstructorsInMemberScope() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConstructorsInMemberScope.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ConstructorsInPackage.kt")
        public void testConstructorsInPackage() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConstructorsInPackage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ConstructorsOnTopLevel.kt")
        public void testConstructorsOnTopLevel() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConstructorsOnTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("DifferentDeprecationLevels.kt")
        public void testDifferentDeprecationLevels() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/DifferentDeprecationLevels.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FunctionsAndConstructorsInMemberScope.kt")
        public void testFunctionsAndConstructorsInMemberScope() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/FunctionsAndConstructorsInMemberScope.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FunctionsAndConstructorsInPackage.kt")
        public void testFunctionsAndConstructorsInPackage() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/FunctionsAndConstructorsInPackage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FunctionsAndConstructorsOnTopLevel.kt")
        public void testFunctionsAndConstructorsOnTopLevel() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/FunctionsAndConstructorsOnTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FunctionsInMemberScope.kt")
        public void testFunctionsInMemberScope() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/FunctionsInMemberScope.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FunctionsInPackage.kt")
        public void testFunctionsInPackage() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/FunctionsInPackage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FunctionsOnTopLevel.kt")
        public void testFunctionsOnTopLevel() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/FunctionsOnTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("LocalFunctions.kt")
        public void testLocalFunctions() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/LocalFunctions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NoHiddenTransitivityFromClassifierToConstructor.kt")
        public void testNoHiddenTransitivityFromClassifierToConstructor() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/NoHiddenTransitivityFromClassifierToConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("OpenFunctionsInMemberScope.kt")
        public void testOpenFunctionsInMemberScope() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/OpenFunctionsInMemberScope.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("TypeParameterMultipleBounds.kt")
        public void testTypeParameterMultipleBounds() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/TypeParameterMultipleBounds.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/override")
    @TestDataPath("$PROJECT_ROOT")
    public class Override {
      @RepeatedTest(value = 5)
      @TestMetadata("AbstractFunImplemented.kt")
      public void testAbstractFunImplemented() {
        runTest("compiler/testData/diagnostics/tests/override/AbstractFunImplemented.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AbstractFunNotImplemented.kt")
      public void testAbstractFunNotImplemented() {
        runTest("compiler/testData/diagnostics/tests/override/AbstractFunNotImplemented.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AbstractValImplemented.kt")
      public void testAbstractValImplemented() {
        runTest("compiler/testData/diagnostics/tests/override/AbstractValImplemented.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AbstractValNotImplemented.kt")
      public void testAbstractValNotImplemented() {
        runTest("compiler/testData/diagnostics/tests/override/AbstractValNotImplemented.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AbstractVarImplemented.kt")
      public void testAbstractVarImplemented() {
        runTest("compiler/testData/diagnostics/tests/override/AbstractVarImplemented.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AbstractVarNotImplemented.kt")
      public void testAbstractVarNotImplemented() {
        runTest("compiler/testData/diagnostics/tests/override/AbstractVarNotImplemented.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInOverride() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/override"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AllPrivateFromSuperTypes.kt")
      public void testAllPrivateFromSuperTypes() {
        runTest("compiler/testData/diagnostics/tests/override/AllPrivateFromSuperTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ComplexValRedeclaration.kt")
      public void testComplexValRedeclaration() {
        runTest("compiler/testData/diagnostics/tests/override/ComplexValRedeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConflictingFunctionSignatureFromSuperclass.kt")
      public void testConflictingFunctionSignatureFromSuperclass() {
        runTest("compiler/testData/diagnostics/tests/override/ConflictingFunctionSignatureFromSuperclass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConflictingPropertySignatureFromSuperclass.kt")
      public void testConflictingPropertySignatureFromSuperclass() {
        runTest("compiler/testData/diagnostics/tests/override/ConflictingPropertySignatureFromSuperclass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("contextReceivers.kt")
      public void testContextReceivers() {
        runTest("compiler/testData/diagnostics/tests/override/contextReceivers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DefaultParameterValueInOverride.kt")
      public void testDefaultParameterValueInOverride() {
        runTest("compiler/testData/diagnostics/tests/override/DefaultParameterValueInOverride.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DefaultParameterValues-NoErrorsWhenInheritingFromOneTypeTwice.kt")
      public void testDefaultParameterValues_NoErrorsWhenInheritingFromOneTypeTwice() {
        runTest("compiler/testData/diagnostics/tests/override/DefaultParameterValues-NoErrorsWhenInheritingFromOneTypeTwice.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Delegation.kt")
      public void testDelegation() {
        runTest("compiler/testData/diagnostics/tests/override/Delegation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DelegationFun.kt")
      public void testDelegationFun() {
        runTest("compiler/testData/diagnostics/tests/override/DelegationFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DelegationVal.kt")
      public void testDelegationVal() {
        runTest("compiler/testData/diagnostics/tests/override/DelegationVal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DelegationVar.kt")
      public void testDelegationVar() {
        runTest("compiler/testData/diagnostics/tests/override/DelegationVar.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("diamondWithDiagonal.kt")
      public void testDiamondWithDiagonal() {
        runTest("compiler/testData/diagnostics/tests/override/diamondWithDiagonal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dnnOverridesFlexible.kt")
      public void testDnnOverridesFlexible() {
        runTest("compiler/testData/diagnostics/tests/override/dnnOverridesFlexible.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dnnOverridesFlexibleDnnRepresentation.kt")
      public void testDnnOverridesFlexibleDnnRepresentation() {
        runTest("compiler/testData/diagnostics/tests/override/dnnOverridesFlexibleDnnRepresentation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DuplicateMethod.kt")
      public void testDuplicateMethod() {
        runTest("compiler/testData/diagnostics/tests/override/DuplicateMethod.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("EqualityOfIntersectionTypes.kt")
      public void testEqualityOfIntersectionTypes() {
        runTest("compiler/testData/diagnostics/tests/override/EqualityOfIntersectionTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExtendFunctionClass.kt")
      public void testExtendFunctionClass() {
        runTest("compiler/testData/diagnostics/tests/override/ExtendFunctionClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fakeEquals.kt")
      public void testFakeEquals() {
        runTest("compiler/testData/diagnostics/tests/override/fakeEquals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FakeOverrideAbstractAndNonAbstractFun.kt")
      public void testFakeOverrideAbstractAndNonAbstractFun() {
        runTest("compiler/testData/diagnostics/tests/override/FakeOverrideAbstractAndNonAbstractFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FakeOverrideDifferentDeclarationSignatures.kt")
      public void testFakeOverrideDifferentDeclarationSignatures() {
        runTest("compiler/testData/diagnostics/tests/override/FakeOverrideDifferentDeclarationSignatures.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FakeOverrideModality1.kt")
      public void testFakeOverrideModality1() {
        runTest("compiler/testData/diagnostics/tests/override/FakeOverrideModality1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FakeOverrideModality2.kt")
      public void testFakeOverrideModality2() {
        runTest("compiler/testData/diagnostics/tests/override/FakeOverrideModality2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FakeOverrideModality3.kt")
      public void testFakeOverrideModality3() {
        runTest("compiler/testData/diagnostics/tests/override/FakeOverrideModality3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Generics.kt")
      public void testGenerics() {
        runTest("compiler/testData/diagnostics/tests/override/Generics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InheritingJavaClassWithRawTypeInOverrideSignature.kt")
      public void testInheritingJavaClassWithRawTypeInOverrideSignature() {
        runTest("compiler/testData/diagnostics/tests/override/InheritingJavaClassWithRawTypeInOverrideSignature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InternalPotentialOverride.kt")
      public void testInternalPotentialOverride() {
        runTest("compiler/testData/diagnostics/tests/override/InternalPotentialOverride.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionOfAbstractAndOpen.kt")
      public void testIntersectionOfAbstractAndOpen() {
        runTest("compiler/testData/diagnostics/tests/override/intersectionOfAbstractAndOpen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionOfSubstitutedProperties.kt")
      public void testIntersectionOfSubstitutedProperties() {
        runTest("compiler/testData/diagnostics/tests/override/intersectionOfSubstitutedProperties.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionOverrideWithProtectedAbstract.kt")
      public void testIntersectionOverrideWithProtectedAbstract() {
        runTest("compiler/testData/diagnostics/tests/override/intersectionOverrideWithProtectedAbstract.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionOverrideWithSubsumedDifferentType.kt")
      public void testIntersectionOverrideWithSubsumedDifferentType() {
        runTest("compiler/testData/diagnostics/tests/override/intersectionOverrideWithSubsumedDifferentType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionOverridesIntersection.kt")
      public void testIntersectionOverridesIntersection() {
        runTest("compiler/testData/diagnostics/tests/override/intersectionOverridesIntersection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionWithSubsumedWithSubstitution.kt")
      public void testIntersectionWithSubsumedWithSubstitution() {
        runTest("compiler/testData/diagnostics/tests/override/intersectionWithSubsumedWithSubstitution.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InvisiblePotentialOverride.kt")
      public void testInvisiblePotentialOverride() {
        runTest("compiler/testData/diagnostics/tests/override/InvisiblePotentialOverride.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt12358.kt")
      public void testKt12358() {
        runTest("compiler/testData/diagnostics/tests/override/kt12358.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt12467.kt")
      public void testKt12467() {
        runTest("compiler/testData/diagnostics/tests/override/kt12467.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt12482.kt")
      public void testKt12482() {
        runTest("compiler/testData/diagnostics/tests/override/kt12482.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1862.kt")
      public void testKt1862() {
        runTest("compiler/testData/diagnostics/tests/override/kt1862.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2052.kt")
      public void testKt2052() {
        runTest("compiler/testData/diagnostics/tests/override/kt2052.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4763.kt")
      public void testKt4763() {
        runTest("compiler/testData/diagnostics/tests/override/kt4763.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4763property.kt")
      public void testKt4763property() {
        runTest("compiler/testData/diagnostics/tests/override/kt4763property.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4785.kt")
      public void testKt4785() {
        runTest("compiler/testData/diagnostics/tests/override/kt4785.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt53408.kt")
      public void testKt53408() {
        runTest("compiler/testData/diagnostics/tests/override/kt53408.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt6014.kt")
      public void testKt6014() {
        runTest("compiler/testData/diagnostics/tests/override/kt6014.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt880.kt")
      public void testKt880() {
        runTest("compiler/testData/diagnostics/tests/override/kt880.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt8990.kt")
      public void testKt8990() {
        runTest("compiler/testData/diagnostics/tests/override/kt8990.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("manyImplFromOneJavaInterfaceWithDelegation.kt")
      public void testManyImplFromOneJavaInterfaceWithDelegation() {
        runTest("compiler/testData/diagnostics/tests/override/manyImplFromOneJavaInterfaceWithDelegation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("manyImplFromOneKotlinInterfaceWithDelegation.kt")
      public void testManyImplFromOneKotlinInterfaceWithDelegation() {
        runTest("compiler/testData/diagnostics/tests/override/manyImplFromOneKotlinInterfaceWithDelegation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MissingDelegate.kt")
      public void testMissingDelegate() {
        runTest("compiler/testData/diagnostics/tests/override/MissingDelegate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MultipleDefaultParametersInSupertypes.kt")
      public void testMultipleDefaultParametersInSupertypes() {
        runTest("compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MultipleDefaultParametersInSupertypesNoOverride.kt")
      public void testMultipleDefaultParametersInSupertypesNoOverride() {
        runTest("compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypesNoOverride.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MultipleDefaultParametersInSupertypesWithOverloads.kt")
      public void testMultipleDefaultParametersInSupertypesWithOverloads() {
        runTest("compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypesWithOverloads.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MultipleDefaultsAndNamesInSupertypes.kt")
      public void testMultipleDefaultsAndNamesInSupertypes() {
        runTest("compiler/testData/diagnostics/tests/override/MultipleDefaultsAndNamesInSupertypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MultipleDefaultsAndSubstitutionOverrides.kt")
      public void testMultipleDefaultsAndSubstitutionOverrides() {
        runTest("compiler/testData/diagnostics/tests/override/MultipleDefaultsAndSubstitutionOverrides.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MultipleDefaultsInSupertypesNoExplicitOverride.kt")
      public void testMultipleDefaultsInSupertypesNoExplicitOverride() {
        runTest("compiler/testData/diagnostics/tests/override/MultipleDefaultsInSupertypesNoExplicitOverride.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoOverrideAndWeakenedVisibilityOnOneLine.kt")
      public void testNoOverrideAndWeakenedVisibilityOnOneLine() {
        runTest("compiler/testData/diagnostics/tests/override/NoOverrideAndWeakenedVisibilityOnOneLine.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonGenerics.kt")
      public void testNonGenerics() {
        runTest("compiler/testData/diagnostics/tests/override/NonGenerics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ObjectDelegationManyImpl.kt")
      public void testObjectDelegationManyImpl() {
        runTest("compiler/testData/diagnostics/tests/override/ObjectDelegationManyImpl.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overrideMemberFromFinalClass.kt")
      public void testOverrideMemberFromFinalClass() {
        runTest("compiler/testData/diagnostics/tests/override/overrideMemberFromFinalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OverrideWithErrors.kt")
      public void testOverrideWithErrors() {
        runTest("compiler/testData/diagnostics/tests/override/OverrideWithErrors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OverridingFinalMember.kt")
      public void testOverridingFinalMember() {
        runTest("compiler/testData/diagnostics/tests/override/OverridingFinalMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ParameterDefaultValues-DefaultValueFromOnlyOneSupertype.kt")
      public void testParameterDefaultValues_DefaultValueFromOnlyOneSupertype() {
        runTest("compiler/testData/diagnostics/tests/override/ParameterDefaultValues-DefaultValueFromOnlyOneSupertype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ParentInheritsManyImplementations.kt")
      public void testParentInheritsManyImplementations() {
        runTest("compiler/testData/diagnostics/tests/override/ParentInheritsManyImplementations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PropertyInConstructor.kt")
      public void testPropertyInConstructor() {
        runTest("compiler/testData/diagnostics/tests/override/PropertyInConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ProtectedAndPrivateFromSupertypes.kt")
      public void testProtectedAndPrivateFromSupertypes() {
        runTest("compiler/testData/diagnostics/tests/override/ProtectedAndPrivateFromSupertypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SuspiciousCase1.kt")
      public void testSuspiciousCase1() {
        runTest("compiler/testData/diagnostics/tests/override/SuspiciousCase1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ToAbstractMembersFromSuper-kt1996.kt")
      public void testToAbstractMembersFromSuper_kt1996() {
        runTest("compiler/testData/diagnostics/tests/override/ToAbstractMembersFromSuper-kt1996.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varImplementedByInheritedVal.kt")
      public void testVarImplementedByInheritedVal() {
        runTest("compiler/testData/diagnostics/tests/override/varImplementedByInheritedVal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varImplementedByInheritedValError.kt")
      public void testVarImplementedByInheritedValError() {
        runTest("compiler/testData/diagnostics/tests/override/varImplementedByInheritedValError.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/override/clashesOnInheritance")
      @TestDataPath("$PROJECT_ROOT")
      public class ClashesOnInheritance {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInClashesOnInheritance() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/override/clashesOnInheritance"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conflictingInherited.kt")
        public void testConflictingInherited() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/conflictingInherited.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("covariantOverrides.kt")
        public void testCovariantOverrides() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/covariantOverrides.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibleReturnType.kt")
        public void testFlexibleReturnType() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/flexibleReturnType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibleReturnTypeIn.kt")
        public void testFlexibleReturnTypeIn() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/flexibleReturnTypeIn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibleReturnTypeList.kt")
        public void testFlexibleReturnTypeList() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/flexibleReturnTypeList.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericWithUpperBound.kt")
        public void testGenericWithUpperBound() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/genericWithUpperBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intersectionReturnTypeMismatchSubsumed.kt")
        public void testIntersectionReturnTypeMismatchSubsumed() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/intersectionReturnTypeMismatchSubsumed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt13355.kt")
        public void testKt13355() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/kt13355.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt13355viaJava.kt")
        public void testKt13355viaJava() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/kt13355viaJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt9550.kt")
        public void testKt9550() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/kt9550.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("packagePrivateAndPublic.kt")
        public void testPackagePrivateAndPublic() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/packagePrivateAndPublic.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("returnTypeMismatch.kt")
        public void testReturnTypeMismatch() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/returnTypeMismatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unrelatedInherited.kt")
        public void testUnrelatedInherited() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/unrelatedInherited.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valTypeMismatch.kt")
        public void testValTypeMismatch() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/valTypeMismatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varTypeMismatch.kt")
        public void testVarTypeMismatch() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/varTypeMismatch.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/override/derivedClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class DerivedClasses {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDerivedClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/override/derivedClasses"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Constructor.kt")
        public void testConstructor() {
          runTest("compiler/testData/diagnostics/tests/override/derivedClasses/Constructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("DelegatedConstructor.kt")
        public void testDelegatedConstructor() {
          runTest("compiler/testData/diagnostics/tests/override/derivedClasses/DelegatedConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("EnumValues.kt")
        public void testEnumValues() {
          runTest("compiler/testData/diagnostics/tests/override/derivedClasses/EnumValues.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Instance.kt")
        public void testInstance() {
          runTest("compiler/testData/diagnostics/tests/override/derivedClasses/Instance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("StaticFieldFromJava.kt")
        public void testStaticFieldFromJava() {
          runTest("compiler/testData/diagnostics/tests/override/derivedClasses/StaticFieldFromJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("StaticMethodFromJava.kt")
        public void testStaticMethodFromJava() {
          runTest("compiler/testData/diagnostics/tests/override/derivedClasses/StaticMethodFromJava.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/override/parameterNames")
      @TestDataPath("$PROJECT_ROOT")
      public class ParameterNames {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInParameterNames() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/override/parameterNames"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("changeOnOverrideDiagnostic.kt")
        public void testChangeOnOverrideDiagnostic() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/changeOnOverrideDiagnostic.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentNamesInSupertypesDiagnostic.kt")
        public void testDifferentNamesInSupertypesDiagnostic() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/differentNamesInSupertypesDiagnostic.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeInFunctionClass.kt")
        public void testInvokeInFunctionClass() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/invokeInFunctionClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jjkHierarchy.kt")
        public void testJjkHierarchy() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/jjkHierarchy.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kjkHierarchy.kt")
        public void testKjkHierarchy() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/kjkHierarchy.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kjkWithSeveralSupers.kt")
        public void testKjkWithSeveralSupers() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/kjkWithSeveralSupers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinInheritsBothJavaAndKotlin.kt")
        public void testKotlinInheritsBothJavaAndKotlin() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/kotlinInheritsBothJavaAndKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinInheritsJava.kt")
        public void testKotlinInheritsJava() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/kotlinInheritsJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noWarningOnJavaKotlinInheritance.kt")
        public void testNoWarningOnJavaKotlinInheritance() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/noWarningOnJavaKotlinInheritance.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/override/typeParameters")
      @TestDataPath("$PROJECT_ROOT")
      public class TypeParameters {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInTypeParameters() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/override/typeParameters"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classAndTwoInterfaceBounds.kt")
        public void testClassAndTwoInterfaceBounds() {
          runTest("compiler/testData/diagnostics/tests/override/typeParameters/classAndTwoInterfaceBounds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("differentSetsOfBounds.kt")
        public void testDifferentSetsOfBounds() {
          runTest("compiler/testData/diagnostics/tests/override/typeParameters/differentSetsOfBounds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt9850.kt")
        public void testKt9850() {
          runTest("compiler/testData/diagnostics/tests/override/typeParameters/kt9850.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleVisitorTwoAccepts.kt")
        public void testSimpleVisitorTwoAccepts() {
          runTest("compiler/testData/diagnostics/tests/override/typeParameters/simpleVisitorTwoAccepts.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/parenthesizedTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class ParenthesizedTypes {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInParenthesizedTypes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/parenthesizedTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationsOnNullableParenthesizedTypes.kt")
      public void testAnnotationsOnNullableParenthesizedTypes() {
        runTest("compiler/testData/diagnostics/tests/parenthesizedTypes/annotationsOnNullableParenthesizedTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationsOnParenthesizedTypes.kt")
      public void testAnnotationsOnParenthesizedTypes() {
        runTest("compiler/testData/diagnostics/tests/parenthesizedTypes/annotationsOnParenthesizedTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("splitModifierList.kt")
      public void testSplitModifierList() {
        runTest("compiler/testData/diagnostics/tests/parenthesizedTypes/splitModifierList.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/platformTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class PlatformTypes {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInPlatformTypes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("comparingWithWrongNullability.kt")
      public void testComparingWithWrongNullability() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/comparingWithWrongNullability.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("comparingWithWrongNullabilityDnnRepresentation.kt")
      public void testComparingWithWrongNullabilityDnnRepresentation() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/comparingWithWrongNullabilityDnnRepresentation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegateByComplexInheritance.kt")
      public void testDelegateByComplexInheritance() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/delegateByComplexInheritance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dereference.kt")
      public void testDereference() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/dereference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("elvis.kt")
      public void testElvis() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/elvis.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("getParentOfType.kt")
      public void testGetParentOfType() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/getParentOfType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inference.kt")
      public void testInference() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/inference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intVsIntegerAmbiguity.kt")
      public void testIntVsIntegerAmbiguity() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/intVsIntegerAmbiguity.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaEmptyList.kt")
      public void testJavaEmptyList() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/javaEmptyList.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaMappedCtors.kt")
      public void testJavaMappedCtors() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/javaMappedCtors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt50877.kt")
      public void testKt50877() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/kt50877.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("methodTypeParameterDefaultBound.kt")
      public void testMethodTypeParameterDefaultBound() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/methodTypeParameterDefaultBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noAnnotationInClassPath.kt")
      public void testNoAnnotationInClassPath() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/noAnnotationInClassPath.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableTypeArgument.kt")
      public void testNullableTypeArgument() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/nullableTypeArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("override.kt")
      public void testOverride() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/override.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propagateFlexibilityFromOtherConstraints.kt")
      public void testPropagateFlexibilityFromOtherConstraints() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/propagateFlexibilityFromOtherConstraints.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("rawOverrides.kt")
      public void testRawOverrides() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/rawOverrides.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("rawSamOverrides.kt")
      public void testRawSamOverrides() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/rawSamOverrides.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("safeCall.kt")
      public void testSafeCall() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/safeCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samAdapterInConstructor.kt")
      public void testSamAdapterInConstructor() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/samAdapterInConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samConstructor.kt")
      public void testSamConstructor() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/samConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("starProjectionToFlexibleVariable.kt")
      public void testStarProjectionToFlexibleVariable() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/starProjectionToFlexibleVariable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("supertypeTypeArguments.kt")
      public void testSupertypeTypeArguments() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/supertypeTypeArguments.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/commonSupertype")
      @TestDataPath("$PROJECT_ROOT")
      public class CommonSupertype {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCommonSupertype() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/commonSupertype"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("collectionOrNull.kt")
        public void testCollectionOrNull() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/collectionOrNull.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferenceWithBound.kt")
        public void testInferenceWithBound() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/inferenceWithBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("mixedElvis.kt")
        public void testMixedElvis() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/mixedElvis.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("mixedIf.kt")
        public void testMixedIf() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/mixedIf.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveGeneric.kt")
        public void testRecursiveGeneric() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/recursiveGeneric.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("stringOrNull.kt")
        public void testStringOrNull() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/stringOrNull.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeOfElvis.kt")
        public void testTypeOfElvis() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/typeOfElvis.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withNothing.kt")
        public void testWithNothing() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/withNothing.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation")
      @TestDataPath("$PROJECT_ROOT")
      public class GenericVarianceViolation {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInGenericVarianceViolation() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deepTypeHierarchy.kt")
        public void testDeepTypeHierarchy() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/deepTypeHierarchy.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferenceFrom.kt")
        public void testInferenceFrom() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/inferenceFrom.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaOutProjection.kt")
        public void testJavaOutProjection() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/javaOutProjection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinOutProjection.kt")
        public void testKotlinOutProjection() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/kotlinOutProjection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinStarProjection.kt")
        public void testKotlinStarProjection() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/kotlinStarProjection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("listSuperType.kt")
        public void testListSuperType() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/listSuperType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("rawTypes.kt")
        public void testRawTypes() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/rawTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/simple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCast.kt")
        public void testSmartCast() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/smartCast.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("strangeVariance.kt")
        public void testStrangeVariance() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/strangeVariance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("userDefinedOut.kt")
        public void testUserDefinedOut() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/userDefinedOut.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valueFromJava.kt")
        public void testValueFromJava() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/valueFromJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("wildcards.kt")
        public void testWildcards() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/wildcards.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall")
      @TestDataPath("$PROJECT_ROOT")
      public class MethodCall {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInMethodCall() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/methodCall"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("entrySet.kt")
        public void testEntrySet() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/entrySet.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibilityThroughTypeVariable.kt")
        public void testFlexibilityThroughTypeVariable() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/flexibilityThroughTypeVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibilityThroughTypeVariableOut.kt")
        public void testFlexibilityThroughTypeVariableOut() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/flexibilityThroughTypeVariableOut.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericsAndArrays.kt")
        public void testGenericsAndArrays() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/genericsAndArrays.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("int.kt")
        public void testInt() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/int.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intArray.kt")
        public void testIntArray() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/intArray.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaCollectionToKotlin.kt")
        public void testJavaCollectionToKotlin() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/javaCollectionToKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaToJava.kt")
        public void testJavaToJava() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/javaToJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaToKotlin.kt")
        public void testJavaToKotlin() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/javaToKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinCollectionToJava.kt")
        public void testKotlinCollectionToJava() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/kotlinCollectionToJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt27565.kt")
        public void testKt27565() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/kt27565.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("list.kt")
        public void testList() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/list.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multipleExactBounds.kt")
        public void testMultipleExactBounds() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/multipleExactBounds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multipleExactBoundsNullable.kt")
        public void testMultipleExactBoundsNullable() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/multipleExactBoundsNullable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("objectArray.kt")
        public void testObjectArray() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/objectArray.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloadingForSubclass.kt")
        public void testOverloadingForSubclass() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/overloadingForSubclass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sam.kt")
        public void testSam() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/sam.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("singleton.kt")
        public void testSingleton() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/singleton.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("singletonDnnRepresentation.kt")
        public void testSingletonDnnRepresentation() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/singletonDnnRepresentation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("string.kt")
        public void testString() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/string.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("visitor.kt")
        public void testVisitor() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/visitor.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter")
      @TestDataPath("$PROJECT_ROOT")
      public class NotNullTypeParameter {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNotNullTypeParameter() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("enhancementFromAnnotation.kt")
        public void testEnhancementFromAnnotation() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/enhancementFromAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("enhancementFromKotlin.kt")
        public void testEnhancementFromKotlin() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/enhancementFromKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("methodTypeParameter.kt")
        public void testMethodTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/methodTypeParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noInheritanceReturnType.kt")
        public void testNoInheritanceReturnType() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/noInheritanceReturnType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noInheritanceValueParameter.kt")
        public void testNoInheritanceValueParameter() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/noInheritanceValueParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onTypeProjection.kt")
        public void testOnTypeProjection() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/onTypeProjection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substitutionInSuperType.kt")
        public void testSubstitutionInSuperType() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/substitutionInSuperType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supplier.kt")
        public void testSupplier() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/supplier.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings")
      @TestDataPath("$PROJECT_ROOT")
      public class NullabilityWarnings {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNullabilityWarnings() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("arithmetic.kt")
        public void testArithmetic() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/arithmetic.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("array.kt")
        public void testArray() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/array.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("assignToVar.kt")
        public void testAssignToVar() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/assignToVar.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conditions.kt")
        public void testConditions() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/conditions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dataFlowInfo.kt")
        public void testDataFlowInfo() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/dataFlowInfo.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("defaultParameters.kt")
        public void testDefaultParameters() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/defaultParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("delegatedProperties.kt")
        public void testDelegatedProperties() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/delegatedProperties.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("delegation.kt")
        public void testDelegation() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/delegation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("derefenceExtension.kt")
        public void testDerefenceExtension() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/derefenceExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("derefenceMember.kt")
        public void testDerefenceMember() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/derefenceMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("elvis.kt")
        public void testElvis() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/elvis.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("expectedType.kt")
        public void testExpectedType() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/expectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("for.kt")
        public void testFor() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/for.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionArguments.kt")
        public void testFunctionArguments() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/functionArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferenceInConditionals.kt")
        public void testInferenceInConditionals() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/inferenceInConditionals.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invoke.kt")
        public void testInvoke() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/invoke.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt6829.kt")
        public void testKt6829() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/kt6829.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multiDeclaration.kt")
        public void testMultiDeclaration() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/multiDeclaration.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noWarningOnDoubleElvis.kt")
        public void testNoWarningOnDoubleElvis() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/noWarningOnDoubleElvis.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullAfterSafeCall.kt")
        public void testNotNullAfterSafeCall() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullAfterSafeCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullAssertion.kt")
        public void testNotNullAssertion() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullAssertion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullAssertionInCall.kt")
        public void testNotNullAssertionInCall() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullAssertionInCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullTypeMarkedWithNullableAnnotation.kt")
        public void testNotNullTypeMarkedWithNullableAnnotation() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullTypeMarkedWithNullableAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("passToJava.kt")
        public void testPassToJava() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/passToJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("primitiveArray.kt")
        public void testPrimitiveArray() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/primitiveArray.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("safeCall.kt")
        public void testSafeCall() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/safeCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("senselessComparisonEquals.kt")
        public void testSenselessComparisonEquals() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/senselessComparisonEquals.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("senselessComparisonIdentityEquals.kt")
        public void testSenselessComparisonIdentityEquals() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/senselessComparisonIdentityEquals.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("throw.kt")
        public void testThrow() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/throw.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("uselessElvisInCall.kt")
        public void testUselessElvisInCall() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/uselessElvisInCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("uselessElvisRightIsNull.kt")
        public void testUselessElvisRightIsNull() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/uselessElvisRightIsNull.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/rawTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class RawTypes {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInRawTypes() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/rawTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("arrays.kt")
        public void testArrays() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/arrays.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dontSubstituteAnotherErasedRecursiveTypeArgumentAndNonRecursive.kt")
        public void testDontSubstituteAnotherErasedRecursiveTypeArgumentAndNonRecursive() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/dontSubstituteAnotherErasedRecursiveTypeArgumentAndNonRecursive.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dontSubstituteAnotherErasedTypeArgumentIfRecursive.kt")
        public void testDontSubstituteAnotherErasedTypeArgumentIfRecursive() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/dontSubstituteAnotherErasedTypeArgumentIfRecursive.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("errorType.kt")
        public void testErrorType() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/errorType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericInnerClass.kt")
        public void testGenericInnerClass() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/genericInnerClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("interClassesRecursion.kt")
        public void testInterClassesRecursion() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/interClassesRecursion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("interdependentTypeParameters.kt")
        public void testInterdependentTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/interdependentTypeParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("interdependentTypeParametersFromKotlin.kt")
        public void testInterdependentTypeParametersFromKotlin() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/interdependentTypeParametersFromKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intermediateRecursion.kt")
        public void testIntermediateRecursion() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/intermediateRecursion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt47459.kt")
        public void testKt47459() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/kt47459.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lostRawTypeAfterElvis.kt")
        public void testLostRawTypeAfterElvis() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/lostRawTypeAfterElvis.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noTypeArgumentsForRawScopedMembers.kt")
        public void testNoTypeArgumentsForRawScopedMembers() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/noTypeArgumentsForRawScopedMembers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonGenericRawMember.kt")
        public void testNonGenericRawMember() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/nonGenericRawMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonProjectedInnerErasure.kt")
        public void testNonProjectedInnerErasure() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/nonProjectedInnerErasure.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonRawArraysInRawType.kt")
        public void testNonRawArraysInRawType() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/nonRawArraysInRawType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonTrivialErasure.kt")
        public void testNonTrivialErasure() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/nonTrivialErasure.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("rawEnhancment.kt")
        public void testRawEnhancment() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawEnhancment.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("rawSupertype.kt")
        public void testRawSupertype() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawSupertype.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("rawSupertypeOverride.kt")
        public void testRawSupertypeOverride() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawSupertypeOverride.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("rawTypeInUpperBound.kt")
        public void testRawTypeInUpperBound() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawTypeInUpperBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("rawTypeSyntheticExtensions.kt")
        public void testRawTypeSyntheticExtensions() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawTypeSyntheticExtensions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("rawWithInProjection.kt")
        public void testRawWithInProjection() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawWithInProjection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveBound.kt")
        public void testRecursiveBound() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/recursiveBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("samRaw.kt")
        public void testSamRaw() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/samRaw.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("saveRawCapabilitiesAfterSubtitution.kt")
        public void testSaveRawCapabilitiesAfterSubtitution() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/saveRawCapabilitiesAfterSubtitution.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/simple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCastToClassWithRawSupertype.kt")
        public void testSmartCastToClassWithRawSupertype() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/smartCastToClassWithRawSupertype.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("starProjectionToRaw.kt")
        public void testStarProjectionToRaw() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/starProjectionToRaw.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substituteAnotherErasedTypeArgument.kt")
        public void testSubstituteAnotherErasedTypeArgument() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/substituteAnotherErasedTypeArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substituteOtherErasedDeepTypeArguments.kt")
        public void testSubstituteOtherErasedDeepTypeArguments() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/substituteOtherErasedDeepTypeArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substituteSeveralOtherErasedDependentTypeArguments.kt")
        public void testSubstituteSeveralOtherErasedDependentTypeArguments() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/substituteSeveralOtherErasedDependentTypeArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substituteSeveralOtherErasedTypeArguments.kt")
        public void testSubstituteSeveralOtherErasedTypeArguments() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/substituteSeveralOtherErasedTypeArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superTypeErasion.kt")
        public void testSuperTypeErasion() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/superTypeErasion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeEnhancement.kt")
        public void testTypeEnhancement() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/typeEnhancement.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement")
      @TestDataPath("$PROJECT_ROOT")
      public class TypeEnhancement {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInTypeEnhancement() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("buildFlexibleEnhancement.kt")
        public void testBuildFlexibleEnhancement() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/buildFlexibleEnhancement.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overriddenExtensions.kt")
        public void testOverriddenExtensions() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/overriddenExtensions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("saveAnnotationAfterSubstitution.kt")
        public void testSaveAnnotationAfterSubstitution() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/saveAnnotationAfterSubstitution.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypeDifferentParameterNullability.kt")
        public void testSupertypeDifferentParameterNullability() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/supertypeDifferentParameterNullability.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypeDifferentReturnNullability.kt")
        public void testSupertypeDifferentReturnNullability() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/supertypeDifferentReturnNullability.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/privateInFile")
    @TestDataPath("$PROJECT_ROOT")
    public class PrivateInFile {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInPrivateInFile() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/privateInFile"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt12429.kt")
      public void testKt12429() {
        runTest("compiler/testData/diagnostics/tests/privateInFile/kt12429.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("topLevelAnnotationCall.kt")
      public void testTopLevelAnnotationCall() {
        runTest("compiler/testData/diagnostics/tests/privateInFile/topLevelAnnotationCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("visibility.kt")
      public void testVisibility() {
        runTest("compiler/testData/diagnostics/tests/privateInFile/visibility.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/properties")
    @TestDataPath("$PROJECT_ROOT")
    public class Properties {
      @RepeatedTest(value = 5)
      @TestMetadata("abstarctPropertyInPrimaryConstructor.kt")
      public void testAbstarctPropertyInPrimaryConstructor() {
        runTest("compiler/testData/diagnostics/tests/properties/abstarctPropertyInPrimaryConstructor.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInProperties() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/properties"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constAnnotationCycle.kt")
      public void testConstAnnotationCycle() {
        runTest("compiler/testData/diagnostics/tests/properties/constAnnotationCycle.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extensionPropertyMustHaveAccessorsOrBeAbstract.kt")
      public void testExtensionPropertyMustHaveAccessorsOrBeAbstract() {
        runTest("compiler/testData/diagnostics/tests/properties/extensionPropertyMustHaveAccessorsOrBeAbstract.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("flexibleTypeReceiver.kt")
      public void testFlexibleTypeReceiver() {
        runTest("compiler/testData/diagnostics/tests/properties/flexibleTypeReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inferPropertyTypeFromGetter.kt")
      public void testInferPropertyTypeFromGetter() {
        runTest("compiler/testData/diagnostics/tests/properties/inferPropertyTypeFromGetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt47621.kt")
      public void testKt47621() {
        runTest("compiler/testData/diagnostics/tests/properties/kt47621.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt56707.kt")
      public void testKt56707() {
        runTest("compiler/testData/diagnostics/tests/properties/kt56707.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lateinitOnTopLevel.kt")
      public void testLateinitOnTopLevel() {
        runTest("compiler/testData/diagnostics/tests/properties/lateinitOnTopLevel.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localPropertyExtensions.kt")
      public void testLocalPropertyExtensions() {
        runTest("compiler/testData/diagnostics/tests/properties/localPropertyExtensions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PrivateSetInSuperclass.kt")
      public void testPrivateSetInSuperclass() {
        runTest("compiler/testData/diagnostics/tests/properties/PrivateSetInSuperclass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedGetterWithPublicSetter.kt")
      public void testProtectedGetterWithPublicSetter() {
        runTest("compiler/testData/diagnostics/tests/properties/protectedGetterWithPublicSetter.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/properties/backingField")
      @TestDataPath("$PROJECT_ROOT")
      public class BackingField {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInBackingField() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/properties/backingField"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("trivialExplicitBackingFIeld.kt")
        public void testTrivialExplicitBackingFIeld() {
          runTest("compiler/testData/diagnostics/tests/properties/backingField/trivialExplicitBackingFIeld.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/properties/inferenceFromGetters")
      @TestDataPath("$PROJECT_ROOT")
      public class InferenceFromGetters {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInferenceFromGetters() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/properties/inferenceFromGetters"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("blockBodyGetter.kt")
        public void testBlockBodyGetter() {
          runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/blockBodyGetter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("cantBeInferred.kt")
        public void testCantBeInferred() {
          runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/cantBeInferred.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("explicitGetterType.kt")
        public void testExplicitGetterType() {
          runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/explicitGetterType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("members.kt")
        public void testMembers() {
          runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/members.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nullAsNothing.kt")
        public void testNullAsNothing() {
          runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/nullAsNothing.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("objectExpression.kt")
        public void testObjectExpression() {
          runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/objectExpression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overrides.kt")
        public void testOverrides() {
          runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/overrides.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("primaryConstructorParameter.kt")
        public void testPrimaryConstructorParameter() {
          runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/primaryConstructorParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveGetter.kt")
        public void testRecursiveGetter() {
          runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/recursiveGetter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("topLevel.kt")
        public void testTopLevel() {
          runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/topLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("vars.kt")
        public void testVars() {
          runTest("compiler/testData/diagnostics/tests/properties/inferenceFromGetters/vars.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/qualifiedExpression")
    @TestDataPath("$PROJECT_ROOT")
    public class QualifiedExpression {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInQualifiedExpression() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/qualifiedExpression"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("calleeExpressionAsCallExpression.kt")
      public void testCalleeExpressionAsCallExpression() {
        runTest("compiler/testData/diagnostics/tests/qualifiedExpression/calleeExpressionAsCallExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("GenericClassVsPackage.kt")
      public void testGenericClassVsPackage() {
        runTest("compiler/testData/diagnostics/tests/qualifiedExpression/GenericClassVsPackage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("JavaQualifier.kt")
      public void testJavaQualifier() {
        runTest("compiler/testData/diagnostics/tests/qualifiedExpression/JavaQualifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullCalleeExpression.kt")
      public void testNullCalleeExpression() {
        runTest("compiler/testData/diagnostics/tests/qualifiedExpression/nullCalleeExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PackageVsClass.kt")
      public void testPackageVsClass() {
        runTest("compiler/testData/diagnostics/tests/qualifiedExpression/PackageVsClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PackageVsClass2.kt")
      public void testPackageVsClass2() {
        runTest("compiler/testData/diagnostics/tests/qualifiedExpression/PackageVsClass2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PackageVsRootClass.kt")
      public void testPackageVsRootClass() {
        runTest("compiler/testData/diagnostics/tests/qualifiedExpression/PackageVsRootClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TypeWithError.kt")
      public void testTypeWithError() {
        runTest("compiler/testData/diagnostics/tests/qualifiedExpression/TypeWithError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("variableVsImportedClassifier.kt")
      public void testVariableVsImportedClassifier() {
        runTest("compiler/testData/diagnostics/tests/qualifiedExpression/variableVsImportedClassifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("visibleClassVsQualifiedClass.kt")
      public void testVisibleClassVsQualifiedClass() {
        runTest("compiler/testData/diagnostics/tests/qualifiedExpression/visibleClassVsQualifiedClass.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/rawTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class RawTypes {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInRawTypes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/rawTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt57620.kt")
      public void testKt57620() {
        runTest("compiler/testData/diagnostics/tests/rawTypes/kt57620.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("rawTypeOverrides.kt")
      public void testRawTypeOverrides() {
        runTest("compiler/testData/diagnostics/tests/rawTypes/rawTypeOverrides.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/reassignment")
    @TestDataPath("$PROJECT_ROOT")
    public class Reassignment {
      @RepeatedTest(value = 5)
      @TestMetadata("afterfor.kt")
      public void testAfterfor() {
        runTest("compiler/testData/diagnostics/tests/reassignment/afterfor.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInReassignment() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/reassignment"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dowhile.kt")
      public void testDowhile() {
        runTest("compiler/testData/diagnostics/tests/reassignment/dowhile.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("else.kt")
      public void testElse() {
        runTest("compiler/testData/diagnostics/tests/reassignment/else.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("foronly.kt")
      public void testForonly() {
        runTest("compiler/testData/diagnostics/tests/reassignment/foronly.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("if.kt")
      public void testIf() {
        runTest("compiler/testData/diagnostics/tests/reassignment/if.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifelse.kt")
      public void testIfelse() {
        runTest("compiler/testData/diagnostics/tests/reassignment/ifelse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noifelse.kt")
      public void testNoifelse() {
        runTest("compiler/testData/diagnostics/tests/reassignment/noifelse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("when.kt")
      public void testWhen() {
        runTest("compiler/testData/diagnostics/tests/reassignment/when.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whiletrue.kt")
      public void testWhiletrue() {
        runTest("compiler/testData/diagnostics/tests/reassignment/whiletrue.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/recovery")
    @TestDataPath("$PROJECT_ROOT")
    public class Recovery {
      @RepeatedTest(value = 5)
      @TestMetadata("absentLeftHandSide.kt")
      public void testAbsentLeftHandSide() {
        runTest("compiler/testData/diagnostics/tests/recovery/absentLeftHandSide.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInRecovery() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/recovery"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("emptyTypeArgs.kt")
      public void testEmptyTypeArgs() {
        runTest("compiler/testData/diagnostics/tests/recovery/emptyTypeArgs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("namelessInJava.kt")
      public void testNamelessInJava() {
        runTest("compiler/testData/diagnostics/tests/recovery/namelessInJava.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("namelessMembers.kt")
      public void testNamelessMembers() {
        runTest("compiler/testData/diagnostics/tests/recovery/namelessMembers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("namelessToplevelDeclarations.kt")
      public void testNamelessToplevelDeclarations() {
        runTest("compiler/testData/diagnostics/tests/recovery/namelessToplevelDeclarations.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/redeclarations")
    @TestDataPath("$PROJECT_ROOT")
    public class Redeclarations {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInRedeclarations() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/redeclarations"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ClassRedeclarationInDifferentFiles.kt")
      public void testClassRedeclarationInDifferentFiles() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/ClassRedeclarationInDifferentFiles.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ConflictingExtensionProperties.kt")
      public void testConflictingExtensionProperties() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/ConflictingExtensionProperties.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DuplicateParameterNamesInFunctionType.kt")
      public void testDuplicateParameterNamesInFunctionType() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/DuplicateParameterNamesInFunctionType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("EnumName.kt")
      public void testEnumName() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/EnumName.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FunVsCtorInDifferentFiles.kt")
      public void testFunVsCtorInDifferentFiles() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/FunVsCtorInDifferentFiles.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("interfaceTypeParameters.kt")
      public void testInterfaceTypeParameters() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/interfaceTypeParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2418.kt")
      public void testKt2418() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/kt2418.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2438.kt")
      public void testKt2438() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/kt2438.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt470.kt")
      public void testKt470() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/kt470.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MultiFilePackageRedeclaration.kt")
      public void testMultiFilePackageRedeclaration() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/MultiFilePackageRedeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoRedeclarationForClassesInDefaultObject.kt")
      public void testNoRedeclarationForClassesInDefaultObject() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/NoRedeclarationForClassesInDefaultObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoRedeclarationForEnumEntriesAndDefaultObjectMembers.kt")
      public void testNoRedeclarationForEnumEntriesAndDefaultObjectMembers() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/NoRedeclarationForEnumEntriesAndDefaultObjectMembers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PropertyAndFunInClass.kt")
      public void testPropertyAndFunInClass() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/PropertyAndFunInClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PropertyAndInnerClass.kt")
      public void testPropertyAndInnerClass() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/PropertyAndInnerClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedeclarationInDefaultObject.kt")
      public void testRedeclarationInDefaultObject() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclarationInDefaultObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedeclarationInMultiFile.kt")
      public void testRedeclarationInMultiFile() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclarationInMultiFile.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedeclarationMainInFile.kt")
      public void testRedeclarationMainInFile() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclarationMainInFile.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedeclarationOfMain.kt")
      public void testRedeclarationOfMain() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclarationOfMain.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedeclarationOfMain_before.kt")
      public void testRedeclarationOfMain_before() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclarationOfMain_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Redeclarations.kt")
      public void testRedeclarations() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/Redeclarations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedeclarationsInObjects.kt")
      public void testRedeclarationsInObjects() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclarationsInObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedeclaredTypeParameters.kt")
      public void testRedeclaredTypeParameters() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclaredTypeParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedeclaredValsAndVars.kt")
      public void testRedeclaredValsAndVars() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclaredValsAndVars.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedeclaredValueParameters.kt")
      public void testRedeclaredValueParameters() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclaredValueParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedeclaringPrivateToFile.kt")
      public void testRedeclaringPrivateToFile() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/RedeclaringPrivateToFile.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ScriptAndClassConflict.kts")
      public void testScriptAndClassConflict() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/ScriptAndClassConflict.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SingletonAndFunctionSameName.kt")
      public void testSingletonAndFunctionSameName() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/SingletonAndFunctionSameName.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TopLevelPropertyVsClassifier.kt")
      public void testTopLevelPropertyVsClassifier() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/TopLevelPropertyVsClassifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TypeAliasCtorVsFun.kt")
      public void testTypeAliasCtorVsFun() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/TypeAliasCtorVsFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TypeAliasVsClass.kt")
      public void testTypeAliasVsClass() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/TypeAliasVsClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TypeAliasVsProperty.kt")
      public void testTypeAliasVsProperty() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/TypeAliasVsProperty.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension")
      @TestDataPath("$PROJECT_ROOT")
      public class ShadowedExtension {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInShadowedExtension() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionFunShadowedByInnerClassConstructor.kt")
        public void testExtensionFunShadowedByInnerClassConstructor() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunShadowedByInnerClassConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionFunShadowedByMemberFun.kt")
        public void testExtensionFunShadowedByMemberFun() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunShadowedByMemberFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionFunShadowedByMemberPropertyWithInvoke.kt")
        public void testExtensionFunShadowedByMemberPropertyWithInvoke() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunShadowedByMemberPropertyWithInvoke.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionFunShadowedBySynthesizedMemberFun.kt")
        public void testExtensionFunShadowedBySynthesizedMemberFun() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunShadowedBySynthesizedMemberFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionFunVsMemberExtensionFun.kt")
        public void testExtensionFunVsMemberExtensionFun() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunVsMemberExtensionFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionOnErrorType.kt")
        public void testExtensionOnErrorType() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionOnErrorType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionOnNullableReceiver.kt")
        public void testExtensionOnNullableReceiver() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionOnNullableReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionPropertyShadowedByMemberProperty.kt")
        public void testExtensionPropertyShadowedByMemberProperty() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionPropertyShadowedByMemberProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionShadowedByDelegatedMember.kt")
        public void testExtensionShadowedByDelegatedMember() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionShadowedByDelegatedMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionVsNonPublicMember.kt")
        public void testExtensionVsNonPublicMember() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionVsNonPublicMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("infixExtensionVsNonInfixMember.kt")
        public void testInfixExtensionVsNonInfixMember() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/infixExtensionVsNonInfixMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localExtensionShadowedByMember.kt")
        public void testLocalExtensionShadowedByMember() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/localExtensionShadowedByMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("memberExtensionShadowedByMember.kt")
        public void testMemberExtensionShadowedByMember() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/memberExtensionShadowedByMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("operatorExtensionVsNonOperatorMember.kt")
        public void testOperatorExtensionVsNonOperatorMember() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/operatorExtensionVsNonOperatorMember.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/regressions")
    @TestDataPath("$PROJECT_ROOT")
    public class Regressions {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInRegressions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/regressions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AmbiguityOnLazyTypeComputation.kt")
      public void testAmbiguityOnLazyTypeComputation() {
        runTest("compiler/testData/diagnostics/tests/regressions/AmbiguityOnLazyTypeComputation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AssignmentsUnderOperators.kt")
      public void testAssignmentsUnderOperators() {
        runTest("compiler/testData/diagnostics/tests/regressions/AssignmentsUnderOperators.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CoercionToUnit.kt")
      public void testCoercionToUnit() {
        runTest("compiler/testData/diagnostics/tests/regressions/CoercionToUnit.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("correctResultSubstitutorForErrorCandidate.kt")
      public void testCorrectResultSubstitutorForErrorCandidate() {
        runTest("compiler/testData/diagnostics/tests/regressions/correctResultSubstitutorForErrorCandidate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegationWithReceiver.kt")
      public void testDelegationWithReceiver() {
        runTest("compiler/testData/diagnostics/tests/regressions/delegationWithReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DoubleDefine.kt")
      public void testDoubleDefine() {
        runTest("compiler/testData/diagnostics/tests/regressions/DoubleDefine.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea40964.kt")
      public void testEa40964() {
        runTest("compiler/testData/diagnostics/tests/regressions/ea40964.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea43298.kt")
      public void testEa43298() {
        runTest("compiler/testData/diagnostics/tests/regressions/ea43298.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea53340.kt")
      public void testEa53340() {
        runTest("compiler/testData/diagnostics/tests/regressions/ea53340.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea65509.kt")
      public void testEa65509() {
        runTest("compiler/testData/diagnostics/tests/regressions/ea65509.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea66984.kt")
      public void testEa66984() {
        runTest("compiler/testData/diagnostics/tests/regressions/ea66984.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea69735.kt")
      public void testEa69735() {
        runTest("compiler/testData/diagnostics/tests/regressions/ea69735.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea72837.kt")
      public void testEa72837() {
        runTest("compiler/testData/diagnostics/tests/regressions/ea72837.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea76264.kt")
      public void testEa76264() {
        runTest("compiler/testData/diagnostics/tests/regressions/ea76264.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ErrorsOnIbjectExpressionsAsParameters.kt")
      public void testErrorsOnIbjectExpressionsAsParameters() {
        runTest("compiler/testData/diagnostics/tests/regressions/ErrorsOnIbjectExpressionsAsParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intchar.kt")
      public void testIntchar() {
        runTest("compiler/testData/diagnostics/tests/regressions/intchar.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("itselfAsUpperBound.kt")
      public void testItselfAsUpperBound() {
        runTest("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("itselfAsUpperBoundInClass.kt")
      public void testItselfAsUpperBoundInClass() {
        runTest("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundInClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("itselfAsUpperBoundInClassNotNull.kt")
      public void testItselfAsUpperBoundInClassNotNull() {
        runTest("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundInClassNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("itselfAsUpperBoundLocal.kt")
      public void testItselfAsUpperBoundLocal() {
        runTest("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundLocal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("itselfAsUpperBoundMember.kt")
      public void testItselfAsUpperBoundMember() {
        runTest("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("itselfAsUpperBoundNotNull.kt")
      public void testItselfAsUpperBoundNotNull() {
        runTest("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Jet11.kt")
      public void testJet11() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet11.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Jet121.kt")
      public void testJet121() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet121.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Jet124.kt")
      public void testJet124() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet124.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Jet169.kt")
      public void testJet169() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet169.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Jet17.kt")
      public void testJet17() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet17.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Jet183.kt")
      public void testJet183() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet183.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Jet183-1.kt")
      public void testJet183_1() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet183-1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Jet53.kt")
      public void testJet53() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet53.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Jet67.kt")
      public void testJet67() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet67.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Jet68.kt")
      public void testJet68() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet68.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Jet69.kt")
      public void testJet69() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet69.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Jet72.kt")
      public void testJet72() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet72.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Jet81.kt")
      public void testJet81() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet81.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10243.kt")
      public void testKt10243() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt10243.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10243a.kt")
      public void testKt10243a() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt10243a.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10633.kt")
      public void testKt10633() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt10633.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10824.kt")
      public void testKt10824() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt10824.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10843.kt")
      public void testKt10843() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt10843.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt11979.kt")
      public void testKt11979() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt11979.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt127.kt")
      public void testKt127() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt127.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt128.kt")
      public void testKt128() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt128.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt12898.kt")
      public void testKt12898() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt12898.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt13685.kt")
      public void testKt13685() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt13685.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt13954.kt")
      public void testKt13954() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt13954.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt14740.kt")
      public void testKt14740() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt14740.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1489_1728.kt")
      public void testKt1489_1728() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt1489_1728.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1550.kt")
      public void testKt1550() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt1550.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt16086.kt")
      public void testKt16086() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt16086.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt16086_2.kt")
      public void testKt16086_2() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt16086_2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1639-JFrame.kt")
      public void testKt1639_JFrame() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt1639-JFrame.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1647.kt")
      public void testKt1647() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt1647.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1736.kt")
      public void testKt1736() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt1736.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt174.kt")
      public void testKt174() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt174.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt201.kt")
      public void testKt201() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt201.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt235.kt")
      public void testKt235() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt235.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2376.kt")
      public void testKt2376() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt2376.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt24488.kt")
      public void testKt24488() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt24488.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt251.kt")
      public void testKt251() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt251.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt258.kt")
      public void testKt258() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt258.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt26.kt")
      public void testKt26() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt26.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt26303.kt")
      public void testKt26303() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt26303.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt26-1.kt")
      public void testKt26_1() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt26-1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2768.kt")
      public void testKt2768() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt2768.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt28001.kt")
      public void testKt28001() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt28001.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt282.kt")
      public void testKt282() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt282.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt287.kt")
      public void testKt287() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt287.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2956.kt")
      public void testKt2956() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt2956.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt302.kt")
      public void testKt302() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt302.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt30245.kt")
      public void testKt30245() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt30245.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt306.kt")
      public void testKt306() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt306.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt307.kt")
      public void testKt307() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt307.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt312.kt")
      public void testKt312() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt312.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt313.kt")
      public void testKt313() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt313.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt316.kt")
      public void testKt316() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt316.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt31975.kt")
      public void testKt31975() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt31975.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32205.kt")
      public void testKt32205() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt32205.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32507.kt")
      public void testKt32507() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt32507.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32792.kt")
      public void testKt32792() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt32792.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt328.kt")
      public void testKt328() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt328.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32836.kt")
      public void testKt32836() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt32836.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt334.kt")
      public void testKt334() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt334.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt335.336.kt")
      public void testKt335_336() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt335.336.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt337.kt")
      public void testKt337() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt337.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt352.kt")
      public void testKt352() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt352.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt353.kt")
      public void testKt353() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt353.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3535.kt")
      public void testKt3535() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt3535.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt35626.kt")
      public void testKt35626() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt35626.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt35626small.kt")
      public void testKt35626small() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt35626small.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt35668.kt")
      public void testKt35668() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt35668.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt36222.kt")
      public void testKt36222() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt36222.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3647.kt")
      public void testKt3647() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt3647.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3731.kt")
      public void testKt3731() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt3731.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3810.kt")
      public void testKt3810() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt3810.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt385.109.441.kt")
      public void testKt385_109_441() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt385.109.441.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt394.kt")
      public void testKt394() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt394.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt398.kt")
      public void testKt398() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt398.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt399.kt")
      public void testKt399() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt399.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt402.kt")
      public void testKt402() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt402.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt41.kt")
      public void testKt41() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt41.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt411.kt")
      public void testKt411() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt411.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt439.kt")
      public void testKt439() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt439.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt442.kt")
      public void testKt442() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt442.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt443.kt")
      public void testKt443() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt443.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt455.kt")
      public void testKt455() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt455.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt456.kt")
      public void testKt456() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt456.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt459.kt")
      public void testKt459() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt459.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt469.kt")
      public void testKt469() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt469.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4693.kt")
      public void testKt4693() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt4693.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4827.kt")
      public void testKt4827() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt4827.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt498.kt")
      public void testKt498() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt498.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt524.kt")
      public void testKt524() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt524.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt526UnresolvedReferenceInnerStatic.kt")
      public void testKt526UnresolvedReferenceInnerStatic() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt526UnresolvedReferenceInnerStatic.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt5326.kt")
      public void testKt5326() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt5326.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt5362.kt")
      public void testKt5362() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt5362.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt549.kt")
      public void testKt549() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt549.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt557.kt")
      public void testKt557() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt557.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt55956.kt")
      public void testKt55956() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt55956.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt571.kt")
      public void testKt571() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt571.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt575.kt")
      public void testKt575() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt575.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt57845.kt")
      public void testKt57845() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt57845.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt58.kt")
      public void testKt58() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt58.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt580.kt")
      public void testKt580() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt580.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt588.kt")
      public void testKt588() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt588.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt597.kt")
      public void testKt597() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt597.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt600.kt")
      public void testKt600() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt600.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt604.kt")
      public void testKt604() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt604.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt618.kt")
      public void testKt618() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt618.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt629.kt")
      public void testKt629() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt629.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt630.kt")
      public void testKt630() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt630.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt6508.kt")
      public void testKt6508() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt6508.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt688.kt")
      public void testKt688() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt688.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt691.kt")
      public void testKt691() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt691.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt701.kt")
      public void testKt701() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt701.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt716.kt")
      public void testKt716() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt716.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt743.kt")
      public void testKt743() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt743.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt750.kt")
      public void testKt750() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt750.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt762.kt")
      public void testKt762() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt762.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt7804.kt")
      public void testKt7804() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt7804.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt847.kt")
      public void testKt847() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt847.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt860.kt")
      public void testKt860() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt860.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt9384.kt")
      public void testKt9384() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt9384.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt9620.kt")
      public void testKt9620() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt9620.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt9633.kt")
      public void testKt9633() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt9633.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt9682.kt")
      public void testKt9682() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt9682.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt9808.kt")
      public void testKt9808() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt9808.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("LocalClassReferenceChain.kt")
      public void testLocalClassReferenceChain() {
        runTest("compiler/testData/diagnostics/tests/regressions/LocalClassReferenceChain.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noThis.kt")
      public void testNoThis() {
        runTest("compiler/testData/diagnostics/tests/regressions/noThis.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OrphanStarProjection.kt")
      public void testOrphanStarProjection() {
        runTest("compiler/testData/diagnostics/tests/regressions/OrphanStarProjection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OutProjections.kt")
      public void testOutProjections() {
        runTest("compiler/testData/diagnostics/tests/regressions/OutProjections.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OverrideResolution.kt")
      public void testOverrideResolution() {
        runTest("compiler/testData/diagnostics/tests/regressions/OverrideResolution.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyWithExtensionTypeInvoke.kt")
      public void testPropertyWithExtensionTypeInvoke() {
        runTest("compiler/testData/diagnostics/tests/regressions/propertyWithExtensionTypeInvoke.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveCollectionLiteralInsideLambda.kt")
      public void testResolveCollectionLiteralInsideLambda() {
        runTest("compiler/testData/diagnostics/tests/regressions/resolveCollectionLiteralInsideLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveSubclassOfList.kt")
      public void testResolveSubclassOfList() {
        runTest("compiler/testData/diagnostics/tests/regressions/resolveSubclassOfList.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SpecififcityByReceiver.kt")
      public void testSpecififcityByReceiver() {
        runTest("compiler/testData/diagnostics/tests/regressions/SpecififcityByReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("testNestedSpecialCalls.kt")
      public void testTestNestedSpecialCalls() {
        runTest("compiler/testData/diagnostics/tests/regressions/testNestedSpecialCalls.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TypeMismatchOnUnaryOperations.kt")
      public void testTypeMismatchOnUnaryOperations() {
        runTest("compiler/testData/diagnostics/tests/regressions/TypeMismatchOnUnaryOperations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TypeParameterAsASupertype.kt")
      public void testTypeParameterAsASupertype() {
        runTest("compiler/testData/diagnostics/tests/regressions/TypeParameterAsASupertype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("UnavaliableQualifiedThis.kt")
      public void testUnavaliableQualifiedThis() {
        runTest("compiler/testData/diagnostics/tests/regressions/UnavaliableQualifiedThis.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WrongTraceInCallResolver.kt")
      public void testWrongTraceInCallResolver() {
        runTest("compiler/testData/diagnostics/tests/regressions/WrongTraceInCallResolver.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/regressions/kt7585")
      @TestDataPath("$PROJECT_ROOT")
      public class Kt7585 {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInKt7585() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/regressions/kt7585"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("base.kt")
        public void testBase() {
          runTest("compiler/testData/diagnostics/tests/regressions/kt7585/base.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("java.kt")
        public void testJava() {
          runTest("compiler/testData/diagnostics/tests/regressions/kt7585/java.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("twoparents.kt")
        public void testTwoparents() {
          runTest("compiler/testData/diagnostics/tests/regressions/kt7585/twoparents.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/resolve")
    @TestDataPath("$PROJECT_ROOT")
    public class Resolve {
      @RepeatedTest(value = 5)
      @TestMetadata("accessOnComplexProjectedReceiver.kt")
      public void testAccessOnComplexProjectedReceiver() {
        runTest("compiler/testData/diagnostics/tests/resolve/accessOnComplexProjectedReceiver.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInResolve() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ambiguityOnPropertiesWithTheSamePackageName.kt")
      public void testAmbiguityOnPropertiesWithTheSamePackageName() {
        runTest("compiler/testData/diagnostics/tests/resolve/ambiguityOnPropertiesWithTheSamePackageName.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ambiguityWithTwoCorrespondingFunctionTypes.kt")
      public void testAmbiguityWithTwoCorrespondingFunctionTypes() {
        runTest("compiler/testData/diagnostics/tests/resolve/ambiguityWithTwoCorrespondingFunctionTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("anonymousObjectFromTopLevelMember.kt")
      public void testAnonymousObjectFromTopLevelMember() {
        runTest("compiler/testData/diagnostics/tests/resolve/anonymousObjectFromTopLevelMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callToProtectedOnSmartcast.kt")
      public void testCallToProtectedOnSmartcast() {
        runTest("compiler/testData/diagnostics/tests/resolve/callToProtectedOnSmartcast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callableReferenceInCST.kt")
      public void testCallableReferenceInCST() {
        runTest("compiler/testData/diagnostics/tests/resolve/callableReferenceInCST.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("capturedTypesInLambdaParameter.kt")
      public void testCapturedTypesInLambdaParameter() {
        runTest("compiler/testData/diagnostics/tests/resolve/capturedTypesInLambdaParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("complexOrderAndImplicitTypes.kt")
      public void testComplexOrderAndImplicitTypes() {
        runTest("compiler/testData/diagnostics/tests/resolve/complexOrderAndImplicitTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constructorVsCompanion.kt")
      public void testConstructorVsCompanion() {
        runTest("compiler/testData/diagnostics/tests/resolve/constructorVsCompanion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CycleInTypeArgs.kt")
      public void testCycleInTypeArgs() {
        runTest("compiler/testData/diagnostics/tests/resolve/CycleInTypeArgs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("errorPriority.kt")
      public void testErrorPriority() {
        runTest("compiler/testData/diagnostics/tests/resolve/errorPriority.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("HiddenDeclarations.kt")
      public void testHiddenDeclarations() {
        runTest("compiler/testData/diagnostics/tests/resolve/HiddenDeclarations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitReceiverProperty.kt")
      public void testImplicitReceiverProperty() {
        runTest("compiler/testData/diagnostics/tests/resolve/implicitReceiverProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incompleteConstructorInvocation.kt")
      public void testIncompleteConstructorInvocation() {
        runTest("compiler/testData/diagnostics/tests/resolve/incompleteConstructorInvocation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inferenceInLinkedLambdas.kt")
      public void testInferenceInLinkedLambdas() {
        runTest("compiler/testData/diagnostics/tests/resolve/inferenceInLinkedLambdas.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inferenceInLinkedLambdasDependentOnExpectedType.kt")
      public void testInferenceInLinkedLambdasDependentOnExpectedType() {
        runTest("compiler/testData/diagnostics/tests/resolve/inferenceInLinkedLambdasDependentOnExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt28109.kt")
      public void testKt28109() {
        runTest("compiler/testData/diagnostics/tests/resolve/kt28109.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt36264.kt")
      public void testKt36264() {
        runTest("compiler/testData/diagnostics/tests/resolve/kt36264.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt49736.kt")
      public void testKt49736() {
        runTest("compiler/testData/diagnostics/tests/resolve/kt49736.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localObject.kt")
      public void testLocalObject() {
        runTest("compiler/testData/diagnostics/tests/resolve/localObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedClassUnresolvedReference.kt")
      public void testNestedClassUnresolvedReference() {
        runTest("compiler/testData/diagnostics/tests/resolve/nestedClassUnresolvedReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("newLineLambda.kt")
      public void testNewLineLambda() {
        runTest("compiler/testData/diagnostics/tests/resolve/newLineLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noStopOnReceiverUnstableSmartCast.kt")
      public void testNoStopOnReceiverUnstableSmartCast() {
        runTest("compiler/testData/diagnostics/tests/resolve/noStopOnReceiverUnstableSmartCast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("objectLiteralAsArgument.kt")
      public void testObjectLiteralAsArgument() {
        runTest("compiler/testData/diagnostics/tests/resolve/objectLiteralAsArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("operatorAndInfixResolve.kt")
      public void testOperatorAndInfixResolve() {
        runTest("compiler/testData/diagnostics/tests/resolve/operatorAndInfixResolve.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("parameterAsDefaultValueInLocalFunction.kt")
      public void testParameterAsDefaultValueInLocalFunction() {
        runTest("compiler/testData/diagnostics/tests/resolve/parameterAsDefaultValueInLocalFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyInCompanionOfEnum.kt")
      public void testPropertyInCompanionOfEnum() {
        runTest("compiler/testData/diagnostics/tests/resolve/propertyInCompanionOfEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveAnnotatedLambdaArgument.kt")
      public void testResolveAnnotatedLambdaArgument() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveAnnotatedLambdaArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveToStarImportMemberInsteadOfBuiltin.kt")
      public void testResolveToStarImportMemberInsteadOfBuiltin() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveToStarImportMemberInsteadOfBuiltin.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveTypeArgsForUnresolvedCall.kt")
      public void testResolveTypeArgsForUnresolvedCall() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveTypeArgsForUnresolvedCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveWithFunctionLiteralWithId.kt")
      public void testResolveWithFunctionLiteralWithId() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiteralWithId.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveWithFunctionLiterals.kt")
      public void testResolveWithFunctionLiterals() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiterals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveWithFunctionLiteralsOverload.kt")
      public void testResolveWithFunctionLiteralsOverload() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiteralsOverload.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveWithGenerics.kt")
      public void testResolveWithGenerics() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveWithGenerics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveWithRedeclarationError.kt")
      public void testResolveWithRedeclarationError() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveWithRedeclarationError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveWithSpecifiedFunctionLiteralWithId.kt")
      public void testResolveWithSpecifiedFunctionLiteralWithId() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveWithSpecifiedFunctionLiteralWithId.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveWithoutGenerics.kt")
      public void testResolveWithoutGenerics() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveWithoutGenerics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartcastToMoreSpecificProperty.kt")
      public void testSmartcastToMoreSpecificProperty() {
        runTest("compiler/testData/diagnostics/tests/resolve/smartcastToMoreSpecificProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superInvoke.kt")
      public void testSuperInvoke() {
        runTest("compiler/testData/diagnostics/tests/resolve/superInvoke.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParameterInDefaultValueInLocalFunction.kt")
      public void testTypeParameterInDefaultValueInLocalFunction() {
        runTest("compiler/testData/diagnostics/tests/resolve/typeParameterInDefaultValueInLocalFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("underscoreInCatchBlock.kt")
      public void testUnderscoreInCatchBlock() {
        runTest("compiler/testData/diagnostics/tests/resolve/underscoreInCatchBlock.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("underscoreInCatchBlockWithEnabledFeature.kt")
      public void testUnderscoreInCatchBlockWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/tests/resolve/underscoreInCatchBlockWithEnabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varInsideLambdaThatPassedToExtensionFunctionWithTypeParametersThatDefinedInsideThisLambda.kt")
      public void testVarInsideLambdaThatPassedToExtensionFunctionWithTypeParametersThatDefinedInsideThisLambda() {
        runTest("compiler/testData/diagnostics/tests/resolve/varInsideLambdaThatPassedToExtensionFunctionWithTypeParametersThatDefinedInsideThisLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongNumberOfTypeArguments.kt")
      public void testWrongNumberOfTypeArguments() {
        runTest("compiler/testData/diagnostics/tests/resolve/wrongNumberOfTypeArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongReceiver.kt")
      public void testWrongReceiver() {
        runTest("compiler/testData/diagnostics/tests/resolve/wrongReceiver.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/dslMarker")
      @TestDataPath("$PROJECT_ROOT")
      public class DslMarker {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDslMarker() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/dslMarker"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotatedFunctionType.kt")
        public void testAnnotatedFunctionType() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/annotatedFunctionType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotatedFunctionType_1_4.kt")
        public void testAnnotatedFunctionType_1_4() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/annotatedFunctionType_1_4.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotatedTypeArgument.kt")
        public void testAnnotatedTypeArgument() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/annotatedTypeArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dslMarkerOnTypealias.kt")
        public void testDslMarkerOnTypealias() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/dslMarkerOnTypealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dslMarkerWithTypealiasRecursion.kt")
        public void testDslMarkerWithTypealiasRecursion() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/dslMarkerWithTypealiasRecursion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inheritedMarker.kt")
        public void testInheritedMarker() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/inheritedMarker.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideTopLevelExtension.kt")
        public void testInsideTopLevelExtension() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/insideTopLevelExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideTopLevelExtensionAnnotatedType.kt")
        public void testInsideTopLevelExtensionAnnotatedType() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/insideTopLevelExtensionAnnotatedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt29948.kt")
        public void testKt29948() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/kt29948.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt31360.kt")
        public void testKt31360() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/kt31360.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt46969.kt")
        public void testKt46969() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/kt46969.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lowPriority.kt")
        public void testLowPriority() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/lowPriority.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("markedReceiverWithCapturedTypeArgument.kt")
        public void testMarkedReceiverWithCapturedTypeArgument() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/markedReceiverWithCapturedTypeArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("markersIntersection.kt")
        public void testMarkersIntersection() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/markersIntersection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedWithSameReceiver.kt")
        public void testNestedWithSameReceiver() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/nestedWithSameReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("properties.kt")
        public void testProperties() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/properties.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleAnnotatedClasses.kt")
        public void testSimpleAnnotatedClasses() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/simpleAnnotatedClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleAnnotatedTypes.kt")
        public void testSimpleAnnotatedTypes() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/simpleAnnotatedTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substitutedReceiverAnnotatedClasses.kt")
        public void testSubstitutedReceiverAnnotatedClasses() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/substitutedReceiverAnnotatedClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("substitutedReceiverAnnotatedType.kt")
        public void testSubstitutedReceiverAnnotatedType() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/substitutedReceiverAnnotatedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("threeImplicitReceivers.kt")
        public void testThreeImplicitReceivers() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/threeImplicitReceivers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("threeImplicitReceivers2.kt")
        public void testThreeImplicitReceivers2() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/threeImplicitReceivers2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("twoImplicitReceivers.kt")
        public void testTwoImplicitReceivers() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/twoImplicitReceivers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("twoLanguages.kt")
        public void testTwoLanguages() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/twoLanguages.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeAliasToBuiltinFunctionType.kt")
        public void testTypeAliasToBuiltinFunctionType() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/typeAliasToBuiltinFunctionType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useOfExtensions.kt")
        public void testUseOfExtensions() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/useOfExtensions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("usingWith.kt")
        public void testUsingWith() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/usingWith.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("usingWithThis.kt")
        public void testUsingWithThis() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/usingWithThis.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/invoke")
      @TestDataPath("$PROJECT_ROOT")
      public class Invoke {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInvoke() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/invoke"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("avoidTypeCheckerRecursion.kt")
        public void testAvoidTypeCheckerRecursion() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/avoidTypeCheckerRecursion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("closeInvokesFarVariable.kt")
        public void testCloseInvokesFarVariable() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/closeInvokesFarVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("closerVariableMatterMore.kt")
        public void testCloserVariableMatterMore() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/closerVariableMatterMore.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("completePropertyBeforeInvoke.kt")
        public void testCompletePropertyBeforeInvoke() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/completePropertyBeforeInvoke.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionValueAsNonExtension.kt")
        public void testExtensionValueAsNonExtension() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/extensionValueAsNonExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionExpectedWhenSeveralInvokesExist.kt")
        public void testFunctionExpectedWhenSeveralInvokesExist() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/functionExpectedWhenSeveralInvokesExist.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitAndInvokeExtensionPriority.kt")
        public void testImplicitAndInvokeExtensionPriority() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/implicitAndInvokeExtensionPriority.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitInvoke.kt")
        public void testImplicitInvoke() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/implicitInvoke.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitInvokeAfterSafeCall.kt")
        public void testImplicitInvokeAfterSafeCall() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/implicitInvokeAfterSafeCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitPropertyType.kt")
        public void testImplicitPropertyType() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/implicitPropertyType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeAndSmartCast.kt")
        public void testInvokeAndSmartCast() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAndSmartCast.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeAsExtension.kt")
        public void testInvokeAsExtension() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeAsMember.kt")
        public void testInvokeAsMember() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeAsMemberExtension.kt")
        public void testInvokeAsMemberExtension() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMemberExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeAsMemberExtensionToExplicitReceiver.kt")
        public void testInvokeAsMemberExtensionToExplicitReceiver() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMemberExtensionToExplicitReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeCommonSystem.kt")
        public void testInvokeCommonSystem() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeCommonSystem.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeCommonSystem2.kt")
        public void testInvokeCommonSystem2() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeCommonSystem2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeNonExtensionLambdaInContext.kt")
        public void testInvokeNonExtensionLambdaInContext() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeNonExtensionLambdaInContext.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeOnVariableWithExtensionFunctionType.kt")
        public void testInvokeOnVariableWithExtensionFunctionType() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeOnVariableWithExtensionFunctionType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("KT-4372.kt")
        public void testKT_4372() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/KT-4372.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt30695.kt")
        public void testKt30695() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt30695.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt30695_2.kt")
        public void testKt30695_2() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt30695_2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3772.kt")
        public void testKt3772() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt3772.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3833-invokeInsideNestedClass.kt")
        public void testKt3833_invokeInsideNestedClass() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt3833-invokeInsideNestedClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt4204-completeNestedCallsForInvoke.kt")
        public void testKt4204_completeNestedCallsForInvoke() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt4204-completeNestedCallsForInvoke.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt4321InvokeOnEnum.kt")
        public void testKt4321InvokeOnEnum() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt4321InvokeOnEnum.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt51793.kt")
        public void testKt51793() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt51793.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt51793Complex.kt")
        public void testKt51793Complex() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt51793Complex.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt9517.kt")
        public void testKt9517() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt9517.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt9805.kt")
        public void testKt9805() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt9805.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("privateInvokeOwner.kt")
        public void testPrivateInvokeOwner() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/privateInvokeOwner.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reportFunctionExpectedOnSimpleUnresolved.kt")
        public void testReportFunctionExpectedOnSimpleUnresolved() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/reportFunctionExpectedOnSimpleUnresolved.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reportFunctionExpectedWhenOneInvokeExist.kt")
        public void testReportFunctionExpectedWhenOneInvokeExist() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/reportFunctionExpectedWhenOneInvokeExist.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valNamedInvoke.kt")
        public void testValNamedInvoke() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/valNamedInvoke.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("wrongInvokeExtension.kt")
        public void testWrongInvokeExtension() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/wrongInvokeExtension.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/resolve/invoke/errors")
        @TestDataPath("$PROJECT_ROOT")
        public class Errors {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInErrors() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/invoke/errors"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("ambiguityForInvoke.kt")
          public void testAmbiguityForInvoke() {
            runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/ambiguityForInvoke.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("invisibleInvoke.kt")
          public void testInvisibleInvoke() {
            runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/invisibleInvoke.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("receiverPresenceErrorForInvoke.kt")
          public void testReceiverPresenceErrorForInvoke() {
            runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/receiverPresenceErrorForInvoke.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("typeInferenceErrorForInvoke.kt")
          public void testTypeInferenceErrorForInvoke() {
            runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/typeInferenceErrorForInvoke.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("unresolvedInvoke.kt")
          public void testUnresolvedInvoke() {
            runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/unresolvedInvoke.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("unsafeCallWithInvoke.kt")
          public void testUnsafeCallWithInvoke() {
            runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/unsafeCallWithInvoke.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("wrongReceiverForInvokeOnExpression.kt")
          public void testWrongReceiverForInvokeOnExpression() {
            runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/wrongReceiverForInvokeOnExpression.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("wrongReceiverTypeForInvoke.kt")
          public void testWrongReceiverTypeForInvoke() {
            runTest("compiler/testData/diagnostics/tests/resolve/invoke/errors/wrongReceiverTypeForInvoke.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls")
      @TestDataPath("$PROJECT_ROOT")
      public class NestedCalls {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNestedCalls() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/nestedCalls"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("analyzeArgsInFreeExpressionPosition.kt")
        public void testAnalyzeArgsInFreeExpressionPosition() {
          runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/analyzeArgsInFreeExpressionPosition.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("analyzeUnmappedArguments.kt")
        public void testAnalyzeUnmappedArguments() {
          runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/analyzeUnmappedArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("argumentsInParentheses.kt")
        public void testArgumentsInParentheses() {
          runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/argumentsInParentheses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("completeTypeInferenceForNestedInNoneApplicable.kt")
        public void testCompleteTypeInferenceForNestedInNoneApplicable() {
          runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/completeTypeInferenceForNestedInNoneApplicable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("completeUnmappedArguments.kt")
        public void testCompleteUnmappedArguments() {
          runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/completeUnmappedArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt5971NestedSafeCall.kt")
        public void testKt5971NestedSafeCall() {
          runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/kt5971NestedSafeCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt7597.kt")
        public void testKt7597() {
          runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/kt7597.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("manyInapplicableCandidatesWithLambdas.kt")
        public void testManyInapplicableCandidatesWithLambdas() {
          runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/manyInapplicableCandidatesWithLambdas.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("twoTypeParameters.kt")
        public void testTwoTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/twoTypeParameters.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/noCandidates")
      @TestDataPath("$PROJECT_ROOT")
      public class NoCandidates {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNoCandidates() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/noCandidates"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2787.kt")
        public void testKt2787() {
          runTest("compiler/testData/diagnostics/tests/resolve/noCandidates/kt2787.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("resolvedToClassifier.kt")
        public void testResolvedToClassifier() {
          runTest("compiler/testData/diagnostics/tests/resolve/noCandidates/resolvedToClassifier.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("resolvedToClassifierWithReceiver.kt")
        public void testResolvedToClassifierWithReceiver() {
          runTest("compiler/testData/diagnostics/tests/resolve/noCandidates/resolvedToClassifierWithReceiver.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/overloadConflicts")
      @TestDataPath("$PROJECT_ROOT")
      public class OverloadConflicts {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInOverloadConflicts() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/overloadConflicts"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("allLambdas.kt")
        public void testAllLambdas() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/allLambdas.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("equivalentCallsDifferentVisibility.kt")
        public void testEquivalentCallsDifferentVisibility() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/equivalentCallsDifferentVisibility.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionReceiverAndVarargs.kt")
        public void testExtensionReceiverAndVarargs() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/extensionReceiverAndVarargs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("filteringOutOverrides.kt")
        public void testFilteringOutOverrides() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/filteringOutOverrides.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericClash.kt")
        public void testGenericClash() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/genericClash.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("genericWithProjection.kt")
        public void testGenericWithProjection() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/genericWithProjection.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt10472.kt")
        public void testKt10472() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt10472.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt10640.kt")
        public void testKt10640() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt10640.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt31670.kt")
        public void testKt31670() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt31670.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt31758.kt")
        public void testKt31758() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt31758.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt37692.kt")
        public void testKt37692() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt37692.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt55722.kt")
        public void testKt55722() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt55722.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt55722Initial.kt")
        public void testKt55722Initial() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt55722Initial.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("numberOfDefaults.kt")
        public void testNumberOfDefaults() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/numberOfDefaults.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("originalExamples.kt")
        public void testOriginalExamples() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/originalExamples.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloadResolutionOnNullableContravariantParameter.kt")
        public void testOverloadResolutionOnNullableContravariantParameter() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/overloadResolutionOnNullableContravariantParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varargWithMoreSpecificSignature.kt")
        public void testVarargWithMoreSpecificSignature() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargWithMoreSpecificSignature.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varargs.kt")
        public void testVarargs() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varargsInDifferentPositions.kt")
        public void testVarargsInDifferentPositions() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargsInDifferentPositions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varargsMixed.kt")
        public void testVarargsMixed() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargsMixed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varargsWithRecursiveGenerics.kt")
        public void testVarargsWithRecursiveGenerics() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargsWithRecursiveGenerics.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withVariance.kt")
        public void testWithVariance() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/withVariance.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/priority")
      @TestDataPath("$PROJECT_ROOT")
      public class Priority {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInPriority() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/priority"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionVsMember.kt")
        public void testExtensionVsMember() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/extensionVsMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeExtensionVsOther.kt")
        public void testInvokeExtensionVsOther() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/invokeExtensionVsOther.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeExtensionVsOther2.kt")
        public void testInvokeExtensionVsOther2() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/invokeExtensionVsOther2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt10219.kt")
        public void testKt10219() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/kt10219.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt10510.kt")
        public void testKt10510() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/kt10510.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt9810.kt")
        public void testKt9810() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/kt9810.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt9965.kt")
        public void testKt9965() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/kt9965.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localExtVsNonLocalExt.kt")
        public void testLocalExtVsNonLocalExt() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/localExtVsNonLocalExt.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("memberVsLocalExt.kt")
        public void testMemberVsLocalExt() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/memberVsLocalExt.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("memberWithHidesMemberAnnotationVsMemberWithout.kt")
        public void testMemberWithHidesMemberAnnotationVsMemberWithout() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/memberWithHidesMemberAnnotationVsMemberWithout.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("staticVsImplicitReceiverMember.kt")
        public void testStaticVsImplicitReceiverMember() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/staticVsImplicitReceiverMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("synthesizedMembersVsExtension.kt")
        public void testSynthesizedMembersVsExtension() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/synthesizedMembersVsExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticPropertiesVsExtensions.kt")
        public void testSyntheticPropertiesVsExtensions() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/syntheticPropertiesVsExtensions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticPropertiesVsMembers.kt")
        public void testSyntheticPropertiesVsMembers() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/syntheticPropertiesVsMembers.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/specialConstructions")
      @TestDataPath("$PROJECT_ROOT")
      public class SpecialConstructions {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSpecialConstructions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/specialConstructions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constantsInIf.kt")
        public void testConstantsInIf() {
          runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/constantsInIf.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("elvisAsCall.kt")
        public void testElvisAsCall() {
          runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/elvisAsCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("exclExclAsCall.kt")
        public void testExclExclAsCall() {
          runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/exclExclAsCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferenceForElvis.kt")
        public void testInferenceForElvis() {
          runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/inferenceForElvis.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multipleSuperClasses.kt")
        public void testMultipleSuperClasses() {
          runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/multipleSuperClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reportTypeMismatchDeeplyOnBranches.kt")
        public void testReportTypeMismatchDeeplyOnBranches() {
          runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/reportTypeMismatchDeeplyOnBranches.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/safeCalls")
    @TestDataPath("$PROJECT_ROOT")
    public class SafeCalls {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSafeCalls() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/safeCalls"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("safeCallOnFlexibleTypeAlias.kt")
      public void testSafeCallOnFlexibleTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/safeCalls/safeCallOnFlexibleTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("safeCallWithSmartCast.kt")
      public void testSafeCallWithSmartCast() {
        runTest("compiler/testData/diagnostics/tests/safeCalls/safeCallWithSmartCast.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/samConversions")
    @TestDataPath("$PROJECT_ROOT")
    public class SamConversions {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSamConversions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/samConversions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayAsVarargAfterSamArgument.kt")
      public void testArrayAsVarargAfterSamArgument() {
        runTest("compiler/testData/diagnostics/tests/samConversions/arrayAsVarargAfterSamArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayAsVarargAfterSamArgumentProhibited.kt")
      public void testArrayAsVarargAfterSamArgumentProhibited() {
        runTest("compiler/testData/diagnostics/tests/samConversions/arrayAsVarargAfterSamArgumentProhibited.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayAsVarargAfterSamArgumentWithoutSamConversionsPerArgument.kt")
      public void testArrayAsVarargAfterSamArgumentWithoutSamConversionsPerArgument() {
        runTest("compiler/testData/diagnostics/tests/samConversions/arrayAsVarargAfterSamArgumentWithoutSamConversionsPerArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("checkSamConversionsAreDisabledByDefault.kt")
      public void testCheckSamConversionsAreDisabledByDefault() {
        runTest("compiler/testData/diagnostics/tests/samConversions/checkSamConversionsAreDisabledByDefault.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("conversionOnLambdaAsLastExpression.kt")
      public void testConversionOnLambdaAsLastExpression() {
        runTest("compiler/testData/diagnostics/tests/samConversions/conversionOnLambdaAsLastExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DisabledForKTSimple.kt")
      public void testDisabledForKTSimple() {
        runTest("compiler/testData/diagnostics/tests/samConversions/DisabledForKTSimple.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("GenericSubstitution.kt")
      public void testGenericSubstitution() {
        runTest("compiler/testData/diagnostics/tests/samConversions/GenericSubstitution.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("GenericSubstitutionKT.kt")
      public void testGenericSubstitutionKT() {
        runTest("compiler/testData/diagnostics/tests/samConversions/GenericSubstitutionKT.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitReturnType.kt")
      public void testImplicitReturnType() {
        runTest("compiler/testData/diagnostics/tests/samConversions/implicitReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaMemberAgainstExtension.kt")
      public void testJavaMemberAgainstExtension() {
        runTest("compiler/testData/diagnostics/tests/samConversions/javaMemberAgainstExtension.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt17765.kt")
      public void testKt17765() {
        runTest("compiler/testData/diagnostics/tests/samConversions/kt17765.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt50477.kt")
      public void testKt50477() {
        runTest("compiler/testData/diagnostics/tests/samConversions/kt50477.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt60983.kt")
      public void testKt60983() {
        runTest("compiler/testData/diagnostics/tests/samConversions/kt60983.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multipleSamConversionConflictResolution.kt")
      public void testMultipleSamConversionConflictResolution() {
        runTest("compiler/testData/diagnostics/tests/samConversions/multipleSamConversionConflictResolution.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OverloadPriority.kt")
      public void testOverloadPriority() {
        runTest("compiler/testData/diagnostics/tests/samConversions/OverloadPriority.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OverloadPriorityKT.kt")
      public void testOverloadPriorityKT() {
        runTest("compiler/testData/diagnostics/tests/samConversions/OverloadPriorityKT.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SAMAfterSubstitution.kt")
      public void testSAMAfterSubstitution() {
        runTest("compiler/testData/diagnostics/tests/samConversions/SAMAfterSubstitution.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SAMAfterSubstitutionKT.kt")
      public void testSAMAfterSubstitutionKT() {
        runTest("compiler/testData/diagnostics/tests/samConversions/SAMAfterSubstitutionKT.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samConversionToGeneric.kt")
      public void testSamConversionToGeneric() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samConversionToGeneric.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samConversionToGenericWrongNullability.kt")
      public void testSamConversionToGenericWrongNullability() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samConversionToGenericWrongNullability.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samConversionWithCondition.kt")
      public void testSamConversionWithCondition() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samConversionWithCondition.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samConversionWithConditionJava.kt")
      public void testSamConversionWithConditionJava() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samConversionWithConditionJava.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samConversionWithSafeCallAndInference.kt")
      public void testSamConversionWithSafeCallAndInference() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samConversionWithSafeCallAndInference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samConversionsWithSmartCasts.kt")
      public void testSamConversionsWithSmartCasts() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samConversionsWithSmartCasts.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samPriorityVsGeneric.kt")
      public void testSamPriorityVsGeneric() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samPriorityVsGeneric.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samPriorityVsGenericCompatibilityDisabled.kt")
      public void testSamPriorityVsGenericCompatibilityDisabled() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samPriorityVsGenericCompatibilityDisabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samPriorityVsGenericCompatibilityEnabled.kt")
      public void testSamPriorityVsGenericCompatibilityEnabled() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samPriorityVsGenericCompatibilityEnabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sameCandidatesFromKotlinAndJavaInOneScope.kt")
      public void testSameCandidatesFromKotlinAndJavaInOneScope() {
        runTest("compiler/testData/diagnostics/tests/samConversions/sameCandidatesFromKotlinAndJavaInOneScope.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sameConversionToGenericWrongNullabilityDnnRepresentation.kt")
      public void testSameConversionToGenericWrongNullabilityDnnRepresentation() {
        runTest("compiler/testData/diagnostics/tests/samConversions/sameConversionToGenericWrongNullabilityDnnRepresentation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SimpleCorrect.kt")
      public void testSimpleCorrect() {
        runTest("compiler/testData/diagnostics/tests/samConversions/SimpleCorrect.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SimpleCorrectKT.kt")
      public void testSimpleCorrectKT() {
        runTest("compiler/testData/diagnostics/tests/samConversions/SimpleCorrectKT.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/scopes")
    @TestDataPath("$PROJECT_ROOT")
    public class Scopes {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInScopes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AmbiguityBetweenRootAndPackage.kt")
      public void testAmbiguityBetweenRootAndPackage() {
        runTest("compiler/testData/diagnostics/tests/scopes/AmbiguityBetweenRootAndPackage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AmbiguousNonExtensions.kt")
      public void testAmbiguousNonExtensions() {
        runTest("compiler/testData/diagnostics/tests/scopes/AmbiguousNonExtensions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericVsNested.kt")
      public void testGenericVsNested() {
        runTest("compiler/testData/diagnostics/tests/scopes/genericVsNested.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitReceiverMemberVsParameter.kt")
      public void testImplicitReceiverMemberVsParameter() {
        runTest("compiler/testData/diagnostics/tests/scopes/implicitReceiverMemberVsParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("initializerScopeOfExtensionProperty.kt")
      public void testInitializerScopeOfExtensionProperty() {
        runTest("compiler/testData/diagnostics/tests/scopes/initializerScopeOfExtensionProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invisibleInternalSetterAccessFromDeriviedClass.kt")
      public void testInvisibleInternalSetterAccessFromDeriviedClass() {
        runTest("compiler/testData/diagnostics/tests/scopes/invisibleInternalSetterAccessFromDeriviedClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invisibleInternalSetterAccessFromDeriviedClassOn.kt")
      public void testInvisibleInternalSetterAccessFromDeriviedClassOn() {
        runTest("compiler/testData/diagnostics/tests/scopes/invisibleInternalSetterAccessFromDeriviedClassOn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invisibleSetter.kt")
      public void testInvisibleSetter() {
        runTest("compiler/testData/diagnostics/tests/scopes/invisibleSetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1078.kt")
      public void testKt1078() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1078.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1080.kt")
      public void testKt1080() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1080.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1244.kt")
      public void testKt1244() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1244.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1248.kt")
      public void testKt1248() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1248.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt151.kt")
      public void testKt151() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt151.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1579.kt")
      public void testKt1579() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1579.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1579_map_entry.kt")
      public void testKt1579_map_entry() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1579_map_entry.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1580.kt")
      public void testKt1580() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1580.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1642.kt")
      public void testKt1642() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1642.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1738.kt")
      public void testKt1738() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1738.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1805.kt")
      public void testKt1805() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1805.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1806.kt")
      public void testKt1806() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1806.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1822.kt")
      public void testKt1822() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1822.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1942.kt")
      public void testKt1942() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1942.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2262.kt")
      public void testKt2262() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt2262.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt250.617.10.kt")
      public void testKt250_617_10() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt250.617.10.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt323.kt")
      public void testKt323() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt323.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt37.kt")
      public void testKt37() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt37.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt587.kt")
      public void testKt587() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt587.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt900.kt")
      public void testKt900() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt900.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt900-1.kt")
      public void testKt900_1() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt900-1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt900-2.kt")
      public void testKt900_2() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt900-2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt939.kt")
      public void testKt939() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt939.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt9430.kt")
      public void testKt9430() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt9430.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoAmbiguityBetweenRootAndPackage.kt")
      public void testNoAmbiguityBetweenRootAndPackage() {
        runTest("compiler/testData/diagnostics/tests/scopes/NoAmbiguityBetweenRootAndPackage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sameClassNameResolve.kt")
      public void testSameClassNameResolve() {
        runTest("compiler/testData/diagnostics/tests/scopes/sameClassNameResolve.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("stopResolutionOnAmbiguity.kt")
      public void testStopResolutionOnAmbiguity() {
        runTest("compiler/testData/diagnostics/tests/scopes/stopResolutionOnAmbiguity.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("visibility.kt")
      public void testVisibility() {
        runTest("compiler/testData/diagnostics/tests/scopes/visibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("visibility2.kt")
      public void testVisibility2() {
        runTest("compiler/testData/diagnostics/tests/scopes/visibility2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("visibility3.kt")
      public void testVisibility3() {
        runTest("compiler/testData/diagnostics/tests/scopes/visibility3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("VisibilityInClassObject.kt")
      public void testVisibilityInClassObject() {
        runTest("compiler/testData/diagnostics/tests/scopes/VisibilityInClassObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("VisibilityInheritModifier.kt")
      public void testVisibilityInheritModifier() {
        runTest("compiler/testData/diagnostics/tests/scopes/VisibilityInheritModifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("visibleSetterFromSyntheticProperty.kt")
      public void testVisibleSetterFromSyntheticProperty() {
        runTest("compiler/testData/diagnostics/tests/scopes/visibleSetterFromSyntheticProperty.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/scopes/classHeader")
      @TestDataPath("$PROJECT_ROOT")
      public class ClassHeader {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInClassHeader() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes/classHeader"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationOnClass.kt")
        public void testAnnotationOnClass() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/annotationOnClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationOnConstructors.kt")
        public void testAnnotationOnConstructors() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/annotationOnConstructors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classGenericParameters.kt")
        public void testClassGenericParameters() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/classGenericParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classParents.kt")
        public void testClassParents() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/classParents.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("companionNestedVsOuter.kt")
        public void testCompanionNestedVsOuter() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/companionNestedVsOuter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("companionObjectParents.kt")
        public void testCompanionObjectParents() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/companionObjectParents.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("companionObjectSuperConstructorArguments.kt")
        public void testCompanionObjectSuperConstructorArguments() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/companionObjectSuperConstructorArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructors.kt")
        public void testConstructors() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/constructors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("delegation.kt")
        public void testDelegation() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/delegation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("objectParents.kt")
        public void testObjectParents() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/objectParents.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("objectSuperConstructorArguments.kt")
        public void testObjectSuperConstructorArguments() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/objectSuperConstructorArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleDelegation.kt")
        public void testSimpleDelegation() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/simpleDelegation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superConstructorArguments.kt")
        public void testSuperConstructorArguments() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/superConstructorArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superConstructorArgumentsInSecondaryConstructor.kt")
        public void testSuperConstructorArgumentsInSecondaryConstructor() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/superConstructorArgumentsInSecondaryConstructor.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/scopes/inheritance")
      @TestDataPath("$PROJECT_ROOT")
      public class Inheritance {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInheritance() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes/inheritance"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("companionObject.kt")
        public void testCompanionObject() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/companionObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("companionObjectAfterJava.kt")
        public void testCompanionObjectAfterJava() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/companionObjectAfterJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("companionObjectsOrder.kt")
        public void testCompanionObjectsOrder() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/companionObjectsOrder.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerClasses.kt")
        public void testInnerClasses() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/innerClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt3856.kt")
        public void testKt3856() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/kt3856.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("methodsPriority.kt")
        public void testMethodsPriority() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/methodsPriority.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedClassesFromInterface.kt")
        public void testNestedClassesFromInterface() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedClassesFromInterface.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedCompanionClass.kt")
        public void testNestedCompanionClass() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedCompanionClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedCompanionClassVsNested.kt")
        public void testNestedCompanionClassVsNested() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedCompanionClassVsNested.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedCompanionClassVsNestedJava.kt")
        public void testNestedCompanionClassVsNestedJava() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedCompanionClassVsNestedJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedFromJava.kt")
        public void testNestedFromJava() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedFromJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedFromJavaAfterKotlin.kt")
        public void testNestedFromJavaAfterKotlin() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedFromJavaAfterKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedVsToplevelClass.kt")
        public void testNestedVsToplevelClass() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/nestedVsToplevelClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("severalCompanions.kt")
        public void testSeveralCompanions() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/severalCompanions.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/scopes/inheritance/statics")
        @TestDataPath("$PROJECT_ROOT")
        public class Statics {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInStatics() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes/inheritance/statics"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("hidePrivateByPublic.kt")
          public void testHidePrivateByPublic() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/hidePrivateByPublic.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("jjkj.kt")
          public void testJjkj() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/jjkj.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("kjk.kt")
          public void testKjk() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/kjk.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("localVsStatic.kt")
          public void testLocalVsStatic() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/localVsStatic.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("nameClash0.kt")
          public void testNameClash0() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/nameClash0.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("nameClash1.kt")
          public void testNameClash1() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/nameClash1.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("nameClash2.kt")
          public void testNameClash2() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/nameClash2.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("oneInterfaceManyTimes.kt")
          public void testOneInterfaceManyTimes() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/oneInterfaceManyTimes.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("overloadStatic.kt")
          public void testOverloadStatic() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/overloadStatic.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("staticFunAndPropertyImport.kt")
          public void testStaticFunAndPropertyImport() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticFunAndPropertyImport.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("staticFunVsImport.kt")
          public void testStaticFunVsImport() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticFunVsImport.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("staticPropertyVsImport.kt")
          public void testStaticPropertyVsImport() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticPropertyVsImport.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("staticVsCompanion.kt")
          public void testStaticVsCompanion() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticVsCompanion.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("staticVsMember.kt")
          public void testStaticVsMember() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticVsMember.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("staticVsOuter.kt")
          public void testStaticVsOuter() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticVsOuter.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("staticsFromjava.kt")
          public void testStaticsFromjava() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticsFromjava.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("staticsFromjavaAfterKotlin.kt")
          public void testStaticsFromjavaAfterKotlin() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticsFromjavaAfterKotlin.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject")
          @TestDataPath("$PROJECT_ROOT")
          public class CompanionObject {
            @RepeatedTest(value = 5)
            @TestMetadata("accessToStaticMembersOfParentClassJKJ_after.kt")
            public void testAccessToStaticMembersOfParentClassJKJ_after() {
              runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/accessToStaticMembersOfParentClassJKJ_after.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("accessToStaticMembersOfParentClassJKJ_before.kt")
            public void testAccessToStaticMembersOfParentClassJKJ_before() {
              runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/accessToStaticMembersOfParentClassJKJ_before.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("accessToStaticMembersOfParentClass_after.kt")
            public void testAccessToStaticMembersOfParentClass_after() {
              runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/accessToStaticMembersOfParentClass_after.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("accessToStaticMembersOfParentClass_before.kt")
            public void testAccessToStaticMembersOfParentClass_before() {
              runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/accessToStaticMembersOfParentClass_before.kt");
            }

            @RepeatedTest(value = 5)
            public void testAllFilesPresentInCompanionObject() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
            }

            @RepeatedTest(value = 5)
            @TestMetadata("inheritFromContainingClass_after.kt")
            public void testInheritFromContainingClass_after() {
              runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromContainingClass_after.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("inheritFromContainingClass_before.kt")
            public void testInheritFromContainingClass_before() {
              runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromContainingClass_before.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("inheritFromJavaAfterKotlin_after.kt")
            public void testInheritFromJavaAfterKotlin_after() {
              runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromJavaAfterKotlin_after.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("inheritFromJavaAfterKotlin_before.kt")
            public void testInheritFromJavaAfterKotlin_before() {
              runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromJavaAfterKotlin_before.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("inheritFromJava_after.kt")
            public void testInheritFromJava_after() {
              runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromJava_after.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("inheritFromJava_before.kt")
            public void testInheritFromJava_before() {
              runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromJava_before.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/scopes/protectedVisibility")
      @TestDataPath("$PROJECT_ROOT")
      public class ProtectedVisibility {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInProtectedVisibility() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes/protectedVisibility"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("complexCompanion.kt")
        public void testComplexCompanion() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/complexCompanion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructors.kt")
        public void testConstructors() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/constructors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorsInner.kt")
        public void testConstructorsInner() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/constructorsInner.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("generic.kt")
        public void testGeneric() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/generic.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerClassInJava.kt")
        public void testInnerClassInJava() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/innerClassInJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerProtectedClass.kt")
        public void testInnerProtectedClass() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/innerProtectedClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaInheritedInKotlin.kt")
        public void testJavaInheritedInKotlin() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/javaInheritedInKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt7971.kt")
        public void testKt7971() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/kt7971.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonSuperCallConstructor.kt")
        public void testNonSuperCallConstructor() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/nonSuperCallConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonSuperCallConstructorJavaDifferentPackage.kt")
        public void testNonSuperCallConstructorJavaDifferentPackage() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/nonSuperCallConstructorJavaDifferentPackage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonSuperCallConstructorJavaSamePackage.kt")
        public void testNonSuperCallConstructorJavaSamePackage() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/nonSuperCallConstructorJavaSamePackage.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("protectedCallOnSubClass.kt")
        public void testProtectedCallOnSubClass() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/protectedCallOnSubClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("protectedPropertyInPrimaryConstructor.kt")
        public void testProtectedPropertyInPrimaryConstructor() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/protectedPropertyInPrimaryConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartcastOnExtensionReceiver.kt")
        public void testSmartcastOnExtensionReceiver() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/smartcastOnExtensionReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticPropertyExtensions.kt")
        public void testSyntheticPropertyExtensions() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/syntheticPropertyExtensions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticSAMExtensions.kt")
        public void testSyntheticSAMExtensions() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/syntheticSAMExtensions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unstableSmartCast.kt")
        public void testUnstableSmartCast() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/unstableSmartCast.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withSmartcast.kt")
        public void testWithSmartcast() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/withSmartcast.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/scopes/variantProjections")
      @TestDataPath("$PROJECT_ROOT")
      public class VariantProjections {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInVariantProjections() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes/variantProjections"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dataClassCopy.kt")
        public void testDataClassCopy() {
          runTest("compiler/testData/diagnostics/tests/scopes/variantProjections/dataClassCopy.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("interdependentStarProjections.kt")
        public void testInterdependentStarProjections() {
          runTest("compiler/testData/diagnostics/tests/scopes/variantProjections/interdependentStarProjections.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unsafeVarianceAndCovariantProjection.kt")
        public void testUnsafeVarianceAndCovariantProjection() {
          runTest("compiler/testData/diagnostics/tests/scopes/variantProjections/unsafeVarianceAndCovariantProjection.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/script")
    @TestDataPath("$PROJECT_ROOT")
    public class Script {
      @RepeatedTest(value = 5)
      @TestMetadata("AccessForwardDeclarationInScript.kts")
      public void testAccessForwardDeclarationInScript() {
        runTest("compiler/testData/diagnostics/tests/script/AccessForwardDeclarationInScript.kts");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInScript() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/script"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ComplexScript.kts")
      public void testComplexScript() {
        runTest("compiler/testData/diagnostics/tests/script/ComplexScript.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("destructuringDeclarationsScript.kts")
      public void testDestructuringDeclarationsScript() {
        runTest("compiler/testData/diagnostics/tests/script/destructuringDeclarationsScript.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionContractScript.kts")
      public void testFunctionContractScript() {
        runTest("compiler/testData/diagnostics/tests/script/functionContractScript.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitResolveWithJump.kts")
      public void testImplicitResolveWithJump() {
        runTest("compiler/testData/diagnostics/tests/script/implicitResolveWithJump.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("imports.kts")
      public void testImports() {
        runTest("compiler/testData/diagnostics/tests/script/imports.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerClassError.kts")
      public void testInnerClassError() {
        runTest("compiler/testData/diagnostics/tests/script/innerClassError.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerClassWarning.kts")
      public void testInnerClassWarning() {
        runTest("compiler/testData/diagnostics/tests/script/innerClassWarning.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("LateInit.kts")
      public void testLateInit() {
        runTest("compiler/testData/diagnostics/tests/script/LateInit.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NestedInnerClass.kts")
      public void testNestedInnerClass() {
        runTest("compiler/testData/diagnostics/tests/script/NestedInnerClass.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PrivateVal.kts")
      public void testPrivateVal() {
        runTest("compiler/testData/diagnostics/tests/script/PrivateVal.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveInitializerOfDestructuringDeclarationOnce.kts")
      public void testResolveInitializerOfDestructuringDeclarationOnce() {
        runTest("compiler/testData/diagnostics/tests/script/resolveInitializerOfDestructuringDeclarationOnce.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("scriptDeclsShouldVisibleLocally.kts")
      public void testScriptDeclsShouldVisibleLocally() {
        runTest("compiler/testData/diagnostics/tests/script/scriptDeclsShouldVisibleLocally.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("scriptScopes.kts")
      public void testScriptScopes() {
        runTest("compiler/testData/diagnostics/tests/script/scriptScopes.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SimpleScript.kts")
      public void testSimpleScript() {
        runTest("compiler/testData/diagnostics/tests/script/SimpleScript.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SuppressAnnoInLastExpression.kts")
      public void testSuppressAnnoInLastExpression() {
        runTest("compiler/testData/diagnostics/tests/script/SuppressAnnoInLastExpression.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("topLevelInlineFun.kts")
      public void testTopLevelInlineFun() {
        runTest("compiler/testData/diagnostics/tests/script/topLevelInlineFun.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("topLevelPropertiesWithGetSet.kts")
      public void testTopLevelPropertiesWithGetSet() {
        runTest("compiler/testData/diagnostics/tests/script/topLevelPropertiesWithGetSet.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("topLevelPropertyInitialization.kts")
      public void testTopLevelPropertyInitialization() {
        runTest("compiler/testData/diagnostics/tests/script/topLevelPropertyInitialization.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("topLevelVariable.kts")
      public void testTopLevelVariable() {
        runTest("compiler/testData/diagnostics/tests/script/topLevelVariable.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealiasInScript.kts")
      public void testTypealiasInScript() {
        runTest("compiler/testData/diagnostics/tests/script/typealiasInScript.kts");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varInScript.kts")
      public void testVarInScript() {
        runTest("compiler/testData/diagnostics/tests/script/varInScript.kts");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/sealed")
    @TestDataPath("$PROJECT_ROOT")
    public class Sealed {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSealed() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/sealed"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DerivedTopLevel.kt")
      public void testDerivedTopLevel() {
        runTest("compiler/testData/diagnostics/tests/sealed/DerivedTopLevel.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DoubleInner.kt")
      public void testDoubleInner() {
        runTest("compiler/testData/diagnostics/tests/sealed/DoubleInner.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveOnCaptured.kt")
      public void testExhaustiveOnCaptured() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveOnCaptured.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveOnRoot.kt")
      public void testExhaustiveOnRoot() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveOnRoot.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveOnTree.kt")
      public void testExhaustiveOnTree() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveOnTree.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveOnTriangleStar.kt")
      public void testExhaustiveOnTriangleStar() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveOnTriangleStar.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWhen.kt")
      public void testExhaustiveWhen() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWhenDoubleInner.kt")
      public void testExhaustiveWhenDoubleInner() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenDoubleInner.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWhenMultipleInner.kt")
      public void testExhaustiveWhenMultipleInner() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenMultipleInner.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWhenNegated.kt")
      public void testExhaustiveWhenNegated() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenNegated.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWhenNegatedTwice.kt")
      public void testExhaustiveWhenNegatedTwice() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenNegatedTwice.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWhenOnNestedSealed.kt")
      public void testExhaustiveWhenOnNestedSealed() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenOnNestedSealed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWhenOnNullable.kt")
      public void testExhaustiveWhenOnNullable() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenOnNullable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWhenWithAdditionalMember.kt")
      public void testExhaustiveWhenWithAdditionalMember() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenWithAdditionalMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWhenWithElse.kt")
      public void testExhaustiveWhenWithElse() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenWithElse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWithFreedom.kt")
      public void testExhaustiveWithFreedom() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWithFreedom.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inheritorInDifferentModule.kt")
      public void testInheritorInDifferentModule() {
        runTest("compiler/testData/diagnostics/tests/sealed/inheritorInDifferentModule.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("internalTypeInConstructor.kt")
      public void testInternalTypeInConstructor() {
        runTest("compiler/testData/diagnostics/tests/sealed/internalTypeInConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt44316.kt")
      public void testKt44316() {
        runTest("compiler/testData/diagnostics/tests/sealed/kt44316.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt44861.kt")
      public void testKt44861() {
        runTest("compiler/testData/diagnostics/tests/sealed/kt44861.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Local.kt")
      public void testLocal() {
        runTest("compiler/testData/diagnostics/tests/sealed/Local.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("LocalSealed.kt")
      public void testLocalSealed() {
        runTest("compiler/testData/diagnostics/tests/sealed/LocalSealed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MultipleFiles_enabled.kt")
      public void testMultipleFiles_enabled() {
        runTest("compiler/testData/diagnostics/tests/sealed/MultipleFiles_enabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NestedSealed.kt")
      public void testNestedSealed() {
        runTest("compiler/testData/diagnostics/tests/sealed/NestedSealed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NestedSealedWithoutRestrictions.kt")
      public void testNestedSealedWithoutRestrictions() {
        runTest("compiler/testData/diagnostics/tests/sealed/NestedSealedWithoutRestrictions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NeverConstructed.kt")
      public void testNeverConstructed() {
        runTest("compiler/testData/diagnostics/tests/sealed/NeverConstructed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NeverDerivedFromNested.kt")
      public void testNeverDerivedFromNested() {
        runTest("compiler/testData/diagnostics/tests/sealed/NeverDerivedFromNested.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NeverEnum.kt")
      public void testNeverEnum() {
        runTest("compiler/testData/diagnostics/tests/sealed/NeverEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NeverFinal.kt")
      public void testNeverFinal() {
        runTest("compiler/testData/diagnostics/tests/sealed/NeverFinal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NeverObject.kt")
      public void testNeverObject() {
        runTest("compiler/testData/diagnostics/tests/sealed/NeverObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NeverOpen.kt")
      public void testNeverOpen() {
        runTest("compiler/testData/diagnostics/tests/sealed/NeverOpen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonExhaustiveWhen.kt")
      public void testNonExhaustiveWhen() {
        runTest("compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonExhaustiveWhenNegated.kt")
      public void testNonExhaustiveWhenNegated() {
        runTest("compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhenNegated.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonExhaustiveWhenWithAdditionalCase.kt")
      public void testNonExhaustiveWhenWithAdditionalCase() {
        runTest("compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhenWithAdditionalCase.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonExhaustiveWhenWithAnyCase.kt")
      public void testNonExhaustiveWhenWithAnyCase() {
        runTest("compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhenWithAnyCase.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonPrivateConstructor.kt")
      public void testNonPrivateConstructor() {
        runTest("compiler/testData/diagnostics/tests/sealed/NonPrivateConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NotFinal.kt")
      public void testNotFinal() {
        runTest("compiler/testData/diagnostics/tests/sealed/NotFinal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OperationWhen.kt")
      public void testOperationWhen() {
        runTest("compiler/testData/diagnostics/tests/sealed/OperationWhen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateSealedConstructors_error.kt")
      public void testPrivateSealedConstructors_error() {
        runTest("compiler/testData/diagnostics/tests/sealed/privateSealedConstructors_error.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateSealedConstructors_warning.kt")
      public void testPrivateSealedConstructors_warning() {
        runTest("compiler/testData/diagnostics/tests/sealed/privateSealedConstructors_warning.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateTypeInConstructor.kt")
      public void testPrivateTypeInConstructor() {
        runTest("compiler/testData/diagnostics/tests/sealed/privateTypeInConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedConstructors_disabled.kt")
      public void testProtectedConstructors_disabled() {
        runTest("compiler/testData/diagnostics/tests/sealed/protectedConstructors_disabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedConstructors_enabled.kt")
      public void testProtectedConstructors_enabled() {
        runTest("compiler/testData/diagnostics/tests/sealed/protectedConstructors_enabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedundantAbstract.kt")
      public void testRedundantAbstract() {
        runTest("compiler/testData/diagnostics/tests/sealed/RedundantAbstract.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sealedInheritorErrorMessage.kt")
      public void testSealedInheritorErrorMessage() {
        runTest("compiler/testData/diagnostics/tests/sealed/sealedInheritorErrorMessage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TreeWhen.kt")
      public void testTreeWhen() {
        runTest("compiler/testData/diagnostics/tests/sealed/TreeWhen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TreeWhenFunctional.kt")
      public void testTreeWhenFunctional() {
        runTest("compiler/testData/diagnostics/tests/sealed/TreeWhenFunctional.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TreeWhenFunctionalNoIs.kt")
      public void testTreeWhenFunctionalNoIs() {
        runTest("compiler/testData/diagnostics/tests/sealed/TreeWhenFunctionalNoIs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WhenOnEmptySealed.kt")
      public void testWhenOnEmptySealed() {
        runTest("compiler/testData/diagnostics/tests/sealed/WhenOnEmptySealed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WithInterface.kt")
      public void testWithInterface() {
        runTest("compiler/testData/diagnostics/tests/sealed/WithInterface.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/sealed/interfaces")
      @TestDataPath("$PROJECT_ROOT")
      public class Interfaces {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInterfaces() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/sealed/interfaces"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inheritorInDifferentModule.kt")
        public void testInheritorInDifferentModule() {
          runTest("compiler/testData/diagnostics/tests/sealed/interfaces/inheritorInDifferentModule.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sealedFunInterface.kt")
        public void testSealedFunInterface() {
          runTest("compiler/testData/diagnostics/tests/sealed/interfaces/sealedFunInterface.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sealedInterfacesDisabled.kt")
        public void testSealedInterfacesDisabled() {
          runTest("compiler/testData/diagnostics/tests/sealed/interfaces/sealedInterfacesDisabled.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleSealedInterface.kt")
        public void testSimpleSealedInterface() {
          runTest("compiler/testData/diagnostics/tests/sealed/interfaces/simpleSealedInterface.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/secondaryConstructors")
    @TestDataPath("$PROJECT_ROOT")
    public class SecondaryConstructors {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSecondaryConstructors() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/secondaryConstructors"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("argumentsResolveInBodyAndDelegationCall.kt")
      public void testArgumentsResolveInBodyAndDelegationCall() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/argumentsResolveInBodyAndDelegationCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classInitializersWithoutPrimary.kt")
      public void testClassInitializersWithoutPrimary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/classInitializersWithoutPrimary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("companionObjectScope.kt")
      public void testCompanionObjectScope() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/companionObjectScope.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constructorCallType.kt")
      public void testConstructorCallType() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/constructorCallType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constructorInObject.kt")
      public void testConstructorInObject() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/constructorInObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constructorInTrait.kt")
      public void testConstructorInTrait() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/constructorInTrait.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ctrsAnnotationResolve.kt")
      public void testCtrsAnnotationResolve() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/ctrsAnnotationResolve.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cyclicDelegationCalls.kt")
      public void testCyclicDelegationCalls() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/cyclicDelegationCalls.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataClasses.kt")
      public void testDataClasses() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/dataClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataFlowInDelegationCall.kt")
      public void testDataFlowInDelegationCall() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/dataFlowInDelegationCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegationByWithoutPrimary.kt")
      public void testDelegationByWithoutPrimary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/delegationByWithoutPrimary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enums.kt")
      public void testEnums() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/enums.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("errorsOnEmptyDelegationCall.kt")
      public void testErrorsOnEmptyDelegationCall() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/errorsOnEmptyDelegationCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("expectedPrimaryConstructorCall.kt")
      public void testExpectedPrimaryConstructorCall() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/expectedPrimaryConstructorCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("generics.kt")
      public void testGenerics() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/generics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("generics2.kt")
      public void testGenerics2() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/generics2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("generics3.kt")
      public void testGenerics3() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/generics3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("headerSupertypeInitialization.kt")
      public void testHeaderSupertypeInitialization() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerSupertypeInitialization.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitSuperCallErrorsIfPrimary.kt")
      public void testImplicitSuperCallErrorsIfPrimary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/implicitSuperCallErrorsIfPrimary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("initializationFromOtherInstance.kt")
      public void testInitializationFromOtherInstance() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/initializationFromOtherInstance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt6992.kt")
      public void testKt6992() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/kt6992.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt6993.kt")
      public void testKt6993() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/kt6993.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt6994.kt")
      public void testKt6994() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/kt6994.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaInDelegation.kt")
      public void testLambdaInDelegation() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/lambdaInDelegation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedExtendsInner.kt")
      public void testNestedExtendsInner() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/nestedExtendsInner.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noDefaultIfEmptySecondary.kt")
      public void testNoDefaultIfEmptySecondary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/noDefaultIfEmptySecondary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noPrimaryConstructor.kt")
      public void testNoPrimaryConstructor() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/noPrimaryConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noSupertypeInitWithSecondaryConstructors.kt")
      public void testNoSupertypeInitWithSecondaryConstructors() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/noSupertypeInitWithSecondaryConstructors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyInitializationWithPrimary.kt")
      public void testPropertyInitializationWithPrimary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/propertyInitializationWithPrimary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyInitializationWithoutPrimary.kt")
      public void testPropertyInitializationWithoutPrimary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/propertyInitializationWithoutPrimary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("redeclarations.kt")
      public void testRedeclarations() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/redeclarations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("redeclarationsOfConstructorsIgnored.kt")
      public void testRedeclarationsOfConstructorsIgnored() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/redeclarationsOfConstructorsIgnored.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reportResolutionErrorOnImplicitOnce.kt")
      public void testReportResolutionErrorOnImplicitOnce() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/reportResolutionErrorOnImplicitOnce.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolvePropertyInitializerWithoutPrimary.kt")
      public void testResolvePropertyInitializerWithoutPrimary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/resolvePropertyInitializerWithoutPrimary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("return.kt")
      public void testReturn() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/return.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superAnyNonEmpty.kt")
      public void testSuperAnyNonEmpty() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/superAnyNonEmpty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superSecondaryNonExisting.kt")
      public void testSuperSecondaryNonExisting() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/superSecondaryNonExisting.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("thisNonExisting.kt")
      public void testThisNonExisting() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/thisNonExisting.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unreachableCode.kt")
      public void testUnreachableCode() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/unreachableCode.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useOfPropertiesWithPrimary.kt")
      public void testUseOfPropertiesWithPrimary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/useOfPropertiesWithPrimary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useOfPropertiesWithoutPrimary.kt")
      public void testUseOfPropertiesWithoutPrimary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/useOfPropertiesWithoutPrimary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valOrValAndModifiersInCtr.kt")
      public void testValOrValAndModifiersInCtr() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/valOrValAndModifiersInCtr.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargsInDelegationCallToPrimary.kt")
      public void testVarargsInDelegationCallToPrimary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/varargsInDelegationCallToPrimary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargsInDelegationCallToSecondary.kt")
      public void testVarargsInDelegationCallToSecondary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/varargsInDelegationCallToSecondary.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker")
      @TestDataPath("$PROJECT_ROOT")
      public class HeaderCallChecker {
        @RepeatedTest(value = 5)
        @TestMetadata("accessBaseGenericFromInnerExtendingSameBase.kt")
        public void testAccessBaseGenericFromInnerExtendingSameBase() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessBaseGenericFromInnerExtendingSameBase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("accessBaseGenericFromInnerExtendingSameBase2.kt")
        public void testAccessBaseGenericFromInnerExtendingSameBase2() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessBaseGenericFromInnerExtendingSameBase2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("accessBaseWithSameExtension.kt")
        public void testAccessBaseWithSameExtension() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessBaseWithSameExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("accessGenericBaseWithSameExtension.kt")
        public void testAccessGenericBaseWithSameExtension() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessGenericBaseWithSameExtension.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInHeaderCallChecker() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerInstanceCreation.kt")
        public void testInnerInstanceCreation() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/innerInstanceCreation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaAsArgument.kt")
        public void testLambdaAsArgument() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/lambdaAsArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("memberFunAccess.kt")
        public void testMemberFunAccess() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/memberFunAccess.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("objectLiteralAsArgument.kt")
        public void testObjectLiteralAsArgument() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/objectLiteralAsArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("objectLiteralAsDefaultValueParameter.kt")
        public void testObjectLiteralAsDefaultValueParameter() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/objectLiteralAsDefaultValueParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("operatorCall.kt")
        public void testOperatorCall() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/operatorCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("passingInstance.kt")
        public void testPassingInstance() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/passingInstance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyAccess.kt")
        public void testPropertyAccess() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/propertyAccess.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyAccessUnitialized.kt")
        public void testPropertyAccessUnitialized() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/propertyAccessUnitialized.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superFunAccess.kt")
        public void testSuperFunAccess() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/superFunAccess.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superFunAccessOverriden.kt")
        public void testSuperFunAccessOverriden() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/superFunAccessOverriden.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("superPropertyAccess.kt")
        public void testSuperPropertyAccess() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/superPropertyAccess.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("thisAsExtensionReceiver.kt")
        public void testThisAsExtensionReceiver() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/thisAsExtensionReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("usingOuterInstance.kt")
        public void testUsingOuterInstance() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/usingOuterInstance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("usingOuterProperty.kt")
        public void testUsingOuterProperty() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/usingOuterProperty.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/senselessComparison")
    @TestDataPath("$PROJECT_ROOT")
    public class SenselessComparison {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSenselessComparison() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/senselessComparison"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("complexExpression.kt")
      public void testComplexExpression() {
        runTest("compiler/testData/diagnostics/tests/senselessComparison/complexExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noExplicitType.kt")
      public void testNoExplicitType() {
        runTest("compiler/testData/diagnostics/tests/senselessComparison/noExplicitType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("parenthesized.kt")
      public void testParenthesized() {
        runTest("compiler/testData/diagnostics/tests/senselessComparison/parenthesized.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/shadowing")
    @TestDataPath("$PROJECT_ROOT")
    public class Shadowing {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInShadowing() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/shadowing"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noNameShadowingForSimpleParameters.kt")
      public void testNoNameShadowingForSimpleParameters() {
        runTest("compiler/testData/diagnostics/tests/shadowing/noNameShadowingForSimpleParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ShadowLambdaParameter.kt")
      public void testShadowLambdaParameter() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowLambdaParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ShadowMultiDeclarationWithFunParameter.kt")
      public void testShadowMultiDeclarationWithFunParameter() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowMultiDeclarationWithFunParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ShadowParameterInFunctionBody.kt")
      public void testShadowParameterInFunctionBody() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowParameterInFunctionBody.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ShadowParameterInNestedBlockInFor.kt")
      public void testShadowParameterInNestedBlockInFor() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowParameterInNestedBlockInFor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ShadowPropertyInClosure.kt")
      public void testShadowPropertyInClosure() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInClosure.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ShadowPropertyInFor.kt")
      public void testShadowPropertyInFor() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInFor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ShadowPropertyInFunction.kt")
      public void testShadowPropertyInFunction() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ShadowVariableInFor.kt")
      public void testShadowVariableInFor() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInFor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ShadowVariableInNestedBlock.kt")
      public void testShadowVariableInNestedBlock() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedBlock.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ShadowVariableInNestedClosure.kt")
      public void testShadowVariableInNestedClosure() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedClosure.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ShadowVariableInNestedClosureParam.kt")
      public void testShadowVariableInNestedClosureParam() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedClosureParam.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/smartCasts")
    @TestDataPath("$PROJECT_ROOT")
    public class SmartCasts {
      @RepeatedTest(value = 5)
      @TestMetadata("afterBinaryExpr.kt")
      public void testAfterBinaryExpr() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/afterBinaryExpr.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSmartCasts() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("alwaysNull.kt")
      public void testAlwaysNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/alwaysNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("alwaysNullWithJava.kt")
      public void testAlwaysNullWithJava() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/alwaysNullWithJava.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("binaryOperatorsWithJumps.kt")
      public void testBinaryOperatorsWithJumps() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/binaryOperatorsWithJumps.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classObjectMember.kt")
      public void testClassObjectMember() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/classObjectMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("combineWithNoSelectorInfo.kt")
      public void testCombineWithNoSelectorInfo() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/combineWithNoSelectorInfo.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("comparisonOfBuiltInTypesUnderOr.kt")
      public void testComparisonOfBuiltInTypesUnderOr() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/comparisonOfBuiltInTypesUnderOr.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("comparisonOfClassTypesUnderOr.kt")
      public void testComparisonOfClassTypesUnderOr() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/comparisonOfClassTypesUnderOr.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("comparisonUnderAnd.kt")
      public void testComparisonUnderAnd() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/comparisonUnderAnd.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("complexComparison.kt")
      public void testComplexComparison() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/complexComparison.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("complexConditionsWithExcl.kt")
      public void testComplexConditionsWithExcl() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/complexConditionsWithExcl.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("complexSealedContracts.kt")
      public void testComplexSealedContracts() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/complexSealedContracts.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dataFlowInfoForArguments.kt")
      public void testDataFlowInfoForArguments() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/dataFlowInfoForArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("disableDfaBooleanVariables.kt")
      public void testDisableDfaBooleanVariables() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/disableDfaBooleanVariables.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("doubleLambdaArgument.kt")
      public void testDoubleLambdaArgument() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/doubleLambdaArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("elvisExclExcl.kt")
      public void testElvisExclExcl() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/elvisExclExcl.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("elvisExclExclMerge.kt")
      public void testElvisExclExclMerge() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/elvisExclExclMerge.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("elvisExclExclPlatform.kt")
      public void testElvisExclExclPlatform() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/elvisExclExclPlatform.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("elvisExprNotNull.kt")
      public void testElvisExprNotNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/elvisExprNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("elvisNothingRHS.kt")
      public void testElvisNothingRHS() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/elvisNothingRHS.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("elvisRHS.kt")
      public void testElvisRHS() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/elvisRHS.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumEntryMembers_after.kt")
      public void testEnumEntryMembers_after() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/enumEntryMembers_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumEntryMembers_before.kt")
      public void testEnumEntryMembers_before() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/enumEntryMembers_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("equalitySmartcast.kt")
      public void testEqualitySmartcast() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/equalitySmartcast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("equals.kt")
      public void testEquals() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/equals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("exclUnderAnd.kt")
      public void testExclUnderAnd() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/exclUnderAnd.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("explicitDefaultGetter.kt")
      public void testExplicitDefaultGetter() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/explicitDefaultGetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extensionSafeCall.kt")
      public void testExtensionSafeCall() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/extensionSafeCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fakeSmartCastOnEquality.kt")
      public void testFakeSmartCastOnEquality() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/fakeSmartCastOnEquality.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("falseReceiverSmartCast.kt")
      public void testFalseReceiverSmartCast() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/falseReceiverSmartCast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("falseUnnecessaryCall.kt")
      public void testFalseUnnecessaryCall() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/falseUnnecessaryCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fieldExclExcl.kt")
      public void testFieldExclExcl() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/fieldExclExcl.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fieldInGetter.kt")
      public void testFieldInGetter() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/fieldInGetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fieldPlus.kt")
      public void testFieldPlus() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/fieldPlus.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericIntersection.kt")
      public void testGenericIntersection() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/genericIntersection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericSet.kt")
      public void testGenericSet() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/genericSet.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifCascadeExprNotNull.kt")
      public void testIfCascadeExprNotNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/ifCascadeExprNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifExprInConditionNonNull.kt")
      public void testIfExprInConditionNonNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/ifExprInConditionNonNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifExprInWhenSubjectNonNull.kt")
      public void testIfExprInWhenSubjectNonNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/ifExprInWhenSubjectNonNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifExprNonNull.kt")
      public void testIfExprNonNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/ifExprNonNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifWhenExprNonNull.kt")
      public void testIfWhenExprNonNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/ifWhenExprNonNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitReceiver.kt")
      public void testImplicitReceiver() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/implicitReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitReceiverAcrossFunctions.kt")
      public void testImplicitReceiverAcrossFunctions() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/implicitReceiverAcrossFunctions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitThisOnRefInLambdaInSmartcast.kt")
      public void testImplicitThisOnRefInLambdaInSmartcast() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/implicitThisOnRefInLambdaInSmartcast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitThisOrLocalVar.kt")
      public void testImplicitThisOrLocalVar() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/implicitThisOrLocalVar.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitToGrandSon.kt")
      public void testImplicitToGrandSon() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/implicitToGrandSon.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incDecToNull.kt")
      public void testIncDecToNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/incDecToNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incrementAfterAssignment.kt")
      public void testIncrementAfterAssignment() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/incrementAfterAssignment.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10232.kt")
      public void testKt10232() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt10232.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10444.kt")
      public void testKt10444() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt10444.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10483.kt")
      public void testKt10483() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt10483.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1461.kt")
      public void testKt1461() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt1461.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2422.kt")
      public void testKt2422() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt2422.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt27221.kt")
      public void testKt27221() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt27221.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt27221_2.kt")
      public void testKt27221_2() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt27221_2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt27221_irrelevantClasses.kt")
      public void testKt27221_irrelevantClasses() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt27221_irrelevantClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2865.kt")
      public void testKt2865() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt2865.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt30826.kt")
      public void testKt30826() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt30826.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt30927.kt")
      public void testKt30927() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt30927.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3224.kt")
      public void testKt3224() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt3224.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32358_1.kt")
      public void testKt32358_1() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt32358_1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32358_2.kt")
      public void testKt32358_2() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt32358_2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32358_3.kt")
      public void testKt32358_3() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt32358_3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3244.kt")
      public void testKt3244() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt3244.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3572.kt")
      public void testKt3572() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt3572.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3711.kt")
      public void testKt3711() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt3711.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3899.kt")
      public void testKt3899() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt3899.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3993.kt")
      public void testKt3993() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt3993.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt45814.kt")
      public void testKt45814() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt45814.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt51460.kt")
      public void testKt51460() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt51460.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt5427.kt")
      public void testKt5427() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt5427.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt5455.kt")
      public void testKt5455() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt5455.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt6819.kt")
      public void testKt6819() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt6819.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt7561.kt")
      public void testKt7561() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt7561.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaAndArgument.kt")
      public void testLambdaAndArgument() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaAndArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaAndArgumentFun.kt")
      public void testLambdaAndArgumentFun() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaAndArgumentFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaArgumentNoSubstitutedReturn.kt")
      public void testLambdaArgumentNoSubstitutedReturn() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentNoSubstitutedReturn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaArgumentWithBoundWithoutType.kt")
      public void testLambdaArgumentWithBoundWithoutType() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithBoundWithoutType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaArgumentWithExpectedGenericType.kt")
      public void testLambdaArgumentWithExpectedGenericType() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithExpectedGenericType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaArgumentWithoutType.kt")
      public void testLambdaArgumentWithoutType() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithoutType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaArgumentWithoutTypeIf.kt")
      public void testLambdaArgumentWithoutTypeIf() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithoutTypeIf.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaArgumentWithoutTypeIfMerge.kt")
      public void testLambdaArgumentWithoutTypeIfMerge() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithoutTypeIfMerge.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaArgumentWithoutTypeWhen.kt")
      public void testLambdaArgumentWithoutTypeWhen() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithoutTypeWhen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaCall.kt")
      public void testLambdaCall() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaCallAnnotated.kt")
      public void testLambdaCallAnnotated() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaCallAnnotated.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaDeclaresAndModifies.kt")
      public void testLambdaDeclaresAndModifies() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaDeclaresAndModifies.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaDeclaresAndModifiesInLoop.kt")
      public void testLambdaDeclaresAndModifiesInLoop() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaDeclaresAndModifiesInLoop.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaDeclaresAndModifiesInSecondary.kt")
      public void testLambdaDeclaresAndModifiesInSecondary() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaDeclaresAndModifiesInSecondary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaDeclaresAndModifiesWithDirectEq.kt")
      public void testLambdaDeclaresAndModifiesWithDirectEq() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaDeclaresAndModifiesWithDirectEq.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaUsesOwnerModifies.kt")
      public void testLambdaUsesOwnerModifies() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaUsesOwnerModifies.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localClassChanges.kt")
      public void testLocalClassChanges() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/localClassChanges.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localDelegatedPropertyAfter.kt")
      public void testLocalDelegatedPropertyAfter() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/localDelegatedPropertyAfter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localDelegatedPropertyBefore.kt")
      public void testLocalDelegatedPropertyBefore() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/localDelegatedPropertyBefore.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localFunBetween.kt")
      public void testLocalFunBetween() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/localFunBetween.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localFunChanges.kt")
      public void testLocalFunChanges() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/localFunChanges.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localObjectChanges.kt")
      public void testLocalObjectChanges() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/localObjectChanges.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multipleResolvedCalls.kt")
      public void testMultipleResolvedCalls() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/multipleResolvedCalls.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noErrorCheckForPackageLevelVal.kt")
      public void testNoErrorCheckForPackageLevelVal() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/noErrorCheckForPackageLevelVal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noSmartcastForNonFinalMembersFromJava.kt")
      public void testNoSmartcastForNonFinalMembersFromJava() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/noSmartcastForNonFinalMembersFromJava.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noUnnecessarySmartCastForReceiver.kt")
      public void testNoUnnecessarySmartCastForReceiver() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/noUnnecessarySmartCastForReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notNullorNotNull.kt")
      public void testNotNullorNotNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/notNullorNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NullableFunctionTypeAsMemberMutableProperty.kt")
      public void testNullableFunctionTypeAsMemberMutableProperty() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/NullableFunctionTypeAsMemberMutableProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NullableFunctionTypeAsMemberMutablePropertyFromConstructor.kt")
      public void testNullableFunctionTypeAsMemberMutablePropertyFromConstructor() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/NullableFunctionTypeAsMemberMutablePropertyFromConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableLambda.kt")
      public void testNullableLambda() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/nullableLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("openInSealed.kt")
      public void testOpenInSealed() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/openInSealed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ownerDeclaresBothModifies.kt")
      public void testOwnerDeclaresBothModifies() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/ownerDeclaresBothModifies.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyAsCondition.kt")
      public void testPropertyAsCondition() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/propertyAsCondition.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyToNotNull.kt")
      public void testPropertyToNotNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/propertyToNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("safeAs.kt")
      public void testSafeAs() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/safeAs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("savedSmartcastResult.kt")
      public void testSavedSmartcastResult() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/savedSmartcastResult.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("severalSmartCastsOnReified.kt")
      public void testSeveralSmartCastsOnReified() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/severalSmartCastsOnReified.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("shortIfExprNotNull.kt")
      public void testShortIfExprNotNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/shortIfExprNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastAndArgumentApproximation.kt")
      public void testSmartCastAndArgumentApproximation() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastAndArgumentApproximation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastOnAlienPropertyFromInvisibleClass.kt")
      public void testSmartCastOnAlienPropertyFromInvisibleClass() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastOnAlienPropertyFromInvisibleClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastOnAlienPropertyFromInvisibleClassForbidden.kt")
      public void testSmartCastOnAlienPropertyFromInvisibleClassForbidden() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastOnAlienPropertyFromInvisibleClassForbidden.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastOnElvis.kt")
      public void testSmartCastOnElvis() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastOnElvis.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastOnIf.kt")
      public void testSmartCastOnIf() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastOnIf.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastOnLastExpressionOfLambdaAfterNothing.kt")
      public void testSmartCastOnLastExpressionOfLambdaAfterNothing() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastOnLastExpressionOfLambdaAfterNothing.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastOnWhen.kt")
      public void testSmartCastOnWhen() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastOnWhen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastWithOrFalse.kt")
      public void testSmartCastWithOrFalse() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastWithOrFalse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartcastBetweenClassAndTypeParameter.kt")
      public void testSmartcastBetweenClassAndTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartcastBetweenClassAndTypeParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartcastInFriendModule.kt")
      public void testSmartcastInFriendModule() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartcastInFriendModule.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartcastOnSameFieldOfDifferentInstances.kt")
      public void testSmartcastOnSameFieldOfDifferentInstances() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartcastOnSameFieldOfDifferentInstances.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartcastToAliasedFunctionalType.kt")
      public void testSmartcastToAliasedFunctionalType() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartcastToAliasedFunctionalType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartcastToInvisibleType_java.kt")
      public void testSmartcastToInvisibleType_java() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartcastToInvisibleType_java.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartcastToInvisibleType_kotlin.kt")
      public void testSmartcastToInvisibleType_kotlin() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartcastToInvisibleType_kotlin.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartcastToNothingAfterCheckingForNull.kt")
      public void testSmartcastToNothingAfterCheckingForNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartcastToNothingAfterCheckingForNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartcastToStarProjection.kt")
      public void testSmartcastToStarProjection() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartcastToStarProjection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("syntheticAccessorOnSmartcastedReceiver.kt")
      public void testSyntheticAccessorOnSmartcastedReceiver() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/syntheticAccessorOnSmartcastedReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("thisWithLabel.kt")
      public void testThisWithLabel() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/thisWithLabel.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("thisWithLabelAsReceiverPart.kt")
      public void testThisWithLabelAsReceiverPart() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/thisWithLabelAsReceiverPart.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("threeImplicitReceivers.kt")
      public void testThreeImplicitReceivers() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/threeImplicitReceivers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("throwInTry.kt")
      public void testThrowInTry() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/throwInTry.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("toInvisible.kt")
      public void testToInvisible() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/toInvisible.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("twoImplicitReceivers.kt")
      public void testTwoImplicitReceivers() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/twoImplicitReceivers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeDegradation.kt")
      public void testTypeDegradation() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/typeDegradation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeInComparison.kt")
      public void testTypeInComparison() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/typeInComparison.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParameterWithBounds.kt")
      public void testTypeParameterWithBounds() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/typeParameterWithBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unstableToStable.kt")
      public void testUnstableToStable() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/unstableToStable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unstableToStableTypes.kt")
      public void testUnstableToStableTypes() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/unstableToStableTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varChangedInInitializer.kt")
      public void testVarChangedInInitializer() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varChangedInInitializer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varChangedInLocalInitializer.kt")
      public void testVarChangedInLocalInitializer() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varChangedInLocalInitializer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varInAccessor.kt")
      public void testVarInAccessor() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varInAccessor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varInInitNoPrimary.kt")
      public void testVarInInitNoPrimary() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varInInitNoPrimary.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varInInitializer.kt")
      public void testVarInInitializer() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varInInitializer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varInSecondaryConstructor.kt")
      public void testVarInSecondaryConstructor() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varInSecondaryConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varInsideLocalFun.kt")
      public void testVarInsideLocalFun() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varInsideLocalFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenExprNonNull.kt")
      public void testWhenExprNonNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/whenExprNonNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenIfExprNonNull.kt")
      public void testWhenIfExprNonNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/whenIfExprNonNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenSubjectImpossible.kt")
      public void testWhenSubjectImpossible() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/whenSubjectImpossible.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenSubjectImpossibleJava.kt")
      public void testWhenSubjectImpossibleJava() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/whenSubjectImpossibleJava.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/castchecks")
      @TestDataPath("$PROJECT_ROOT")
      public class Castchecks {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCastchecks() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/castchecks"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("basicOn.kt")
        public void testBasicOn() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/basicOn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("castInTryWithCatch.kt")
        public void testCastInTryWithCatch() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/castInTryWithCatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("castInTryWithJump.kt")
        public void testCastInTryWithJump() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/castInTryWithJump.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("castInTryWithoutCatch.kt")
        public void testCastInTryWithoutCatch() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/castInTryWithoutCatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("impossible.kt")
        public void testImpossible() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/impossible.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideCall.kt")
        public void testInsideCall() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/insideCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt64645.kt")
        public void testKt64645() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/kt64645.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCastOfNullableExpressionWithExpectedType.kt")
        public void testSmartCastOfNullableExpressionWithExpectedType() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/smartCastOfNullableExpressionWithExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("variables.kt")
        public void testVariables() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/variables.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/elvis")
      @TestDataPath("$PROJECT_ROOT")
      public class Elvis {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInElvis() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/elvis"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("basicOff.kt")
        public void testBasicOff() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/elvis/basicOff.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("basicOn.kt")
        public void testBasicOn() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/elvis/basicOn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("impossible.kt")
        public void testImpossible() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/elvis/impossible.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/inference")
      @TestDataPath("$PROJECT_ROOT")
      public class Inference {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInference() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/inference"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dependentOnPrevArg.kt")
        public void testDependentOnPrevArg() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/dependentOnPrevArg.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intersectionTypes.kt")
        public void testIntersectionTypes() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/intersectionTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt1275.kt")
        public void testKt1275() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt1275.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt1355.kt")
        public void testKt1355() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt1355.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt25432.kt")
        public void testKt25432() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt25432.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2746.kt")
        public void testKt2746() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt2746.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt2851.kt")
        public void testKt2851() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt2851.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt29767.kt")
        public void testKt29767() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt29767.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt39010.kt")
        public void testKt39010() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt39010.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt39010_2.kt")
        public void testKt39010_2() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt39010_2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt4009.kt")
        public void testKt4009() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt4009.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt4403.kt")
        public void testKt4403() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt4403.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt4415.kt")
        public void testKt4415() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt4415.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt6242.kt")
        public void testKt6242() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt6242.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCastOnReceiver.kt")
        public void testSmartCastOnReceiver() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/smartCastOnReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("stabilityOfSmartcastsAgainstGenericFunctions.kt")
        public void testStabilityOfSmartcastsAgainstGenericFunctions() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/stabilityOfSmartcastsAgainstGenericFunctions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("syntheticPropertyOnUnstableSmartcast.kt")
        public void testSyntheticPropertyOnUnstableSmartcast() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/syntheticPropertyOnUnstableSmartcast.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unneededUnstableSmartcast.kt")
        public void testUnneededUnstableSmartcast() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/unneededUnstableSmartcast.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/intersectionScope")
      @TestDataPath("$PROJECT_ROOT")
      public class IntersectionScope {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInIntersectionScope() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/intersectionScope"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedSpecificity.kt")
        public void testCapturedSpecificity() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/capturedSpecificity.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conflictTypeParameters.kt")
        public void testConflictTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/conflictTypeParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conflictingReturnType.kt")
        public void testConflictingReturnType() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/conflictingReturnType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibleTypes.kt")
        public void testFlexibleTypes() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/flexibleTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intersectReturnType.kt")
        public void testIntersectReturnType() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/intersectReturnType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("moreSpecificSetter.kt")
        public void testMoreSpecificSetter() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/moreSpecificSetter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("moreSpecificVisibility.kt")
        public void testMoreSpecificVisibility() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/moreSpecificVisibility.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("mostSpecific.kt")
        public void testMostSpecific() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/mostSpecific.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("mostSpecificIrrelevant.kt")
        public void testMostSpecificIrrelevant() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/mostSpecificIrrelevant.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("properties.kt")
        public void testProperties() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/properties.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertiesConflict.kt")
        public void testPropertiesConflict() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/propertiesConflict.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("refineReturnType.kt")
        public void testRefineReturnType() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/refineReturnType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/simple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unstableSmartCast.kt")
        public void testUnstableSmartCast() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/unstableSmartCast.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("validTypeParameters.kt")
        public void testValidTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/validTypeParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("validTypeParametersNoSmartCast.kt")
        public void testValidTypeParametersNoSmartCast() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/validTypeParametersNoSmartCast.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts")
      @TestDataPath("$PROJECT_ROOT")
      public class LambdasWithContracts {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInLambdasWithContracts() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaWithCallInPlace.kt")
        public void testLambdaWithCallInPlace() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts/lambdaWithCallInPlace.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaWithCallInPlaceAndBounds.kt")
        public void testLambdaWithCallInPlaceAndBounds() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts/lambdaWithCallInPlaceAndBounds.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaWithCallInPlaceAndDelegate.kt")
        public void testLambdaWithCallInPlaceAndDelegate() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts/lambdaWithCallInPlaceAndDelegate.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaWithCallInPlaceAndOperators.kt")
        public void testLambdaWithCallInPlaceAndOperators() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts/lambdaWithCallInPlaceAndOperators.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaWithImpliesContract.kt")
        public void testLambdaWithImpliesContract() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts/lambdaWithImpliesContract.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/loops")
      @TestDataPath("$PROJECT_ROOT")
      public class Loops {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInLoops() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/loops"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("assignElvisIfBreakInsideWhileTrue.kt")
        public void testAssignElvisIfBreakInsideWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/assignElvisIfBreakInsideWhileTrue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("assignWhenInsideWhileTrue.kt")
        public void testAssignWhenInsideWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/assignWhenInsideWhileTrue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callBreakBetweenInsideDoWhile.kt")
        public void testCallBreakBetweenInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakBetweenInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callBreakFirstInsideDoWhile.kt")
        public void testCallBreakFirstInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakFirstInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callBreakInsideDoWhile.kt")
        public void testCallBreakInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callBreakSecondInsideDoWhile.kt")
        public void testCallBreakSecondInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakSecondInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callBreakThirdInsideDoWhile.kt")
        public void testCallBreakThirdInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakThirdInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhile.kt")
        public void testDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhileBreak.kt")
        public void testDoWhileBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhileContinue.kt")
        public void testDoWhileContinue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileContinue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhileEarlyBreak.kt")
        public void testDoWhileEarlyBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileEarlyBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhileEarlyContinue.kt")
        public void testDoWhileEarlyContinue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileEarlyContinue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhileInCondition.kt")
        public void testDoWhileInCondition() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileInCondition.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhileInConditionWithBreak.kt")
        public void testDoWhileInConditionWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileInConditionWithBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhileLiteral.kt")
        public void testDoWhileLiteral() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileLiteral.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhileNotNullBreak.kt")
        public void testDoWhileNotNullBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileNotNullBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhileNull.kt")
        public void testDoWhileNull() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileNull.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhileNullWithBreak.kt")
        public void testDoWhileNullWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileNullWithBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("elvisBreakInsideDoWhile.kt")
        public void testElvisBreakInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/elvisBreakInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("elvisIfBreakInsideWhileTrue.kt")
        public void testElvisIfBreakInsideWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/elvisIfBreakInsideWhileTrue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("elvisInsideDoWhile.kt")
        public void testElvisInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/elvisInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("elvisLeftBreakInsideWhileTrue.kt")
        public void testElvisLeftBreakInsideWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/elvisLeftBreakInsideWhileTrue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifBlockInsideDoWhile.kt")
        public void testIfBlockInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifBlockInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifBreakAssignInsideDoWhile.kt")
        public void testIfBreakAssignInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifBreakAssignInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifBreakAssignInsideWhileTrue.kt")
        public void testIfBreakAssignInsideWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifBreakAssignInsideWhileTrue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifBreakExprInsideWhileTrue.kt")
        public void testIfBreakExprInsideWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifBreakExprInsideWhileTrue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifElseBlockInsideDoWhile.kt")
        public void testIfElseBlockInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifElseBlockInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifInsideDoWhile.kt")
        public void testIfInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("leftElvisBreakInsideWhileTrue.kt")
        public void testLeftElvisBreakInsideWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/leftElvisBreakInsideWhileTrue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedDoWhile.kt")
        public void testNestedDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedDoWhileWithLongContinue.kt")
        public void testNestedDoWhileWithLongContinue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedDoWhileWithLongContinue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedLoops.kt")
        public void testNestedLoops() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoops.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedLoopsShort.kt")
        public void testNestedLoopsShort() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsShort.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedLoopsWithBreak.kt")
        public void testNestedLoopsWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsWithBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedLoopsWithLongBreak.kt")
        public void testNestedLoopsWithLongBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsWithLongBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedLoopsWithLongContinue.kt")
        public void testNestedLoopsWithLongContinue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsWithLongContinue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("plusAssignWhenInsideDoWhile.kt")
        public void testPlusAssignWhenInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/plusAssignWhenInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("safeCallBreakInsideDoWhile.kt")
        public void testSafeCallBreakInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/safeCallBreakInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("safeCallInsideDoWhile.kt")
        public void testSafeCallInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/safeCallInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useInsideDoWhile.kt")
        public void testUseInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/useInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whenInsideWhileTrue.kt")
        public void testWhenInsideWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whenInsideWhileTrue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whenReturnInsideWhileTrue.kt")
        public void testWhenReturnInsideWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whenReturnInsideWhileTrue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileInCondition.kt")
        public void testWhileInCondition() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileInCondition.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileInConditionWithBreak.kt")
        public void testWhileInConditionWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileInConditionWithBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileNull.kt")
        public void testWhileNull() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileNull.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileNullAssignToSomething.kt")
        public void testWhileNullAssignToSomething() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileNullAssignToSomething.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileNullWithBreak.kt")
        public void testWhileNullWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileNullWithBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileSimple.kt")
        public void testWhileSimple() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileSimple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileTrivial.kt")
        public void testWhileTrivial() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrivial.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileTrue.kt")
        public void testWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileTrueBreakReturn.kt")
        public void testWhileTrueBreakReturn() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrueBreakReturn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileTrueEarlyBreak.kt")
        public void testWhileTrueEarlyBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrueEarlyBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileTrueReturn.kt")
        public void testWhileTrueReturn() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrueReturn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("WhileTrueWithBreakInIfCondition.kt")
        public void testWhileTrueWithBreakInIfCondition() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/WhileTrueWithBreakInIfCondition.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileWithAssertInConditionAndBreak.kt")
        public void testWhileWithAssertInConditionAndBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileWithAssertInConditionAndBreak.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/objectLiterals")
      @TestDataPath("$PROJECT_ROOT")
      public class ObjectLiterals {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInObjectLiterals() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/objectLiterals"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("assignment.kt")
        public void testAssignment() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/assignment.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("base.kt")
        public void testBase() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/base.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("captured.kt")
        public void testCaptured() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/captured.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("exclexcl.kt")
        public void testExclexcl() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/exclexcl.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("exclexclArgument.kt")
        public void testExclexclArgument() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/exclexclArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("exclexclTwoArgument.kt")
        public void testExclexclTwoArgument() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/exclexclTwoArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt7110.kt")
        public void testKt7110() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/kt7110.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("receiver.kt")
        public void testReceiver() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/receiver.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals")
      @TestDataPath("$PROJECT_ROOT")
      public class PublicVals {
        @RepeatedTest(value = 5)
        @TestMetadata("accessThrowOtherModule.kt")
        public void testAccessThrowOtherModule() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/accessThrowOtherModule.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInPublicVals() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/publicVals"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("customGetter.kt")
        public void testCustomGetter() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/customGetter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("delegate.kt")
        public void testDelegate() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/delegate.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt4409.kt")
        public void testKt4409() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/kt4409.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt5502.kt")
        public void testKt5502() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/kt5502.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("open.kt")
        public void testOpen() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/open.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("otherModule.kt")
        public void testOtherModule() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/otherModule.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("otherModuleInheritance.kt")
        public void testOtherModuleInheritance() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/otherModuleInheritance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("otherModuleInheritance_after.kt")
        public void testOtherModuleInheritance_after() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/otherModuleInheritance_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("protected.kt")
        public void testProtected() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/protected.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/simple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("var.kt")
        public void testVar() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/var.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls")
      @TestDataPath("$PROJECT_ROOT")
      public class Safecalls {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSafecalls() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/safecalls"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("anotherVal.kt")
        public void testAnotherVal() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/anotherVal.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("argument.kt")
        public void testArgument() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/argument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("chainAndUse.kt")
        public void testChainAndUse() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/chainAndUse.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("chainInChain.kt")
        public void testChainInChain() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/chainInChain.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("chainMixedUnsafe.kt")
        public void testChainMixedUnsafe() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/chainMixedUnsafe.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("childProperty.kt")
        public void testChildProperty() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/childProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doubleCall.kt")
        public void testDoubleCall() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/doubleCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extension.kt")
        public void testExtension() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/extension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionCall.kt")
        public void testExtensionCall() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/extensionCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("falseArgument.kt")
        public void testFalseArgument() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("falseChain.kt")
        public void testFalseChain() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseChain.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("falseExtension.kt")
        public void testFalseExtension() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("falseSecondArgument.kt")
        public void testFalseSecondArgument() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseSecondArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("innerReceiver.kt")
        public void testInnerReceiver() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/innerReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideCall.kt")
        public void testInsideCall() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/insideCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("insideIfExpr.kt")
        public void testInsideIfExpr() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/insideIfExpr.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("longChain.kt")
        public void testLongChain() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/longChain.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nullableReceiver.kt")
        public void testNullableReceiver() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/nullableReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nullableReceiverInLongChain.kt")
        public void testNullableReceiverInLongChain() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/nullableReceiverInLongChain.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nullableReceiverWithExclExcl.kt")
        public void testNullableReceiverWithExclExcl() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/nullableReceiverWithExclExcl.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nullableReceiverWithFlexible.kt")
        public void testNullableReceiverWithFlexible() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/nullableReceiverWithFlexible.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("property.kt")
        public void testProperty() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/property.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyChain.kt")
        public void testPropertyChain() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/propertyChain.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("receiver.kt")
        public void testReceiver() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/receiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("receiverAndChain.kt")
        public void testReceiverAndChain() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/receiverAndChain.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("receiverAndChainFalse.kt")
        public void testReceiverAndChainFalse() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/receiverAndChainFalse.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("safeCallIsAlwaysNullable.kt")
        public void testSafeCallIsAlwaysNullable() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/safeCallIsAlwaysNullable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/simple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleNullableReceiver.kt")
        public void testSimpleNullableReceiver() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/simpleNullableReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("twoArgs.kt")
        public void testTwoArgs() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/twoArgs.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/variables")
      @TestDataPath("$PROJECT_ROOT")
      public class Variables {
        @RepeatedTest(value = 5)
        @TestMetadata("accessorAndFunction.kt")
        public void testAccessorAndFunction() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/accessorAndFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("aliasing.kt")
        public void testAliasing() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/aliasing.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInVariables() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/variables"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("assignment.kt")
        public void testAssignment() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/assignment.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("assignmentConversion.kt")
        public void testAssignmentConversion() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/assignmentConversion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedByAtLeastOnce.kt")
        public void testCapturedByAtLeastOnce() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/capturedByAtLeastOnce.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedByMultipleLambdas.kt")
        public void testCapturedByMultipleLambdas() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/capturedByMultipleLambdas.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedByNested.kt")
        public void testCapturedByNested() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/capturedByNested.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedLoopVariable.kt")
        public void testCapturedLoopVariable() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/capturedLoopVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedWithControlJumps.kt")
        public void testCapturedWithControlJumps() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/capturedWithControlJumps.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhileWithMiddleBreak.kt")
        public void testDoWhileWithMiddleBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/doWhileWithMiddleBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifElseBlockInsideDoWhile.kt")
        public void testIfElseBlockInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifElseBlockInsideDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifElseBlockInsideDoWhileWithBreak.kt")
        public void testIfElseBlockInsideDoWhileWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifElseBlockInsideDoWhileWithBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifNullAssignment.kt")
        public void testIfNullAssignment() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifNullAssignment.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifVarIs.kt")
        public void testIfVarIs() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifVarIs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifVarIsAnd.kt")
        public void testIfVarIsAnd() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifVarIsAnd.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifVarIsChanged.kt")
        public void testIfVarIsChanged() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifVarIsChanged.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inPropertySam.kt")
        public void testInPropertySam() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/inPropertySam.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("infix.kt")
        public void testInfix() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/infix.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("initialization.kt")
        public void testInitialization() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/initialization.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt7599.kt")
        public void testKt7599() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/kt7599.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaBetweenArguments.kt")
        public void testLambdaBetweenArguments() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/lambdaBetweenArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localDelegatedProperty.kt")
        public void testLocalDelegatedProperty() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/localDelegatedProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("objectMembers.kt")
        public void testObjectMembers() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/objectMembers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("property.kt")
        public void testProperty() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/property.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyFromDependsOnModule.kt")
        public void testPropertyFromDependsOnModule() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertyFromDependsOnModule.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyNotNeeded.kt")
        public void testPropertyNotNeeded() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertyNotNeeded.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyOfLocalClass.kt")
        public void testPropertyOfLocalClass() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertyOfLocalClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertySubtype.kt")
        public void testPropertySubtype() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertySubtype.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertySubtypeInMember.kt")
        public void testPropertySubtypeInMember() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertySubtypeInMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertySubtypeInMemberCheck.kt")
        public void testPropertySubtypeInMemberCheck() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertySubtypeInMemberCheck.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reassignedDependency.kt")
        public void testReassignedDependency() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/reassignedDependency.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reassignedDependency_unstable.kt")
        public void testReassignedDependency_unstable() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/reassignedDependency_unstable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reassignedInRhs.kt")
        public void testReassignedInRhs() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/reassignedInRhs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("staticJavaFieldFromOtherModule.kt")
        public void testStaticJavaFieldFromOtherModule() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/staticJavaFieldFromOtherModule.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("staticJavaFieldFromSameModule.kt")
        public void testStaticJavaFieldFromSameModule() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/staticJavaFieldFromSameModule.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varAsUse.kt")
        public void testVarAsUse() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/varAsUse.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varChangedInLoop.kt")
        public void testVarChangedInLoop() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/varChangedInLoop.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varNotChangedInLoop.kt")
        public void testVarNotChangedInLoop() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/varNotChangedInLoop.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileTrue.kt")
        public void testWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/whileTrue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileWithBreak.kt")
        public void testWhileWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/whileWithBreak.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull")
      @TestDataPath("$PROJECT_ROOT")
      public class Varnotnull {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInVarnotnull() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/varnotnull"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("assignNestedWhile.kt")
        public void testAssignNestedWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/assignNestedWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("assignment.kt")
        public void testAssignment() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/assignment.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("boundInitializer.kt")
        public void testBoundInitializer() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/boundInitializer.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("boundInitializerWrong.kt")
        public void testBoundInitializerWrong() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/boundInitializerWrong.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedInClosureModifiedBefore.kt")
        public void testCapturedInClosureModifiedBefore() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/capturedInClosureModifiedBefore.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturedInlineModifiedBefore.kt")
        public void testCapturedInlineModifiedBefore() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/capturedInlineModifiedBefore.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhileWithBreak.kt")
        public void testDoWhileWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/doWhileWithBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doWhileWithMiddleBreak.kt")
        public void testDoWhileWithMiddleBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/doWhileWithMiddleBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("equalityAndIdentity.kt")
        public void testEqualityAndIdentity() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/equalityAndIdentity.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("forEach.kt")
        public void testForEach() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/forEach.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("forEachWithBreak.kt")
        public void testForEachWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/forEachWithBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("forEachWithContinue.kt")
        public void testForEachWithContinue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/forEachWithContinue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifVarNotNull.kt")
        public void testIfVarNotNull() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNotNull.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifVarNotNullAnd.kt")
        public void testIfVarNotNullAnd() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNotNullAnd.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifVarNullElse.kt")
        public void testIfVarNullElse() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNullElse.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ifVarNullReturn.kt")
        public void testIfVarNullReturn() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNullReturn.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inference.kt")
        public void testInference() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/inference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("infiniteWhileWithBreak.kt")
        public void testInfiniteWhileWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/infiniteWhileWithBreak.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("infix.kt")
        public void testInfix() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/infix.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("initInTryReturnInCatch.kt")
        public void testInitInTryReturnInCatch() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/initInTryReturnInCatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("initialization.kt")
        public void testInitialization() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/initialization.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("iterations.kt")
        public void testIterations() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/iterations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("leakingLambdaInCalledInPlace.kt")
        public void testLeakingLambdaInCalledInPlace() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/leakingLambdaInCalledInPlace.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedDoWhile.kt")
        public void testNestedDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/nestedDoWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedLoops.kt")
        public void testNestedLoops() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/nestedLoops.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedWhile.kt")
        public void testNestedWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/nestedWhile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("plusplusMinusminus.kt")
        public void testPlusplusMinusminus() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/plusplusMinusminus.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("postfixNotnullClassIncrement.kt")
        public void testPostfixNotnullClassIncrement() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/postfixNotnullClassIncrement.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("postfixNullableClassIncrement.kt")
        public void testPostfixNullableClassIncrement() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/postfixNullableClassIncrement.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("postfixNullableIncrement.kt")
        public void testPostfixNullableIncrement() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/postfixNullableIncrement.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("prefixNotnullClassIncrement.kt")
        public void testPrefixNotnullClassIncrement() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/prefixNotnullClassIncrement.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("prefixNullableClassIncrement.kt")
        public void testPrefixNullableClassIncrement() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/prefixNullableClassIncrement.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("prefixNullableIncrement.kt")
        public void testPrefixNullableIncrement() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/prefixNullableIncrement.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("setNotNullInTry.kt")
        public void testSetNotNullInTry() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/setNotNullInTry.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("setNullInTry.kt")
        public void testSetNullInTry() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/setNullInTry.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("setNullInTryFinally.kt")
        public void testSetNullInTryFinally() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/setNullInTryFinally.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("setSameInTry.kt")
        public void testSetSameInTry() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/setSameInTry.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("toFlexibleType.kt")
        public void testToFlexibleType() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/toFlexibleType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unnecessary.kt")
        public void testUnnecessary() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/unnecessary.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unnecessaryWithBranch.kt")
        public void testUnnecessaryWithBranch() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/unnecessaryWithBranch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unnecessaryWithMap.kt")
        public void testUnnecessaryWithMap() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/unnecessaryWithMap.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varCapturedInClosure.kt")
        public void testVarCapturedInClosure() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCapturedInClosure.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varCapturedInInlineClosure.kt")
        public void testVarCapturedInInlineClosure() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCapturedInInlineClosure.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varCapturedInSafeClosure.kt")
        public void testVarCapturedInSafeClosure() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCapturedInSafeClosure.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varChangedInLoop.kt")
        public void testVarChangedInLoop() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varChangedInLoop.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varCheck.kt")
        public void testVarCheck() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCheck.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varIntNull.kt")
        public void testVarIntNull() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varIntNull.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varNotChangedInLoop.kt")
        public void testVarNotChangedInLoop() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varNotChangedInLoop.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("varNull.kt")
        public void testVarNull() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varNull.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileTrue.kt")
        public void testWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileTrue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileTrueWithBracketSet.kt")
        public void testWhileTrueWithBracketSet() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileTrueWithBracketSet.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileTrueWithBrackets.kt")
        public void testWhileTrueWithBrackets() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileTrueWithBrackets.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("whileWithBreak.kt")
        public void testWhileWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileWithBreak.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/sourceCompatibility")
    @TestDataPath("$PROJECT_ROOT")
    public class SourceCompatibility {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSourceCompatibility() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/sourceCompatibility"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noBigFunctionTypes.kt")
      public void testNoBigFunctionTypes() {
        runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noBigFunctionTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noMultiplatformProjects.kt")
      public void testNoMultiplatformProjects() {
        runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noMultiplatformProjects.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion")
      @TestDataPath("$PROJECT_ROOT")
      public class ApiVersion {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInApiVersion() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotations.kt")
        public void testAnnotations() {
          runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/annotations.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classesAndConstructors.kt")
        public void testClassesAndConstructors() {
          runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/classesAndConstructors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overriddenMembers.kt")
        public void testOverriddenMembers() {
          runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/overriddenMembers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyAccessors.kt")
        public void testPropertyAccessors() {
          runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/propertyAccessors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleMembers.kt")
        public void testSimpleMembers() {
          runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/simpleMembers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sinceOldVersionIsOK.kt")
        public void testSinceOldVersionIsOK() {
          runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/sinceOldVersionIsOK.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typealiasesAsCompanionObjects.kt")
        public void testTypealiasesAsCompanionObjects() {
          runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesAsCompanionObjects.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typealiasesAsConstructors.kt")
        public void testTypealiasesAsConstructors() {
          runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesAsConstructors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typealiasesAsObjects.kt")
        public void testTypealiasesAsObjects() {
          runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesAsObjects.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typealiasesAsTypes.kt")
        public void testTypealiasesAsTypes() {
          runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesAsTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typealiasesOnImport.kt")
        public void testTypealiasesOnImport() {
          runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesOnImport.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/substitutions")
    @TestDataPath("$PROJECT_ROOT")
    public class Substitutions {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSubstitutions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/substitutions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1558-short.kt")
      public void testKt1558_short() {
        runTest("compiler/testData/diagnostics/tests/substitutions/kt1558-short.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4887.kt")
      public void testKt4887() {
        runTest("compiler/testData/diagnostics/tests/substitutions/kt4887.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("starProjections.kt")
      public void testStarProjections() {
        runTest("compiler/testData/diagnostics/tests/substitutions/starProjections.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("upperBoundsSubstitutionForOverloadResolutionWithAmbiguity.kt")
      public void testUpperBoundsSubstitutionForOverloadResolutionWithAmbiguity() {
        runTest("compiler/testData/diagnostics/tests/substitutions/upperBoundsSubstitutionForOverloadResolutionWithAmbiguity.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("upperBoundsSubstitutionForOverloadResolutionWithErrorTypes.kt")
      public void testUpperBoundsSubstitutionForOverloadResolutionWithErrorTypes() {
        runTest("compiler/testData/diagnostics/tests/substitutions/upperBoundsSubstitutionForOverloadResolutionWithErrorTypes.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/subtyping")
    @TestDataPath("$PROJECT_ROOT")
    public class Subtyping {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSubtyping() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/subtyping"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegatedConstructor.kt")
      public void testDelegatedConstructor() {
        runTest("compiler/testData/diagnostics/tests/subtyping/delegatedConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extFunctionTypeAsSuperType.kt")
      public void testExtFunctionTypeAsSuperType() {
        runTest("compiler/testData/diagnostics/tests/subtyping/extFunctionTypeAsSuperType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extFunctionTypeAsSuperTypeRestrictionLifted.kt")
      public void testExtFunctionTypeAsSuperTypeRestrictionLifted() {
        runTest("compiler/testData/diagnostics/tests/subtyping/extFunctionTypeAsSuperTypeRestrictionLifted.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("findClosestCorrespondingSupertype.kt")
      public void testFindClosestCorrespondingSupertype() {
        runTest("compiler/testData/diagnostics/tests/subtyping/findClosestCorrespondingSupertype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionTypeAsSuperType.kt")
      public void testFunctionTypeAsSuperType() {
        runTest("compiler/testData/diagnostics/tests/subtyping/functionTypeAsSuperType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invariantArgumentForTypeParameterWithMultipleBounds.kt")
      public void testInvariantArgumentForTypeParameterWithMultipleBounds() {
        runTest("compiler/testData/diagnostics/tests/subtyping/invariantArgumentForTypeParameterWithMultipleBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaAndKotlinSuperType.kt")
      public void testJavaAndKotlinSuperType() {
        runTest("compiler/testData/diagnostics/tests/subtyping/javaAndKotlinSuperType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kFunctionalCST.kt")
      public void testKFunctionalCST() {
        runTest("compiler/testData/diagnostics/tests/subtyping/kFunctionalCST.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2069.kt")
      public void testKt2069() {
        runTest("compiler/testData/diagnostics/tests/subtyping/kt2069.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2744.kt")
      public void testKt2744() {
        runTest("compiler/testData/diagnostics/tests/subtyping/kt2744.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt304.kt")
      public void testKt304() {
        runTest("compiler/testData/diagnostics/tests/subtyping/kt304.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3159.kt")
      public void testKt3159() {
        runTest("compiler/testData/diagnostics/tests/subtyping/kt3159.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt47148.kt")
      public void testKt47148() {
        runTest("compiler/testData/diagnostics/tests/subtyping/kt47148.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt-1457.kt")
      public void testKt_1457() {
        runTest("compiler/testData/diagnostics/tests/subtyping/kt-1457.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localAnonymousObjects.kt")
      public void testLocalAnonymousObjects() {
        runTest("compiler/testData/diagnostics/tests/subtyping/localAnonymousObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localClasses.kt")
      public void testLocalClasses() {
        runTest("compiler/testData/diagnostics/tests/subtyping/localClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("memberAnonymousObjects.kt")
      public void testMemberAnonymousObjects() {
        runTest("compiler/testData/diagnostics/tests/subtyping/memberAnonymousObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedIntoLocalClasses.kt")
      public void testNestedIntoLocalClasses() {
        runTest("compiler/testData/diagnostics/tests/subtyping/nestedIntoLocalClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedLocalClasses.kt")
      public void testNestedLocalClasses() {
        runTest("compiler/testData/diagnostics/tests/subtyping/nestedLocalClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendExtFunctionTypeAsSuperType.kt")
      public void testSuspendExtFunctionTypeAsSuperType() {
        runTest("compiler/testData/diagnostics/tests/subtyping/suspendExtFunctionTypeAsSuperType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendExtFunctionTypeAsSuperTypeRestrictionLifted.kt")
      public void testSuspendExtFunctionTypeAsSuperTypeRestrictionLifted() {
        runTest("compiler/testData/diagnostics/tests/subtyping/suspendExtFunctionTypeAsSuperTypeRestrictionLifted.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("topLevelAnonymousObjects.kt")
      public void testTopLevelAnonymousObjects() {
        runTest("compiler/testData/diagnostics/tests/subtyping/topLevelAnonymousObjects.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unresolvedSupertype.kt")
      public void testUnresolvedSupertype() {
        runTest("compiler/testData/diagnostics/tests/subtyping/unresolvedSupertype.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/suppress")
    @TestDataPath("$PROJECT_ROOT")
    public class Suppress {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSuppress() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/suppress"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings")
      @TestDataPath("$PROJECT_ROOT")
      public class AllWarnings {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInAllWarnings() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/suppress/allWarnings"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suppressWarningsOnAnonymousObjectInVariable.kt")
        public void testSuppressWarningsOnAnonymousObjectInVariable() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnAnonymousObjectInVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suppressWarningsOnClass.kt")
        public void testSuppressWarningsOnClass() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suppressWarningsOnClassObject.kt")
        public void testSuppressWarningsOnClassObject() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnClassObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suppressWarningsOnExpression.kt")
        public void testSuppressWarningsOnExpression() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnExpression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suppressWarningsOnFile.kt")
        public void testSuppressWarningsOnFile() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnFile.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suppressWarningsOnFunction.kt")
        public void testSuppressWarningsOnFunction() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suppressWarningsOnObject.kt")
        public void testSuppressWarningsOnObject() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suppressWarningsOnParameter.kt")
        public void testSuppressWarningsOnParameter() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suppressWarningsOnProperty.kt")
        public void testSuppressWarningsOnProperty() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suppressWarningsOnPropertyAccessor.kt")
        public void testSuppressWarningsOnPropertyAccessor() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnPropertyAccessor.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings")
      @TestDataPath("$PROJECT_ROOT")
      public class ManyWarnings {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInManyWarnings() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/suppress/manyWarnings"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("mixed.kt")
        public void testMixed() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/mixed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onClass.kt")
        public void testOnClass() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onClassObject.kt")
        public void testOnClassObject() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onClassObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onExpression.kt")
        public void testOnExpression() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onExpression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onFunction.kt")
        public void testOnFunction() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onObject.kt")
        public void testOnObject() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onParameter.kt")
        public void testOnParameter() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onProperty.kt")
        public void testOnProperty() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onPropertyAccessor.kt")
        public void testOnPropertyAccessor() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onPropertyAccessor.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning")
      @TestDataPath("$PROJECT_ROOT")
      public class OneWarning {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInOneWarning() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/suppress/oneWarning"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onBlockStatement.kt")
        public void testOnBlockStatement() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onBlockStatement.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onBlockStatementSameLine.kt")
        public void testOnBlockStatementSameLine() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onBlockStatementSameLine.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onClass.kt")
        public void testOnClass() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onClassObject.kt")
        public void testOnClassObject() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onClassObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onExpression.kt")
        public void testOnExpression() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onExpression.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onFunction.kt")
        public void testOnFunction() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onLocalVariable.kt")
        public void testOnLocalVariable() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onLocalVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onObject.kt")
        public void testOnObject() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onParameter.kt")
        public void testOnParameter() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onProperty.kt")
        public void testOnProperty() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onPropertyAccessor.kt")
        public void testOnPropertyAccessor() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onPropertyAccessor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onTypeParameter.kt")
        public void testOnTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onTypeParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("optInDiagnosticOnPropertyGetter.kt")
        public void testOptInDiagnosticOnPropertyGetter() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/optInDiagnosticOnPropertyGetter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suppressOnDeclarationItself.kt")
        public void testSuppressOnDeclarationItself() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/suppressOnDeclarationItself.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/suspendConversion")
    @TestDataPath("$PROJECT_ROOT")
    public class SuspendConversion {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSuspendConversion() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/suspendConversion"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basicSuspendConversion.kt")
      public void testBasicSuspendConversion() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/basicSuspendConversion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basicSuspendConversionForCallableReference.kt")
      public void testBasicSuspendConversionForCallableReference() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/basicSuspendConversionForCallableReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basicSuspendConversionGenerics.kt")
      public void testBasicSuspendConversionGenerics() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/basicSuspendConversionGenerics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("chainedFunSuspendConversionForSimpleExpression.kt")
      public void testChainedFunSuspendConversionForSimpleExpression() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/chainedFunSuspendConversionForSimpleExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitInvoke.kt")
      public void testImplicitInvoke() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/implicitInvoke.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitInvokeFromChildClass.kt")
      public void testImplicitInvokeFromChildClass() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/implicitInvokeFromChildClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitInvokeWithSpecificType.kt")
      public void testImplicitInvokeWithSpecificType() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/implicitInvokeWithSpecificType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inGenericArgument.kt")
      public void testInGenericArgument() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/inGenericArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overloadResolutionBySuspendModifier.kt")
      public void testOverloadResolutionBySuspendModifier() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/overloadResolutionBySuspendModifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("severalConversionsInOneCall.kt")
      public void testSeveralConversionsInOneCall() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/severalConversionsInOneCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendAndFunConversionInDisabledMode.kt")
      public void testSuspendAndFunConversionInDisabledMode() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendAndFunConversionInDisabledMode.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendAnonymousAsNonSuspend.kt")
      public void testSuspendAnonymousAsNonSuspend() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendAnonymousAsNonSuspend.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendCallFromAnonymousSuspend.kt")
      public void testSuspendCallFromAnonymousSuspend() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendCallFromAnonymousSuspend.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendConversionCompatibility.kt")
      public void testSuspendConversionCompatibility() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendConversionCompatibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendConversionCompatibilityInDisabledMode.kt")
      public void testSuspendConversionCompatibilityInDisabledMode() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendConversionCompatibilityInDisabledMode.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendConversionDisabled.kt")
      public void testSuspendConversionDisabled() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendConversionDisabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendConversionOnVarargElements.kt")
      public void testSuspendConversionOnVarargElements() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendConversionOnVarargElements.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendConversionWithFunInterfaces.kt")
      public void testSuspendConversionWithFunInterfaces() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendConversionWithFunInterfaces.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendConversionWithReferenceAdaptation.kt")
      public void testSuspendConversionWithReferenceAdaptation() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendConversionWithReferenceAdaptation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendFunctionExpectedTypeAndWhen.kt")
      public void testSuspendFunctionExpectedTypeAndWhen() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendFunctionExpectedTypeAndWhen.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/syntax")
    @TestDataPath("$PROJECT_ROOT")
    public class Syntax {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSyntax() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/syntax"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("complicatedLTGT.kt")
      public void testComplicatedLTGT() {
        runTest("compiler/testData/diagnostics/tests/syntax/complicatedLTGT.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("complicatedLTGTE.kt")
      public void testComplicatedLTGTE() {
        runTest("compiler/testData/diagnostics/tests/syntax/complicatedLTGTE.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incorrectLTGTFallback.kt")
      public void testIncorrectLTGTFallback() {
        runTest("compiler/testData/diagnostics/tests/syntax/incorrectLTGTFallback.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/syntheticExtensions")
    @TestDataPath("$PROJECT_ROOT")
    public class SyntheticExtensions {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSyntheticExtensions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/syntheticExtensions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties")
      @TestDataPath("$PROJECT_ROOT")
      public class JavaProperties {
        @RepeatedTest(value = 5)
        @TestMetadata("AbbreviationName.kt")
        public void testAbbreviationName() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/AbbreviationName.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInJavaProperties() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Bases.kt")
        public void testBases() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/Bases.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("CompiledClass.kt")
        public void testCompiledClass() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/CompiledClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Deprecated.kt")
        public void testDeprecated() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/Deprecated.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FalseGetters.kt")
        public void testFalseGetters() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/FalseGetters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FalseSetters.kt")
        public void testFalseSetters() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/FalseSetters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FromTwoBases.kt")
        public void testFromTwoBases() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/FromTwoBases.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FullySupportedSyntheticJavaPropertyReference.kt")
        public void testFullySupportedSyntheticJavaPropertyReference() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/FullySupportedSyntheticJavaPropertyReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("GenericClass.kt")
        public void testGenericClass() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/GenericClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("GetA.kt")
        public void testGetA() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/GetA.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Getter.kt")
        public void testGetter() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/Getter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("GetterAndSetter.kt")
        public void testGetterAndSetter() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/GetterAndSetter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ImplicitReceiver.kt")
        public void testImplicitReceiver() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/ImplicitReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("IsNaming.kt")
        public void testIsNaming() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/IsNaming.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("JavaOverridesKotlin.kt")
        public void testJavaOverridesKotlin() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/JavaOverridesKotlin.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("KotlinOverridesJava.kt")
        public void testKotlinOverridesJava() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("KotlinOverridesJava2.kt")
        public void testKotlinOverridesJava2() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("KotlinOverridesJava3.kt")
        public void testKotlinOverridesJava3() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("KotlinOverridesJava4.kt")
        public void testKotlinOverridesJava4() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava4.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("KotlinOverridesJava5.kt")
        public void testKotlinOverridesJava5() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava5.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonAsciiSecondChar.kt")
        public void testNonAsciiSecondChar() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/nonAsciiSecondChar.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonValidFirstChar.kt")
        public void testNonValidFirstChar() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/nonValidFirstChar.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("OnlyAscii.kt")
        public void testOnlyAscii() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/OnlyAscii.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("OnlyPublic.kt")
        public void testOnlyPublic() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/OnlyPublic.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("OverrideGetterOnly.kt")
        public void testOverrideGetterOnly() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/OverrideGetterOnly.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("OverrideOnlyGetterFromGenericJavaClass.kt")
        public void testOverrideOnlyGetterFromGenericJavaClass() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/OverrideOnlyGetterFromGenericJavaClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SetterHasHigherAccess.kt")
        public void testSetterHasHigherAccess() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SetterHasHigherAccess.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SetterOnly.kt")
        public void testSetterOnly() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SetterOnly.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SmartCast.kt")
        public void testSmartCast() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SmartCast.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SmartCastImplicitReceiver.kt")
        public void testSmartCastImplicitReceiver() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SmartCastImplicitReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SyntheticJavaPropertyReference.kt")
        public void testSyntheticJavaPropertyReference() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SyntheticJavaPropertyReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("TypeAnnotation.kt")
        public void testTypeAnnotation() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/TypeAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("TypeParameterReceiver.kt")
        public void testTypeParameterReceiver() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/TypeParameterReceiver.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters")
      @TestDataPath("$PROJECT_ROOT")
      public class SamAdapters {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSamAdapters() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Deprecated.kt")
        public void testDeprecated() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/Deprecated.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("GenericClass.kt")
        public void testGenericClass() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/GenericClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("GenericMethod.kt")
        public void testGenericMethod() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/GenericMethod.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("GenericMethodInGenericClass.kt")
        public void testGenericMethodInGenericClass() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/GenericMethodInGenericClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InnerClassInGeneric.kt")
        public void testInnerClassInGeneric() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/InnerClassInGeneric.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NoNamedArgsAllowed.kt")
        public void testNoNamedArgsAllowed() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/NoNamedArgsAllowed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloadResolution.kt")
        public void testOverloadResolution() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/overloadResolution.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloadResolutionStatic.kt")
        public void testOverloadResolutionStatic() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/overloadResolutionStatic.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("PackageLocal.kt")
        public void testPackageLocal() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/PackageLocal.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ParameterTypeAnnotation.kt")
        public void testParameterTypeAnnotation() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/ParameterTypeAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("PassNull.kt")
        public void testPassNull() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/PassNull.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Private.kt")
        public void testPrivate() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/Private.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Protected.kt")
        public void testProtected() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/Protected.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ReturnTypeAnnotation.kt")
        public void testReturnTypeAnnotation() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/ReturnTypeAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/Simple.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/targetedBuiltIns")
    @TestDataPath("$PROJECT_ROOT")
    public class TargetedBuiltIns {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInTargetedBuiltIns() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/targetedBuiltIns"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("concurrentMapRemove.kt")
      public void testConcurrentMapRemove() {
        runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/concurrentMapRemove.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("forEachRemainingNullability.kt")
      public void testForEachRemainingNullability() {
        runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/forEachRemainingNullability.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("getOrDefault.kt")
      public void testGetOrDefault() {
        runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/getOrDefault.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("mutableMapRemove.kt")
      public void testMutableMapRemove() {
        runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/mutableMapRemove.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("removeIf.kt")
      public void testRemoveIf() {
        runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/removeIf.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("stream.kt")
      public void testStream() {
        runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/stream.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility")
      @TestDataPath("$PROJECT_ROOT")
      public class BackwardCompatibility {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInBackwardCompatibility() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("basic.kt")
        public void testBasic() {
          runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/basic.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("delegation.kt")
        public void testDelegation() {
          runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/delegation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("derivedInterfaces.kt")
        public void testDerivedInterfaces() {
          runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/derivedInterfaces.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("derivedInterfacesWithKotlinFun.kt")
        public void testDerivedInterfacesWithKotlinFun() {
          runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/derivedInterfacesWithKotlinFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fillInStackTrace.kt")
        public void testFillInStackTrace() {
          runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/fillInStackTrace.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("finalize.kt")
        public void testFinalize() {
          runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/finalize.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("hashMapGetOrDefault.kt")
        public void testHashMapGetOrDefault() {
          runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/hashMapGetOrDefault.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/testWithModifiedMockJdk")
    @TestDataPath("$PROJECT_ROOT")
    public class TestWithModifiedMockJdk {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInTestWithModifiedMockJdk() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/testWithModifiedMockJdk"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("newStringMethods.kt")
      public void testNewStringMethods() {
        runTest("compiler/testData/diagnostics/tests/testWithModifiedMockJdk/newStringMethods.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notConsideredGetter.kt")
      public void testNotConsideredGetter() {
        runTest("compiler/testData/diagnostics/tests/testWithModifiedMockJdk/notConsideredGetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notConsideredMethod.kt")
      public void testNotConsideredMethod() {
        runTest("compiler/testData/diagnostics/tests/testWithModifiedMockJdk/notConsideredMethod.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("throwableConstructor.kt")
      public void testThrowableConstructor() {
        runTest("compiler/testData/diagnostics/tests/testWithModifiedMockJdk/throwableConstructor.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/testsWithExplicitApi")
    @TestDataPath("$PROJECT_ROOT")
    public class TestsWithExplicitApi {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInTestsWithExplicitApi() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/testsWithExplicitApi"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotations.kt")
      public void testAnnotations() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/annotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classes.kt")
      public void testClasses() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/classes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("companionObject.kt")
      public void testCompanionObject() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/companionObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constructors.kt")
      public void testConstructors() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/constructors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineClasses.kt")
      public void testInlineClasses() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/inlineClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("interfaces.kt")
      public void testInterfaces() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/interfaces.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt56505.kt")
      public void testKt56505() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/kt56505.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localFunctions.kt")
      public void testLocalFunctions() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/localFunctions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("mustBeEffectivelyPublic.kt")
      public void testMustBeEffectivelyPublic() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/mustBeEffectivelyPublic.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noErrorsForMemebersInsideInternalDeclaration.kt")
      public void testNoErrorsForMemebersInsideInternalDeclaration() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/noErrorsForMemebersInsideInternalDeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("properties.kt")
      public void testProperties() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/properties.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("publishedApi.kt")
      public void testPublishedApi() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/publishedApi.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("toplevel.kt")
      public void testToplevel() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/toplevel.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/testsWithJava17")
    @TestDataPath("$PROJECT_ROOT")
    public class TestsWithJava17 {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInTestsWithJava17() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/testsWithJava17"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("newListMethods.kt")
      public void testNewListMethods() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava17/newListMethods.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmRecord {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInJvmRecord() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("diagnostics.kt")
        public void testDiagnostics() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/diagnostics.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("disabledFeature.kt")
        public void testDisabledFeature() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/disabledFeature.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("explicitSuperConstructorCall.kt")
        public void testExplicitSuperConstructorCall() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/explicitSuperConstructorCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("irrelevantFields.kt")
        public void testIrrelevantFields() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/irrelevantFields.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaRecordWithCanonicalConstructor.kt")
        public void testJavaRecordWithCanonicalConstructor() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/javaRecordWithCanonicalConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaRecordWithExplicitComponent.kt")
        public void testJavaRecordWithExplicitComponent() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/javaRecordWithExplicitComponent.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaRecordWithGeneric.kt")
        public void testJavaRecordWithGeneric() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/javaRecordWithGeneric.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jvmRecordDescriptorStructure.kt")
        public void testJvmRecordDescriptorStructure() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/jvmRecordDescriptorStructure.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleRecords.kt")
        public void testSimpleRecords() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/simpleRecords.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleRecordsDefaultConstructor.kt")
        public void testSimpleRecordsDefaultConstructor() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/simpleRecordsDefaultConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleRecordsWithSecondaryConstructor.kt")
        public void testSimpleRecordsWithSecondaryConstructor() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/simpleRecordsWithSecondaryConstructor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("supertypesCheck.kt")
        public void testSupertypesCheck() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/supertypesCheck.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/testsWithJava17/sealedClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class SealedClasses {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSealedClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/testsWithJava17/sealedClasses"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("flexibleSealedInSubject.kt")
        public void testFlexibleSealedInSubject() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/sealedClasses/flexibleSealedInSubject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaSealedClassExhaustiveness.kt")
        public void testJavaSealedClassExhaustiveness() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/sealedClasses/javaSealedClassExhaustiveness.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaSealedInterfaceExhaustiveness.kt")
        public void testJavaSealedInterfaceExhaustiveness() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/sealedClasses/javaSealedInterfaceExhaustiveness.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinInheritsJavaClass.kt")
        public void testKotlinInheritsJavaClass() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/sealedClasses/kotlinInheritsJavaClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinInheritsJavaInterface.kt")
        public void testKotlinInheritsJavaInterface() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/sealedClasses/kotlinInheritsJavaInterface.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/testsWithJava21")
    @TestDataPath("$PROJECT_ROOT")
    public class TestsWithJava21 {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInTestsWithJava21() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/testsWithJava21"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("changeInFirstOverloadResolution.kt")
      public void testChangeInFirstOverloadResolution() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/changeInFirstOverloadResolution.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("globalExtensionForHiddenInDeclaringMethod.kt")
      public void testGlobalExtensionForHiddenInDeclaringMethod() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/globalExtensionForHiddenInDeclaringMethod.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("hiddenInDeclaringMethods.kt")
      public void testHiddenInDeclaringMethods() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/hiddenInDeclaringMethods.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implementationsForSequencedCollection.kt")
      public void testImplementationsForSequencedCollection() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/implementationsForSequencedCollection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("memberExtensionForHiddenInDeclaringMethod.kt")
      public void testMemberExtensionForHiddenInDeclaringMethod() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/memberExtensionForHiddenInDeclaringMethod.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("newLinkedHashMapMethods.kt")
      public void testNewLinkedHashMapMethods() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/newLinkedHashMapMethods.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("newListMethods.kt")
      public void testNewListMethods() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/newListMethods.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("newListMethodsImmutable.kt")
      public void testNewListMethodsImmutable() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsImmutable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noFalsePositiveAbstractToArray.kt")
      public void testNoFalsePositiveAbstractToArray() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/noFalsePositiveAbstractToArray.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("otherHiddenInDeclaring.kt")
      public void testOtherHiddenInDeclaring() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/otherHiddenInDeclaring.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/thisAndSuper")
    @TestDataPath("$PROJECT_ROOT")
    public class ThisAndSuper {
      @RepeatedTest(value = 5)
      @TestMetadata("aliasedSupertype.kt")
      public void testAliasedSupertype() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/aliasedSupertype.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInThisAndSuper() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/thisAndSuper"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ambigousLabelOnThis.kt")
      public void testAmbigousLabelOnThis() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/ambigousLabelOnThis.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("considerAnonymousObjectsForSuperclassNotAccessibleFromInterface.kt")
      public void testConsiderAnonymousObjectsForSuperclassNotAccessibleFromInterface() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/considerAnonymousObjectsForSuperclassNotAccessibleFromInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericQualifiedSuperOverridden.kt")
      public void testGenericQualifiedSuperOverridden() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/genericQualifiedSuperOverridden.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitInvokeOnSuper.kt")
      public void testImplicitInvokeOnSuper() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/implicitInvokeOnSuper.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notAccessibleSuperInTrait.kt")
      public void testNotAccessibleSuperInTrait() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/notAccessibleSuperInTrait.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("qualifiedSuperOverridden.kt")
      public void testQualifiedSuperOverridden() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/qualifiedSuperOverridden.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("QualifiedThis.kt")
      public void testQualifiedThis() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/QualifiedThis.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Super.kt")
      public void testSuper() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/Super.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superInExtensionFunction.kt")
      public void testSuperInExtensionFunction() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/superInExtensionFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superInExtensionFunctionCall.kt")
      public void testSuperInExtensionFunctionCall() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/superInExtensionFunctionCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superInToplevelFunction.kt")
      public void testSuperInToplevelFunction() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/superInToplevelFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("superIsNotAnExpression.kt")
      public void testSuperIsNotAnExpression() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/superIsNotAnExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("thisInFunctionLiterals.kt")
      public void testThisInFunctionLiterals() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/thisInFunctionLiterals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("thisInInnerClasses.kt")
      public void testThisInInnerClasses() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/thisInInnerClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("thisInPropertyInitializer.kt")
      public void testThisInPropertyInitializer() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/thisInPropertyInitializer.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("thisInToplevelFunction.kt")
      public void testThisInToplevelFunction() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/thisInToplevelFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("traitSuperCall.kt")
      public void testTraitSuperCall() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/traitSuperCall.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper")
      @TestDataPath("$PROJECT_ROOT")
      public class UnqualifiedSuper {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInUnqualifiedSuper() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ambiguousSuperWithGenerics.kt")
        public void testAmbiguousSuperWithGenerics() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/ambiguousSuperWithGenerics.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unqualifiedSuper.kt")
        public void testUnqualifiedSuper() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuper.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unqualifiedSuperWithAbstractMembers.kt")
        public void testUnqualifiedSuperWithAbstractMembers() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithAbstractMembers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unqualifiedSuperWithCallableProperty.kt")
        public void testUnqualifiedSuperWithCallableProperty() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithCallableProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unqualifiedSuperWithDeeperHierarchies.kt")
        public void testUnqualifiedSuperWithDeeperHierarchies() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithDeeperHierarchies.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unqualifiedSuperWithGenerics.kt")
        public void testUnqualifiedSuperWithGenerics() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithGenerics.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unqualifiedSuperWithInnerClass.kt")
        public void testUnqualifiedSuperWithInnerClass() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithInnerClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unqualifiedSuperWithInterfaces.kt")
        public void testUnqualifiedSuperWithInterfaces() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithInterfaces.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unqualifiedSuperWithLocalClass.kt")
        public void testUnqualifiedSuperWithLocalClass() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithLocalClass.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unqualifiedSuperWithUnresolvedBase.kt")
        public void testUnqualifiedSuperWithUnresolvedBase() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithUnresolvedBase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withMethodOfAnyOverridenInInterface.kt")
        public void testWithMethodOfAnyOverridenInInterface() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/withMethodOfAnyOverridenInInterface.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withMethodOverriddenInAnotherSupertype.kt")
        public void testWithMethodOverriddenInAnotherSupertype() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/withMethodOverriddenInAnotherSupertype.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withMethodsOfAny.kt")
        public void testWithMethodsOfAny() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/withMethodsOfAny.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/traitWithRequired")
    @TestDataPath("$PROJECT_ROOT")
    public class TraitWithRequired {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInTraitWithRequired() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/traitWithRequired"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("traitRequiresAny.kt")
      public void testTraitRequiresAny() {
        runTest("compiler/testData/diagnostics/tests/traitWithRequired/traitRequiresAny.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("traitSupertypeList.kt")
      public void testTraitSupertypeList() {
        runTest("compiler/testData/diagnostics/tests/traitWithRequired/traitSupertypeList.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/typeParameters")
    @TestDataPath("$PROJECT_ROOT")
    public class TypeParameters {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInTypeParameters() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/typeParameters"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cannotHaveManyClassUpperBounds.kt")
      public void testCannotHaveManyClassUpperBounds() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/cannotHaveManyClassUpperBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("companionPropertyAndTypeParameter.kt")
      public void testCompanionPropertyAndTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/companionPropertyAndTypeParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("companionPropertyAndTypeParameter2.kt")
      public void testCompanionPropertyAndTypeParameter2() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/companionPropertyAndTypeParameter2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedSyntax.kt")
      public void testDeprecatedSyntax() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/deprecatedSyntax.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("destructuringDeclarations.kt")
      public void testDestructuringDeclarations() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/destructuringDeclarations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dontIntersectUpperBoundWithExpectedType.kt")
      public void testDontIntersectUpperBoundWithExpectedType() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/dontIntersectUpperBoundWithExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dontLoseUpperNonExpectedTypeConstraints.kt")
      public void testDontLoseUpperNonExpectedTypeConstraints() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/dontLoseUpperNonExpectedTypeConstraints.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extFunctionTypeAsUpperBound.kt")
      public void testExtFunctionTypeAsUpperBound() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/extFunctionTypeAsUpperBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionTypeAsUpperBound.kt")
      public void testFunctionTypeAsUpperBound() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/functionTypeAsUpperBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitNothingAgainstNotNothingExpectedType.kt")
      public void testImplicitNothingAgainstNotNothingExpectedType() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/implicitNothingAgainstNotNothingExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitNothingInReturnPosition.kt")
      public void testImplicitNothingInReturnPosition() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/implicitNothingInReturnPosition.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitNothingOfJavaCallAgainstNotNothingExpectedType.kt")
      public void testImplicitNothingOfJavaCallAgainstNotNothingExpectedType() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/implicitNothingOfJavaCallAgainstNotNothingExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitNothingOnDelegates.kt")
      public void testImplicitNothingOnDelegates() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/implicitNothingOnDelegates.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inProjectedDnnParameter.kt")
      public void testInProjectedDnnParameter() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/inProjectedDnnParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt42042.kt")
      public void testKt42042() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/kt42042.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt42042Error.kt")
      public void testKt42042Error() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/kt42042Error.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt42396.kt")
      public void testKt42396() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/kt42396.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt42472.kt")
      public void testKt42472() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/kt42472.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt46186.kt")
      public void testKt46186() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/kt46186.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt46186withEmptyIntersections.kt")
      public void testKt46186withEmptyIntersections() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/kt46186withEmptyIntersections.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("memberTypeParameterVsNestedClass.kt")
      public void testMemberTypeParameterVsNestedClass() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/memberTypeParameterVsNestedClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("memberTypeParameterVsNestedClass2.kt")
      public void testMemberTypeParameterVsNestedClass2() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/memberTypeParameterVsNestedClass2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("memberTypeParameterVsNestedClassReference.kt")
      public void testMemberTypeParameterVsNestedClassReference() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/memberTypeParameterVsNestedClassReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("misplacedConstraints.kt")
      public void testMisplacedConstraints() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/misplacedConstraints.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("outerTypeParameterAsBound.kt")
      public void testOuterTypeParameterAsBound() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/outerTypeParameterAsBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("outerTypeParameterAsSupertype.kt")
      public void testOuterTypeParameterAsSupertype() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/outerTypeParameterAsSupertype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyTypeParameters.kt")
      public void testPropertyTypeParameters() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/propertyTypeParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertyTypeParametersWithUpperBounds.kt")
      public void testPropertyTypeParametersWithUpperBounds() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/propertyTypeParametersWithUpperBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("repeatedBound.kt")
      public void testRepeatedBound() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/repeatedBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("starProjectionInsteadOutCaptured.kt")
      public void testStarProjectionInsteadOutCaptured() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/starProjectionInsteadOutCaptured.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeMismatchErrorHasExpectedGenericTypeArgumentInsteadOfTypeParameter.kt")
      public void testTypeMismatchErrorHasExpectedGenericTypeArgumentInsteadOfTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/typeMismatchErrorHasExpectedGenericTypeArgumentInsteadOfTypeParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParameterChainInReceiver.kt")
      public void testTypeParameterChainInReceiver() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/typeParameterChainInReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParameterChainInReturnType.kt")
      public void testTypeParameterChainInReturnType() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/typeParameterChainInReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("upperBoundCannotBeArray.kt")
      public void testUpperBoundCannotBeArray() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/upperBoundCannotBeArray.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/typealias")
    @TestDataPath("$PROJECT_ROOT")
    public class Typealias {
      @RepeatedTest(value = 5)
      @TestMetadata("abbreviatedSupertypes.kt")
      public void testAbbreviatedSupertypes() {
        runTest("compiler/testData/diagnostics/tests/typealias/abbreviatedSupertypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("abbreviatedSupertypesErrors.kt")
      public void testAbbreviatedSupertypesErrors() {
        runTest("compiler/testData/diagnostics/tests/typealias/abbreviatedSupertypesErrors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("aliasesOnly.kt")
      public void testAliasesOnly() {
        runTest("compiler/testData/diagnostics/tests/typealias/aliasesOnly.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInTypealias() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/typealias"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationsOnTypeAliases.kt")
      public void testAnnotationsOnTypeAliases() {
        runTest("compiler/testData/diagnostics/tests/typealias/annotationsOnTypeAliases.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("boundViolationInTypeAliasConstructor.kt")
      public void testBoundViolationInTypeAliasConstructor() {
        runTest("compiler/testData/diagnostics/tests/typealias/boundViolationInTypeAliasConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("boundsViolationInDeepTypeAliasExpansion.kt")
      public void testBoundsViolationInDeepTypeAliasExpansion() {
        runTest("compiler/testData/diagnostics/tests/typealias/boundsViolationInDeepTypeAliasExpansion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("boundsViolationInTypeAliasExpansion.kt")
      public void testBoundsViolationInTypeAliasExpansion() {
        runTest("compiler/testData/diagnostics/tests/typealias/boundsViolationInTypeAliasExpansion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("boundsViolationInTypeAliasRHS.kt")
      public void testBoundsViolationInTypeAliasRHS() {
        runTest("compiler/testData/diagnostics/tests/typealias/boundsViolationInTypeAliasRHS.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("boundsViolationRecursive.kt")
      public void testBoundsViolationRecursive() {
        runTest("compiler/testData/diagnostics/tests/typealias/boundsViolationRecursive.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("capturingTypeParametersFromOuterClass.kt")
      public void testCapturingTypeParametersFromOuterClass() {
        runTest("compiler/testData/diagnostics/tests/typealias/capturingTypeParametersFromOuterClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classReference.kt")
      public void testClassReference() {
        runTest("compiler/testData/diagnostics/tests/typealias/classReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("conflictingProjections.kt")
      public void testConflictingProjections() {
        runTest("compiler/testData/diagnostics/tests/typealias/conflictingProjections.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constructorCallThroughPrivateAlias.kt")
      public void testConstructorCallThroughPrivateAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/constructorCallThroughPrivateAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cyclicInheritanceViaTypeAlias.kt")
      public void testCyclicInheritanceViaTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/cyclicInheritanceViaTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("enumEntryQualifier.kt")
      public void testEnumEntryQualifier() {
        runTest("compiler/testData/diagnostics/tests/typealias/enumEntryQualifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("exposedExpandedType.kt")
      public void testExposedExpandedType() {
        runTest("compiler/testData/diagnostics/tests/typealias/exposedExpandedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionTypeInTypeAlias.kt")
      public void testFunctionTypeInTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/functionTypeInTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionalTypeWithParameterNameVisibility.kt")
      public void testFunctionalTypeWithParameterNameVisibility() {
        runTest("compiler/testData/diagnostics/tests/typealias/functionalTypeWithParameterNameVisibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericTypeAliasConstructor.kt")
      public void testGenericTypeAliasConstructor() {
        runTest("compiler/testData/diagnostics/tests/typealias/genericTypeAliasConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("genericTypeAliasObject.kt")
      public void testGenericTypeAliasObject() {
        runTest("compiler/testData/diagnostics/tests/typealias/genericTypeAliasObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("illegalTypeInTypeAliasExpansion.kt")
      public void testIllegalTypeInTypeAliasExpansion() {
        runTest("compiler/testData/diagnostics/tests/typealias/illegalTypeInTypeAliasExpansion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("import.kt")
      public void testImport() {
        runTest("compiler/testData/diagnostics/tests/typealias/import.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importForTypealiasObject.kt")
      public void testImportForTypealiasObject() {
        runTest("compiler/testData/diagnostics/tests/typealias/importForTypealiasObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importFromTypeAliasExtendedInvokableObject.kt")
      public void testImportFromTypeAliasExtendedInvokableObject() {
        runTest("compiler/testData/diagnostics/tests/typealias/importFromTypeAliasExtendedInvokableObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importFromTypeAliasFunctionReference.kt")
      public void testImportFromTypeAliasFunctionReference() {
        runTest("compiler/testData/diagnostics/tests/typealias/importFromTypeAliasFunctionReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importFromTypeAliasInvokableObject.kt")
      public void testImportFromTypeAliasInvokableObject() {
        runTest("compiler/testData/diagnostics/tests/typealias/importFromTypeAliasInvokableObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importFromTypeAliasNestedObjectFunMember.kt")
      public void testImportFromTypeAliasNestedObjectFunMember() {
        runTest("compiler/testData/diagnostics/tests/typealias/importFromTypeAliasNestedObjectFunMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importFromTypeAliasObject.kt")
      public void testImportFromTypeAliasObject() {
        runTest("compiler/testData/diagnostics/tests/typealias/importFromTypeAliasObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importFromTypeAliasObjectProperties.kt")
      public void testImportFromTypeAliasObjectProperties() {
        runTest("compiler/testData/diagnostics/tests/typealias/importFromTypeAliasObjectProperties.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importMemberFromJavaViaAlias.kt")
      public void testImportMemberFromJavaViaAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/importMemberFromJavaViaAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importNestedTypeFromTypeAlias.kt")
      public void testImportNestedTypeFromTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/importNestedTypeFromTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inGenerics.kt")
      public void testInGenerics() {
        runTest("compiler/testData/diagnostics/tests/typealias/inGenerics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inSupertypesList.kt")
      public void testInSupertypesList() {
        runTest("compiler/testData/diagnostics/tests/typealias/inSupertypesList.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inheritedNestedTypeAlias.kt")
      public void testInheritedNestedTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/inheritedNestedTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inhreritedTypeAliasQualifiedByDerivedClass.kt")
      public void testInhreritedTypeAliasQualifiedByDerivedClass() {
        runTest("compiler/testData/diagnostics/tests/typealias/inhreritedTypeAliasQualifiedByDerivedClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerClassTypeAliasConstructor.kt")
      public void testInnerClassTypeAliasConstructor() {
        runTest("compiler/testData/diagnostics/tests/typealias/innerClassTypeAliasConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerClassTypeAliasConstructorInSupertypes.kt")
      public void testInnerClassTypeAliasConstructorInSupertypes() {
        runTest("compiler/testData/diagnostics/tests/typealias/innerClassTypeAliasConstructorInSupertypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerTypeAliasAsType.kt")
      public void testInnerTypeAliasAsType() {
        runTest("compiler/testData/diagnostics/tests/typealias/innerTypeAliasAsType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerTypeAliasAsType2.kt")
      public void testInnerTypeAliasAsType2() {
        runTest("compiler/testData/diagnostics/tests/typealias/innerTypeAliasAsType2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerTypeAliasConstructor.kt")
      public void testInnerTypeAliasConstructor() {
        runTest("compiler/testData/diagnostics/tests/typealias/innerTypeAliasConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intToLongApproximationThroughTypeAlias.kt")
      public void testIntToLongApproximationThroughTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/intToLongApproximationThroughTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("isAsWithTypeAlias.kt")
      public void testIsAsWithTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/isAsWithTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaStaticMembersViaTypeAlias.kt")
      public void testJavaStaticMembersViaTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/javaStaticMembersViaTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt14498.kt")
      public void testKt14498() {
        runTest("compiler/testData/diagnostics/tests/typealias/kt14498.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt14498a.kt")
      public void testKt14498a() {
        runTest("compiler/testData/diagnostics/tests/typealias/kt14498a.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt14518.kt")
      public void testKt14518() {
        runTest("compiler/testData/diagnostics/tests/typealias/kt14518.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt14612.kt")
      public void testKt14612() {
        runTest("compiler/testData/diagnostics/tests/typealias/kt14612.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt14641.kt")
      public void testKt14641() {
        runTest("compiler/testData/diagnostics/tests/typealias/kt14641.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt15734.kt")
      public void testKt15734() {
        runTest("compiler/testData/diagnostics/tests/typealias/kt15734.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt19601.kt")
      public void testKt19601() {
        runTest("compiler/testData/diagnostics/tests/typealias/kt19601.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt57065.kt")
      public void testKt57065() {
        runTest("compiler/testData/diagnostics/tests/typealias/kt57065.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt62099.kt")
      public void testKt62099() {
        runTest("compiler/testData/diagnostics/tests/typealias/kt62099.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localTypeAlias.kt")
      public void testLocalTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/localTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localTypeAliasConstructor.kt")
      public void testLocalTypeAliasConstructor() {
        runTest("compiler/testData/diagnostics/tests/typealias/localTypeAliasConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localTypeAliasModifiers.kt")
      public void testLocalTypeAliasModifiers() {
        runTest("compiler/testData/diagnostics/tests/typealias/localTypeAliasModifiers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("localTypeAliasRecursive.kt")
      public void testLocalTypeAliasRecursive() {
        runTest("compiler/testData/diagnostics/tests/typealias/localTypeAliasRecursive.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("methodReference.kt")
      public void testMethodReference() {
        runTest("compiler/testData/diagnostics/tests/typealias/methodReference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nested.kt")
      public void testNested() {
        runTest("compiler/testData/diagnostics/tests/typealias/nested.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedCapturingTypeParameters.kt")
      public void testNestedCapturingTypeParameters() {
        runTest("compiler/testData/diagnostics/tests/typealias/nestedCapturingTypeParameters.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nestedSubstituted.kt")
      public void testNestedSubstituted() {
        runTest("compiler/testData/diagnostics/tests/typealias/nestedSubstituted.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noApproximationInTypeAliasArgumentSubstitution.kt")
      public void testNoApproximationInTypeAliasArgumentSubstitution() {
        runTest("compiler/testData/diagnostics/tests/typealias/noApproximationInTypeAliasArgumentSubstitution.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noRHS.kt")
      public void testNoRHS() {
        runTest("compiler/testData/diagnostics/tests/typealias/noRHS.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("parameterRestrictions.kt")
      public void testParameterRestrictions() {
        runTest("compiler/testData/diagnostics/tests/typealias/parameterRestrictions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("parameterSubstitution.kt")
      public void testParameterSubstitution() {
        runTest("compiler/testData/diagnostics/tests/typealias/parameterSubstitution.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateInFile.kt")
      public void testPrivateInFile() {
        runTest("compiler/testData/diagnostics/tests/typealias/privateInFile.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateInFileInDifferentModule.kt")
      public void testPrivateInFileInDifferentModule() {
        runTest("compiler/testData/diagnostics/tests/typealias/privateInFileInDifferentModule.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("projectionsInTypeAliasConstructor.kt")
      public void testProjectionsInTypeAliasConstructor() {
        runTest("compiler/testData/diagnostics/tests/typealias/projectionsInTypeAliasConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursive.kt")
      public void testRecursive() {
        runTest("compiler/testData/diagnostics/tests/typealias/recursive.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("returnTypeNothingShouldBeSpecifiedExplicitly.kt")
      public void testReturnTypeNothingShouldBeSpecifiedExplicitly() {
        runTest("compiler/testData/diagnostics/tests/typealias/returnTypeNothingShouldBeSpecifiedExplicitly.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("simpleTypeAlias.kt")
      public void testSimpleTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/simpleTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("starImportOnTypeAlias.kt")
      public void testStarImportOnTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/starImportOnTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("starProjection.kt")
      public void testStarProjection() {
        runTest("compiler/testData/diagnostics/tests/typealias/starProjection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("starProjectionInTypeAliasArgument.kt")
      public void testStarProjectionInTypeAliasArgument() {
        runTest("compiler/testData/diagnostics/tests/typealias/starProjectionInTypeAliasArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("substitutionVariance.kt")
      public void testSubstitutionVariance() {
        runTest("compiler/testData/diagnostics/tests/typealias/substitutionVariance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("throwJLException.kt")
      public void testThrowJLException() {
        runTest("compiler/testData/diagnostics/tests/typealias/throwJLException.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("topLevelTypeAliasesOnly.kt")
      public void testTopLevelTypeAliasesOnly() {
        runTest("compiler/testData/diagnostics/tests/typealias/topLevelTypeAliasesOnly.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasArgumentsInCompanionObject.kt")
      public void testTypeAliasArgumentsInCompanionObject() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasArgumentsInCompanionObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasArgumentsInConstructor.kt")
      public void testTypeAliasArgumentsInConstructor() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasArgumentsInConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasAsBareType.kt")
      public void testTypeAliasAsBareType() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasAsBareType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasAsQualifier.kt")
      public void testTypeAliasAsQualifier() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasAsQualifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasAsSuperQualifier.kt")
      public void testTypeAliasAsSuperQualifier() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasAsSuperQualifier.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructor.kt")
      public void testTypeAliasConstructor() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorCrazyProjections.kt")
      public void testTypeAliasConstructorCrazyProjections() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorCrazyProjections.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorForInterface.kt")
      public void testTypeAliasConstructorForInterface() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorForInterface.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorForProjection.kt")
      public void testTypeAliasConstructorForProjection() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorForProjection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorForProjectionInSupertypes.kt")
      public void testTypeAliasConstructorForProjectionInSupertypes() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorForProjectionInSupertypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorInSuperCall.kt")
      public void testTypeAliasConstructorInSuperCall() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorInSuperCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorInferenceInSupertypesList.kt")
      public void testTypeAliasConstructorInferenceInSupertypesList() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorInferenceInSupertypesList.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorReturnType.kt")
      public void testTypeAliasConstructorReturnType() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorTypeArgumentsInference.kt")
      public void testTypeAliasConstructorTypeArgumentsInference() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorTypeArgumentsInference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorTypeArgumentsInferenceWithNestedCalls.kt")
      public void testTypeAliasConstructorTypeArgumentsInferenceWithNestedCalls() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorTypeArgumentsInferenceWithNestedCalls.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorTypeArgumentsInferenceWithNestedCalls2.kt")
      public void testTypeAliasConstructorTypeArgumentsInferenceWithNestedCalls2() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorTypeArgumentsInferenceWithNestedCalls2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorTypeArgumentsInferenceWithPhantomTypes.kt")
      public void testTypeAliasConstructorTypeArgumentsInferenceWithPhantomTypes() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorTypeArgumentsInferenceWithPhantomTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorVsFunction.kt")
      public void testTypeAliasConstructorVsFunction() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorVsFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorWrongClass.kt")
      public void testTypeAliasConstructorWrongClass() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorWrongClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasConstructorWrongVisibility.kt")
      public void testTypeAliasConstructorWrongVisibility() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorWrongVisibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasExpansionRepeatedAnnotations.kt")
      public void testTypeAliasExpansionRepeatedAnnotations() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasExpansionRepeatedAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasForProjectionInSuperInterfaces.kt")
      public void testTypeAliasForProjectionInSuperInterfaces() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasForProjectionInSuperInterfaces.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasInAnonymousObjectType.kt")
      public void testTypeAliasInAnonymousObjectType() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasInAnonymousObjectType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasInvisibleObject.kt")
      public void testTypeAliasInvisibleObject() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasInvisibleObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasIsUsedAsATypeArgumentInOtherAlias.kt")
      public void testTypeAliasIsUsedAsATypeArgumentInOtherAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasIsUsedAsATypeArgumentInOtherAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasNotNull.kt")
      public void testTypeAliasNotNull() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasObject.kt")
      public void testTypeAliasObject() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasObjectWithInvoke.kt")
      public void testTypeAliasObjectWithInvoke() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasObjectWithInvoke.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasShouldExpandToClass.kt")
      public void testTypeAliasShouldExpandToClass() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasShouldExpandToClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasesInImportDirectives.kt")
      public void testTypeAliasesInImportDirectives() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasesInImportDirectives.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasesInQualifiers.kt")
      public void testTypeAliasesInQualifiers() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasesInQualifiers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealiasRhsAnnotations.kt")
      public void testTypealiasRhsAnnotations() {
        runTest("compiler/testData/diagnostics/tests/typealias/typealiasRhsAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealiasRhsAnnotationsInArguments.kt")
      public void testTypealiasRhsAnnotationsInArguments() {
        runTest("compiler/testData/diagnostics/tests/typealias/typealiasRhsAnnotationsInArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealiasRhsRepeatedAnnotationInArguments.kt")
      public void testTypealiasRhsRepeatedAnnotationInArguments() {
        runTest("compiler/testData/diagnostics/tests/typealias/typealiasRhsRepeatedAnnotationInArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealiasRhsRepeatedAnnotations.kt")
      public void testTypealiasRhsRepeatedAnnotations() {
        runTest("compiler/testData/diagnostics/tests/typealias/typealiasRhsRepeatedAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unusedTypeAliasParameter.kt")
      public void testUnusedTypeAliasParameter() {
        runTest("compiler/testData/diagnostics/tests/typealias/unusedTypeAliasParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongNumberOfArgumentsInTypeAliasConstructor.kt")
      public void testWrongNumberOfArgumentsInTypeAliasConstructor() {
        runTest("compiler/testData/diagnostics/tests/typealias/wrongNumberOfArgumentsInTypeAliasConstructor.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/underscoresInNumericLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class UnderscoresInNumericLiterals {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInUnderscoresInNumericLiterals() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/underscoresInNumericLiterals"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("illegalUnderscores.kt")
      public void testIllegalUnderscores() {
        runTest("compiler/testData/diagnostics/tests/underscoresInNumericLiterals/illegalUnderscores.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/unit")
    @TestDataPath("$PROJECT_ROOT")
    public class Unit {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInUnit() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/unit"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableUnit.kt")
      public void testNullableUnit() {
        runTest("compiler/testData/diagnostics/tests/unit/nullableUnit.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/unitConversion")
    @TestDataPath("$PROJECT_ROOT")
    public class UnitConversion {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInUnitConversion() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/unitConversion"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("chainedFunSuspendUnitConversion.kt")
      public void testChainedFunSuspendUnitConversion() {
        runTest("compiler/testData/diagnostics/tests/unitConversion/chainedFunSuspendUnitConversion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("chainedFunUnitConversion.kt")
      public void testChainedFunUnitConversion() {
        runTest("compiler/testData/diagnostics/tests/unitConversion/chainedFunUnitConversion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("chainedUnitSuspendConversion.kt")
      public void testChainedUnitSuspendConversion() {
        runTest("compiler/testData/diagnostics/tests/unitConversion/chainedUnitSuspendConversion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt49394.kt")
      public void testKt49394() {
        runTest("compiler/testData/diagnostics/tests/unitConversion/kt49394.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noUnitConversionForGenericTypeFromArrow.kt")
      public void testNoUnitConversionForGenericTypeFromArrow() {
        runTest("compiler/testData/diagnostics/tests/unitConversion/noUnitConversionForGenericTypeFromArrow.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noUnitConversionOnReturningGenericFunctionalType.kt")
      public void testNoUnitConversionOnReturningGenericFunctionalType() {
        runTest("compiler/testData/diagnostics/tests/unitConversion/noUnitConversionOnReturningGenericFunctionalType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unitConversionCompatibility.kt")
      public void testUnitConversionCompatibility() {
        runTest("compiler/testData/diagnostics/tests/unitConversion/unitConversionCompatibility.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unitConversionDisabledForSimpleArguments.kt")
      public void testUnitConversionDisabledForSimpleArguments() {
        runTest("compiler/testData/diagnostics/tests/unitConversion/unitConversionDisabledForSimpleArguments.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unitConversionForAllKinds.kt")
      public void testUnitConversionForAllKinds() {
        runTest("compiler/testData/diagnostics/tests/unitConversion/unitConversionForAllKinds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unitConversionForSubtypes.kt")
      public void testUnitConversionForSubtypes() {
        runTest("compiler/testData/diagnostics/tests/unitConversion/unitConversionForSubtypes.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/unsignedTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class UnsignedTypes {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInUnsignedTypes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/unsignedTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("allowedVarargsOfUnsignedTypes.kt")
      public void testAllowedVarargsOfUnsignedTypes() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/allowedVarargsOfUnsignedTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callDefaultConstructorOfUnsignedType.kt")
      public void testCallDefaultConstructorOfUnsignedType() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/callDefaultConstructorOfUnsignedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("explicitUnsignedLongTypeCheck.kt")
      public void testExplicitUnsignedLongTypeCheck() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/explicitUnsignedLongTypeCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("forbiddenEqualsOnUnsignedTypes.kt")
      public void testForbiddenEqualsOnUnsignedTypes() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/forbiddenEqualsOnUnsignedTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lateinitUnsignedType.kt")
      public void testLateinitUnsignedType() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/lateinitUnsignedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("numberReceiverNotValid.kt")
      public void testNumberReceiverNotValid() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/numberReceiverNotValid.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overloadResolutionOfBasicOperations.kt")
      public void testOverloadResolutionOfBasicOperations() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/overloadResolutionOfBasicOperations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unsignedLiteralsInsideConstVals.kt")
      public void testUnsignedLiteralsInsideConstVals() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/unsignedLiteralsInsideConstVals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unsignedLiteralsOverflowSignedBorder.kt")
      public void testUnsignedLiteralsOverflowSignedBorder() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/unsignedLiteralsOverflowSignedBorder.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unsignedLiteralsTypeCheck.kt")
      public void testUnsignedLiteralsTypeCheck() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/unsignedLiteralsTypeCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargTypeToArrayTypeCheck.kt")
      public void testVarargTypeToArrayTypeCheck() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/varargTypeToArrayTypeCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongLongSuffixForULong.kt")
      public void testWrongLongSuffixForULong() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/wrongLongSuffixForULong.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/unsignedTypes/conversions")
      @TestDataPath("$PROJECT_ROOT")
      public class Conversions {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInConversions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/unsignedTypes/conversions"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("conversionOfSignedToUnsigned.kt")
        public void testConversionOfSignedToUnsigned() {
          runTest("compiler/testData/diagnostics/tests/unsignedTypes/conversions/conversionOfSignedToUnsigned.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitIntegerCoercionNamedArg.kt")
        public void testImplicitIntegerCoercionNamedArg() {
          runTest("compiler/testData/diagnostics/tests/unsignedTypes/conversions/implicitIntegerCoercionNamedArg.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("implicitIntegerCoercionOverloading.kt")
        public void testImplicitIntegerCoercionOverloading() {
          runTest("compiler/testData/diagnostics/tests/unsignedTypes/conversions/implicitIntegerCoercionOverloading.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferenceForSignedAndUnsignedTypes.kt")
        public void testInferenceForSignedAndUnsignedTypes() {
          runTest("compiler/testData/diagnostics/tests/unsignedTypes/conversions/inferenceForSignedAndUnsignedTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noConversionForUnsignedTypesOnReceiver.kt")
        public void testNoConversionForUnsignedTypesOnReceiver() {
          runTest("compiler/testData/diagnostics/tests/unsignedTypes/conversions/noConversionForUnsignedTypesOnReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("overloadResolutionForSignedAndUnsignedTypes.kt")
        public void testOverloadResolutionForSignedAndUnsignedTypes() {
          runTest("compiler/testData/diagnostics/tests/unsignedTypes/conversions/overloadResolutionForSignedAndUnsignedTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("signedToUnsignedConversionWithExpectedType.kt")
        public void testSignedToUnsignedConversionWithExpectedType() {
          runTest("compiler/testData/diagnostics/tests/unsignedTypes/conversions/signedToUnsignedConversionWithExpectedType.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/valueClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class ValueClasses {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInValueClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/valueClasses"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotations.kt")
      public void testAnnotations() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/annotations.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithUniversal());
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basicValueClassDeclaration.kt")
      public void testBasicValueClassDeclaration() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/basicValueClassDeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basicValueClassDeclarationDisabled.kt")
      public void testBasicValueClassDeclarationDisabled() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/basicValueClassDeclarationDisabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("defaultParameters.kt")
      public void testDefaultParameters() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/defaultParameters.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithUniversal());
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegatedPropertyInValueClass.kt")
      public void testDelegatedPropertyInValueClass() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/delegatedPropertyInValueClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionsJvmSignaturesConflictOnInheritance.kt")
      public void testFunctionsJvmSignaturesConflictOnInheritance() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/functionsJvmSignaturesConflictOnInheritance.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("identityComparisonWithValueClasses.kt")
      public void testIdentityComparisonWithValueClasses() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/identityComparisonWithValueClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inefficientEqualsOverridingInMfvc.kt")
      public void testInefficientEqualsOverridingInMfvc() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/inefficientEqualsOverridingInMfvc.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineKeywordForMfvc.kt")
      public void testInlineKeywordForMfvc() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/inlineKeywordForMfvc.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("jvmInlineApplicability.kt")
      public void testJvmInlineApplicability() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/jvmInlineApplicability.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lateinitValueClasses.kt")
      public void testLateinitValueClasses() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/lateinitValueClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("presenceOfInitializerBlockInsideValueClass.kt")
      public void testPresenceOfInitializerBlockInsideValueClass() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/presenceOfInitializerBlockInsideValueClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("presenceOfPublicPrimaryConstructorForValueClass.kt")
      public void testPresenceOfPublicPrimaryConstructorForValueClass() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/presenceOfPublicPrimaryConstructorForValueClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("propertiesWithBackingFieldsInsideValueClass.kt")
      public void testPropertiesWithBackingFieldsInsideValueClass() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/propertiesWithBackingFieldsInsideValueClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursiveMultiFieldValueClasses.kt")
      public void testRecursiveMultiFieldValueClasses() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/recursiveMultiFieldValueClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursiveValueClasses.kt")
      public void testRecursiveValueClasses() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/recursiveValueClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reservedMembersAndConstructsInsideMfvc.kt")
      public void testReservedMembersAndConstructsInsideMfvc() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/reservedMembersAndConstructsInsideMfvc.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typedEqualsOperatorModifierInMfvc.kt")
      public void testTypedEqualsOperatorModifierInMfvc() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/typedEqualsOperatorModifierInMfvc.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unsignedLiteralsWithoutArtifactOnClasspath.kt")
      public void testUnsignedLiteralsWithoutArtifactOnClasspath() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/unsignedLiteralsWithoutArtifactOnClasspath.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueClassCanOnlyImplementInterfaces.kt")
      public void testValueClassCanOnlyImplementInterfaces() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/valueClassCanOnlyImplementInterfaces.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueClassCannotImplementInterfaceByDelegation.kt")
      public void testValueClassCannotImplementInterfaceByDelegation() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/valueClassCannotImplementInterfaceByDelegation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueClassConstructorParameterWithDefaultValue.kt")
      public void testValueClassConstructorParameterWithDefaultValue() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/valueClassConstructorParameterWithDefaultValue.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueClassDeclarationCheck.kt")
      public void testValueClassDeclarationCheck() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/valueClassDeclarationCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueClassImplementsCollection.kt")
      public void testValueClassImplementsCollection() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/valueClassImplementsCollection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueClassWithForbiddenUnderlyingType.kt")
      public void testValueClassWithForbiddenUnderlyingType() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/valueClassWithForbiddenUnderlyingType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueClassWithForbiddenUnderlyingTypeMultiField.kt")
      public void testValueClassWithForbiddenUnderlyingTypeMultiField() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/valueClassWithForbiddenUnderlyingTypeMultiField.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueClassWithGenericUnderlyingTypeNoFeature.kt")
      public void testValueClassWithGenericUnderlyingTypeNoFeature() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/valueClassWithGenericUnderlyingTypeNoFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueClassesInsideAnnotations.kt")
      public void testValueClassesInsideAnnotations() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/valueClassesInsideAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargsOnParametersOfValueClassType.kt")
      public void testVarargsOnParametersOfValueClassType() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/varargsOnParametersOfValueClassType.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/varargs")
    @TestDataPath("$PROJECT_ROOT")
    public class Varargs {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInVarargs() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/varargs"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AmbiguousVararg.kt")
      public void testAmbiguousVararg() {
        runTest("compiler/testData/diagnostics/tests/varargs/AmbiguousVararg.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignArrayToVararagInNamedFormWithInference.kt")
      public void testAssignArrayToVararagInNamedFormWithInference() {
        runTest("compiler/testData/diagnostics/tests/varargs/assignArrayToVararagInNamedFormWithInference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignArrayToVararagInNamedForm_1_3.kt")
      public void testAssignArrayToVararagInNamedForm_1_3() {
        runTest("compiler/testData/diagnostics/tests/varargs/assignArrayToVararagInNamedForm_1_3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignArrayToVararagInNamedForm_1_4.kt")
      public void testAssignArrayToVararagInNamedForm_1_4() {
        runTest("compiler/testData/diagnostics/tests/varargs/assignArrayToVararagInNamedForm_1_4.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignNonConstSingleArrayElementAsVarargInAnnotation.kt")
      public void testAssignNonConstSingleArrayElementAsVarargInAnnotation() {
        runTest("compiler/testData/diagnostics/tests/varargs/assignNonConstSingleArrayElementAsVarargInAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignNonConstSingleArrayElementAsVarargInAnnotationError.kt")
      public void testAssignNonConstSingleArrayElementAsVarargInAnnotationError() {
        runTest("compiler/testData/diagnostics/tests/varargs/assignNonConstSingleArrayElementAsVarargInAnnotationError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assigningArraysToVarargsInAnnotations.kt")
      public void testAssigningArraysToVarargsInAnnotations() {
        runTest("compiler/testData/diagnostics/tests/varargs/assigningArraysToVarargsInAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assigningSingleElementsInNamedFormAnnDeprecation_after.kt")
      public void testAssigningSingleElementsInNamedFormAnnDeprecation_after() {
        runTest("compiler/testData/diagnostics/tests/varargs/assigningSingleElementsInNamedFormAnnDeprecation_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assigningSingleElementsInNamedFormAnnDeprecation_before.kt")
      public void testAssigningSingleElementsInNamedFormAnnDeprecation_before() {
        runTest("compiler/testData/diagnostics/tests/varargs/assigningSingleElementsInNamedFormAnnDeprecation_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assigningSingleElementsInNamedFormFunDeprecation_after.kt")
      public void testAssigningSingleElementsInNamedFormFunDeprecation_after() {
        runTest("compiler/testData/diagnostics/tests/varargs/assigningSingleElementsInNamedFormFunDeprecation_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assigningSingleElementsInNamedFormFunDeprecation_before.kt")
      public void testAssigningSingleElementsInNamedFormFunDeprecation_before() {
        runTest("compiler/testData/diagnostics/tests/varargs/assigningSingleElementsInNamedFormFunDeprecation_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inferredNullableArrayAsVararg.kt")
      public void testInferredNullableArrayAsVararg() {
        runTest("compiler/testData/diagnostics/tests/varargs/inferredNullableArrayAsVararg.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10926.kt")
      public void testKt10926() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt10926.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10926EnabledFeature.kt")
      public void testKt10926EnabledFeature() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt10926EnabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1781.kt")
      public void testKt1781() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt1781.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1835.kt")
      public void testKt1835() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt1835.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1838-param.kt")
      public void testKt1838_param() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt1838-param.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1838-val.kt")
      public void testKt1838_val() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt1838-val.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2163.kt")
      public void testKt2163() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt2163.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt422.kt")
      public void testKt422() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt422.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt48162.kt")
      public void testKt48162() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt48162.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MoreSpecificVarargsOfEqualLength.kt")
      public void testMoreSpecificVarargsOfEqualLength() {
        runTest("compiler/testData/diagnostics/tests/varargs/MoreSpecificVarargsOfEqualLength.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("MostSepcificVarargsWithJava.kt")
      public void testMostSepcificVarargsWithJava() {
        runTest("compiler/testData/diagnostics/tests/varargs/MostSepcificVarargsWithJava.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NilaryVsVararg.kt")
      public void testNilaryVsVararg() {
        runTest("compiler/testData/diagnostics/tests/varargs/NilaryVsVararg.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NullableTypeForVarargArgument.kt")
      public void testNullableTypeForVarargArgument() {
        runTest("compiler/testData/diagnostics/tests/varargs/NullableTypeForVarargArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("prohibitAssigningSingleElementsInNamedForm.kt")
      public void testProhibitAssigningSingleElementsInNamedForm() {
        runTest("compiler/testData/diagnostics/tests/varargs/prohibitAssigningSingleElementsInNamedForm.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("UnaryVsVararg.kt")
      public void testUnaryVsVararg() {
        runTest("compiler/testData/diagnostics/tests/varargs/UnaryVsVararg.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unresolvedVarargType.kt")
      public void testUnresolvedVarargType() {
        runTest("compiler/testData/diagnostics/tests/varargs/unresolvedVarargType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargInSetter.kt")
      public void testVarargInSetter() {
        runTest("compiler/testData/diagnostics/tests/varargs/varargInSetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargIterator.kt")
      public void testVarargIterator() {
        runTest("compiler/testData/diagnostics/tests/varargs/varargIterator.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargOfNothing.kt")
      public void testVarargOfNothing() {
        runTest("compiler/testData/diagnostics/tests/varargs/varargOfNothing.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargViewedAsArray.kt")
      public void testVarargViewedAsArray() {
        runTest("compiler/testData/diagnostics/tests/varargs/varargViewedAsArray.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargsAndFunctionLiterals.kt")
      public void testVarargsAndFunctionLiterals() {
        runTest("compiler/testData/diagnostics/tests/varargs/varargsAndFunctionLiterals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargsAndOut1.kt")
      public void testVarargsAndOut1() {
        runTest("compiler/testData/diagnostics/tests/varargs/varargsAndOut1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargsAndOut2.kt")
      public void testVarargsAndOut2() {
        runTest("compiler/testData/diagnostics/tests/varargs/varargsAndOut2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("varargsAndPair.kt")
      public void testVarargsAndPair() {
        runTest("compiler/testData/diagnostics/tests/varargs/varargsAndPair.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/variance")
    @TestDataPath("$PROJECT_ROOT")
    public class Variance {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInVariance() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/variance"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Class.kt")
      public void testClass() {
        runTest("compiler/testData/diagnostics/tests/variance/Class.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea1337846.kt")
      public void testEa1337846() {
        runTest("compiler/testData/diagnostics/tests/variance/ea1337846.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Function.kt")
      public void testFunction() {
        runTest("compiler/testData/diagnostics/tests/variance/Function.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("FunctionTypes.kt")
      public void testFunctionTypes() {
        runTest("compiler/testData/diagnostics/tests/variance/FunctionTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InPosition.kt")
      public void testInPosition() {
        runTest("compiler/testData/diagnostics/tests/variance/InPosition.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("InvariantPosition.kt")
      public void testInvariantPosition() {
        runTest("compiler/testData/diagnostics/tests/variance/InvariantPosition.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NullableTypes.kt")
      public void testNullableTypes() {
        runTest("compiler/testData/diagnostics/tests/variance/NullableTypes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("OutPosition.kt")
      public void testOutPosition() {
        runTest("compiler/testData/diagnostics/tests/variance/OutPosition.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PrimaryConstructor.kt")
      public void testPrimaryConstructor() {
        runTest("compiler/testData/diagnostics/tests/variance/PrimaryConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ValProperty.kt")
      public void testValProperty() {
        runTest("compiler/testData/diagnostics/tests/variance/ValProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("VarProperty.kt")
      public void testVarProperty() {
        runTest("compiler/testData/diagnostics/tests/variance/VarProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Visibility.kt")
      public void testVisibility() {
        runTest("compiler/testData/diagnostics/tests/variance/Visibility.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/variance/privateToThis")
      @TestDataPath("$PROJECT_ROOT")
      public class PrivateToThis {
        @RepeatedTest(value = 5)
        @TestMetadata("Abstract.kt")
        public void testAbstract() {
          runTest("compiler/testData/diagnostics/tests/variance/privateToThis/Abstract.kt");
        }

        @RepeatedTest(value = 5)
        public void testAllFilesPresentInPrivateToThis() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/variance/privateToThis"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("FunctionCall.kt")
        public void testFunctionCall() {
          runTest("compiler/testData/diagnostics/tests/variance/privateToThis/FunctionCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("GetVal.kt")
        public void testGetVal() {
          runTest("compiler/testData/diagnostics/tests/variance/privateToThis/GetVal.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("SetVar.kt")
        public void testSetVar() {
          runTest("compiler/testData/diagnostics/tests/variance/privateToThis/SetVar.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("ValReassigned.kt")
        public void testValReassigned() {
          runTest("compiler/testData/diagnostics/tests/variance/privateToThis/ValReassigned.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/visibility")
    @TestDataPath("$PROJECT_ROOT")
    public class Visibility {
      @RepeatedTest(value = 5)
      @TestMetadata("abstractInvisibleMemberFromJava.kt")
      public void testAbstractInvisibleMemberFromJava() {
        runTest("compiler/testData/diagnostics/tests/visibility/abstractInvisibleMemberFromJava.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("abstractInvisibleMemberFromKotlin.kt")
      public void testAbstractInvisibleMemberFromKotlin() {
        runTest("compiler/testData/diagnostics/tests/visibility/abstractInvisibleMemberFromKotlin.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("abstractInvisibleMemberFromKotlinWarning.kt")
      public void testAbstractInvisibleMemberFromKotlinWarning() {
        runTest("compiler/testData/diagnostics/tests/visibility/abstractInvisibleMemberFromKotlinWarning.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInVisibility() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/visibility"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerClassDelegatingConstructorCallToPrivate.kt")
      public void testInnerClassDelegatingConstructorCallToPrivate() {
        runTest("compiler/testData/diagnostics/tests/visibility/innerClassDelegatingConstructorCallToPrivate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerConstructorThroughSubclass.kt")
      public void testInnerConstructorThroughSubclass() {
        runTest("compiler/testData/diagnostics/tests/visibility/innerConstructorThroughSubclass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("innerNestedAndAnonymousClasses.kt")
      public void testInnerNestedAndAnonymousClasses() {
        runTest("compiler/testData/diagnostics/tests/visibility/innerNestedAndAnonymousClasses.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invisiblePrivateThroughSubClass.kt")
      public void testInvisiblePrivateThroughSubClass() {
        runTest("compiler/testData/diagnostics/tests/visibility/invisiblePrivateThroughSubClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invisiblePrivateThroughSubClassDoubleSmartCast.kt")
      public void testInvisiblePrivateThroughSubClassDoubleSmartCast() {
        runTest("compiler/testData/diagnostics/tests/visibility/invisiblePrivateThroughSubClassDoubleSmartCast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invisiblePrivateThroughSubClassSmartCast.kt")
      public void testInvisiblePrivateThroughSubClassSmartCast() {
        runTest("compiler/testData/diagnostics/tests/visibility/invisiblePrivateThroughSubClassSmartCast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invisibleSetterOfJavaClass.kt")
      public void testInvisibleSetterOfJavaClass() {
        runTest("compiler/testData/diagnostics/tests/visibility/invisibleSetterOfJavaClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invisibleSetterOfJavaClassWithDisabledFeature.kt")
      public void testInvisibleSetterOfJavaClassWithDisabledFeature() {
        runTest("compiler/testData/diagnostics/tests/visibility/invisibleSetterOfJavaClassWithDisabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaInterfaceFieldDirectAccess.kt")
      public void testJavaInterfaceFieldDirectAccess() {
        runTest("compiler/testData/diagnostics/tests/visibility/javaInterfaceFieldDirectAccess.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt56283.kt")
      public void testKt56283() {
        runTest("compiler/testData/diagnostics/tests/visibility/kt56283.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt63434.kt")
      public void testKt63434() {
        runTest("compiler/testData/diagnostics/tests/visibility/kt63434.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lackOfInvisibleSetterOfJavaClassInSamePackage.kt")
      public void testLackOfInvisibleSetterOfJavaClassInSamePackage() {
        runTest("compiler/testData/diagnostics/tests/visibility/lackOfInvisibleSetterOfJavaClassInSamePackage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("moreSpecificProtected.kt")
      public void testMoreSpecificProtected() {
        runTest("compiler/testData/diagnostics/tests/visibility/moreSpecificProtected.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("moreSpecificProtectedSimple.kt")
      public void testMoreSpecificProtectedSimple() {
        runTest("compiler/testData/diagnostics/tests/visibility/moreSpecificProtectedSimple.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notOverridingInternal.kt")
      public void testNotOverridingInternal() {
        runTest("compiler/testData/diagnostics/tests/visibility/notOverridingInternal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("notOverridingPackagePrivate.kt")
      public void testNotOverridingPackagePrivate() {
        runTest("compiler/testData/diagnostics/tests/visibility/notOverridingPackagePrivate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overrideOfMemberInPackagePrivateClass.kt")
      public void testOverrideOfMemberInPackagePrivateClass() {
        runTest("compiler/testData/diagnostics/tests/visibility/overrideOfMemberInPackagePrivateClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("packagePrivateStatic.kt")
      public void testPackagePrivateStatic() {
        runTest("compiler/testData/diagnostics/tests/visibility/packagePrivateStatic.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("packagePrivateStaticInterfaceFieldViaKotlinClass.kt")
      public void testPackagePrivateStaticInterfaceFieldViaKotlinClass() {
        runTest("compiler/testData/diagnostics/tests/visibility/packagePrivateStaticInterfaceFieldViaKotlinClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("packagePrivateStaticInterfaceMethod.kt")
      public void testPackagePrivateStaticInterfaceMethod() {
        runTest("compiler/testData/diagnostics/tests/visibility/packagePrivateStaticInterfaceMethod.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("packagePrivateStaticViaInternal.kt")
      public void testPackagePrivateStaticViaInternal() {
        runTest("compiler/testData/diagnostics/tests/visibility/packagePrivateStaticViaInternal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("packagePrivateStaticViaTypeAlias.kt")
      public void testPackagePrivateStaticViaTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/visibility/packagePrivateStaticViaTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateCompanionInSuperClass.kt")
      public void testPrivateCompanionInSuperClass() {
        runTest("compiler/testData/diagnostics/tests/visibility/privateCompanionInSuperClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateDeclarationInAnotherFile.kt")
      public void testPrivateDeclarationInAnotherFile() {
        runTest("compiler/testData/diagnostics/tests/visibility/privateDeclarationInAnotherFile.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateFromInAnonymousObject.kt")
      public void testPrivateFromInAnonymousObject() {
        runTest("compiler/testData/diagnostics/tests/visibility/privateFromInAnonymousObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateToThis.kt")
      public void testPrivateToThis() {
        runTest("compiler/testData/diagnostics/tests/visibility/privateToThis.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateToThisExotic.kt")
      public void testPrivateToThisExotic() {
        runTest("compiler/testData/diagnostics/tests/visibility/privateToThisExotic.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("privateToThisK1Crash.kt")
      public void testPrivateToThisK1Crash() {
        runTest("compiler/testData/diagnostics/tests/visibility/privateToThisK1Crash.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedInternal.kt")
      public void testProtectedInternal() {
        runTest("compiler/testData/diagnostics/tests/visibility/protectedInternal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedVisibilityAndSmartcast_fakeOverride.kt")
      public void testProtectedVisibilityAndSmartcast_fakeOverride() {
        runTest("compiler/testData/diagnostics/tests/visibility/protectedVisibilityAndSmartcast_fakeOverride.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedVisibilityAndSmartcast_noOverride.kt")
      public void testProtectedVisibilityAndSmartcast_noOverride() {
        runTest("compiler/testData/diagnostics/tests/visibility/protectedVisibilityAndSmartcast_noOverride.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedVisibilityAndSmartcast_overrideChangesType.kt")
      public void testProtectedVisibilityAndSmartcast_overrideChangesType() {
        runTest("compiler/testData/diagnostics/tests/visibility/protectedVisibilityAndSmartcast_overrideChangesType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("protectedVisibilityAndSmartcast_overrideSameType.kt")
      public void testProtectedVisibilityAndSmartcast_overrideSameType() {
        runTest("compiler/testData/diagnostics/tests/visibility/protectedVisibilityAndSmartcast_overrideSameType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("smartCastAndSuppressedVisibility.kt")
      public void testSmartCastAndSuppressedVisibility() {
        runTest("compiler/testData/diagnostics/tests/visibility/smartCastAndSuppressedVisibility.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/warningsForBreakingChanges")
    @TestDataPath("$PROJECT_ROOT")
    public class WarningsForBreakingChanges {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInWarningsForBreakingChanges() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/warningsForBreakingChanges"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/warningsForBreakingChanges/capturedTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class CapturedTypes {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCapturedTypes() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/warningsForBreakingChanges/capturedTypes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("incorrectCapturedApproximationForValueParameters.kt")
        public void testIncorrectCapturedApproximationForValueParameters() {
          runTest("compiler/testData/diagnostics/tests/warningsForBreakingChanges/capturedTypes/incorrectCapturedApproximationForValueParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noWarningAfterSmartcast.kt")
        public void testNoWarningAfterSmartcast() {
          runTest("compiler/testData/diagnostics/tests/warningsForBreakingChanges/capturedTypes/noWarningAfterSmartcast.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noWarningOnSAMAdaption.kt")
        public void testNoWarningOnSAMAdaption() {
          runTest("compiler/testData/diagnostics/tests/warningsForBreakingChanges/capturedTypes/noWarningOnSAMAdaption.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/when")
    @TestDataPath("$PROJECT_ROOT")
    public class When {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInWhen() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/when"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AnnotatedWhenStatement.kt")
      public void testAnnotatedWhenStatement() {
        runTest("compiler/testData/diagnostics/tests/when/AnnotatedWhenStatement.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BranchBypassVal.kt")
      public void testBranchBypassVal() {
        runTest("compiler/testData/diagnostics/tests/when/BranchBypassVal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BranchBypassVar.kt")
      public void testBranchBypassVar() {
        runTest("compiler/testData/diagnostics/tests/when/BranchBypassVar.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BranchFalseBypass.kt")
      public void testBranchFalseBypass() {
        runTest("compiler/testData/diagnostics/tests/when/BranchFalseBypass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("BranchFalseBypassElse.kt")
      public void testBranchFalseBypassElse() {
        runTest("compiler/testData/diagnostics/tests/when/BranchFalseBypassElse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("CommaInWhenConditionWithoutArgument.kt")
      public void testCommaInWhenConditionWithoutArgument() {
        runTest("compiler/testData/diagnostics/tests/when/CommaInWhenConditionWithoutArgument.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedSyntaxInConditionsNoSubject.kt")
      public void testDeprecatedSyntaxInConditionsNoSubject() {
        runTest("compiler/testData/diagnostics/tests/when/deprecatedSyntaxInConditionsNoSubject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedSyntaxInConditions_after.kt")
      public void testDeprecatedSyntaxInConditions_after() {
        runTest("compiler/testData/diagnostics/tests/when/deprecatedSyntaxInConditions_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecatedSyntaxInConditions_before.kt")
      public void testDeprecatedSyntaxInConditions_before() {
        runTest("compiler/testData/diagnostics/tests/when/deprecatedSyntaxInConditions_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("DuplicatedLabels.kt")
      public void testDuplicatedLabels() {
        runTest("compiler/testData/diagnostics/tests/when/DuplicatedLabels.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ElseOnNullableEnum.kt")
      public void testElseOnNullableEnum() {
        runTest("compiler/testData/diagnostics/tests/when/ElseOnNullableEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ElseOnNullableEnumWithSmartCast.kt")
      public void testElseOnNullableEnumWithSmartCast() {
        runTest("compiler/testData/diagnostics/tests/when/ElseOnNullableEnumWithSmartCast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("EmptyConditionWithExpression.kt")
      public void testEmptyConditionWithExpression() {
        runTest("compiler/testData/diagnostics/tests/when/EmptyConditionWithExpression.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("EmptyConditionWithExpressionEnum.kt")
      public void testEmptyConditionWithExpressionEnum() {
        runTest("compiler/testData/diagnostics/tests/when/EmptyConditionWithExpressionEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveBoolean.kt")
      public void testExhaustiveBoolean() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBoolean.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveBooleanBrackets.kt")
      public void testExhaustiveBooleanBrackets() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBooleanBrackets.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveBooleanComplex.kt")
      public void testExhaustiveBooleanComplex() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBooleanComplex.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveBooleanNullable.kt")
      public void testExhaustiveBooleanNullable() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBooleanNullable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("exhaustiveBooleanWhenWithUntrivialConst_error.kt")
      public void testExhaustiveBooleanWhenWithUntrivialConst_error() {
        runTest("compiler/testData/diagnostics/tests/when/exhaustiveBooleanWhenWithUntrivialConst_error.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("exhaustiveBooleanWhenWithUntrivialConst_warning.kt")
      public void testExhaustiveBooleanWhenWithUntrivialConst_warning() {
        runTest("compiler/testData/diagnostics/tests/when/exhaustiveBooleanWhenWithUntrivialConst_warning.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveBreakContinue.kt")
      public void testExhaustiveBreakContinue() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBreakContinue.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveEnumIs.kt")
      public void testExhaustiveEnumIs() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveEnumIs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveEnumMixed.kt")
      public void testExhaustiveEnumMixed() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveEnumMixed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveInitialization.kt")
      public void testExhaustiveInitialization() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveInitialization.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveNoInitialization.kt")
      public void testExhaustiveNoInitialization() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveNoInitialization.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveNullable.kt")
      public void testExhaustiveNullable() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveNullable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustivePlatformBoolean.kt")
      public void testExhaustivePlatformBoolean() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformBoolean.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustivePlatformEnum.kt")
      public void testExhaustivePlatformEnum() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustivePlatformEnumAnnotated.kt")
      public void testExhaustivePlatformEnumAnnotated() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumAnnotated.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustivePlatformEnumElse.kt")
      public void testExhaustivePlatformEnumElse() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumElse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustivePlatformEnumNull.kt")
      public void testExhaustivePlatformEnumNull() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustivePlatformEnumStatement.kt")
      public void testExhaustivePlatformEnumStatement() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumStatement.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveReturn.kt")
      public void testExhaustiveReturn() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveReturn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveReturnThrow.kt")
      public void testExhaustiveReturnThrow() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveReturnThrow.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveValOverConditionalInit.kt")
      public void testExhaustiveValOverConditionalInit() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveValOverConditionalInit.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveVarOverConditionalInit.kt")
      public void testExhaustiveVarOverConditionalInit() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveVarOverConditionalInit.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("exhaustiveWhenWithConstVal.kt")
      public void testExhaustiveWhenWithConstVal() {
        runTest("compiler/testData/diagnostics/tests/when/exhaustiveWhenWithConstVal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWithNullabilityCheck.kt")
      public void testExhaustiveWithNullabilityCheck() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWithNullabilityCheckBefore.kt")
      public void testExhaustiveWithNullabilityCheckBefore() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckBefore.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWithNullabilityCheckBoolean.kt")
      public void testExhaustiveWithNullabilityCheckBoolean() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckBoolean.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ExhaustiveWithNullabilityCheckElse.kt")
      public void testExhaustiveWithNullabilityCheckElse() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckElse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("extractingEntireCall.kt")
      public void testExtractingEntireCall() {
        runTest("compiler/testData/diagnostics/tests/when/extractingEntireCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("flexibleEnumInSubject.kt")
      public void testFlexibleEnumInSubject() {
        runTest("compiler/testData/diagnostics/tests/when/flexibleEnumInSubject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionExhaustivenessComplex.kt")
      public void testIntersectionExhaustivenessComplex() {
        runTest("compiler/testData/diagnostics/tests/when/intersectionExhaustivenessComplex.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionExhaustivenessSimple.kt")
      public void testIntersectionExhaustivenessSimple() {
        runTest("compiler/testData/diagnostics/tests/when/intersectionExhaustivenessSimple.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10439.kt")
      public void testKt10439() {
        runTest("compiler/testData/diagnostics/tests/when/kt10439.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10809.kt")
      public void testKt10809() {
        runTest("compiler/testData/diagnostics/tests/when/kt10809.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10811.kt")
      public void testKt10811() {
        runTest("compiler/testData/diagnostics/tests/when/kt10811.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4434.kt")
      public void testKt4434() {
        runTest("compiler/testData/diagnostics/tests/when/kt4434.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt47922.kt")
      public void testKt47922() {
        runTest("compiler/testData/diagnostics/tests/when/kt47922.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt48653_after.kt")
      public void testKt48653_after() {
        runTest("compiler/testData/diagnostics/tests/when/kt48653_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt48653_before.kt")
      public void testKt48653_before() {
        runTest("compiler/testData/diagnostics/tests/when/kt48653_before.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt49702.kt")
      public void testKt49702() {
        runTest("compiler/testData/diagnostics/tests/when/kt49702.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt9929.kt")
      public void testKt9929() {
        runTest("compiler/testData/diagnostics/tests/when/kt9929.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt9972.kt")
      public void testKt9972() {
        runTest("compiler/testData/diagnostics/tests/when/kt9972.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoElseExpectedUnit.kt")
      public void testNoElseExpectedUnit() {
        runTest("compiler/testData/diagnostics/tests/when/NoElseExpectedUnit.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoElseNoExpectedType.kt")
      public void testNoElseNoExpectedType() {
        runTest("compiler/testData/diagnostics/tests/when/NoElseNoExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoElseReturnedCoercionToUnit.kt")
      public void testNoElseReturnedCoercionToUnit() {
        runTest("compiler/testData/diagnostics/tests/when/NoElseReturnedCoercionToUnit.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoElseReturnedFromLambdaExpectedInt.kt")
      public void testNoElseReturnedFromLambdaExpectedInt() {
        runTest("compiler/testData/diagnostics/tests/when/NoElseReturnedFromLambdaExpectedInt.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoElseReturnedNonUnit.kt")
      public void testNoElseReturnedNonUnit() {
        runTest("compiler/testData/diagnostics/tests/when/NoElseReturnedNonUnit.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoElseReturnedUnit.kt")
      public void testNoElseReturnedUnit() {
        runTest("compiler/testData/diagnostics/tests/when/NoElseReturnedUnit.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NoElseWhenStatement.kt")
      public void testNoElseWhenStatement() {
        runTest("compiler/testData/diagnostics/tests/when/NoElseWhenStatement.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonExhaustiveBooleanNullable.kt")
      public void testNonExhaustiveBooleanNullable() {
        runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveBooleanNullable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonExhaustiveDependentContext.kt")
      public void testNonExhaustiveDependentContext() {
        runTest("compiler/testData/diagnostics/tests/when/nonExhaustiveDependentContext.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonExhaustivePlatformEnum.kt")
      public void testNonExhaustivePlatformEnum() {
        runTest("compiler/testData/diagnostics/tests/when/NonExhaustivePlatformEnum.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonExhaustiveWarning.kt")
      public void testNonExhaustiveWarning() {
        runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWarning.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonExhaustiveWarningElse.kt")
      public void testNonExhaustiveWarningElse() {
        runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWarningElse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonExhaustiveWarningFalse.kt")
      public void testNonExhaustiveWarningFalse() {
        runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWarningFalse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonExhaustiveWarningForSealedClass.kt")
      public void testNonExhaustiveWarningForSealedClass() {
        runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWarningForSealedClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonExhaustiveWarningNull.kt")
      public void testNonExhaustiveWarningNull() {
        runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWarningNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonExhaustiveWhenStatement_1_5.kt")
      public void testNonExhaustiveWhenStatement_1_5() {
        runTest("compiler/testData/diagnostics/tests/when/nonExhaustiveWhenStatement_1_5.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonExhaustiveWhenStatement_1_6.kt")
      public void testNonExhaustiveWhenStatement_1_6() {
        runTest("compiler/testData/diagnostics/tests/when/nonExhaustiveWhenStatement_1_6.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonExhaustiveWhenStatement_1_7.kt")
      public void testNonExhaustiveWhenStatement_1_7() {
        runTest("compiler/testData/diagnostics/tests/when/nonExhaustiveWhenStatement_1_7.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("NonExhaustiveWithNullabilityCheck.kt")
      public void testNonExhaustiveWithNullabilityCheck() {
        runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWithNullabilityCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("PropertyNotInitialized.kt")
      public void testPropertyNotInitialized() {
        runTest("compiler/testData/diagnostics/tests/when/PropertyNotInitialized.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("RedundantElse.kt")
      public void testRedundantElse() {
        runTest("compiler/testData/diagnostics/tests/when/RedundantElse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ReservedExhaustiveWhen.kt")
      public void testReservedExhaustiveWhen() {
        runTest("compiler/testData/diagnostics/tests/when/ReservedExhaustiveWhen.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TopLevelSealed.kt")
      public void testTopLevelSealed() {
        runTest("compiler/testData/diagnostics/tests/when/TopLevelSealed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TypeParameterError.kt")
      public void testTypeParameterError() {
        runTest("compiler/testData/diagnostics/tests/when/TypeParameterError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TypeParameterWarning.kt")
      public void testTypeParameterWarning() {
        runTest("compiler/testData/diagnostics/tests/when/TypeParameterWarning.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("When.kt")
      public void testWhen() {
        runTest("compiler/testData/diagnostics/tests/when/When.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenAndLambdaWithExpectedType.kt")
      public void testWhenAndLambdaWithExpectedType() {
        runTest("compiler/testData/diagnostics/tests/when/whenAndLambdaWithExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenOnClass.kt")
      public void testWhenOnClass() {
        runTest("compiler/testData/diagnostics/tests/when/whenOnClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenOnNothing.kt")
      public void testWhenOnNothing() {
        runTest("compiler/testData/diagnostics/tests/when/whenOnNothing.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenOverEnumWithSameNameAsEntry.kt")
      public void testWhenOverEnumWithSameNameAsEntry() {
        runTest("compiler/testData/diagnostics/tests/when/whenOverEnumWithSameNameAsEntry.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("WhenTypeDisjunctions.kt")
      public void testWhenTypeDisjunctions() {
        runTest("compiler/testData/diagnostics/tests/when/WhenTypeDisjunctions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenWithNothingAndLambdas.kt")
      public void testWhenWithNothingAndLambdas() {
        runTest("compiler/testData/diagnostics/tests/when/whenWithNothingAndLambdas.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/when/withSubjectVariable")
      @TestDataPath("$PROJECT_ROOT")
      public class WithSubjectVariable {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInWithSubjectVariable() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/when/withSubjectVariable"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("capturingInInitializer.kt")
        public void testCapturingInInitializer() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/capturingInInitializer.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invisibleOutsideOfWhen.kt")
        public void testInvisibleOutsideOfWhen() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/invisibleOutsideOfWhen.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jumpoutInInitializer.kt")
        public void testJumpoutInInitializer() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/jumpoutInInitializer.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedWhenWithSubject.kt")
        public void testNestedWhenWithSubject() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/nestedWhenWithSubject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noSubjectVariableName.kt")
        public void testNoSubjectVariableName() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/noSubjectVariableName.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reassignmentToWhenSubjectVariable.kt")
        public void testReassignmentToWhenSubjectVariable() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/reassignmentToWhenSubjectVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("shadowingOtherVariable.kt")
        public void testShadowingOtherVariable() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/shadowingOtherVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCastOnValueBoundToSubjectVariable.kt")
        public void testSmartCastOnValueBoundToSubjectVariable() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/smartCastOnValueBoundToSubjectVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartCastsOnSubjectVariable.kt")
        public void testSmartCastsOnSubjectVariable() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/smartCastsOnSubjectVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartcastToEnum.kt")
        public void testSmartcastToEnum() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/smartcastToEnum.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartcastToSealed.kt")
        public void testSmartcastToSealed() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/smartcastToSealed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("softModifierName.kt")
        public void testSoftModifierName() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/softModifierName.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("subjectVariableInIsPattern.kt")
        public void testSubjectVariableInIsPattern() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/subjectVariableInIsPattern.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unnamedSubject.kt")
        public void testUnnamedSubject() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/unnamedSubject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unsupportedFeature.kt")
        public void testUnsupportedFeature() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/unsupportedFeature.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unsupportedVariableDeclarationsInWhenSubject.kt")
        public void testUnsupportedVariableDeclarationsInWhenSubject() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/unsupportedVariableDeclarationsInWhenSubject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unusedWhenSubjectVariable.kt")
        public void testUnusedWhenSubjectVariable() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/unusedWhenSubjectVariable.kt");
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/testsWithStdLib")
  @TestDataPath("$PROJECT_ROOT")
  public class TestsWithStdLib {
    @RepeatedTest(value = 5)
    @TestMetadata("addAllProjection.kt")
    public void testAddAllProjection() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/addAllProjection.kt");
    }

    @RepeatedTest(value = 5)
    public void testAllFilesPresentInTestsWithStdLib() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ambiguityWithUnsignedSpecificity.kt")
    public void testAmbiguityWithUnsignedSpecificity() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/ambiguityWithUnsignedSpecificity.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ArrayOfNothing.kt")
    public void testArrayOfNothing() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/ArrayOfNothing.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("assignedInSynchronized.kt")
    public void testAssignedInSynchronized() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/assignedInSynchronized.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("buildLazyValueForMap.kt")
    public void testBuildLazyValueForMap() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/buildLazyValueForMap.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("CallCompanionProtectedNonStatic.kt")
    public void testCallCompanionProtectedNonStatic() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/CallCompanionProtectedNonStatic.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("CallToMainRedeclaredInMultiFile.kt")
    public void testCallToMainRedeclaredInMultiFile() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/CallToMainRedeclaredInMultiFile.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("commonCollections.kt")
    public void testCommonCollections() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/commonCollections.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("comparingDifferentSubclassesCommonInterface.kt")
    public void testComparingDifferentSubclassesCommonInterface() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/comparingDifferentSubclassesCommonInterface.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("comparingPlatformTypes.kt")
    public void testComparingPlatformTypes() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/comparingPlatformTypes.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("comparingSmartCastValueToBoolean.kt")
    public void testComparingSmartCastValueToBoolean() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/comparingSmartCastValueToBoolean.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("comparingTripleWithPair.kt")
    public void testComparingTripleWithPair() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/comparingTripleWithPair.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("compileTimeUnsignedArray.kt")
    public void testCompileTimeUnsignedArray() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/compileTimeUnsignedArray.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("elvisOnJavaList.kt")
    public void testElvisOnJavaList() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/elvisOnJavaList.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("elvisOnUnitInLet.kt")
    public void testElvisOnUnitInLet() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/elvisOnUnitInLet.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("enumEntryInitialization.kt")
    public void testEnumEntryInitialization() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/enumEntryInitialization.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("equalityCompatibilityCommonCases.kt")
    public void testEqualityCompatibilityCommonCases() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/equalityCompatibilityCommonCases.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("equalityCompatibilityOldBehavior_Off.kt")
    public void testEqualityCompatibilityOldBehavior_Off() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/equalityCompatibilityOldBehavior_Off.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("equalityCompatibilityOldBehavior_On.kt")
    public void testEqualityCompatibilityOldBehavior_On() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/equalityCompatibilityOldBehavior_On.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("exitProcess.kt")
    public void testExitProcess() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/exitProcess.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("genericContainer.kt")
    public void testGenericContainer() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/genericContainer.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("greater.kt")
    public void testGreater() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/greater.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("hugeUnresolvedKotlinxHtml.kt")
    public void testHugeUnresolvedKotlinxHtml() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/hugeUnresolvedKotlinxHtml.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("ifElseJavaList.kt")
    public void testIfElseJavaList() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/ifElseJavaList.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("implicitCastToAny.kt")
    public void testImplicitCastToAny() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/implicitCastToAny.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("implicitNothingInDelegate.kt")
    public void testImplicitNothingInDelegate() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/implicitNothingInDelegate.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("InaccessibleInternalClass.kt")
    public void testInaccessibleInternalClass() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/InaccessibleInternalClass.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("incorrectComparatorInvocation.kt")
    public void testIncorrectComparatorInvocation() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/incorrectComparatorInvocation.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("instar.kt")
    public void testInstar() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/instar.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("javaClassOnCompanion.kt")
    public void testJavaClassOnCompanion() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/javaClassOnCompanion.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("javaForKClass.kt")
    public void testJavaForKClass() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/javaForKClass.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt54410.kt")
    public void testKt54410() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/kt54410.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt55503.kt")
    public void testKt55503() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/kt55503.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt55503_2.kt")
    public void testKt55503_2() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/kt55503_2.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt55747.kt")
    public void testKt55747() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/kt55747.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt8050.kt")
    public void testKt8050() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/kt8050.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt9078.kt")
    public void testKt9078() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/kt9078.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("kt9985.kt")
    public void testKt9985() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/kt9985.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("labelClashes.kt")
    public void testLabelClashes() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/labelClashes.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("labelClashesWithContextReceivers.kt")
    public void testLabelClashesWithContextReceivers() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/labelClashesWithContextReceivers.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("listAssignmentInWhen.kt")
    public void testListAssignmentInWhen() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/listAssignmentInWhen.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("outstar.kt")
    public void testOutstar() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/outstar.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("overrideWithFunctionalType.kt")
    public void testOverrideWithFunctionalType() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/overrideWithFunctionalType.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("pairReference.kt")
    public void testPairReference() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/pairReference.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("PropertyDelegateWithPrivateSet.kt")
    public void testPropertyDelegateWithPrivateSet() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/PropertyDelegateWithPrivateSet.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("pureReifiable.kt")
    public void testPureReifiable() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/pureReifiable.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("pureReifiableArrayOperations.kt")
    public void testPureReifiableArrayOperations() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/pureReifiableArrayOperations.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("RenameOnImportHidesDefaultImport.kt")
    public void testRenameOnImportHidesDefaultImport() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/RenameOnImportHidesDefaultImport.kt");
    }

    @RepeatedTest(value = 5)
    @TestMetadata("shadowingInDestructuring.kt")
    public void testShadowingInDestructuring() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/shadowingInDestructuring.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations")
    @TestDataPath("$PROJECT_ROOT")
    public class Annotations {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInAnnotations() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationTargetResolvedAmbiguously.kt")
      public void testAnnotationTargetResolvedAmbiguously() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationTargetResolvedAmbiguously.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationsTargetingLateinitAccessors.kt")
      public void testAnnotationsTargetingLateinitAccessors() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationsTargetingLateinitAccessors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotationsTargetingNonExistentAccessor.kt")
      public void testAnnotationsTargetingNonExistentAccessor() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationsTargetingNonExistentAccessor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ClassObjectAnnotatedWithItsKClass.kt")
      public void testClassObjectAnnotatedWithItsKClass() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/ClassObjectAnnotatedWithItsKClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("defaultValueMustBeConstant.kt")
      public void testDefaultValueMustBeConstant() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/defaultValueMustBeConstant.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("dontPropagateExact.kt")
      public void testDontPropagateExact() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/dontPropagateExact.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("explicitMetadata.kt")
      public void testExplicitMetadata() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/explicitMetadata.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("jvmRecordWithoutJdk15.kt")
      public void testJvmRecordWithoutJdk15() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmRecordWithoutJdk15.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("JvmSyntheticOnDelegate.kt")
      public void testJvmSyntheticOnDelegate() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/JvmSyntheticOnDelegate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multipleRepeatables.kt")
      public void testMultipleRepeatables() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/multipleRepeatables.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("qualifiedCallValue.kt")
      public void testQualifiedCallValue() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/qualifiedCallValue.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("strictfpOnClass.kt")
      public void testStrictfpOnClass() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/strictfpOnClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Synchronized.kt")
      public void testSynchronized() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/Synchronized.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("SynchronizedOnInterfaceCompanionMember.kt")
      public void testSynchronizedOnInterfaceCompanionMember() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/SynchronizedOnInterfaceCompanionMember.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("targetuse.kt")
      public void testTargetuse() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/targetuse.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("throws.kt")
      public void testThrows() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/throws.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("throwsByStarWinsBuiltin.kt")
      public void testThrowsByStarWinsBuiltin() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/throwsByStarWinsBuiltin.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("TransientOnDelegate.kt")
      public void testTransientOnDelegate() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/TransientOnDelegate.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("Volatile.kt")
      public void testVolatile() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/Volatile.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationApplicability {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInAnnotationApplicability() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationsOnUseSiteTargets.kt")
        public void testAnnotationsOnUseSiteTargets() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/annotationsOnUseSiteTargets.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("illegalPlatformName.kt")
        public void testIllegalPlatformName() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/illegalPlatformName.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jvmName.kt")
        public void testJvmName() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/jvmName.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jvmNameOnMangledNames.kt")
        public void testJvmNameOnMangledNames() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/jvmNameOnMangledNames.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multifileClassPart.kt")
        public void testMultifileClassPart() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/multifileClassPart.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("multifileClassPartWithJavaAnnotation.kt")
        public void testMultifileClassPartWithJavaAnnotation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/multifileClassPartWithJavaAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suppressOnFunctionReference.kt")
        public void testSuppressOnFunctionReference() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/suppressOnFunctionReference.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationParameterMustBeConstant {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInAnnotationParameterMustBeConstant() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("array.kt")
        public void testArray() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/array.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/simple.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useOfNonConstVal.kt")
        public void testUseOfNonConstVal() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/useOfNonConstVal.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("vararg.kt")
        public void testVararg() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/vararg.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationParameters {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInAnnotationParameters() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt10136.kt")
        public void testKt10136() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/kt10136.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nonConstValAsArgument.kt")
        public void testNonConstValAsArgument() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/nonConstValAsArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("orderWithValue.kt")
        public void testOrderWithValue() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/orderWithValue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("orderWithoutValue.kt")
        public void testOrderWithoutValue() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/orderWithoutValue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valueArray.kt")
        public void testValueArray() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/valueArray.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valueArrayAndOtherDefault.kt")
        public void testValueArrayAndOtherDefault() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/valueArrayAndOtherDefault.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valueArrayOnly.kt")
        public void testValueArrayOnly() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/valueArrayOnly.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valueArrayWithDefault.kt")
        public void testValueArrayWithDefault() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/valueArrayWithDefault.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationWithVarargParameter {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInAnnotationWithVarargParameter() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("javaAnnotationWithVarargArgument.kt")
        public void testJavaAnnotationWithVarargArgument() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter/javaAnnotationWithVarargArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinAnnotationWithVarargArgument.kt")
        public void testKotlinAnnotationWithVarargArgument() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter/kotlinAnnotationWithVarargArgument.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter")
      @TestDataPath("$PROJECT_ROOT")
      public class JavaAnnotationsWithKClassParameter {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInJavaAnnotationsWithKClassParameter() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("annotationAsArgument.kt")
        public void testAnnotationAsArgument() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/annotationAsArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("arg.kt")
        public void testArg() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/arg.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("argAndOtherDefault.kt")
        public void testArgAndOtherDefault() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/argAndOtherDefault.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("argArray.kt")
        public void testArgArray() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/argArray.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("argWithDefault.kt")
        public void testArgWithDefault() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/argWithDefault.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("argWithDefaultAndOther.kt")
        public void testArgWithDefaultAndOther() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/argWithDefaultAndOther.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("twoArgs.kt")
        public void testTwoArgs() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/twoArgs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("value.kt")
        public void testValue() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/value.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valueAndOtherDefault.kt")
        public void testValueAndOtherDefault() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/valueAndOtherDefault.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valueArray.kt")
        public void testValueArray() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/valueArray.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valueWithDefault.kt")
        public void testValueWithDefault() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/valueWithDefault.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valueWithDefaultAndOther.kt")
        public void testValueWithDefaultAndOther() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/valueWithDefaultAndOther.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmDefault {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInJvmDefault() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("generic.kt")
        public void testGeneric() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/generic.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jvmDefaults.kt")
        public void testJvmDefaults() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaults.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jvmDefaultsWithJava.kt")
        public void testJvmDefaultsWithJava() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultsWithJava.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/allCompatibility")
        @TestDataPath("$PROJECT_ROOT")
        public class AllCompatibility {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInAllCompatibility() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/allCompatibility"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("specialization.kt")
          public void testSpecialization() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/allCompatibility/specialization.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithCompatibility")
        @TestDataPath("$PROJECT_ROOT")
        public class JvmDefaultWithCompatibility {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInJvmDefaultWithCompatibility() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithCompatibility"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("target8.kt")
          public void testTarget8() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithCompatibility/target8.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("target8Disabled.kt")
          public void testTarget8Disabled() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithCompatibility/target8Disabled.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithoutCompatibility")
        @TestDataPath("$PROJECT_ROOT")
        public class JvmDefaultWithoutCompatibility {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInJvmDefaultWithoutCompatibility() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithoutCompatibility"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("target8.kt")
          public void testTarget8() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithoutCompatibility/target8.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("target8Disabled.kt")
          public void testTarget8Disabled() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithoutCompatibility/target8Disabled.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmField")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmField {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInJvmField() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmField"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inMultiFileFacade.kt")
        public void testInMultiFileFacade() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmField/inMultiFileFacade.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inSingleFileFacade.kt")
        public void testInSingleFileFacade() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmField/inSingleFileFacade.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("interface13.kt")
        public void testInterface13() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmField/interface13.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jvmFieldApplicability_1_5.kt")
        public void testJvmFieldApplicability_1_5() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmField/jvmFieldApplicability_1_5.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jvmFieldApplicability_1_6.kt")
        public void testJvmFieldApplicability_1_6() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmField/jvmFieldApplicability_1_6.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmOverloads {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInJvmOverloads() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("JvmOverloadWithNoDefaults.kt")
        public void testJvmOverloadWithNoDefaults() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/JvmOverloadWithNoDefaults.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jvmOverloadsOnAbstractMethods.kt")
        public void testJvmOverloadsOnAbstractMethods() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/jvmOverloadsOnAbstractMethods.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jvmOverloadsOnAnnotationClassConstructor_1_3.kt")
        public void testJvmOverloadsOnAnnotationClassConstructor_1_3() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/jvmOverloadsOnAnnotationClassConstructor_1_3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jvmOverloadsOnAnnotationClassConstructor_1_4.kt")
        public void testJvmOverloadsOnAnnotationClassConstructor_1_4() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/jvmOverloadsOnAnnotationClassConstructor_1_4.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jvmOverloadsOnMangledFunctions.kt")
        public void testJvmOverloadsOnMangledFunctions() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/jvmOverloadsOnMangledFunctions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("jvmOverloadsOnPrivate.kt")
        public void testJvmOverloadsOnPrivate() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/jvmOverloadsOnPrivate.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmPackageName")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmPackageName {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInJvmPackageName() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmPackageName"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("incorrectJvmPackageName.kt")
        public void testIncorrectJvmPackageName() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmPackageName/incorrectJvmPackageName.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmSpecialFunctions")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmSpecialFunctions {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInJvmSpecialFunctions() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmSpecialFunctions"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("apiVersionIsAtLeastHasConstArguments.kt")
        public void testApiVersionIsAtLeastHasConstArguments() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmSpecialFunctions/apiVersionIsAtLeastHasConstArguments.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmStatic {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInJvmStatic() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constOrJvmFieldProperty.kt")
        public void testConstOrJvmFieldProperty() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/constOrJvmFieldProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorProperty.kt")
        public void testConstructorProperty() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/constructorProperty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorProperty_LL13.kt")
        public void testConstructorProperty_LL13() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/constructorProperty_LL13.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructors.kt")
        public void testConstructors() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/constructors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("finalAndAbstract.kt")
        public void testFinalAndAbstract() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/finalAndAbstract.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functions.kt")
        public void testFunctions() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/functions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functions_LL13.kt")
        public void testFunctions_LL13() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/functions_LL13.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("interfaceCompanion_LL12.kt")
        public void testInterfaceCompanion_LL12() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/interfaceCompanion_LL12.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("interfaceCompanion_LL13_18.kt")
        public void testInterfaceCompanion_LL13_18() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/interfaceCompanion_LL13_18.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localFun.kt")
        public void testLocalFun() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/localFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localFun_LL13.kt")
        public void testLocalFun_LL13() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/localFun_LL13.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("mainInObject.kt")
        public void testMainInObject() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/mainInObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("privateCompanionObject.kt")
        public void testPrivateCompanionObject() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/privateCompanionObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("property.kt")
        public void testProperty() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/property.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("property_LL13.kt")
        public void testProperty_LL13() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/property_LL13.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass")
      @TestDataPath("$PROJECT_ROOT")
      public class KClass {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInKClass() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kClassArrayInAnnotationsInVariance.kt")
        public void testKClassArrayInAnnotationsInVariance() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassArrayInAnnotationsInVariance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kClassArrayInAnnotationsOutVariance.kt")
        public void testKClassArrayInAnnotationsOutVariance() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassArrayInAnnotationsOutVariance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kClassInAnnotation.kt")
        public void testKClassInAnnotation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassInAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kClassInAnnotationsInVariance.kt")
        public void testKClassInAnnotationsInVariance() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassInAnnotationsInVariance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kClassInAnnotationsOutVariance.kt")
        public void testKClassInAnnotationsOutVariance() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassInAnnotationsOutVariance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kClassInvariantTP.kt")
        public void testKClassInvariantTP() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassInvariantTP.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kClassOutArrayInAnnotationsOutVariance.kt")
        public void testKClassOutArrayInAnnotationsOutVariance() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassOutArrayInAnnotationsOutVariance.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument")
      @TestDataPath("$PROJECT_ROOT")
      public class ProhibitPositionedArgument {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInProhibitPositionedArgument() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinAnnotation.kt")
        public void testKotlinAnnotation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/kotlinAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("tooManyArgs.kt")
        public void testTooManyArgs() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/tooManyArgs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeMismatch.kt")
        public void testTypeMismatch() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/typeMismatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withValue.kt")
        public void testWithValue() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/withValue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withoutValue.kt")
        public void testWithoutValue() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/withoutValue.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired")
      @TestDataPath("$PROJECT_ROOT")
      public class SubclassOptInRequired {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSubclassOptInRequired() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("CorrectApplicability.kt")
        public void testCorrectApplicability() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/CorrectApplicability.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Experimentality.kt")
        public void testExperimentality() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/Experimentality.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("IncorrectApplicability.kt")
        public void testIncorrectApplicability() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/IncorrectApplicability.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritingByLocalClassifiers.kt")
        public void testInheritingByLocalClassifiers() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/InheritingByLocalClassifiers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InheritingDifferentOptInLevels.kt")
        public void testInheritingDifferentOptInLevels() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/InheritingDifferentOptInLevels.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InnerAndNestedClasses.kt")
        public void testInnerAndNestedClasses() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/InnerAndNestedClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("InnerClasses.kt")
        public void testInnerClasses() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/InnerClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("JavaKotlinInterop.kt")
        public void testJavaKotlinInterop() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/JavaKotlinInterop.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Module.kt")
        public void testModule() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/Module.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NestedClasses.kt")
        public void testNestedClasses() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/NestedClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("NotApiMarkerAsArgument.kt")
        public void testNotApiMarkerAsArgument() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/NotApiMarkerAsArgument.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("Typealias.kt")
        public void testTypealias() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/Typealias.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("UsageOptInIsNotImplied.kt")
        public void testUsageOptInIsNotImplied() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/UsageOptInIsNotImplied.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("WithAbstractClasses.kt")
        public void testWithAbstractClasses() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/WithAbstractClasses.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("WithInheritanceByDelegation.kt")
        public void testWithInheritanceByDelegation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/WithInheritanceByDelegation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("WithInterfaces.kt")
        public void testWithInterfaces() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/WithInterfaces.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("WithOpenClasses.kt")
        public void testWithOpenClasses() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/WithOpenClasses.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/assert")
    @TestDataPath("$PROJECT_ROOT")
    public class Assert {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInAssert() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/assert"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("cast.kt")
      public void testCast() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/assert/cast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("safeCall.kt")
      public void testSafeCall() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/assert/safeCall.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/builderInference")
    @TestDataPath("$PROJECT_ROOT")
    public class BuilderInference {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInBuilderInference() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/builderInference"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("buildListRemoveAddInBranches.kt")
      public void testBuildListRemoveAddInBranches() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/buildListRemoveAddInBranches.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("buildListToUpperBound.kt")
      public void testBuildListToUpperBound() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/buildListToUpperBound.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("buildListToUpperBoundForbidden.kt")
      public void testBuildListToUpperBoundForbidden() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/buildListToUpperBoundForbidden.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("buildListToUpperBoundInLazy.kt")
      public void testBuildListToUpperBoundInLazy() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/buildListToUpperBoundInLazy.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("buildListToUpperBoundInLazyForbidden.kt")
      public void testBuildListToUpperBoundInLazyForbidden() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/buildListToUpperBoundInLazyForbidden.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("completeIrrelevantCalls.kt")
      public void testCompleteIrrelevantCalls() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/completeIrrelevantCalls.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inconsistentTypeInference.kt")
      public void testInconsistentTypeInference() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/inconsistentTypeInference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inconsistentTypeInference2.kt")
      public void testInconsistentTypeInference2() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/inconsistentTypeInference2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inconsistentTypeInference_noReporting.kt")
      public void testInconsistentTypeInference_noReporting() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/inconsistentTypeInference_noReporting.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incorrectCalls.kt")
      public void testIncorrectCalls() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/incorrectCalls.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incorrectCallsWithRestrictions.kt")
      public void testIncorrectCallsWithRestrictions() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/incorrectCallsWithRestrictions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inferCoroutineTypeInOldVersion.kt")
      public void testInferCoroutineTypeInOldVersion() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/inferCoroutineTypeInOldVersion.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inferenceFromLambdaReturnStatement.kt")
      public void testInferenceFromLambdaReturnStatement() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/inferenceFromLambdaReturnStatement.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inferenceFromLambdaReturnType.kt")
      public void testInferenceFromLambdaReturnType() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/inferenceFromLambdaReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("k2StubTypeLeak.kt")
      public void testK2StubTypeLeak() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/k2StubTypeLeak.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveUsualCallWithBuilderInference.kt")
      public void testResolveUsualCallWithBuilderInference() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/resolveUsualCallWithBuilderInference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveUsualCallWithBuilderInferenceWithRestrictions.kt")
      public void testResolveUsualCallWithBuilderInferenceWithRestrictions() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/resolveUsualCallWithBuilderInferenceWithRestrictions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeVariableShouldNotBeFixed.kt")
      public void testTypeVariableShouldNotBeFixed() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/typeVariableShouldNotBeFixed.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unsafeAssignment.kt")
      public void testUnsafeAssignment() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/unsafeAssignment.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unsafeAssignmentExtra.kt")
      public void testUnsafeAssignmentExtra() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/unsafeAssignmentExtra.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unsafeAssignment_noReport.kt")
      public void testUnsafeAssignment_noReport() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/unsafeAssignment_noReport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("upperBoundViolation.kt")
      public void testUpperBoundViolation() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/upperBoundViolation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("upperBoundViolation_noReporting.kt")
      public void testUpperBoundViolation_noReporting() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/upperBoundViolation_noReporting.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useInferenceInformationFromExtension.kt")
      public void testUseInferenceInformationFromExtension() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/useInferenceInformationFromExtension.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useInferenceInformationFromExtensionWithRestrictions.kt")
      public void testUseInferenceInformationFromExtensionWithRestrictions() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builderInference/useInferenceInformationFromExtensionWithRestrictions.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/builtins")
    @TestDataPath("$PROJECT_ROOT")
    public class Builtins {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInBuiltins() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/builtins"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arraysAreCloneable.kt")
      public void testArraysAreCloneable() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/builtins/arraysAreCloneable.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/cast")
    @TestDataPath("$PROJECT_ROOT")
    public class Cast {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInCast() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/cast"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("AsInsideIn.kt")
      public void testAsInsideIn() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/cast/AsInsideIn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsArray.kt")
      public void testIsArray() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/cast/IsArray.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("IsReified.kt")
      public void testIsReified() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/cast/IsReified.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts")
    @TestDataPath("$PROJECT_ROOT")
    public class Contracts {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInContracts() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("complexConditionWithSafeCall.kt")
      public void testComplexConditionWithSafeCall() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/complexConditionWithSafeCall.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow")
      @TestDataPath("$PROJECT_ROOT")
      public class Controlflow {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInControlflow() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining")
        @TestDataPath("$PROJECT_ROOT")
        public class FlowInlining {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInFlowInlining() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("breakContinuesInInlinedLambda.kt")
          public void testBreakContinuesInInlinedLambda() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/breakContinuesInInlinedLambda.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("complexTryWithTryInFinally.kt")
          public void testComplexTryWithTryInFinally() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/complexTryWithTryInFinally.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("expressionBody.kt")
          public void testExpressionBody() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/expressionBody.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("implicitCastToAnyInReturnType.kt")
          public void testImplicitCastToAnyInReturnType() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/implicitCastToAnyInReturnType.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("inlinedLambdaAlwaysThrows.kt")
          public void testInlinedLambdaAlwaysThrows() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/inlinedLambdaAlwaysThrows.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("irrelevantUnknownClosure.kt")
          public void testIrrelevantUnknownClosure() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/irrelevantUnknownClosure.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("labeledReturns.kt")
          public void testLabeledReturns() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/labeledReturns.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("nestedTryCatchFinally.kt")
          public void testNestedTryCatchFinally() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/nestedTryCatchFinally.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("nestedTryCatchs.kt")
          public void testNestedTryCatchs() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/nestedTryCatchs.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("nonLocalReturn.kt")
          public void testNonLocalReturn() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/nonLocalReturn.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("nonReturningInlinedLambda.kt")
          public void testNonReturningInlinedLambda() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/nonReturningInlinedLambda.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("safeCallAndInPlaceReturn.kt")
          public void testSafeCallAndInPlaceReturn() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/safeCallAndInPlaceReturn.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("severalJumpOutsFromInlinedLambda.kt")
          public void testSeveralJumpOutsFromInlinedLambda() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/severalJumpOutsFromInlinedLambda.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("throwIfNotCalled.kt")
          public void testThrowIfNotCalled() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/throwIfNotCalled.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("tryCatch.kt")
          public void testTryCatch() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/tryCatch.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("tryCatchFinally.kt")
          public void testTryCatchFinally() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/tryCatchFinally.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("typeMismatch.kt")
          public void testTypeMismatch() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/typeMismatch.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("unreachableCode.kt")
          public void testUnreachableCode() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/unreachableCode.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization")
        @TestDataPath("$PROJECT_ROOT")
        public class Initialization {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInInitialization() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/atLeastOnce")
          @TestDataPath("$PROJECT_ROOT")
          public class AtLeastOnce {
            @RepeatedTest(value = 5)
            public void testAllFilesPresentInAtLeastOnce() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/atLeastOnce"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
            }

            @RepeatedTest(value = 5)
            @TestMetadata("valDefiniteReassignment.kt")
            public void testValDefiniteReassignment() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/atLeastOnce/valDefiniteReassignment.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("varDefiniteInitialization.kt")
            public void testVarDefiniteInitialization() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/atLeastOnce/varDefiniteInitialization.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("varIndefiniteInitialization.kt")
            public void testVarIndefiniteInitialization() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/atLeastOnce/varIndefiniteInitialization.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce")
          @TestDataPath("$PROJECT_ROOT")
          public class ExactlyOnce {
            @RepeatedTest(value = 5)
            public void testAllFilesPresentInExactlyOnce() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
            }

            @RepeatedTest(value = 5)
            @TestMetadata("valDefiniteInitialization.kt")
            public void testValDefiniteInitialization() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce/valDefiniteInitialization.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("valDefiniteReassignment.kt")
            public void testValDefiniteReassignment() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce/valDefiniteReassignment.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("valIndefiniteInitialization.kt")
            public void testValIndefiniteInitialization() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce/valIndefiniteInitialization.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("varDefiniteInitalization.kt")
            public void testVarDefiniteInitalization() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce/varDefiniteInitalization.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("varIndefiniteInitialization.kt")
            public void testVarIndefiniteInitialization() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce/varIndefiniteInitialization.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("withReceiver.kt")
            public void testWithReceiver() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce/withReceiver.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/unknown")
          @TestDataPath("$PROJECT_ROOT")
          public class Unknown {
            @RepeatedTest(value = 5)
            public void testAllFilesPresentInUnknown() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/unknown"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
            }

            @RepeatedTest(value = 5)
            @TestMetadata("unknownInvocations.kt")
            public void testUnknownInvocations() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/unknown/unknownInvocations.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl")
      @TestDataPath("$PROJECT_ROOT")
      public class Dsl {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDsl() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callUsualContractFunction.kt")
        public void testCallUsualContractFunction() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/callUsualContractFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fqnContractFunction.kt")
        public void testFqnContractFunction() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/fqnContractFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("rewriteAtSliceFunctor.kt")
        public void testRewriteAtSliceFunctor() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/rewriteAtSliceFunctor.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("useBeforeDeclaration.kt")
        public void testUseBeforeDeclaration() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/useBeforeDeclaration.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors")
        @TestDataPath("$PROJECT_ROOT")
        public class Errors {
          @RepeatedTest(value = 5)
          @TestMetadata("accessToOuterThis.kt")
          public void testAccessToOuterThis() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/accessToOuterThis.kt");
          }

          @RepeatedTest(value = 5)
          public void testAllFilesPresentInErrors() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("booleanComparisons.kt")
          public void testBooleanComparisons() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/booleanComparisons.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("callInContractDescription.kt")
          public void testCallInContractDescription() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/callInContractDescription.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("contractCallSites.1.3.kt")
          public void testContractCallSites_1_3() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/contractCallSites.1.3.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("contractCallSites.1.4.kt")
          public void testContractCallSites_1_4() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/contractCallSites.1.4.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("emptyContract.kt")
          public void testEmptyContract() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/emptyContract.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("illegalConstructionInContractBlock.kt")
          public void testIllegalConstructionInContractBlock() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/illegalConstructionInContractBlock.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("illegalEqualsCondition.kt")
          public void testIllegalEqualsCondition() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/illegalEqualsCondition.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("nestedConditionalEffects.kt")
          public void testNestedConditionalEffects() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/nestedConditionalEffects.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("nonLambdaLiteralAsArgument.kt")
          public void testNonLambdaLiteralAsArgument() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/nonLambdaLiteralAsArgument.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("notFirstStatement.kt")
          public void testNotFirstStatement() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/notFirstStatement.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("recursiveContract.kt")
          public void testRecursiveContract() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/recursiveContract.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("recursiveContractCustomContractFunction.kt")
          public void testRecursiveContractCustomContractFunction() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/recursiveContractCustomContractFunction.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("referenceToProperty.1.3.kt")
          public void testReferenceToProperty_1_3() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/referenceToProperty.1.3.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("referenceToProperty.1.4.kt")
          public void testReferenceToProperty_1_4() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/referenceToProperty.1.4.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("typeReferences.1.3.kt")
          public void testTypeReferences_1_3() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/typeReferences.1.3.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("typeReferences.1.4.kt")
          public void testTypeReferences_1_4() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/typeReferences.1.4.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("unlabeledReceiver.kt")
          public void testUnlabeledReceiver() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/unlabeledReceiver.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib")
      @TestDataPath("$PROJECT_ROOT")
      public class FromStdlib {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInFromStdlib() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("check.kt")
        public void testCheck() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/check.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("contractWithSubstitution.kt")
        public void testContractWithSubstitution() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/contractWithSubstitution.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("fromStandardKt.kt")
        public void testFromStandardKt() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/fromStandardKt.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("isNullOrBlank.kt")
        public void testIsNullOrBlank() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/isNullOrBlank.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("isNullOrEmpty.kt")
        public void testIsNullOrEmpty() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/isNullOrEmpty.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt45243.kt")
        public void testKt45243() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/kt45243.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("require.kt")
        public void testRequire() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/require.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("synchronize.kt")
        public void testSynchronize() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/synchronize.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/newSyntax")
      @TestDataPath("$PROJECT_ROOT")
      public class NewSyntax {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNewSyntax() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/newSyntax"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("complexContractDescription.kt")
        public void testComplexContractDescription() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/newSyntax/complexContractDescription.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onelineFunctionsContractDescription.kt")
        public void testOnelineFunctionsContractDescription() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/newSyntax/onelineFunctionsContractDescription.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propertyAccessorsContractDescription.kt")
        public void testPropertyAccessorsContractDescription() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/newSyntax/propertyAccessorsContractDescription.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleFunctionsContractDescription.kt")
        public void testSimpleFunctionsContractDescription() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/newSyntax/simpleFunctionsContractDescription.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts")
      @TestDataPath("$PROJECT_ROOT")
      public class Smartcasts {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSmartcasts() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callWithDefaultValue.kt")
        public void testCallWithDefaultValue() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/callWithDefaultValue.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("catchExceptionSpilling.kt")
        public void testCatchExceptionSpilling() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/catchExceptionSpilling.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("compositions.kt")
        public void testCompositions() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/compositions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("contractWithDeepGenerics.kt")
        public void testContractWithDeepGenerics() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/contractWithDeepGenerics.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("contractsOnMembers.kt")
        public void testContractsOnMembers() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/contractsOnMembers.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("deeplyNested.kt")
        public void testDeeplyNested() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/deeplyNested.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionReceiver.kt")
        public void testExtensionReceiver() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/extensionReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionReceiver_after.kt")
        public void testExtensionReceiver_after() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/extensionReceiver_after.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("externalArguments.kt")
        public void testExternalArguments() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/externalArguments.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionInCompanion.kt")
        public void testFunctionInCompanion() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/functionInCompanion.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intersectingInfo.kt")
        public void testIntersectingInfo() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/intersectingInfo.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("intersectionTypes.kt")
        public void testIntersectionTypes() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/intersectionTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nullabilitySmartcastWhenNullability.kt")
        public void testNullabilitySmartcastWhenNullability() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/nullabilitySmartcastWhenNullability.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("partiallyIncorrect.kt")
        public void testPartiallyIncorrect() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/partiallyIncorrect.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("receiver.kt")
        public void testReceiver() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/receiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("reifiedGeneric.kt")
        public void testReifiedGeneric() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/reifiedGeneric.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("returnsImpliesAndSafeCalls.kt")
        public void testReturnsImpliesAndSafeCalls() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/returnsImpliesAndSafeCalls.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("safecallAndReturnsNull.kt")
        public void testSafecallAndReturnsNull() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/safecallAndReturnsNull.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("smartcastOnReceiverInComplexCondition.kt")
        public void testSmartcastOnReceiverInComplexCondition() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/smartcastOnReceiverInComplexCondition.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("throwsEffect.kt")
        public void testThrowsEffect() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/throwsEffect.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeSmartcastWhenNullability.kt")
        public void testTypeSmartcastWhenNullability() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/typeSmartcastWhenNullability.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("unreachableBranches.kt")
        public void testUnreachableBranches() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/unreachableBranches.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valueOfContractedFunctionIngored.kt")
        public void testValueOfContractedFunctionIngored() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/valueOfContractedFunctionIngored.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/multieffect")
        @TestDataPath("$PROJECT_ROOT")
        public class Multieffect {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInMultieffect() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/multieffect"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("implicitIff.kt")
          public void testImplicitIff() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/multieffect/implicitIff.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("returnsAndCalls.kt")
          public void testReturnsAndCalls() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/multieffect/returnsAndCalls.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests")
        @TestDataPath("$PROJECT_ROOT")
        public class OperatorsTests {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInOperatorsTests() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("andOperator.kt")
          public void testAndOperator() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/andOperator.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("andOperatorWithConstant.kt")
          public void testAndOperatorWithConstant() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/andOperatorWithConstant.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("andOperatorWithUnknown.kt")
          public void testAndOperatorWithUnknown() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/andOperatorWithUnknown.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("equalsOperator.kt")
          public void testEqualsOperator() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/equalsOperator.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("equalsWithNullableBoolean.kt")
          public void testEqualsWithNullableBoolean() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/equalsWithNullableBoolean.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("isInstanceOperator.kt")
          public void testIsInstanceOperator() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/isInstanceOperator.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("orOperator.kt")
          public void testOrOperator() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/orOperator.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("orOperatorWithConstant.kt")
          public void testOrOperatorWithConstant() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/orOperatorWithConstant.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("orOperatorWithUnknown.kt")
          public void testOrOperatorWithUnknown() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/orOperatorWithUnknown.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/when")
        @TestDataPath("$PROJECT_ROOT")
        public class When {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInWhen() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/when"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("kt36818.kt")
          public void testKt36818() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/when/kt36818.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("withSubject.kt")
          public void testWithSubject() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/when/withSubject.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("withSubjectNullableBoolean.kt")
          public void testWithSubjectNullableBoolean() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/when/withSubjectNullableBoolean.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("withoutSubject.kt")
          public void testWithoutSubject() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/when/withoutSubject.kt");
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines")
    @TestDataPath("$PROJECT_ROOT")
    public class Coroutines {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInCoroutines() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/coroutines"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("allowNullOperatorsForResult_1_3.kt")
      public void testAllowNullOperatorsForResult_1_3() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/allowNullOperatorsForResult_1_3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("allowNullOperatorsForResult_1_4.kt")
      public void testAllowNullOperatorsForResult_1_4() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/allowNullOperatorsForResult_1_4.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("allowResultInReturnTypeWithFlag.kt")
      public void testAllowResultInReturnTypeWithFlag() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/allowResultInReturnTypeWithFlag.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("allowResultInReturnType_1_3.kt")
      public void testAllowResultInReturnType_1_3() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/allowResultInReturnType_1_3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("allowResultInReturnType_1_4.kt")
      public void testAllowResultInReturnType_1_4() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/allowResultInReturnType_1_4.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basicBuildListBuildMap.kt")
      public void testBasicBuildListBuildMap() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/basicBuildListBuildMap.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callableReferences.kt")
      public void testCallableReferences() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReferences.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("coroutineContext.kt")
      public void testCoroutineContext() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/coroutineContext.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("illegalSuspendCalls.kt")
      public void testIllegalSuspendCalls() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/illegalSuspendCalls.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("illegalSuspendCallsForDelegated.kt")
      public void testIllegalSuspendCallsForDelegated() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/illegalSuspendCallsForDelegated.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("irrelevantSuspendDeclarations.kt")
      public void testIrrelevantSuspendDeclarations() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/irrelevantSuspendDeclarations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kSuspendFunctionAsSupertype.kt")
      public void testKSuspendFunctionAsSupertype() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/kSuspendFunctionAsSupertype.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt18292.kt")
      public void testKt18292() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/kt18292.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt28658.kt")
      public void testKt28658() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/kt28658.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt36947.kt")
      public void testKt36947() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/kt36947.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt37309.kt")
      public void testKt37309() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/kt37309.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt38179.kt")
      public void testKt38179() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/kt38179.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt41430.kt")
      public void testKt41430() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/kt41430.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt55072.kt")
      public void testKt55072() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/kt55072.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaExpectedType.kt")
      public void testLambdaExpectedType() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/lambdaExpectedType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("mixingSuspendability.kt")
      public void testMixingSuspendability() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/mixingSuspendability.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("modifierFormForNonBuiltInSuspend.kt")
      public void testModifierFormForNonBuiltInSuspend() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/modifierFormForNonBuiltInSuspend.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("modifierFormForNonBuiltInSuspendWithAnyParameter.kt")
      public void testModifierFormForNonBuiltInSuspendWithAnyParameter() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/modifierFormForNonBuiltInSuspendWithAnyParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noDefaultCoroutineImports.kt")
      public void testNoDefaultCoroutineImports() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/noDefaultCoroutineImports.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonLocalSuspension.kt")
      public void testNonLocalSuspension() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/nonLocalSuspension.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonModifierFormForBuiltIn.kt")
      public void testNonModifierFormForBuiltIn() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/nonModifierFormForBuiltIn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonModifierFormForBuiltInRenameOnImport.kt")
      public void testNonModifierFormForBuiltInRenameOnImport() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/nonModifierFormForBuiltInRenameOnImport.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonModifierFormForBuiltInWithFun.kt")
      public void testNonModifierFormForBuiltInWithFun() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/nonModifierFormForBuiltInWithFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("operators.kt")
      public void testOperators() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/operators.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("returnLabelForBuiltInSuspend.kt")
      public void testReturnLabelForBuiltInSuspend() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/returnLabelForBuiltInSuspend.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendApplicability.kt")
      public void testSuspendApplicability() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendApplicability.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendConflictsWithNoSuspend.kt")
      public void testSuspendConflictsWithNoSuspend() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendConflictsWithNoSuspend.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendCoroutineOrReturn.kt")
      public void testSuspendCoroutineOrReturn() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendCoroutineOrReturn.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendDestructuring.kt")
      public void testSuspendDestructuring() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendDestructuring.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendExternalFunctions.kt")
      public void testSuspendExternalFunctions() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendExternalFunctions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendFunctionN.kt")
      public void testSuspendFunctionN() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionN.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendFunctions.kt")
      public void testSuspendFunctions() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendJavaImplementationFromDifferentClass.kt")
      public void testSuspendJavaImplementationFromDifferentClass() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendJavaImplementationFromDifferentClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendJavaOverrides.kt")
      public void testSuspendJavaOverrides() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendJavaOverrides.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendLambda.kt")
      public void testSuspendLambda() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendNotImplemented.kt")
      public void testSuspendNotImplemented() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendNotImplemented.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendOverridability.kt")
      public void testSuspendOverridability() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendOverridability.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspendTest.kt")
      public void testSuspendTest() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendTest.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspensionPointInMonitor.kt")
      public void testSuspensionPointInMonitor() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspensionPointInMonitor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspensionPointInMonitorNewInf.kt")
      public void testSuspensionPointInMonitorNewInf() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspensionPointInMonitorNewInf.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("suspesionInDefaultValue.kt")
      public void testSuspesionInDefaultValue() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspesionInDefaultValue.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("synchronizedOnSuspend.kt")
      public void testSynchronizedOnSuspend() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/synchronizedOnSuspend.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("synchronizedOnSuspendError.kt")
      public void testSynchronizedOnSuspendError() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/synchronizedOnSuspendError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("tryCatchLambda.kt")
      public void testTryCatchLambda() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/tryCatchLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("usageOfResultTypeInReturnType.kt")
      public void testUsageOfResultTypeInReturnType() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/usageOfResultTypeInReturnType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("usageOfResultTypeInReturnType_1_4.kt")
      public void testUsageOfResultTypeInReturnType_1_4() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/usageOfResultTypeInReturnType_1_4.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("usageOfResultTypeWithNullableOperators.kt")
      public void testUsageOfResultTypeWithNullableOperators() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/usageOfResultTypeWithNullableOperators.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReference")
      @TestDataPath("$PROJECT_ROOT")
      public class CallableReference {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCallableReference() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReference"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("bigArity.kt")
        public void testBigArity() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReference/bigArity.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferenceOnUnresolvedLHS.kt")
        public void testCallableReferenceOnUnresolvedLHS() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReference/callableReferenceOnUnresolvedLHS.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("property.kt")
        public void testProperty() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReference/property.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suspendConversionForCallableReferences.kt")
        public void testSuspendConversionForCallableReferences() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReference/suspendConversionForCallableReferences.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference")
      @TestDataPath("$PROJECT_ROOT")
      public class Inference {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInference() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("applyInsideCoroutine.kt")
        public void testApplyInsideCoroutine() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/applyInsideCoroutine.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("builderInferenceForMaterializeWithExpectedType.kt")
        public void testBuilderInferenceForMaterializeWithExpectedType() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/builderInferenceForMaterializeWithExpectedType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferenceAndCoercionToUnit.kt")
        public void testCallableReferenceAndCoercionToUnit() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/callableReferenceAndCoercionToUnit.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferenceToASuspendFunction.kt")
        public void testCallableReferenceToASuspendFunction() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/callableReferenceToASuspendFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("chainCallWithExtensionExplicitTypes.kt")
        public void testChainCallWithExtensionExplicitTypes() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/chainCallWithExtensionExplicitTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("coroutineInferenceWithCapturedTypeVariable.kt")
        public void testCoroutineInferenceWithCapturedTypeVariable() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/coroutineInferenceWithCapturedTypeVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("correctMember.kt")
        public void testCorrectMember() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/correctMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("doubleColonExpressionToClassWithParameters.kt")
        public void testDoubleColonExpressionToClassWithParameters() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/doubleColonExpressionToClassWithParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("elvisOperatorAgainstFlexibleType.kt")
        public void testElvisOperatorAgainstFlexibleType() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/elvisOperatorAgainstFlexibleType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionPriority.kt")
        public void testExtensionPriority() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/extensionPriority.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionSuspend.kt")
        public void testExtensionSuspend() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/extensionSuspend.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionWithNonValuableConstraints.kt")
        public void testExtensionWithNonValuableConstraints() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/extensionWithNonValuableConstraints.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionsWithNonValuableConstraintsGenericBase.kt")
        public void testExtensionsWithNonValuableConstraintsGenericBase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/extensionsWithNonValuableConstraintsGenericBase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensionsWithNonValuableConstraints_1_2.kt")
        public void testExtensionsWithNonValuableConstraints_1_2() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/extensionsWithNonValuableConstraints_1_2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inferenceFromMethodInsideLocalVariable.kt")
        public void testInferenceFromMethodInsideLocalVariable() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/inferenceFromMethodInsideLocalVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt15516.kt")
        public void testKt15516() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt15516.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32097.kt")
        public void testKt32097() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt32097.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32203.kt")
        public void testKt32203() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt32203.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32271.kt")
        public void testKt32271() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt32271.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt33542.kt")
        public void testKt33542() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt33542.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt35306.kt")
        public void testKt35306() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt35306.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt35684.kt")
        public void testKt35684() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt35684.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt36202.kt")
        public void testKt36202() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt36202.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt36220.kt")
        public void testKt36220() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt36220.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt38420.kt")
        public void testKt38420() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt38420.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt38667.kt")
        public void testKt38667() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt38667.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt38667Simplified.kt")
        public void testKt38667Simplified() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt38667Simplified.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt38766.kt")
        public void testKt38766() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt38766.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt41164.kt")
        public void testKt41164() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt41164.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt41308.kt")
        public void testKt41308() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt41308.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt41396.kt")
        public void testKt41396() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt41396.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedLambdaInferenceWithListMap.kt")
        public void testNestedLambdaInferenceWithListMap() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/nestedLambdaInferenceWithListMap.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nestedSuspendCallInsideLambda.kt")
        public void testNestedSuspendCallInsideLambda() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/nestedSuspendCallInsideLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("plusAssignInCoroutineContext.kt")
        public void testPlusAssignInCoroutineContext() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/plusAssignInCoroutineContext.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("plusAssignWithLambda.kt")
        public void testPlusAssignWithLambda() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/plusAssignWithLambda.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("plusAssignWithLambda2.kt")
        public void testPlusAssignWithLambda2() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/plusAssignWithLambda2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("qualifiedResolvedExpressionInsideBuilderInference.kt")
        public void testQualifiedResolvedExpressionInsideBuilderInference() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/qualifiedResolvedExpressionInsideBuilderInference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveGenerators.kt")
        public void testRecursiveGenerators() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/recursiveGenerators.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursiveGenerators2.kt")
        public void testRecursiveGenerators2() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/recursiveGenerators2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("returnTypeInference.kt")
        public void testReturnTypeInference() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/returnTypeInference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("returnTypeInference2.kt")
        public void testReturnTypeInference2() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/returnTypeInference2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("severalCandidatesWithDifferentVisibility.kt")
        public void testSeveralCandidatesWithDifferentVisibility() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/severalCandidatesWithDifferentVisibility.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleGenerator.kt")
        public void testSimpleGenerator() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/simpleGenerator.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("stubCallOnReceiver.kt")
        public void testStubCallOnReceiver() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/stubCallOnReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("stubCallOnVariable.kt")
        public void testStubCallOnVariable() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/stubCallOnVariable.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suspendCallsWithErrors.kt")
        public void testSuspendCallsWithErrors() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/suspendCallsWithErrors.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suspendCallsWrongUpperBound.kt")
        public void testSuspendCallsWrongUpperBound() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/suspendCallsWrongUpperBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("twoReceiversInScope.kt")
        public void testTwoReceiversInScope() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/twoReceiversInScope.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeFromReceiver.kt")
        public void testTypeFromReceiver() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/typeFromReceiver.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("variableCallInsideBuilderFunction.kt")
        public void testVariableCallInsideBuilderFunction() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/variableCallInsideBuilderFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("variableOfAFunctionTypeCall.kt")
        public void testVariableOfAFunctionTypeCall() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/variableOfAFunctionTypeCall.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withParameter.kt")
        public void testWithParameter() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/withParameter.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("withUninferredParameter.kt")
        public void testWithUninferredParameter() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/withUninferredParameter.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline")
      @TestDataPath("$PROJECT_ROOT")
      public class InlineCrossinline {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInInlineCrossinline() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineOrdinaryOfCrossinlineOrdinary.kt")
        public void testInlineOrdinaryOfCrossinlineOrdinary() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineOrdinaryOfCrossinlineOrdinary.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineOrdinaryOfCrossinlineSuspend.kt")
        public void testInlineOrdinaryOfCrossinlineSuspend() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineOrdinaryOfCrossinlineSuspend.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineOrdinaryOfNoinlineOrdinary.kt")
        public void testInlineOrdinaryOfNoinlineOrdinary() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineOrdinaryOfNoinlineOrdinary.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineOrdinaryOfNoinlineSuspend.kt")
        public void testInlineOrdinaryOfNoinlineSuspend() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineOrdinaryOfNoinlineSuspend.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineOrdinaryOfOrdinary.kt")
        public void testInlineOrdinaryOfOrdinary() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineOrdinaryOfOrdinary.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineOrdinaryOfSuspend.kt")
        public void testInlineOrdinaryOfSuspend() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineOrdinaryOfSuspend.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineSuspendOfCrossinlineOrdinary.kt")
        public void testInlineSuspendOfCrossinlineOrdinary() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineSuspendOfCrossinlineOrdinary.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineSuspendOfCrossinlineSuspend.kt")
        public void testInlineSuspendOfCrossinlineSuspend() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineSuspendOfCrossinlineSuspend.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineSuspendOfNoinlineOrdinary.kt")
        public void testInlineSuspendOfNoinlineOrdinary() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineSuspendOfNoinlineOrdinary.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineSuspendOfNoinlineSuspend.kt")
        public void testInlineSuspendOfNoinlineSuspend() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineSuspendOfNoinlineSuspend.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineSuspendOfOrdinary.kt")
        public void testInlineSuspendOfOrdinary() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineSuspendOfOrdinary.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inlineSuspendOfSuspend.kt")
        public void testInlineSuspendOfSuspend() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineSuspendOfSuspend.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/release")
      @TestDataPath("$PROJECT_ROOT")
      public class Release {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInRelease() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/coroutines/release"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suspend.kt")
        public void testSuspend() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/release/suspend.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension")
      @TestDataPath("$PROJECT_ROOT")
      public class RestrictSuspension {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInRestrictSuspension() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("allMembersAllowed.kt")
        public void testAllMembersAllowed() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/allMembersAllowed.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReference.kt")
        public void testCallableReference() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/callableReference.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("extensions.kt")
        public void testExtensions() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/extensions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invokeExtension.kt")
        public void testInvokeExtension() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/invokeExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("memberExtension.kt")
        public void testMemberExtension() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/memberExtension.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notRelatedFun.kt")
        public void testNotRelatedFun() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/notRelatedFun.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("outerYield_1_3.kt")
        public void testOuterYield_1_3() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/outerYield_1_3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("sameInstance.kt")
        public void testSameInstance() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/sameInstance.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("simpleForbidden.kt")
        public void testSimpleForbidden() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/simpleForbidden.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("wrongEnclosingFunction.kt")
        public void testWrongEnclosingFunction() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/wrongEnclosingFunction.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType")
      @TestDataPath("$PROJECT_ROOT")
      public class SuspendFunctionType {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInSuspendFunctionType() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("functionVsSuspendFunction.kt")
        public void testFunctionVsSuspendFunction() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/functionVsSuspendFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inference1.kt")
        public void testInference1() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/inference1.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inference2.kt")
        public void testInference2() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/inference2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inference3.kt")
        public void testInference3() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/inference3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inference4.kt")
        public void testInference4() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/inference4.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("inline.kt")
        public void testInline() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/inline.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("invoke.kt")
        public void testInvoke() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/invoke.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaInOverriddenValInitializer.kt")
        public void testLambdaInOverriddenValInitializer() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/lambdaInOverriddenValInitializer.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lambdaInValInitializer.kt")
        public void testLambdaInValInitializer() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/lambdaInValInitializer.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("modifierApplicability.kt")
        public void testModifierApplicability() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/modifierApplicability.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noInvokeForSuspendFunction.kt")
        public void testNoInvokeForSuspendFunction() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/noInvokeForSuspendFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noValueParameters.kt")
        public void testNoValueParameters() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/noValueParameters.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nullableSuspendFunction.kt")
        public void testNullableSuspendFunction() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/nullableSuspendFunction.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("suspendFunctionN.kt")
        public void testSuspendFunctionN() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/suspendFunctionN.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls")
      @TestDataPath("$PROJECT_ROOT")
      public class TailCalls {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInTailCalls() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("forbidden.kt")
        public void testForbidden() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls/forbidden.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("localFunctions.kt")
        public void testLocalFunctions() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls/localFunctions.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("nothingTypedSuspendFunction_1_3.kt")
        public void testNothingTypedSuspendFunction_1_3() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls/nothingTypedSuspendFunction_1_3.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("recursive.kt")
        public void testRecursive() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls/recursive.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("tryCatch.kt")
        public void testTryCatch() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls/tryCatch.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("valid.kt")
        public void testValid() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls/valid.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/delegateInference")
    @TestDataPath("$PROJECT_ROOT")
    public class DelegateInference {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDelegateInference() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/delegateInference"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ifWithCallableReferenceInLazy.kt")
      public void testIfWithCallableReferenceInLazy() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/delegateInference/ifWithCallableReferenceInLazy.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolveGetValueWithWholeDelegate.kt")
      public void testResolveGetValueWithWholeDelegate() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/delegateInference/resolveGetValueWithWholeDelegate.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/deprecated")
    @TestDataPath("$PROJECT_ROOT")
    public class Deprecated {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDeprecated() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/deprecated"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deprecationOnReadBytes.kt")
      public void testDeprecationOnReadBytes() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/deprecated/deprecationOnReadBytes.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noDeprecationOnReadBytes.kt")
      public void testNoDeprecationOnReadBytes() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/deprecated/noDeprecationOnReadBytes.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature")
    @TestDataPath("$PROJECT_ROOT")
    public class DuplicateJvmSignature {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInDuplicateJvmSignature() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegatedProperty.kt")
      public void testDelegatedProperty() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/delegatedProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("jvmNames.kt")
      public void testJvmNames() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/jvmNames.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/statics")
      @TestDataPath("$PROJECT_ROOT")
      public class Statics {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInStatics() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/statics"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kotlinMembersVsJavaNonVisibleStatics.kt")
        public void testKotlinMembersVsJavaNonVisibleStatics() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/statics/kotlinMembersVsJavaNonVisibleStatics.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/evaluate")
    @TestDataPath("$PROJECT_ROOT")
    public class Evaluate {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInEvaluate() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/evaluate"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("charCodeExpType.kt")
      public void testCharCodeExpType() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/evaluate/charCodeExpType.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/experimental")
    @TestDataPath("$PROJECT_ROOT")
    public class Experimental {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInExperimental() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/experimental"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("annotation.kt")
      public void testAnnotation() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/annotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("bodyUsages.kt")
      public void testBodyUsages() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/bodyUsages.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("bodyUsagesAndInline.kt")
      public void testBodyUsagesAndInline() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/bodyUsagesAndInline.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callOfBaseFunctionFromGeneric.kt")
      public void testCallOfBaseFunctionFromGeneric() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/callOfBaseFunctionFromGeneric.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classMembers.kt")
      public void testClassMembers() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/classMembers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classMembersOverlyExperimental.kt")
      public void testClassMembersOverlyExperimental() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/classMembersOverlyExperimental.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constVal.kt")
      public void testConstVal() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/constVal.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constructorCheck.kt")
      public void testConstructorCheck() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/constructorCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("deeplyNestedClass.kt")
      public void testDeeplyNestedClass() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/deeplyNestedClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("diffrentModules.kt")
      public void testDiffrentModules() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/diffrentModules.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("duration.kt")
      public void testDuration() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/duration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("errors.kt")
      public void testErrors() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/errors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("experimentalAfterRelease.kt")
      public void testExperimentalAfterRelease() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/experimentalAfterRelease.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("experimentalAnnotationOnConstructorProperty.kt")
      public void testExperimentalAnnotationOnConstructorProperty() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/experimentalAnnotationOnConstructorProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("experimentalIsNotEnabled.kt")
      public void testExperimentalIsNotEnabled() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/experimentalIsNotEnabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("experimentalSetter.kt")
      public void testExperimentalSetter() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/experimentalSetter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fileOptInSuppressesOverride.kt")
      public void testFileOptInSuppressesOverride() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/fileOptInSuppressesOverride.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("fullFqNameUsage.kt")
      public void testFullFqNameUsage() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/fullFqNameUsage.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitUsages.kt")
      public void testImplicitUsages() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/implicitUsages.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("implicitUsagesFuture.kt")
      public void testImplicitUsagesFuture() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/implicitUsagesFuture.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importStatement.kt")
      public void testImportStatement() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/importStatement.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("importStatement2.kt")
      public void testImportStatement2() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/importStatement2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incorrectTargetsForExperimentalAnnotation.kt")
      public void testIncorrectTargetsForExperimentalAnnotation() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/incorrectTargetsForExperimentalAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("incorrectUseExperimental.kt")
      public void testIncorrectUseExperimental() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/incorrectUseExperimental.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("insideSAM.kt")
      public void testInsideSAM() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/insideSAM.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noRetentionAfter.kt")
      public void testNoRetentionAfter() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/noRetentionAfter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overridableCheck.kt")
      public void testOverridableCheck() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/overridableCheck.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("override.kt")
      public void testOverride() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/override.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overrideDifferentExperimentalities.kt")
      public void testOverrideDifferentExperimentalities() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/overrideDifferentExperimentalities.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overrideInAnonymousObject.kt")
      public void testOverrideInAnonymousObject() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/overrideInAnonymousObject.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overrideInPrimaryConstructor.kt")
      public void testOverrideInPrimaryConstructor() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/overrideInPrimaryConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("topLevel.kt")
      public void testTopLevel() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/topLevel.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typealias.kt")
      public void testTypealias() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/typealias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("usageNotAsAnnotation.kt")
      public void testUsageNotAsAnnotation() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/usageNotAsAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useExperimentalOnFile.kt")
      public void testUseExperimentalOnFile() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/useExperimentalOnFile.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useExperimentalOnFileWithVeryExperimentalMarker.kt")
      public void testUseExperimentalOnFileWithVeryExperimentalMarker() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/useExperimentalOnFileWithVeryExperimentalMarker.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useExperimentalOnStatement.kt")
      public void testUseExperimentalOnStatement() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/useExperimentalOnStatement.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useExperimentalOnWholeModule.kt")
      public void testUseExperimentalOnWholeModule() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/useExperimentalOnWholeModule.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useExperimentalTargets.kt")
      public void testUseExperimentalTargets() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/useExperimentalTargets.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("useExperimentalWithSeveralAnnotations.kt")
      public void testUseExperimentalWithSeveralAnnotations() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/useExperimentalWithSeveralAnnotations.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wasExperimental.kt")
      public void testWasExperimental() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/wasExperimental.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wasExperimentalCombined.kt")
      public void testWasExperimentalCombined() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/wasExperimentalCombined.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongTargetsWithoutExplicitTarget.kt")
      public void testWrongTargetsWithoutExplicitTarget() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/wrongTargetsWithoutExplicitTarget.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/factoryPattern")
    @TestDataPath("$PROJECT_ROOT")
    public class FactoryPattern {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInFactoryPattern() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/factoryPattern"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("independentResolutionInLambda.kt")
      public void testIndependentResolutionInLambda() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/independentResolutionInLambda.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multipleOverloads_1.kt")
      public void testMultipleOverloads_1() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/multipleOverloads_1.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multipleOverloads_2.kt")
      public void testMultipleOverloads_2() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/multipleOverloads_2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multipleOverloads_3.kt")
      public void testMultipleOverloads_3() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/multipleOverloads_3.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overloadByLambdaReturnType_disabled.kt")
      public void testOverloadByLambdaReturnType_disabled() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/overloadByLambdaReturnType_disabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overloadByLambdaReturnType_enabled.kt")
      public void testOverloadByLambdaReturnType_enabled() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/overloadByLambdaReturnType_enabled.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("overloadByLambdaReturnType_enabled_no_annotation.kt")
      public void testOverloadByLambdaReturnType_enabled_no_annotation() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/overloadByLambdaReturnType_enabled_no_annotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("referenceWithTheSameNameAsContainingProperty.kt")
      public void testReferenceWithTheSameNameAsContainingProperty() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/referenceWithTheSameNameAsContainingProperty.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("resolutionInOldInference.kt")
      public void testResolutionInOldInference() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/resolutionInOldInference.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("returnFromInlineLambda.kt")
      public void testReturnFromInlineLambda() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/returnFromInlineLambda.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/forInArrayLoop")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInArrayLoop {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInForInArrayLoop() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/forInArrayLoop"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("capturedRangeVariableAssignmentBefore13.kt")
      public void testCapturedRangeVariableAssignmentBefore13() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/forInArrayLoop/capturedRangeVariableAssignmentBefore13.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("forInFieldUpdatedInLoopBodyBefore13.kt")
      public void testForInFieldUpdatedInLoopBodyBefore13() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/forInArrayLoop/forInFieldUpdatedInLoopBodyBefore13.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("rangeLocalDelegatedPropertyAssignmentBefore13.kt")
      public void testRangeLocalDelegatedPropertyAssignmentBefore13() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/forInArrayLoop/rangeLocalDelegatedPropertyAssignmentBefore13.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("rangeVariableAssignment13.kt")
      public void testRangeVariableAssignment13() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/forInArrayLoop/rangeVariableAssignment13.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("rangeVariableAssignmentBefore13.kt")
      public void testRangeVariableAssignmentBefore13() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/forInArrayLoop/rangeVariableAssignmentBefore13.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/functionLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class FunctionLiterals {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInFunctionLiterals() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/functionLiterals"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nullableUnitLiteral.kt")
      public void testNullableUnitLiteral() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/functionLiterals/nullableUnitLiteral.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("pseudocodeMemoryOverhead.kt")
      public void testPseudocodeMemoryOverhead() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/functionLiterals/pseudocodeMemoryOverhead.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference")
    @TestDataPath("$PROJECT_ROOT")
    public class Inference {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInInference() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/inference"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayConstructor.kt")
      public void testArrayConstructor() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/arrayConstructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("callableReferenceOnParameter.kt")
      public void testCallableReferenceOnParameter() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/callableReferenceOnParameter.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("integerLiterals.kt")
      public void testIntegerLiterals() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/integerLiterals.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectDfiTypesBeforeCapturing.kt")
      public void testIntersectDfiTypesBeforeCapturing() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/intersectDfiTypesBeforeCapturing.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionInputType.kt")
      public void testIntersectionInputType() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/intersectionInputType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt11266.kt")
      public void testKt11266() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt11266.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt12008.kt")
      public void testKt12008() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt12008.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt1558.kt")
      public void testKt1558() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt1558.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt27772.kt")
      public void testKt27772() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt27772.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt30292.kt")
      public void testKt30292() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt30292.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt32345.kt")
      public void testKt32345() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt32345.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3458.kt")
      public void testKt3458() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt3458.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt35847.kt")
      public void testKt35847() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt35847.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt36249.kt")
      public void testKt36249() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt36249.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt36951.kt")
      public void testKt36951() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt36951.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt37627.kt")
      public void testKt37627() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt37627.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt38143.kt")
      public void testKt38143() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt38143.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt38737.kt")
      public void testKt38737() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt38737.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt38801.kt")
      public void testKt38801() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt38801.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt42620.kt")
      public void testKt42620() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt42620.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4975.kt")
      public void testKt4975() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt4975.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("plusAssignOnArrayList.kt")
      public void testPlusAssignOnArrayList() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/plusAssignOnArrayList.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("recursiveFlexibleAssertions.kt")
      public void testRecursiveFlexibleAssertions() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/recursiveFlexibleAssertions.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationsForResolve {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInAnnotationsForResolve() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("checkLowPriorityIsResolvedSuccessfully.kt")
        public void testCheckLowPriorityIsResolvedSuccessfully() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/checkLowPriorityIsResolvedSuccessfully.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("exactAnnotation.kt")
        public void testExactAnnotation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/exactAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("exactAnnotationWithUpperBoundConstraint.kt")
        public void testExactAnnotationWithUpperBoundConstraint() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/exactAnnotationWithUpperBoundConstraint.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("explicitTypeArgumentAsValidInputType.kt")
        public void testExplicitTypeArgumentAsValidInputType() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/explicitTypeArgumentAsValidInputType.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("internalAnnotationsOnTypes.kt")
        public void testInternalAnnotationsOnTypes() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/internalAnnotationsOnTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt26698.kt")
        public void testKt26698() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/kt26698.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt29307.kt")
        public void testKt29307() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/kt29307.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt35210.kt")
        public void testKt35210() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/kt35210.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("lowPriorityTopLevelValAndObject.kt")
        public void testLowPriorityTopLevelValAndObject() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/lowPriorityTopLevelValAndObject.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("moreOnlyInputTypes.kt")
        public void testMoreOnlyInputTypes() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/moreOnlyInputTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noInferAndLowPriority.kt")
        public void testNoInferAndLowPriority() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/noInferAndLowPriority.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("noInferAnnotation.kt")
        public void testNoInferAnnotation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/noInferAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("notNullAnnotation.kt")
        public void testNotNullAnnotation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/notNullAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInputTypeAndJava.kt")
        public void testOnlyInputTypeAndJava() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypeAndJava.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInputTypeRecursiveBoundAndProjections.kt")
        public void testOnlyInputTypeRecursiveBoundAndProjections() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypeRecursiveBoundAndProjections.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInputTypes.kt")
        public void testOnlyInputTypes() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInputTypesAndClassLiterals.kt")
        public void testOnlyInputTypesAndClassLiterals() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesAndClassLiterals.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInputTypesAndLowPriority.kt")
        public void testOnlyInputTypesAndLowPriority() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesAndLowPriority.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInputTypesAndTopLevelCapturedTypes.kt")
        public void testOnlyInputTypesAndTopLevelCapturedTypes() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesAndTopLevelCapturedTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInputTypesAnnotationWithPlatformTypes.kt")
        public void testOnlyInputTypesAnnotationWithPlatformTypes() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesAnnotationWithPlatformTypes.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInputTypesCaptured.kt")
        public void testOnlyInputTypesCaptured() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesCaptured.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInputTypesCommonConstraintSystem.kt")
        public void testOnlyInputTypesCommonConstraintSystem() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesCommonConstraintSystem.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInputTypesUpperBound.kt")
        public void testOnlyInputTypesUpperBound() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesUpperBound.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInputTypesWarning.kt")
        public void testOnlyInputTypesWarning() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesWarning.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("onlyInputTypesWithVarargs.kt")
        public void testOnlyInputTypesWithVarargs() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesWithVarargs.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("propagationOfNoInferAnnotation.kt")
        public void testPropagationOfNoInferAnnotation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/propagationOfNoInferAnnotation.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("resolveWithOnlyInputTypesAnnotation.kt")
        public void testResolveWithOnlyInputTypesAnnotation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/resolveWithOnlyInputTypesAnnotation.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/completion")
      @TestDataPath("$PROJECT_ROOT")
      public class Completion {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInCompletion() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/inference/completion"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        public class PostponedArgumentsAnalysis {
          @RepeatedTest(value = 5)
          public void testAllFilesPresentInPostponedArgumentsAnalysis() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
          }

          @RepeatedTest(value = 5)
          @TestMetadata("callableReferences.kt")
          public void testCallableReferences() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/callableReferences.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("complexInterdependentInputOutputTypes.kt")
          public void testComplexInterdependentInputOutputTypes() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/complexInterdependentInputOutputTypes.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("deepLambdas.kt")
          public void testDeepLambdas() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/deepLambdas.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("fixIndependentVariables.kt")
          public void testFixIndependentVariables() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/fixIndependentVariables.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("fixInputTypeToMoreSpecificType.kt")
          public void testFixInputTypeToMoreSpecificType() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/fixInputTypeToMoreSpecificType.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("fixReceiverToMoreSpecificType.kt")
          public void testFixReceiverToMoreSpecificType() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/fixReceiverToMoreSpecificType.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("kt38799.kt")
          public void testKt38799() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/kt38799.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("manyArguments.kt")
          public void testManyArguments() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/manyArguments.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("moreSpecificOutputType.kt")
          public void testMoreSpecificOutputType() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/moreSpecificOutputType.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("rerunStagesAfterFixationInFullMode.kt")
          public void testRerunStagesAfterFixationInFullMode() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/rerunStagesAfterFixationInFullMode.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("rerunStagesAfterFixationInPartialMode.kt")
          public void testRerunStagesAfterFixationInPartialMode() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/rerunStagesAfterFixationInPartialMode.kt");
          }

          @RepeatedTest(value = 5)
          @TestMetadata("suspendFunctions.kt")
          public void testSuspendFunctions() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/suspendFunctions.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance")
          @TestDataPath("$PROJECT_ROOT")
          public class Performance {
            @RepeatedTest(value = 5)
            public void testAllFilesPresentInPerformance() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
            }

            @RepeatedTest(value = 5)
            @TestMetadata("reuseBuiltFunctionalTypesForIdLambdas.kt")
            public void testReuseBuiltFunctionalTypesForIdLambdas() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance/reuseBuiltFunctionalTypesForIdLambdas.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("reuseBuiltFunctionalTypesForLambdas.kt")
            public void testReuseBuiltFunctionalTypesForLambdas() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance/reuseBuiltFunctionalTypesForLambdas.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("reuseBuiltFunctionalTypesForPairOfLambdas.kt")
            public void testReuseBuiltFunctionalTypesForPairOfLambdas() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance/reuseBuiltFunctionalTypesForPairOfLambdas.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("reuseBuiltFunctionalTypesForPairsOfDeepLambdas.kt")
            public void testReuseBuiltFunctionalTypesForPairsOfDeepLambdas() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance/reuseBuiltFunctionalTypesForPairsOfDeepLambdas.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("reuseBuiltFunctionalTypesForPairsOfDeepMixedLambdas.kt")
            public void testReuseBuiltFunctionalTypesForPairsOfDeepMixedLambdas() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance/reuseBuiltFunctionalTypesForPairsOfDeepMixedLambdas.kt");
            }

            @RepeatedTest(value = 5)
            @TestMetadata("reuseBuiltFunctionalTypesForPairsOfIdLambdas.kt")
            public void testReuseBuiltFunctionalTypesForPairsOfIdLambdas() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance/reuseBuiltFunctionalTypesForPairsOfIdLambdas.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/delegates")
      @TestDataPath("$PROJECT_ROOT")
      public class Delegates {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInDelegates() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/inference/delegates"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt31219.kt")
        public void testKt31219() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/delegates/kt31219.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt31679.kt")
        public void testKt31679() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/delegates/kt31679.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt32249.kt")
        public void testKt32249() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/delegates/kt32249.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt50994.kt")
        public void testKt50994() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/delegates/kt50994.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/nothingType")
      @TestDataPath("$PROJECT_ROOT")
      public class NothingType {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInNothingType() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/inference/nothingType"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dontInferToNullableNothingInDelegates.kt")
        public void testDontInferToNullableNothingInDelegates() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/nothingType/dontInferToNullableNothingInDelegates.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("dontSpreadWarningToNotReturningNothingSubResolvedAtoms.kt")
        public void testDontSpreadWarningToNotReturningNothingSubResolvedAtoms() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/nothingType/dontSpreadWarningToNotReturningNothingSubResolvedAtoms.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/performance")
      @TestDataPath("$PROJECT_ROOT")
      public class Performance {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInPerformance() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/inference/performance"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt41644.kt")
        public void testKt41644() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/performance/kt41644.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt41741.kt")
        public void testKt41741() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/performance/kt41741.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("kt42195.kt")
        public void testKt42195() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/performance/kt42195.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inline")
    @TestDataPath("$PROJECT_ROOT")
    public class Inline {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInInline() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/inline"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineConstructorOfArray.kt")
      public void testInlineConstructorOfArray() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inline/inlineConstructorOfArray.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inlineOnlySuppressesNothingToInline.kt")
      public void testInlineOnlySuppressesNothingToInline() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inline/inlineOnlySuppressesNothingToInline.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("synchronizedOnInline.kt")
      public void testSynchronizedOnInline() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inline/synchronizedOnInline.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/java")
    @TestDataPath("$PROJECT_ROOT")
    public class Java {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInJava() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/java"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assertThatOnMap.kt")
      public void testAssertThatOnMap() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/java/assertThatOnMap.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("checkEnhancedUpperBounds.kt")
      public void testCheckEnhancedUpperBounds() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/java/checkEnhancedUpperBounds.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("checkEnhancedUpperBoundsWithEnabledImprovements.kt")
      public void testCheckEnhancedUpperBoundsWithEnabledImprovements() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/java/checkEnhancedUpperBoundsWithEnabledImprovements.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("concurrentHashMapContains.kt")
      public void testConcurrentHashMapContains() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/java/concurrentHashMapContains.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("concurrentHashMapContainsError.kt")
      public void testConcurrentHashMapContainsError() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/java/concurrentHashMapContainsError.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("functionN.kt")
      public void testFunctionN() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/java/functionN.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inheritedFunctionN.kt")
      public void testInheritedFunctionN() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/java/inheritedFunctionN.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectFlexibleAndMutable.kt")
      public void testIntersectFlexibleAndMutable() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/java/intersectFlexibleAndMutable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("patternCompileCallableReference.kt")
      public void testPatternCompileCallableReference() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/java/patternCompileCallableReference.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/kt7585")
    @TestDataPath("$PROJECT_ROOT")
    public class Kt7585 {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInKt7585() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/kt7585"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("delegate.kt")
      public void testDelegate() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/kt7585/delegate.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/lateinit")
    @TestDataPath("$PROJECT_ROOT")
    public class Lateinit {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInLateinit() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/lateinit"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("isInitialized.kt")
      public void testIsInitialized() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/lateinit/isInitialized.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/multiplatform")
    @TestDataPath("$PROJECT_ROOT")
    public class Multiplatform {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInMultiplatform() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/multiplatform"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("collections.kt")
      public void testCollections() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/multiplatform/collections.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("jvmOverloads.kt")
      public void testJvmOverloads() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/multiplatform/jvmOverloads.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/native")
    @TestDataPath("$PROJECT_ROOT")
    public class Native {
      @RepeatedTest(value = 5)
      @TestMetadata("abstract.kt")
      public void testAbstract() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/native/abstract.kt");
      }

      @RepeatedTest(value = 5)
      public void testAllFilesPresentInNative() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/native"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("body.kt")
      public void testBody() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/native/body.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("constructor.kt")
      public void testConstructor() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/native/constructor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("inline.kt")
      public void testInline() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/native/inline.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noBody.kt")
      public void testNoBody() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/native/noBody.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonFunction.kt")
      public void testNonFunction() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/native/nonFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("override.kt")
      public void testOverride() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/native/override.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reified.kt")
      public void testReified() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/native/reified.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("trait.kt")
      public void testTrait() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/native/trait.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection")
    @TestDataPath("$PROJECT_ROOT")
    public class PurelyImplementedCollection {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInPurelyImplementedCollection() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayList.kt")
      public void testArrayList() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/arrayList.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayListNullable.kt")
      public void testArrayListNullable() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/arrayListNullable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("customClassMutableCollection.kt")
      public void testCustomClassMutableCollection() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/customClassMutableCollection.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("customClassMutableList.kt")
      public void testCustomClassMutableList() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/customClassMutableList.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("intersectionOfPrimitiveBasedFunctions.kt")
      public void testIntersectionOfPrimitiveBasedFunctions() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/intersectionOfPrimitiveBasedFunctions.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invalidFqName.kt")
      public void testInvalidFqName() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/invalidFqName.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("maps.kt")
      public void testMaps() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/maps.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("mapsWithNullableKey.kt")
      public void testMapsWithNullableKey() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/mapsWithNullableKey.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("mapsWithNullableValues.kt")
      public void testMapsWithNullableValues() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/mapsWithNullableValues.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sets.kt")
      public void testSets() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/sets.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongTypeParametersCount.kt")
      public void testWrongTypeParametersCount() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/wrongTypeParametersCount.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/reflection")
    @TestDataPath("$PROJECT_ROOT")
    public class Reflection {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInReflection() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/reflection"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("classArrayInAnnotation.kt")
      public void testClassArrayInAnnotation() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/reflection/classArrayInAnnotation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noReflectionInClassPath.kt")
      public void testNoReflectionInClassPath() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/reflection/noReflectionInClassPath.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/regression")
    @TestDataPath("$PROJECT_ROOT")
    public class Regression {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInRegression() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/regression"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea63992.kt")
      public void testEa63992() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/ea63992.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea65206.kt")
      public void testEa65206() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/ea65206.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea66827_dataClassWrongToString.kt")
      public void testEa66827_dataClassWrongToString() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/ea66827_dataClassWrongToString.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea70485_functionTypeInheritor.kt")
      public void testEa70485_functionTypeInheritor() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/ea70485_functionTypeInheritor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("ea70880_illegalJvmName.kt")
      public void testEa70880_illegalJvmName() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/ea70880_illegalJvmName.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10001.kt")
      public void testKt10001() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt10001.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt2082.kt")
      public void testKt2082() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt2082.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt26806.kt")
      public void testKt26806() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt26806.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt34391.kt")
      public void testKt34391() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt34391.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt37554.kt")
      public void testKt37554() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt37554.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt37706.kt")
      public void testKt37706() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt37706.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt37727.kt")
      public void testKt37727() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt37727.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt37735.kt")
      public void testKt37735() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt37735.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt9820_javaFunctionTypeInheritor.kt")
      public void testKt9820_javaFunctionTypeInheritor() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt9820_javaFunctionTypeInheritor.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt-37497.kt")
      public void testKt_37497() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt-37497.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/reified")
    @TestDataPath("$PROJECT_ROOT")
    public class Reified {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInReified() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/reified"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayConstruction.kt")
      public void testArrayConstruction() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/reified/arrayConstruction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("arrayOfNullsReified.kt")
      public void testArrayOfNullsReified() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/reified/arrayOfNullsReified.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt11881.kt")
      public void testKt11881() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/reified/kt11881.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nonCallableReiefied.kt")
      public void testNonCallableReiefied() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/reified/nonCallableReiefied.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("reifiedNothingSubstitution.kt")
      public void testReifiedNothingSubstitution() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/reified/reifiedNothingSubstitution.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/resolve")
    @TestDataPath("$PROJECT_ROOT")
    public class Resolve {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInResolve() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/resolve"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("forEachInLocalClass.kt")
      public void testForEachInLocalClass() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/forEachInLocalClass.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("hidesMembers.kt")
      public void testHidesMembers() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/hidesMembers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("hidesMembers2.kt")
      public void testHidesMembers2() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/hidesMembers2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaPackageMembers.kt")
      public void testJavaPackageMembers() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/javaPackageMembers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("javaStaticMembers.kt")
      public void testJavaStaticMembers() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/javaStaticMembers.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10103.kt")
      public void testKt10103() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/kt10103.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10732a.kt")
      public void testKt10732a() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/kt10732a.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4711.kt")
      public void testKt4711() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/kt4711.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaArgumentOfInapplicableCall.kt")
      public void testLambdaArgumentOfInapplicableCall() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/lambdaArgumentOfInapplicableCall.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samAgainstFunctionalType.kt")
      public void testSamAgainstFunctionalType() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/samAgainstFunctionalType.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samConstructorVsFun.kt")
      public void testSamConstructorVsFun() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/samConstructorVsFun.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samOverloadsWithGenerics.kt")
      public void testSamOverloadsWithGenerics() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/samOverloadsWithGenerics.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("samOverloadsWithKtFunction.kt")
      public void testSamOverloadsWithKtFunction() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/samOverloadsWithKtFunction.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("sameNameClassesFromSupertypes.kt")
      public void testSameNameClassesFromSupertypes() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/sameNameClassesFromSupertypes.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences")
      @TestDataPath("$PROJECT_ROOT")
      public class AmbiguousTypeReferences {
        @RepeatedTest(value = 5)
        public void testAllFilesPresentInAmbiguousTypeReferences() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferenceCase.kt")
        public void testCallableReferenceCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/callableReferenceCase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("callableReferenceUnboundCase.kt")
        public void testCallableReferenceUnboundCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/callableReferenceUnboundCase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("classLiteralCase.kt")
        public void testClassLiteralCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/classLiteralCase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("companionVsStaticScope.kt")
        public void testCompanionVsStaticScope() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/companionVsStaticScope.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorCase.kt")
        public void testConstructorCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/constructorCase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorCaseSpace.kt")
        public void testConstructorCaseSpace() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/constructorCaseSpace.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorVsCompanionMember.kt")
        public void testConstructorVsCompanionMember() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/constructorVsCompanionMember.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorVsSyntheticValues.kt")
        public void testConstructorVsSyntheticValues() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/constructorVsSyntheticValues.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorVsSyntheticValuesPrioritized.kt")
        public void testConstructorVsSyntheticValuesPrioritized() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/constructorVsSyntheticValuesPrioritized.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("constructorVsTopLevel.kt")
        public void testConstructorVsTopLevel() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/constructorVsTopLevel.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("qualifierEnumEntryOrCompanionMemberCase.kt")
        public void testQualifierEnumEntryOrCompanionMemberCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/qualifierEnumEntryOrCompanionMemberCase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("qualifierEnumEntryOrCompanionMemberCase2.kt")
        public void testQualifierEnumEntryOrCompanionMemberCase2() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/qualifierEnumEntryOrCompanionMemberCase2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("qualifierForStaticCase.kt")
        public void testQualifierForStaticCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/qualifierForStaticCase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("qualifierOrStaticObjectCase.kt")
        public void testQualifierOrStaticObjectCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/qualifierOrStaticObjectCase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("qualifierStaticObjectOrCompanionMemberCase.kt")
        public void testQualifierStaticObjectOrCompanionMemberCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/qualifierStaticObjectOrCompanionMemberCase.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("qualifierStaticObjectOrCompanionMemberCase2.kt")
        public void testQualifierStaticObjectOrCompanionMemberCase2() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/qualifierStaticObjectOrCompanionMemberCase2.kt");
        }

        @RepeatedTest(value = 5)
        @TestMetadata("typeCase.kt")
        public void testTypeCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/typeCase.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/smartcasts")
    @TestDataPath("$PROJECT_ROOT")
    public class Smartcasts {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInSmartcasts() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/smartcasts"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("forEachSafe.kt")
      public void testForEachSafe() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/forEachSafe.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("forEachUnsafe.kt")
      public void testForEachUnsafe() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/forEachUnsafe.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("invokeRecieverUnsafe.kt")
      public void testInvokeRecieverUnsafe() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/invokeRecieverUnsafe.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10463.kt")
      public void testKt10463() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/kt10463.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lambdaInCallArgs.kt")
      public void testLambdaInCallArgs() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/lambdaInCallArgs.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("lazyDeclaresAndModifies.kt")
      public void testLazyDeclaresAndModifies() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/lazyDeclaresAndModifies.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("letAlwaysChangesToNotNull.kt")
      public void testLetAlwaysChangesToNotNull() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/letAlwaysChangesToNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("letChangesToNotNull.kt")
      public void testLetChangesToNotNull() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/letChangesToNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("letChangesToNull.kt")
      public void testLetChangesToNull() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/letChangesToNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("letChangesToNullComplex.kt")
      public void testLetChangesToNullComplex() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/letChangesToNullComplex.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("letMergeNotNull.kt")
      public void testLetMergeNotNull() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/letMergeNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("letStable.kt")
      public void testLetStable() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/letStable.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("letUsesOwnReceiver.kt")
      public void testLetUsesOwnReceiver() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/letUsesOwnReceiver.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("listOfGeneric.kt")
      public void testListOfGeneric() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/listOfGeneric.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("unsoundSmartcast.kt")
      public void testUnsoundSmartcast() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/unsoundSmartcast.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whileLoopNotNull.kt")
      public void testWhileLoopNotNull() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/whileLoopNotNull.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("withChangesToNull.kt")
      public void testWithChangesToNull() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/withChangesToNull.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/streams")
    @TestDataPath("$PROJECT_ROOT")
    public class Streams {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInStreams() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/streams"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("basic.kt")
      public void testBasic() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/streams/basic.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("wrongNullability.kt")
      public void testWrongNullability() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/streams/wrongNullability.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/targetedBuiltIns")
    @TestDataPath("$PROJECT_ROOT")
    public class TargetedBuiltIns {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInTargetedBuiltIns() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/targetedBuiltIns"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("blackListed.kt")
      public void testBlackListed() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/targetedBuiltIns/blackListed.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/trailingComma")
    @TestDataPath("$PROJECT_ROOT")
    public class TrailingComma {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInTrailingComma() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/trailingComma"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multiVariableDeclarationWithDisabledFeature.kt")
      public void testMultiVariableDeclarationWithDisabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/multiVariableDeclarationWithDisabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("multiVariableDeclarationWithEnabledFeature.kt")
      public void testMultiVariableDeclarationWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/multiVariableDeclarationWithEnabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noDisambiguation.kt")
      public void testNoDisambiguation() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/noDisambiguation.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeArgumentsWithDisabledFeature.kt")
      public void testTypeArgumentsWithDisabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/typeArgumentsWithDisabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeArgumentsWithEnabledFeature.kt")
      public void testTypeArgumentsWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/typeArgumentsWithEnabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParametersWithDisabledFeature.kt")
      public void testTypeParametersWithDisabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/typeParametersWithDisabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeParametersWithEnabledFeature.kt")
      public void testTypeParametersWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/typeParametersWithEnabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueArgumentsWithDisabledFeature.kt")
      public void testValueArgumentsWithDisabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/valueArgumentsWithDisabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueArgumentsWithEnabledFeature.kt")
      public void testValueArgumentsWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/valueArgumentsWithEnabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueParametersWithDisabledFeature.kt")
      public void testValueParametersWithDisabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/valueParametersWithDisabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("valueParametersWithEnabledFeature.kt")
      public void testValueParametersWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/valueParametersWithEnabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenEntryWithDisabledFeature.kt")
      public void testWhenEntryWithDisabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/whenEntryWithDisabledFeature.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("whenEntryWithEnabledFeature.kt")
      public void testWhenEntryWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/whenEntryWithEnabledFeature.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/tryCatch")
    @TestDataPath("$PROJECT_ROOT")
    public class TryCatch {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInTryCatch() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/tryCatch"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("assignTry.kt")
      public void testAssignTry() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/tryCatch/assignTry.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("boundedSmartcasts.kt")
      public void testBoundedSmartcasts() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/tryCatch/boundedSmartcasts.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("catchRedeclaration.kt")
      public void testCatchRedeclaration() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/tryCatch/catchRedeclaration.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("correctSmartcasts.kt")
      public void testCorrectSmartcasts() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/tryCatch/correctSmartcasts.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("correctSmartcasts_after.kt")
      public void testCorrectSmartcasts_after() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/tryCatch/correctSmartcasts_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("falseNegativeSmartcasts.kt")
      public void testFalseNegativeSmartcasts() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/tryCatch/falseNegativeSmartcasts.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("falseNegativeSmartcasts_after.kt")
      public void testFalseNegativeSmartcasts_after() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/tryCatch/falseNegativeSmartcasts_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("falsePositiveSmartcasts.kt")
      public void testFalsePositiveSmartcasts() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/tryCatch/falsePositiveSmartcasts.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("falsePositiveSmartcasts_after.kt")
      public void testFalsePositiveSmartcasts_after() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/tryCatch/falsePositiveSmartcasts_after.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("tryExpression.kt")
      public void testTryExpression() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/tryCatch/tryExpression.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/typealias")
    @TestDataPath("$PROJECT_ROOT")
    public class Typealias {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInTypealias() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/typealias"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("exceptionTypeAliases.kt")
      public void testExceptionTypeAliases() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/typealias/exceptionTypeAliases.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("exceptionTypeAliasesInvisibleWithApiVersion1_0.kt")
      public void testExceptionTypeAliasesInvisibleWithApiVersion1_0() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/typealias/exceptionTypeAliasesInvisibleWithApiVersion1_0.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("hashMapTypeAlias.kt")
      public void testHashMapTypeAlias() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/typealias/hashMapTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("nothingTypeAlias.kt")
      public void testNothingTypeAlias() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/typealias/nothingTypeAlias.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasSamAdapterConstructors.kt")
      public void testTypeAliasSamAdapterConstructors() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/typealias/typeAliasSamAdapterConstructors.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("typeAliasSamAdapterConstructors2.kt")
      public void testTypeAliasSamAdapterConstructors2() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/typealias/typeAliasSamAdapterConstructors2.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("upperBoundViolated.kt")
      public void testUpperBoundViolated() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/typealias/upperBoundViolated.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("upperBoundViolated2.kt")
      public void testUpperBoundViolated2() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/typealias/upperBoundViolated2.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/varargs")
    @TestDataPath("$PROJECT_ROOT")
    public class Varargs {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInVarargs() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/varargs"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt3213.kt")
      public void testKt3213() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/varargs/kt3213.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt4172j.kt")
      public void testKt4172j() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/varargs/kt4172j.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt5534.kt")
      public void testKt5534() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/varargs/kt5534.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/when")
    @TestDataPath("$PROJECT_ROOT")
    public class When {
      @RepeatedTest(value = 5)
      public void testAllFilesPresentInWhen() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/when"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10192.kt")
      public void testKt10192() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/when/kt10192.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("kt10807.kt")
      public void testKt10807() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/when/kt10807.kt");
      }

      @RepeatedTest(value = 5)
      @TestMetadata("noTypeArgumentsInConstructor.kt")
      public void testNoTypeArgumentsInConstructor() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/when/noTypeArgumentsInConstructor.kt");
      }
    }
  }
}
