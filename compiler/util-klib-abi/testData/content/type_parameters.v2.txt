// Rendering settings:
// - Signature version: 2
// - Show manifest properties: false

// Library unique name: <testType_parameters>
abstract interface <#0: kotlin/Any?, #1: kotlin/Any?, #2: kotlin/Any?> type_parameters.test/Interface // type_parameters.test/Interface|null[0]
final class <#0: kotlin.text/Appendable> type_parameters.test/Outer { // type_parameters.test/Outer|null[0]
    final var property // type_parameters.test/Outer.property|@1:0{}property[0]
        final fun (#0).<get-property>(): #0 // type_parameters.test/Outer.property.<get-property>|<get-property>@1:0(){}[0]
        final fun (#0).<set-property>(#0) // type_parameters.test/Outer.property.<set-property>|<set-property>@1:0(1:0){}[0]
    final var property // type_parameters.test/Outer.property|@0:0{0§<kotlin.Number>}property[0]
        final fun <#1: kotlin/Number> (#1).<get-property>(): #1 // type_parameters.test/Outer.property.<get-property>|<get-property>@0:0(){0§<kotlin.Number>}[0]
        final fun <#1: kotlin/Number> (#1).<set-property>(#1) // type_parameters.test/Outer.property.<set-property>|<set-property>@0:0(0:0){0§<kotlin.Number>}[0]
    final var property // type_parameters.test/Outer.property|@0:0?{0§<kotlin.Number>}property[0]
        final fun <#1: kotlin/Number> (#1?).<get-property>(): #1 // type_parameters.test/Outer.property.<get-property>|<get-property>@0:0?(){0§<kotlin.Number>}[0]
        final fun <#1: kotlin/Number> (#1?).<set-property>(#1) // type_parameters.test/Outer.property.<set-property>|<set-property>@0:0?(0:0){0§<kotlin.Number>}[0]
    constructor <init>(#0) // type_parameters.test/Outer.<init>|<init>(1:0){}[0]
    final fun <#1: kotlin/Number> one(#1) // type_parameters.test/Outer.one|one(0:0){0§<kotlin.Number>}[0]
    final fun one(#0) // type_parameters.test/Outer.one|one(1:0){}[0]
    final fun <#1: kotlin/Number> two(#0, #1) // type_parameters.test/Outer.two|two(1:0;0:0){0§<kotlin.Number>}[0]
    final fun <#1: kotlin/Number> two(#1, #0) // type_parameters.test/Outer.two|two(0:0;1:0){0§<kotlin.Number>}[0]
    final inner class <#1: kotlin/CharSequence> Inner { // type_parameters.test/Outer.Inner|null[0]
        final var property // type_parameters.test/Outer.Inner.property|@2:0{}property[0]
            final fun (#0).<get-property>(): #0 // type_parameters.test/Outer.Inner.property.<get-property>|<get-property>@2:0(){}[0]
            final fun (#0).<set-property>(#0) // type_parameters.test/Outer.Inner.property.<set-property>|<set-property>@2:0(2:0){}[0]
        final var property // type_parameters.test/Outer.Inner.property|@1:0{}property[0]
            final fun (#1).<get-property>(): #1 // type_parameters.test/Outer.Inner.property.<get-property>|<get-property>@1:0(){}[0]
            final fun (#1).<set-property>(#1) // type_parameters.test/Outer.Inner.property.<set-property>|<set-property>@1:0(1:0){}[0]
        final var property // type_parameters.test/Outer.Inner.property|@0:0{0§<kotlin.Number>}property[0]
            final fun <#2: kotlin/Number> (#2).<get-property>(): #2 // type_parameters.test/Outer.Inner.property.<get-property>|<get-property>@0:0(){0§<kotlin.Number>}[0]
            final fun <#2: kotlin/Number> (#2).<set-property>(#2) // type_parameters.test/Outer.Inner.property.<set-property>|<set-property>@0:0(0:0){0§<kotlin.Number>}[0]
        final var property // type_parameters.test/Outer.Inner.property|@0:0?{0§<kotlin.Number>}property[0]
            final fun <#2: kotlin/Number> (#2?).<get-property>(): #2 // type_parameters.test/Outer.Inner.property.<get-property>|<get-property>@0:0?(){0§<kotlin.Number>}[0]
            final fun <#2: kotlin/Number> (#2?).<set-property>(#2) // type_parameters.test/Outer.Inner.property.<set-property>|<set-property>@0:0?(0:0){0§<kotlin.Number>}[0]
        constructor <init>(#0, #1) // type_parameters.test/Outer.Inner.<init>|<init>(2:0;1:0){}[0]
        final fun <#2: kotlin/Number> one(#2) // type_parameters.test/Outer.Inner.one|one(0:0){0§<kotlin.Number>}[0]
        final fun one(#0) // type_parameters.test/Outer.Inner.one|one(2:0){}[0]
        final fun one(#1) // type_parameters.test/Outer.Inner.one|one(1:0){}[0]
        final fun <#2: kotlin/Number> three(#0, #1, #2) // type_parameters.test/Outer.Inner.three|three(2:0;1:0;0:0){0§<kotlin.Number>}[0]
        final fun <#2: kotlin/Number> three(#0, #2, #1) // type_parameters.test/Outer.Inner.three|three(2:0;0:0;1:0){0§<kotlin.Number>}[0]
        final fun <#2: kotlin/Number> three(#1, #0, #2) // type_parameters.test/Outer.Inner.three|three(1:0;2:0;0:0){0§<kotlin.Number>}[0]
        final fun <#2: kotlin/Number> three(#1, #2, #0) // type_parameters.test/Outer.Inner.three|three(1:0;0:0;2:0){0§<kotlin.Number>}[0]
        final fun <#2: kotlin/Number> three(#2, #0, #1) // type_parameters.test/Outer.Inner.three|three(0:0;2:0;1:0){0§<kotlin.Number>}[0]
        final fun <#2: kotlin/Number> three(#2, #1, #0) // type_parameters.test/Outer.Inner.three|three(0:0;1:0;2:0){0§<kotlin.Number>}[0]
        final fun <#2: kotlin/Number> two(#0, #1) // type_parameters.test/Outer.Inner.two|two(2:0;1:0){0§<kotlin.Number>}[0]
        final fun <#2: kotlin/Number> two(#0, #2) // type_parameters.test/Outer.Inner.two|two(2:0;0:0){0§<kotlin.Number>}[0]
        final fun <#2: kotlin/Number> two(#1, #0) // type_parameters.test/Outer.Inner.two|two(1:0;2:0){0§<kotlin.Number>}[0]
        final fun <#2: kotlin/Number> two(#1, #2) // type_parameters.test/Outer.Inner.two|two(1:0;0:0){0§<kotlin.Number>}[0]
        final fun <#2: kotlin/Number> two(#2, #0) // type_parameters.test/Outer.Inner.two|two(0:0;2:0){0§<kotlin.Number>}[0]
        final fun <#2: kotlin/Number> two(#2, #1) // type_parameters.test/Outer.Inner.two|two(0:0;1:0){0§<kotlin.Number>}[0]
        final fun two(#0, #1) // type_parameters.test/Outer.Inner.two|two(2:0;1:0){}[0]
        final fun two(#1, #0) // type_parameters.test/Outer.Inner.two|two(1:0;2:0){}[0]
        final inner class <#2: kotlin.text/StringBuilder> Inner2 { // type_parameters.test/Outer.Inner.Inner2|null[0]
            final var property // type_parameters.test/Outer.Inner.Inner2.property|@1:0{}property[0]
                final fun (#2).<get-property>(): #2 // type_parameters.test/Outer.Inner.Inner2.property.<get-property>|<get-property>@1:0(){}[0]
                final fun (#2).<set-property>(#2) // type_parameters.test/Outer.Inner.Inner2.property.<set-property>|<set-property>@1:0(1:0){}[0]
            constructor <init>(#0, #1, #2) // type_parameters.test/Outer.Inner.Inner2.<init>|<init>(3:0;2:0;1:0){}[0]
            final fun <#3: kotlin/Number> four(#0, #1, #2, #3) // type_parameters.test/Outer.Inner.Inner2.four|four(3:0;2:0;1:0;0:0){0§<kotlin.Number>}[0]
            final inner class TypeParameterInSuperTypes : type_parameters.test/Interface<kotlin.collections/List<kotlin.collections/List<#0>>, kotlin.collections/Map<#1, #2>, kotlin/Triple<#0, #1, #2>> { // type_parameters.test/Outer.Inner.Inner2.TypeParameterInSuperTypes|null[0]
                constructor <init>() // type_parameters.test/Outer.Inner.Inner2.TypeParameterInSuperTypes.<init>|<init>(){}[0]
            }
        }
        final inner class <#2: kotlin/Any?> TypeParameterInSuperTypes : type_parameters.test/Interface<kotlin.collections/List<kotlin.collections/List<#0>>, kotlin.collections/Map<#1, #2>, kotlin/Triple<#0, #1, #2>> { // type_parameters.test/Outer.Inner.TypeParameterInSuperTypes|null[0]
            constructor <init>() // type_parameters.test/Outer.Inner.TypeParameterInSuperTypes.<init>|<init>(){}[0]
        }
    }
    final class <#0: kotlin/CharSequence> Nested { // type_parameters.test/Outer.Nested|null[0]
        final var property // type_parameters.test/Outer.Nested.property|@1:0{}property[0]
            final fun (#0).<get-property>(): #0 // type_parameters.test/Outer.Nested.property.<get-property>|<get-property>@1:0(){}[0]
            final fun (#0).<set-property>(#0) // type_parameters.test/Outer.Nested.property.<set-property>|<set-property>@1:0(1:0){}[0]
        final var property // type_parameters.test/Outer.Nested.property|@0:0{0§<kotlin.Number>}property[0]
            final fun <#1: kotlin/Number> (#1).<get-property>(): #1 // type_parameters.test/Outer.Nested.property.<get-property>|<get-property>@0:0(){0§<kotlin.Number>}[0]
            final fun <#1: kotlin/Number> (#1).<set-property>(#1) // type_parameters.test/Outer.Nested.property.<set-property>|<set-property>@0:0(0:0){0§<kotlin.Number>}[0]
        final var property // type_parameters.test/Outer.Nested.property|@0:0?{0§<kotlin.Number>}property[0]
            final fun <#1: kotlin/Number> (#1?).<get-property>(): #1 // type_parameters.test/Outer.Nested.property.<get-property>|<get-property>@0:0?(){0§<kotlin.Number>}[0]
            final fun <#1: kotlin/Number> (#1?).<set-property>(#1) // type_parameters.test/Outer.Nested.property.<set-property>|<set-property>@0:0?(0:0){0§<kotlin.Number>}[0]
        constructor <init>(#0) // type_parameters.test/Outer.Nested.<init>|<init>(1:0){}[0]
        final fun <#1: kotlin/Number> one(#1) // type_parameters.test/Outer.Nested.one|one(0:0){0§<kotlin.Number>}[0]
        final fun one(#0) // type_parameters.test/Outer.Nested.one|one(1:0){}[0]
        final fun <#1: kotlin/Number> two(#0, #1) // type_parameters.test/Outer.Nested.two|two(1:0;0:0){0§<kotlin.Number>}[0]
        final fun <#1: kotlin/Number> two(#1, #0) // type_parameters.test/Outer.Nested.two|two(0:0;1:0){0§<kotlin.Number>}[0]
        final inner class <#1: kotlin.text/StringBuilder> Inner { // type_parameters.test/Outer.Nested.Inner|null[0]
            final var property // type_parameters.test/Outer.Nested.Inner.property|@2:0{}property[0]
                final fun (#0).<get-property>(): #0 // type_parameters.test/Outer.Nested.Inner.property.<get-property>|<get-property>@2:0(){}[0]
                final fun (#0).<set-property>(#0) // type_parameters.test/Outer.Nested.Inner.property.<set-property>|<set-property>@2:0(2:0){}[0]
            final var property // type_parameters.test/Outer.Nested.Inner.property|@1:0{}property[0]
                final fun (#1).<get-property>(): #1 // type_parameters.test/Outer.Nested.Inner.property.<get-property>|<get-property>@1:0(){}[0]
                final fun (#1).<set-property>(#1) // type_parameters.test/Outer.Nested.Inner.property.<set-property>|<set-property>@1:0(1:0){}[0]
            final var property // type_parameters.test/Outer.Nested.Inner.property|@0:0{0§<kotlin.Number>}property[0]
                final fun <#2: kotlin/Number> (#2).<get-property>(): #2 // type_parameters.test/Outer.Nested.Inner.property.<get-property>|<get-property>@0:0(){0§<kotlin.Number>}[0]
                final fun <#2: kotlin/Number> (#2).<set-property>(#2) // type_parameters.test/Outer.Nested.Inner.property.<set-property>|<set-property>@0:0(0:0){0§<kotlin.Number>}[0]
            final var property // type_parameters.test/Outer.Nested.Inner.property|@0:0?{0§<kotlin.Number>}property[0]
                final fun <#2: kotlin/Number> (#2?).<get-property>(): #2 // type_parameters.test/Outer.Nested.Inner.property.<get-property>|<get-property>@0:0?(){0§<kotlin.Number>}[0]
                final fun <#2: kotlin/Number> (#2?).<set-property>(#2) // type_parameters.test/Outer.Nested.Inner.property.<set-property>|<set-property>@0:0?(0:0){0§<kotlin.Number>}[0]
            constructor <init>(#0, #1) // type_parameters.test/Outer.Nested.Inner.<init>|<init>(2:0;1:0){}[0]
            final fun <#2: kotlin/Number> one(#2) // type_parameters.test/Outer.Nested.Inner.one|one(0:0){0§<kotlin.Number>}[0]
            final fun one(#0) // type_parameters.test/Outer.Nested.Inner.one|one(2:0){}[0]
            final fun one(#1) // type_parameters.test/Outer.Nested.Inner.one|one(1:0){}[0]
            final fun <#2: kotlin/Number> three(#0, #1, #2) // type_parameters.test/Outer.Nested.Inner.three|three(2:0;1:0;0:0){0§<kotlin.Number>}[0]
            final fun <#2: kotlin/Number> three(#0, #2, #1) // type_parameters.test/Outer.Nested.Inner.three|three(2:0;0:0;1:0){0§<kotlin.Number>}[0]
            final fun <#2: kotlin/Number> three(#1, #0, #2) // type_parameters.test/Outer.Nested.Inner.three|three(1:0;2:0;0:0){0§<kotlin.Number>}[0]
            final fun <#2: kotlin/Number> three(#1, #2, #0) // type_parameters.test/Outer.Nested.Inner.three|three(1:0;0:0;2:0){0§<kotlin.Number>}[0]
            final fun <#2: kotlin/Number> three(#2, #0, #1) // type_parameters.test/Outer.Nested.Inner.three|three(0:0;2:0;1:0){0§<kotlin.Number>}[0]
            final fun <#2: kotlin/Number> three(#2, #1, #0) // type_parameters.test/Outer.Nested.Inner.three|three(0:0;1:0;2:0){0§<kotlin.Number>}[0]
            final fun <#2: kotlin/Number> two(#0, #1) // type_parameters.test/Outer.Nested.Inner.two|two(2:0;1:0){0§<kotlin.Number>}[0]
            final fun <#2: kotlin/Number> two(#0, #2) // type_parameters.test/Outer.Nested.Inner.two|two(2:0;0:0){0§<kotlin.Number>}[0]
            final fun <#2: kotlin/Number> two(#1, #0) // type_parameters.test/Outer.Nested.Inner.two|two(1:0;2:0){0§<kotlin.Number>}[0]
            final fun <#2: kotlin/Number> two(#1, #2) // type_parameters.test/Outer.Nested.Inner.two|two(1:0;0:0){0§<kotlin.Number>}[0]
            final fun <#2: kotlin/Number> two(#2, #0) // type_parameters.test/Outer.Nested.Inner.two|two(0:0;2:0){0§<kotlin.Number>}[0]
            final fun <#2: kotlin/Number> two(#2, #1) // type_parameters.test/Outer.Nested.Inner.two|two(0:0;1:0){0§<kotlin.Number>}[0]
            final fun two(#0, #1) // type_parameters.test/Outer.Nested.Inner.two|two(2:0;1:0){}[0]
            final fun two(#1, #0) // type_parameters.test/Outer.Nested.Inner.two|two(1:0;2:0){}[0]
            final inner class <#2: kotlin/Any?> TypeParameterInSuperTypes : type_parameters.test/Interface<kotlin.collections/List<kotlin.collections/List<#0>>, kotlin.collections/Map<#1, #2>, kotlin/Triple<#0, #1, #2>> { // type_parameters.test/Outer.Nested.Inner.TypeParameterInSuperTypes|null[0]
                constructor <init>() // type_parameters.test/Outer.Nested.Inner.TypeParameterInSuperTypes.<init>|<init>(){}[0]
            }
        }
        final inner class <#1: kotlin/Any?, #2: kotlin/Any?> TypeParameterInSuperTypes : type_parameters.test/Interface<kotlin.collections/List<kotlin.collections/List<#0>>, kotlin.collections/Map<#2, #1>, kotlin/Triple<#0, #2, #1>> { // type_parameters.test/Outer.Nested.TypeParameterInSuperTypes|null[0]
            constructor <init>() // type_parameters.test/Outer.Nested.TypeParameterInSuperTypes.<init>|<init>(){}[0]
        }
    }
    final inner class <#1: kotlin/Any?, #2: kotlin/Any?> TypeParameterInSuperTypes : type_parameters.test/Interface<kotlin.collections/List<kotlin.collections/List<#0>>, kotlin.collections/Map<#2, #1>, kotlin/Triple<#0, #2, #1>> { // type_parameters.test/Outer.TypeParameterInSuperTypes|null[0]
        constructor <init>() // type_parameters.test/Outer.TypeParameterInSuperTypes.<init>|<init>(){}[0]
    }
}
final class <#0: kotlin/Any?, #1: kotlin/Any?, #2: kotlin/Any?> type_parameters.test/TypeParameterInSuperTypes : type_parameters.test/Interface<kotlin.collections/List<kotlin.collections/List<#2>>, kotlin.collections/Map<#1, #0>, kotlin/Triple<#2, #1, #0>> { // type_parameters.test/TypeParameterInSuperTypes|null[0]
    constructor <init>() // type_parameters.test/TypeParameterInSuperTypes.<init>|<init>(){}[0]
}
final var type_parameters.test/property // type_parameters.test/property|@0:0{0§<kotlin.Number>}property[0]
    final fun <#0: kotlin/Number> (#0).<get-property>(): #0 // type_parameters.test/property.<get-property>|<get-property>@0:0(){0§<kotlin.Number>}[0]
    final fun <#0: kotlin/Number> (#0).<set-property>(#0) // type_parameters.test/property.<set-property>|<set-property>@0:0(0:0){0§<kotlin.Number>}[0]
final var type_parameters.test/property // type_parameters.test/property|@0:0?{0§<kotlin.Number>}property[0]
    final fun <#0: kotlin/Number> (#0?).<get-property>(): #0 // type_parameters.test/property.<get-property>|<get-property>@0:0?(){0§<kotlin.Number>}[0]
    final fun <#0: kotlin/Number> (#0?).<set-property>(#0) // type_parameters.test/property.<set-property>|<set-property>@0:0?(0:0){0§<kotlin.Number>}[0]
final inline fun <#0: reified kotlin/Any?, #1: kotlin/Any?> type_parameters.test/functionWithReifiedParameter(#0, #1) // type_parameters.test/functionWithReifiedParameter|functionWithReifiedParameter(0:0;0:1){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#0: kotlin/CharSequence, #1: #0, #2: #1> type_parameters.test/interDependentTypeParameters(#0, #1, #2) // type_parameters.test/interDependentTypeParameters|interDependentTypeParameters(0:0;0:1;0:2){0§<kotlin.CharSequence>;1§<0:0>;2§<0:1>}[0]
final fun <#0: kotlin.text/Appendable & kotlin/CharSequence & kotlin/Number> type_parameters.test/multipleBounds(#0) // type_parameters.test/multipleBounds|multipleBounds(0:0){0§<kotlin.CharSequence&kotlin.text.Appendable&kotlin.Number>}[0]
final fun <#0: kotlin/Number> type_parameters.test/one(#0) // type_parameters.test/one|one(0:0){0§<kotlin.Number>}[0]
final fun <#0: kotlin/Number> type_parameters.test/one(#0?) // type_parameters.test/one|one(0:0?){0§<kotlin.Number>}[0]
final fun <#0: kotlin/Number?> type_parameters.test/one(#0) // type_parameters.test/one|one(0:0){0§<kotlin.Number?>}[0]
