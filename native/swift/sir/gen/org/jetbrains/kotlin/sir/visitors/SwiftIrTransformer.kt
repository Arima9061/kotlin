/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

// This file was generated automatically. See native/swift/sir/tree-generator/Readme.md.
// DO NOT MODIFY IT MANUALLY.

package org.jetbrains.kotlin.sir.visitors

import org.jetbrains.kotlin.sir.*

/**
 * Auto-generated by [org.jetbrains.kotlin.sir.tree.generator.printer.TransformerPrinter]
 */
abstract class SwiftIrTransformer<in D> : SwiftIrVisitor<SwiftIrElement, D>() {

    abstract fun <E : SwiftIrElement> transformElement(element: E, data: D): E

    final override fun visitElement(element: SwiftIrElement, data: D): SwiftIrElement {
        return transformElement(element, data)
    }

    open fun transformModule(module: SwiftIrModule, data: D): SwiftIrModule {
        return transformElement(module, data)
    }

    final override fun visitModule(module: SwiftIrModule, data: D): SwiftIrModule {
        return transformModule(module, data)
    }


    open fun transformDeclarationContainer(declarationContainer: SwiftIrDeclarationContainer, data: D): SwiftIrDeclarationContainer {
        return transformElement(declarationContainer, data)
    }

    final override fun visitDeclarationContainer(declarationContainer: SwiftIrDeclarationContainer, data: D): SwiftIrDeclarationContainer {
        return transformDeclarationContainer(declarationContainer, data)
    }

    open fun transformDeclaration(declaration: SwiftIrDeclaration, data: D): SwiftIrDeclaration {
        return transformElement(declaration, data)
    }

    final override fun visitDeclaration(declaration: SwiftIrDeclaration, data: D): SwiftIrDeclaration {
        return transformDeclaration(declaration, data)
    }

    open fun transformDeclarationWithName(declarationWithName: SwiftIrDeclarationWithName, data: D): SwiftIrDeclaration {
        return transformElement(declarationWithName, data)
    }

    final override fun visitDeclarationWithName(declarationWithName: SwiftIrDeclarationWithName, data: D): SwiftIrDeclaration {
        return transformDeclarationWithName(declarationWithName, data)
    }

    open fun transformNamedTypeDeclaration(namedTypeDeclaration: SwiftIrNamedTypeDeclaration, data: D): SwiftIrDeclaration {
        return transformElement(namedTypeDeclaration, data)
    }

    final override fun visitNamedTypeDeclaration(namedTypeDeclaration: SwiftIrNamedTypeDeclaration, data: D): SwiftIrDeclaration {
        return transformNamedTypeDeclaration(namedTypeDeclaration, data)
    }

    open fun transformTypeAlias(typeAlias: SwiftIrTypeAlias, data: D): SwiftIrDeclaration {
        return transformElement(typeAlias, data)
    }

    final override fun visitTypeAlias(typeAlias: SwiftIrTypeAlias, data: D): SwiftIrDeclaration {
        return transformTypeAlias(typeAlias, data)
    }

    open fun transformClass(klass: SwiftIrClass, data: D): SwiftIrDeclaration {
        return transformElement(klass, data)
    }

    final override fun visitClass(klass: SwiftIrClass, data: D): SwiftIrDeclaration {
        return transformClass(klass, data)
    }

    open fun transformActor(actor: SwiftIrActor, data: D): SwiftIrDeclaration {
        return transformElement(actor, data)
    }

    final override fun visitActor(actor: SwiftIrActor, data: D): SwiftIrDeclaration {
        return transformActor(actor, data)
    }

    open fun transformStruct(struct: SwiftIrStruct, data: D): SwiftIrDeclaration {
        return transformElement(struct, data)
    }

    final override fun visitStruct(struct: SwiftIrStruct, data: D): SwiftIrDeclaration {
        return transformStruct(struct, data)
    }

    open fun transformEnum(enum: SwiftIrEnum, data: D): SwiftIrDeclaration {
        return transformElement(enum, data)
    }

    final override fun visitEnum(enum: SwiftIrEnum, data: D): SwiftIrDeclaration {
        return transformEnum(enum, data)
    }

    open fun transformEnumCase(enumCase: SwiftIrEnumCase, data: D): SwiftIrDeclaration {
        return transformElement(enumCase, data)
    }

    final override fun visitEnumCase(enumCase: SwiftIrEnumCase, data: D): SwiftIrDeclaration {
        return transformEnumCase(enumCase, data)
    }

    open fun transformProtocol(protocol: SwiftIrProtocol, data: D): SwiftIrDeclaration {
        return transformElement(protocol, data)
    }

    final override fun visitProtocol(protocol: SwiftIrProtocol, data: D): SwiftIrDeclaration {
        return transformProtocol(protocol, data)
    }

    open fun transformCallable(callable: SwiftIrCallable, data: D): SwiftIrDeclaration {
        return transformElement(callable, data)
    }

    final override fun visitCallable(callable: SwiftIrCallable, data: D): SwiftIrDeclaration {
        return transformCallable(callable, data)
    }

    open fun transformFunction(function: SwiftIrFunction, data: D): SwiftIrDeclaration {
        return transformElement(function, data)
    }

    final override fun visitFunction(function: SwiftIrFunction, data: D): SwiftIrDeclaration {
        return transformFunction(function, data)
    }

    open fun transformInit(init: SwiftIrInit, data: D): SwiftIrDeclaration {
        return transformElement(init, data)
    }

    final override fun visitInit(init: SwiftIrInit, data: D): SwiftIrDeclaration {
        return transformInit(init, data)
    }

    open fun transformAccessor(accessor: SwiftIrAccessor, data: D): SwiftIrDeclaration {
        return transformElement(accessor, data)
    }

    final override fun visitAccessor(accessor: SwiftIrAccessor, data: D): SwiftIrDeclaration {
        return transformAccessor(accessor, data)
    }

    open fun transformGetter(getter: SwiftIrGetter, data: D): SwiftIrDeclaration {
        return transformElement(getter, data)
    }

    final override fun visitGetter(getter: SwiftIrGetter, data: D): SwiftIrDeclaration {
        return transformGetter(getter, data)
    }

    open fun transformSetter(setter: SwiftIrSetter, data: D): SwiftIrDeclaration {
        return transformElement(setter, data)
    }

    final override fun visitSetter(setter: SwiftIrSetter, data: D): SwiftIrDeclaration {
        return transformSetter(setter, data)
    }

    open fun transformAccessorContainer(accessorContainer: SwiftIrAccessorContainer, data: D): SwiftIrAccessorContainer {
        return transformElement(accessorContainer, data)
    }

    final override fun visitAccessorContainer(accessorContainer: SwiftIrAccessorContainer, data: D): SwiftIrAccessorContainer {
        return transformAccessorContainer(accessorContainer, data)
    }

    open fun transformProperty(property: SwiftIrProperty, data: D): SwiftIrDeclaration {
        return transformElement(property, data)
    }

    final override fun visitProperty(property: SwiftIrProperty, data: D): SwiftIrDeclaration {
        return transformProperty(property, data)
    }

    open fun transformSubscript(subscript: SwiftIrSubscript, data: D): SwiftIrDeclaration {
        return transformElement(subscript, data)
    }

    final override fun visitSubscript(subscript: SwiftIrSubscript, data: D): SwiftIrDeclaration {
        return transformSubscript(subscript, data)
    }

    open fun transformExpression(expression: SwiftIrExpression, data: D): SwiftIrExpression {
        return transformElement(expression, data)
    }

    final override fun visitExpression(expression: SwiftIrExpression, data: D): SwiftIrExpression {
        return transformExpression(expression, data)
    }
}
