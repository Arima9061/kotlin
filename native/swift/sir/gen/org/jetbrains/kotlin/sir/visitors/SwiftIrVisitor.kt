/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

// This file was generated automatically. See native/swift/sir/tree-generator/Readme.md.
// DO NOT MODIFY IT MANUALLY.

package org.jetbrains.kotlin.sir.visitors

import org.jetbrains.kotlin.sir.*

/**
 * Auto-generated by [org.jetbrains.kotlin.sir.tree.generator.printer.VisitorPrinter]
 */
abstract class SwiftIrVisitor<out R, in D> {

    abstract fun visitElement(element: SwiftIrElement, data: D): R

    open fun visitModule(module: SwiftIrModule, data: D): R =
        visitElement(module, data)

    open fun visitDeclarationContainer(declarationContainer: SwiftIrDeclarationContainer, data: D): R =
        visitElement(declarationContainer, data)

    open fun visitDeclaration(declaration: SwiftIrDeclaration, data: D): R =
        visitElement(declaration, data)

    open fun visitDeclarationWithName(declarationWithName: SwiftIrDeclarationWithName, data: D): R =
        visitDeclaration(declarationWithName, data)

    open fun visitNamedTypeDeclaration(namedTypeDeclaration: SwiftIrNamedTypeDeclaration, data: D): R =
        visitDeclarationWithName(namedTypeDeclaration, data)

    open fun visitTypeAlias(typeAlias: SwiftIrTypeAlias, data: D): R =
        visitNamedTypeDeclaration(typeAlias, data)

    open fun visitClass(klass: SwiftIrClass, data: D): R =
        visitNamedTypeDeclaration(klass, data)

    open fun visitActor(actor: SwiftIrActor, data: D): R =
        visitNamedTypeDeclaration(actor, data)

    open fun visitStruct(struct: SwiftIrStruct, data: D): R =
        visitNamedTypeDeclaration(struct, data)

    open fun visitEnum(enum: SwiftIrEnum, data: D): R =
        visitNamedTypeDeclaration(enum, data)

    open fun visitEnumCase(enumCase: SwiftIrEnumCase, data: D): R =
        visitDeclarationWithName(enumCase, data)

    open fun visitProtocol(protocol: SwiftIrProtocol, data: D): R =
        visitNamedTypeDeclaration(protocol, data)

    open fun visitCallable(callable: SwiftIrCallable, data: D): R =
        visitDeclaration(callable, data)

    open fun visitFunction(function: SwiftIrFunction, data: D): R =
        visitCallable(function, data)

    open fun visitInit(init: SwiftIrInit, data: D): R =
        visitCallable(init, data)

    open fun visitAccessor(accessor: SwiftIrAccessor, data: D): R =
        visitCallable(accessor, data)

    open fun visitGetter(getter: SwiftIrGetter, data: D): R =
        visitAccessor(getter, data)

    open fun visitSetter(setter: SwiftIrSetter, data: D): R =
        visitAccessor(setter, data)

    open fun visitAccessorContainer(accessorContainer: SwiftIrAccessorContainer, data: D): R =
        visitElement(accessorContainer, data)

    open fun visitProperty(property: SwiftIrProperty, data: D): R =
        visitAccessorContainer(property, data)

    open fun visitSubscript(subscript: SwiftIrSubscript, data: D): R =
        visitAccessorContainer(subscript, data)

    open fun visitExpression(expression: SwiftIrExpression, data: D): R =
        visitElement(expression, data)
}
