(lldb) target create <path to executable>
Current executable set to <path to executable>.
(lldb) settings set stop-disassembly-display never
(lldb) settings set frame-format "frame #${frame.index}: <frame pc>{ ${module.file.basename}{\`${function.name-with-args}{${frame.no-debug}}}}{ at ${line.file.basename}:${line.number}{:${line.column}}}{${function.is-optimized} [opt]}{${frame.is-artificial} [artificial]}\n"
(lldb) settings set thread-format "thread #<thread id>{ ${module.file.basename}{\`${function.name-with-args}{${frame.no-debug}}}}{ at ${line.file.basename}:${line.number}{:${line.column}}}{, stop reason = ${thread.stop-reason}}{\nReturn value: ${thread.return-value}}{\nCompleted expression: ${thread.completed-expression}}\n"
(lldb) settings set thread-stop-format "thread #<thread id>{, activity = '${thread.info.activity.name}'}{, ${thread.info.trace_messages} messages}{, stop reason = ${thread.stop-reason}}{\nReturn value: ${thread.return-value}}{\nCompleted expression: ${thread.completed-expression}}\n"
(lldb) command script import <path to lldb script>
Stop hook #1 added.
(lldb) b bar
Breakpoint 1: where = lldb_stepThroughInlineArguments.kexe`kfun:#bar(kotlin.Int){}kotlin.Int + <breakpoint offset> at main.kt:6:1, address = <memory address>
(lldb) r
Process <process id> stopped
* thread #<thread id>, stop reason = breakpoint 1.1
    frame #0: <frame pc> lldb_stepThroughInlineArguments.kexe`kfun:#bar(x=42){}kotlin.Int at main.kt:6:1
   3
   4
   5
-> 6   	fun bar(x: Int): Int {
    	^
   7   	    val res = foo(
   8   	        x * 2,
   9   	        x + 2
Process <process id> launched: <path to executable>
(lldb) s
Process <process id> stopped
* thread #<thread id>, stop reason = step in
    frame #0: <frame pc> lldb_stepThroughInlineArguments.kexe`kfun:#bar(x=42){}kotlin.Int at main.kt:8:9
   5
   6   	fun bar(x: Int): Int {
   7   	    val res = foo(
-> 8   	        x * 2,
    	        ^
   9   	        x + 2
   10  	    )
   11  	    return res
(lldb) bt
* thread #<thread id>, stop reason = step in
  * frame #0: <frame pc> lldb_stepThroughInlineArguments.kexe`kfun:#bar(x=42){}kotlin.Int at main.kt:8:9
    frame #1: <frame pc> lldb_stepThroughInlineArguments.kexe`kfun:#main(){} at main.kt:15:13
(lldb) s
Process <process id> stopped
* thread #<thread id>, stop reason = step in
    frame #0: <frame pc> lldb_stepThroughInlineArguments.kexe`kfun:#bar(x=42){}kotlin.Int at main.kt:9:9
   6   	fun bar(x: Int): Int {
   7   	    val res = foo(
   8   	        x * 2,
-> 9   	        x + 2
    	        ^
   10  	    )
   11  	    return res
   12  	}
(lldb) bt
* thread #<thread id>, stop reason = step in
  * frame #0: <frame pc> lldb_stepThroughInlineArguments.kexe`kfun:#bar(x=42){}kotlin.Int at main.kt:9:9
    frame #1: <frame pc> lldb_stepThroughInlineArguments.kexe`kfun:#main(){} at main.kt:15:13
(lldb) s
Process <process id> stopped
* thread #<thread id>, stop reason = step in
    frame #0: <frame pc> lldb_stepThroughInlineArguments.kexe`kfun:#bar(x=42){}kotlin.Int at main.kt:7:15
   4
   5
   6   	fun bar(x: Int): Int {
-> 7   	    val res = foo(
    	              ^
   8   	        x * 2,
   9   	        x + 2
   10  	    )
(lldb) bt
* thread #<thread id>, stop reason = step in
  * frame #0: <frame pc> lldb_stepThroughInlineArguments.kexe`kfun:#bar(x=42){}kotlin.Int at main.kt:7:15
    frame #1: <frame pc> lldb_stepThroughInlineArguments.kexe`kfun:#main(){} at main.kt:15:13
(lldb) s
Process <process id> stopped
* thread #<thread id>, stop reason = step in
(lldb) bt
* thread #<thread id>, stop reason = step in
    frame #0: <frame pc> lldb_stepThroughInlineArguments.kexe`kfun:#bar(kotlin.Int){}kotlin.Int [inlined] kfun:#foo(kotlin.Int;kotlin.Int){}kotlin.Int at lib.kt:20:12
    frame #1: <frame pc> lldb_stepThroughInlineArguments.kexe`kfun:#bar(x=42){}kotlin.Int at main.kt:7:15
    frame #2: <frame pc> lldb_stepThroughInlineArguments.kexe`kfun:#main(){} at main.kt:15:13
(lldb) q
