(lldb) target create <path to executable>
Current executable set to <path to executable>.
(lldb) settings set stop-disassembly-display never
(lldb) settings set frame-format "frame #${frame.index}: <frame pc>{ ${module.file.basename}{\`${function.name-with-args}{${frame.no-debug}}}}{ at ${line.file.basename}:${line.number}{:${line.column}}}{${function.is-optimized} [opt]}{${frame.is-artificial} [artificial]}\n"
(lldb) settings set thread-format "thread #<thread id>{ ${module.file.basename}{\`${function.name-with-args}{${frame.no-debug}}}}{ at ${line.file.basename}:${line.number}{:${line.column}}}{, stop reason = ${thread.stop-reason}}{\nReturn value: ${thread.return-value}}{\nCompleted expression: ${thread.completed-expression}}\n"
(lldb) settings set thread-stop-format "thread #<thread id>{, activity = '${thread.info.activity.name}'}{, ${thread.info.trace_messages} messages}{, stop reason = ${thread.stop-reason}}{\nReturn value: ${thread.return-value}}{\nCompleted expression: ${thread.completed-expression}}\n"
(lldb) command script import <path to lldb script>
Stop hook #1 added.
(lldb) b main.kt:6
Breakpoint 1: where = lldb_canStepThroughCode.kexe`kfun:#main(kotlin.Array<kotlin.String>){} + <breakpoint offset> at main.kt:6:13, address = <memory address>
(lldb) r
Process <process id> stopped
* thread #<thread id>, stop reason = breakpoint 1.1
    frame #0: <frame pc> lldb_canStepThroughCode.kexe`kfun:#main(args=[]){} at main.kt:6:13
   3
   4
   5   	fun main(args: Array<String>) {
-> 6   	    var x = 1
    	            ^
   7   	    var y = 2
   8   	    var z = x + y
   9   	    println(z)
Process <process id> launched: <path to executable>
(lldb) n
Process <process id> stopped
* thread #<thread id>, stop reason = step over
    frame #0: <frame pc> lldb_canStepThroughCode.kexe`kfun:#main(args=[]){} at main.kt:7:13
   4
   5   	fun main(args: Array<String>) {
   6   	    var x = 1
-> 7   	    var y = 2
    	            ^
   8   	    var z = x + y
   9   	    println(z)
   10  	}
(lldb) n
Process <process id> stopped
* thread #<thread id>, stop reason = step over
    frame #0: <frame pc> lldb_canStepThroughCode.kexe`kfun:#main(args=[]){} at main.kt:8:13
   5   	fun main(args: Array<String>) {
   6   	    var x = 1
   7   	    var y = 2
-> 8   	    var z = x + y
    	            ^
   9   	    println(z)
   10  	}
(lldb) n
Process <process id> stopped
* thread #<thread id>, stop reason = step over
    frame #0: <frame pc> lldb_canStepThroughCode.kexe`kfun:#main(args=[]){} at main.kt:9:13
   6   	    var x = 1
   7   	    var y = 2
   8   	    var z = x + y
-> 9   	    println(z)
    	            ^
   10  	}
(lldb) q
