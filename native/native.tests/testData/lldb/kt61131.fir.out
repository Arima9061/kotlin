(lldb) target create <path to executable>
Current executable set to <path to executable>.
(lldb) settings set stop-disassembly-display never
(lldb) settings set frame-format "frame #${frame.index}: <frame pc>{ ${module.file.basename}{\`${function.name-with-args}{${frame.no-debug}}}}{ at ${line.file.basename}:${line.number}{:${line.column}}}{${function.is-optimized} [opt]}{${frame.is-artificial} [artificial]}\n"
(lldb) settings set thread-format "thread #<thread id>{ ${module.file.basename}{\`${function.name-with-args}{${frame.no-debug}}}}{ at ${line.file.basename}:${line.number}{:${line.column}}}{, stop reason = ${thread.stop-reason}}{\nReturn value: ${thread.return-value}}{\nCompleted expression: ${thread.completed-expression}}\n"
(lldb) settings set thread-stop-format "thread #<thread id>{, activity = '${thread.info.activity.name}'}{, ${thread.info.trace_messages} messages}{, stop reason = ${thread.stop-reason}}{\nReturn value: ${thread.return-value}}{\nCompleted expression: ${thread.completed-expression}}\n"
(lldb) command script import <path to lldb script>
Stop hook #1 added.
(lldb) b call_bar
Breakpoint 1: where = lldb_kt61131.kexe`kfun:#call_bar(Foo){} + <breakpoint offset> at kt61131-1.kt:9:1, address = <memory address>
(lldb) r
Process <process id> stopped
* thread #<thread id>, stop reason = breakpoint 1.1
    frame #0: <frame pc> lldb_kt61131.kexe`kfun:#call_bar(foo=[]){} at kt61131-1.kt:9:1
   6   	    override fun bar() = "zzz"
   7   	}
   8
-> 9   	fun call_bar(foo: Foo) {
    	^
   10  	    val s1 = foo.bar()
   11  	    val s2 = foo.bar()
   12  	    println(s1 + s2)
Process <process id> launched: <path to executable>
(lldb) s
Process <process id> stopped
* thread #<thread id>, stop reason = step in
    frame #0: <frame pc> lldb_kt61131.kexe`kfun:#call_bar(foo=[]){} at kt61131-1.kt:10:14
   7   	}
   8
   9   	fun call_bar(foo: Foo) {
-> 10  	    val s1 = foo.bar()
    	             ^
   11  	    val s2 = foo.bar()
   12  	    println(s1 + s2)
   13  	}
(lldb) s
Process <process id> stopped
* thread #<thread id>, stop reason = step in
    frame #0: <frame pc> lldb_kt61131.kexe`kfun:Foo#bar(){}kotlin.String-trampoline at kt61131-2.kt:21:5
   18
   19
   20  	interface Foo {
-> 21  	    fun bar(): String
    	    ^
   22  	}
(lldb) bt
* thread #<thread id>, stop reason = step in
  * frame #0: <frame pc> lldb_kt61131.kexe`kfun:Foo#bar(){}kotlin.String-trampoline at kt61131-2.kt:21:5
    frame #1: <frame pc> lldb_kt61131.kexe`kfun:#call_bar(foo=[]){} at kt61131-1.kt:10:18
    frame #2: <frame pc> lldb_kt61131.kexe`kfun:#main(){} at kt61131-1.kt:16:5
(lldb) s
Process <process id> stopped
* thread #<thread id>, stop reason = step in
    frame #0: <frame pc> lldb_kt61131.kexe`kfun:FooImpl#bar(_this=[]){}kotlin.String at kt61131-1.kt:6:5
   3
   4
   5   	class FooImpl : Foo {
-> 6   	    override fun bar() = "zzz"
    	    ^
   7   	}
   8
   9   	fun call_bar(foo: Foo) {
(lldb) bt
* thread #<thread id>, stop reason = step in
  * frame #0: <frame pc> lldb_kt61131.kexe`kfun:FooImpl#bar(_this=[]){}kotlin.String at kt61131-1.kt:6:5
    frame #1: <frame pc> lldb_kt61131.kexe`kfun:Foo#bar(){}kotlin.String-trampoline at kt61131-2.kt:21:5
    frame #2: <frame pc> lldb_kt61131.kexe`kfun:#call_bar(foo=[]){} at kt61131-1.kt:10:18
    frame #3: <frame pc> lldb_kt61131.kexe`kfun:#main(){} at kt61131-1.kt:16:5
(lldb) q
