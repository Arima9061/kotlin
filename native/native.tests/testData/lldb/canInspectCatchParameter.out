(lldb) target create <path to executable>
Current executable set to <path to executable>.
(lldb) settings set stop-disassembly-display never
(lldb) settings set frame-format "frame #${frame.index}: <frame pc>{ ${module.file.basename}{\`${function.name-with-args}{${frame.no-debug}}}}{ at ${line.file.basename}:${line.number}{:${line.column}}}{${function.is-optimized} [opt]}{${frame.is-artificial} [artificial]}\n"
(lldb) settings set thread-format "thread #<thread id>{ ${module.file.basename}{\`${function.name-with-args}{${frame.no-debug}}}}{ at ${line.file.basename}:${line.number}{:${line.column}}}{, stop reason = ${thread.stop-reason}}{\nReturn value: ${thread.return-value}}{\nCompleted expression: ${thread.completed-expression}}\n"
(lldb) settings set thread-stop-format "thread #<thread id>{, activity = '${thread.info.activity.name}'}{, ${thread.info.trace_messages} messages}{, stop reason = ${thread.stop-reason}}{\nReturn value: ${thread.return-value}}{\nCompleted expression: ${thread.completed-expression}}\n"
(lldb) command script import <path to lldb script>
Stop hook #1 added.
(lldb) b main.kt:9
Breakpoint 1: where = lldb_canInspectCatchParameter.kexe`kfun:#main(){} + <breakpoint offset> at main.kt:9:17, address = <memory address>
(lldb) r
Process <process id> stopped
* thread #<thread id>, stop reason = breakpoint 1.1
    frame #0: <frame pc> lldb_canInspectCatchParameter.kexe`kfun:#main(){} at main.kt:9:17
   6   	    try {
   7   	        throw Exception("message 1")
   8   	    } catch (e1: Throwable) {
-> 9   	        println(e1.message)
    	                ^
   10  	    }
   11
   12  	    try {
Process <process id> launched: <path to executable>
(lldb) fr var -o
(ObjHeader *) e1 = <memory address>
(ObjHeader *) e2 = NULL
(lldb) b main.kt:13
Breakpoint 2: where = lldb_canInspectCatchParameter.kexe`kfun:#main(){} + <breakpoint offset> at main.kt:13:9, address = <memory address>
(lldb) c
message 1
Process <process id> resuming
Process <process id> stopped
* thread #<thread id>, stop reason = breakpoint 2.1
    frame #0: <frame pc> lldb_canInspectCatchParameter.kexe`kfun:#main(){} at main.kt:13:9
   10  	    }
   11
   12  	    try {
-> 13  	        throwError()
    	        ^
   14  	    } catch (e2: Throwable) {
   15  	        println(e2.message)
   16  	    }
(lldb) fr var -o
(ObjHeader *) e1 = <memory address>
(ObjHeader *) e2 = NULL
(lldb) q
