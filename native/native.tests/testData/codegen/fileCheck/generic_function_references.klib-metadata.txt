library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: I
    // class name: N

    public abstract interface I : kotlin/Any {
    }

    public final class N : I {

      public constructor(v: kotlin/Int)

      public open fun toString(): kotlin/String

      public final val v: kotlin/Int
        public final get
    }

    package {

      public final fun <T#0 /* QuxTP */> bar(): kotlin/Unit

      public final fun box(): kotlin/String

      public final fun <T#0 /* BazTP0 */, T#1 /* BazTP1 */> foo(p1: T#0, p2: T#1): kotlin/Unit

      public final fun <T#0 /* StringifyTP */> stringify(collection: T#0, size: kotlin/Function1<T#0, kotlin/Int>, get: @kotlin/ExtensionFunctionType kotlin/Function2<T#0, kotlin/Int, kotlin/Any?>): kotlin/String

      public final fun <T#0 /* StringifyArrayTP */ : I> stringifyArray(array: kotlin/Array<T#0>): kotlin/String

      public final fun stringifyIntArray(array: kotlin/Array<kotlin/Int>): kotlin/String
    }
  }
}
