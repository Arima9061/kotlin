library {
  // module name: <main>

  library fragment {
    // package name: <root>

    // class name: EmptyContinuation
    // class name: EmptyContinuation.Companion
    // class name: SuspendHere
    // class name: SuspendHereLegacy

    public open class EmptyContinuation : kotlin/coroutines/Continuation<kotlin/Any?> {

      public constructor(context: kotlin/coroutines/CoroutineContext /* = ... */)

      public open fun resumeWith(result: kotlin/Result<kotlin/Any?>): kotlin/Unit

      public open val context: kotlin/coroutines/CoroutineContext
        public open get

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object EmptyContinuation.Companion : EmptyContinuation {

      private constructor()
    }

    public final class SuspendHere : suspend kotlin/Function1<kotlin/coroutines/Continuation<kotlin/Int>, kotlin/Any?> {

      public constructor()

      public open operator suspend fun invoke(): kotlin/Int
    }

    public final class SuspendHereLegacy : suspend kotlin/Function1<kotlin/coroutines/Continuation<kotlin/Int>, kotlin/Any?>, kotlin/coroutines/SuspendFunction<kotlin/Int> {

      public constructor()

      public open operator suspend fun invoke(): kotlin/Int
    }

    package {

      public final fun box(): kotlin/String

      public final fun builder(c: suspend kotlin/Function1<kotlin/coroutines/Continuation<kotlin/Unit>, kotlin/Any?>): kotlin/Unit
    }
  }
}
