//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

var foo: @Composable () -> Unit = { Box { print("field") } }
    get() = {
        Box { 
            print("get")
        }
    }
    set(value) {
        field = {
            Box {
                print("set")
             }
        }
    }

//
// Transformed IR
// ------------------------------------------

var foo: Function2<Composer, Int, Unit> = ComposableSingletons%TestKt.lambda-val-foo%1
  get() {
    return ComposableSingletons%TestKt.lambda-%get-foo%%1
  }
  set(value) {
    .foo = ComposableSingletons%TestKt.lambda-%set-foo%-258ny85at11xu%1
  }
internal object ComposableSingletons%TestKt {
  val lambda-val-foo%1%1: Function2<Composer, Int, Unit> = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C:Test.kt")
    if (%changed and 0b0011 != 0b0010 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      print("field")
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
  val lambda-val-foo%1: Function2<Composer, Int, Unit> = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C<Box>:Test.kt")
    if (%changed and 0b0011 != 0b0010 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      Box(ComposableSingletons%TestKt.lambda-val-foo%1%1, %composer, 0b0110)
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
  val lambda-%get-foo%%1%1: Function2<Composer, Int, Unit> = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C:Test.kt")
    if (%changed and 0b0011 != 0b0010 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      print("get")
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
  val lambda-%get-foo%%1: Function2<Composer, Int, Unit> = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C<Box>:Test.kt")
    if (%changed and 0b0011 != 0b0010 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      Box(ComposableSingletons%TestKt.lambda-%get-foo%%1%1, %composer, 0b0110)
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
  val lambda-%set-foo%-258ny85at11xu%1%1: Function2<Composer, Int, Unit> = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C:Test.kt")
    if (%changed and 0b0011 != 0b0010 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      print("set")
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
  val lambda-%set-foo%-258ny85at11xu%1: Function2<Composer, Int, Unit> = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C<Box>:Test.kt")
    if (%changed and 0b0011 != 0b0010 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      Box(ComposableSingletons%TestKt.lambda-%set-foo%-258ny85at11xu%1%1, %composer, 0b0110)
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
}
