//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

fun interface Consumer<T> {
    @Composable fun consume(t: T)
}

class Repro<T : Any> {
    fun test(consumer: Consumer<in T>) {}
}

fun test() {
    Repro<String>().test { string ->
        println(string)
    }
}

//
// Transformed IR
// ------------------------------------------

interface Consumer<T>  {
  @Composable
  abstract fun consume(t: T, %composer: Composer?, %changed: Int)
  class ComposeDefaultImpls {
    @Composable
    fun consume%default(t: T, %this%: Consumer<T>, %composer: Composer?, %changed: Int) {
      %composer = %composer.startRestartGroup(<>)
      sourceInformation(%composer, "C(consume%default):Test.kt")
      val %dirty = %changed
      if (%changed and 0b0110 == 0) {
        %dirty = %dirty or if (if (%changed and 0b1000 == 0) {
          %composer.changed(t)
        } else {
          %composer.changedInstance(t)
        }
        ) 0b0100 else 0b0010
      }
      if (%changed and 0b00110000 == 0) {
        %dirty = %dirty or if (if (%changed and 0b01000000 == 0) {
          %composer.changed(%this%)
        } else {
          %composer.changedInstance(%this%)
        }
        ) 0b00100000 else 0b00010000
      }
      if (%dirty and 0b00010011 != 0b00010010 || !%composer.skipping) {
        if (isTraceInProgress()) {
          traceEventStart(<>, %dirty, -1, <>)
        }
        %this%.consume(t, %composer, 0b1110 and %dirty or 0b01110000 and %dirty)
        if (isTraceInProgress()) {
          traceEventEnd()
        }
      } else {
        %composer.skipToGroupEnd()
      }
      %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
        consume%default(t, %this%, %composer, updateChangedFlags(%changed or 0b0001))
      }
    }
  }
}
@StabilityInferred(parameters = 2)
class Repro<T: Any>  {
  fun test(consumer: Consumer<in T>) { }
  static val %stable: Int = 0
}
fun test() {
  Repro().test(<block>{
    class <no name provided> : Consumer<Any?> {
      @Composable
      override fun consume(string: String, %composer: Composer?, %changed: Int) {
        %composer.startReplaceGroup(<>)
        sourceInformation(%composer, "C(consume):Test.kt")
        if (isTraceInProgress()) {
          traceEventStart(<>, %changed, -1, <>)
        }
        println(string)
        if (isTraceInProgress()) {
          traceEventEnd()
        }
        %composer.endReplaceGroup()
      }
    }
    <no name provided>()
  })
}
