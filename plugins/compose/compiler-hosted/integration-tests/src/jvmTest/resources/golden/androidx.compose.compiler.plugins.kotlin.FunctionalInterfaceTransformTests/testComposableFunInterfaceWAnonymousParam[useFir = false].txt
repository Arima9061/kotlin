//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

fun interface Consumer {
    @Composable operator fun invoke(t: Int)
}

@Composable fun Test(int: Int) {
    Example { _ ->
    }
}

@Composable fun Example(consumer: Consumer) {
}

//
// Transformed IR
// ------------------------------------------

interface Consumer {
  @Composable
  abstract fun invoke(t: Int, %composer: Composer?, %changed: Int)
  class ComposeDefaultImpls {
    @Composable
    @ComposableInferredTarget(scheme = "[0[0]]")
    fun invoke%default(t: Int, %this%: Consumer, %composer: Composer?, %changed: Int) {
      %composer = %composer.startRestartGroup(<>)
      sourceInformation(%composer, "C(invoke%default):Test.kt")
      val %dirty = %changed
      if (%changed and 0b0110 == 0) {
        %dirty = %dirty or if (%composer.changed(t)) 0b0100 else 0b0010
      }
      if (%changed and 0b00110000 == 0) {
        %dirty = %dirty or if (if (%changed and 0b01000000 == 0) {
          %composer.changed(%this%)
        } else {
          %composer.changedInstance(%this%)
        }
        ) 0b00100000 else 0b00010000
      }
      if (%dirty and 0b00010011 != 0b00010010 || !%composer.skipping) {
        if (isTraceInProgress()) {
          traceEventStart(<>, %dirty, -1, <>)
        }
        %this%(t, %composer, 0b1110 and %dirty or 0b01110000 and %dirty)
        if (isTraceInProgress()) {
          traceEventEnd()
        }
      } else {
        %composer.skipToGroupEnd()
      }
      %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
        invoke%default(t, %this%, %composer, updateChangedFlags(%changed or 0b0001))
      }
    }
  }
}
@Composable
fun Test(int: Int, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)<Exampl...>:Test.kt")
  if (%changed and 0b0001 != 0 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    Example(<block>{
      class <no name provided> : Consumer {
        @Composable
        override fun invoke(<unused var>: Int, %composer: Composer?, %changed: Int) {
          %composer.startReplaceGroup(<>)
          sourceInformation(%composer, "C(invoke):Test.kt")
          if (isTraceInProgress()) {
            traceEventStart(<>, %changed, -1, <>)
          }
          Unit
          if (isTraceInProgress()) {
            traceEventEnd()
          }
          %composer.endReplaceGroup()
        }
      }
      <no name provided>()
    }, %composer, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(int, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
@Composable
fun Example(consumer: Consumer, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Example):Test.kt")
  if (%changed and 0b0001 != 0 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Example(consumer, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
